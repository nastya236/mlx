Search.setIndex({"alltitles": {"A Simple Example": [[507, "a-simple-example"]], "Array": [[331, null]], "Attention layer": [[6, "attention-layer"]], "Automatic Differentiation": [[500, "automatic-differentiation"]], "Automatic Vectorization": [[500, "automatic-vectorization"]], "Basics": [[505, "basics"]], "Basics of Compile": [[497, "basics-of-compile"]], "Basics of Exporting": [[499, "basics-of-exporting"]], "Binary Size Minimization": [[9, "binary-size-minimization"]], "Binding to Python": [[2, "binding-to-python"]], "Build Options": [[9, "id4"]], "Build Requirements": [[9, "build-requirements"]], "Build and Install": [[9, null]], "Build from source": [[9, "build-from-source"]], "Building and Binding": [[2, "building-and-binding"]], "Building with CMake": [[2, "building-with-cmake"]], "Building with setuptools": [[2, "building-with-setuptools"]], "C++ API": [[9, "c-api"]], "C++ API Reference": [[8, null]], "Common Optimizers": [[491, null]], "Compilation": [[497, null]], "Compiling Training Graphs": [[497, "compiling-training-graphs"]], "Complex Example": [[1, "complex-example"]], "Conversion to NumPy and Other Frameworks": [[504, null]], "Converting the weights": [[6, "converting-the-weights"]], "Custom Extensions in MLX": [[2, null]], "Custom Metal Kernels": [[1, null]], "Data Types": [[332, null]], "Debugging": [[497, "debugging"]], "Defining a Ring": [[498, "defining-a-ring"]], "Devices and Streams": [[333, null]], "Differences from NumPy": [[501, "differences-from-numpy"]], "Distributed Communication": [[334, null], [498, null]], "Download the code": [[2, null], [6, null]], "Encoder layer": [[6, "encoder-layer"]], "Example Speedup": [[497, "example-speedup"]], "Examples": [[8, null]], "Export Functions": [[335, null]], "Exporting Functions": [[499, null]], "Exporting Modules": [[499, "exporting-modules"]], "Exporting Multiple Traces": [[499, "exporting-multiple-traces"]], "FFT": [[337, null]], "Fast": [[336, null]], "Full model": [[6, "full-model"]], "Function Transforms": [[500, null]], "Function and Graph Transformations": [[505, "function-and-graph-transformations"]], "Functions": [[466, null]], "Further Reading": [[8, null]], "Generation": [[6, "generation"]], "Getting Started": [[498, "getting-started"]], "Getting Started with MPI": [[498, "getting-started-with-mpi"]], "Getting Started with Ring": [[498, "getting-started-with-ring"]], "Grid Sample VJP": [[1, "grid-sample-vjp"]], "Implementing the CPU Back-end": [[2, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[2, "implementing-the-gpu-back-end"]], "Implementing the Primitive": [[2, "implementing-the-primitive"]], "Implementing the model": [[6, "implementing-the-model"]], "Importing Functions in C++": [[499, "importing-functions-in-c"]], "In Place Updates": [[501, "in-place-updates"]], "Indexing Arrays": [[501, null]], "Initializers": [[467, null]], "Inspecting Modules": [[340, "inspecting-modules"]], "Install": [[8, null]], "Installing MPI": [[498, "installing-mpi"]], "Introducing the Example": [[2, "introducing-the-example"]], "JAX": [[504, "jax"]], "LLM inference": [[6, null]], "Launching Distributed Programs": [[502, null]], "Layers": [[468, null]], "Lazy Evaluation": [[503, null]], "Linear Algebra": [[338, null]], "Linear Regression": [[5, null]], "Loss Functions": [[469, null]], "MLX": [[8, null]], "MPI Specifics": [[502, "mpi-specifics"]], "Metal": [[339, null]], "Metal Debugger": [[3, null]], "Metal not found": [[9, "metal-not-found"]], "Module": [[470, null]], "More Examples": [[499, "more-examples"]], "Multi-Layer Perceptron": [[7, null]], "Neural Networks": [[340, null]], "Only Compute What You Use": [[503, "only-compute-what-you-use"]], "Operations": [[0, null], [2, "operations"], [471, null]], "Operations and Primitives": [[2, "operations-and-primitives"]], "Optimizer": [[492, null]], "Optimizers": [[472, null]], "Package Variables": [[4, "id1"]], "Parameters": [[340, "parameters"]], "Primitive Transforms": [[2, "primitive-transforms"]], "Primitives": [[2, "primitives"]], "Providing Hosts": [[502, "providing-hosts"]], "Pure Functions": [[497, "pure-functions"]], "Putting it all together": [[6, "putting-it-all-together"]], "PyTorch": [[504, "pytorch"]], "Python API": [[9, "python-api"]], "Python API Reference": [[8, null]], "Python Installation": [[9, "python-installation"]], "Quick Start Guide": [[505, null]], "Quick Start with Neural Networks": [[340, "quick-start-with-neural-networks"]], "Random": [[494, null]], "Results": [[2, "results"]], "Ring Specifics": [[502, "ring-specifics"]], "Running Distributed Programs": [[498, "running-distributed-programs"]], "Saving and Loading": [[472, "saving-and-loading"]], "Saving and Loading Arrays": [[506, null]], "Schedulers": [[493, null]], "Scripts": [[2, "scripts"], [6, "scripts"]], "Selecting Backend": [[498, "selecting-backend"]], "Serialization Formats": [[506, "id1"]], "Setting up Remote Hosts": [[498, "setting-up-remote-hosts"], [502, "setting-up-remote-hosts"]], "Shapeless Compilation": [[497, "shapeless-compilation"]], "Shapeless Exports": [[499, "shapeless-exports"]], "Simple Example": [[1, "simple-example"]], "Specifying the Stream": [[508, "specifying-the-stream"]], "Supported Data Types": [[332, "id2"]], "TensorFlow": [[504, "tensorflow"]], "The Module Class": [[340, "the-module-class"]], "Thunderbolt Ring": [[498, "thunderbolt-ring"]], "Training Example": [[498, "training-example"]], "Transformations with Compile": [[497, "transformations-with-compile"]], "Transformations with Imported Functions": [[499, "transformations-with-imported-functions"]], "Transforming Compute Graphs": [[503, "transforming-compute-graphs"]], "Transforms": [[495, null]], "Tree Utils": [[496, null]], "Troubleshooting": [[9, "troubleshooting"], [9, "id3"]], "Tuning MPI All Reduce": [[498, "tuning-mpi-all-reduce"]], "Unified Memory": [[507, null]], "Updating the Parameters": [[340, "updating-the-parameters"]], "Usage": [[2, "usage"], [8, null], [502, "usage"]], "Using MLX in C++": [[4, null]], "Using Shape/Strides": [[1, "using-shape-strides"]], "Using Streams": [[508, null]], "Using the Primitive": [[2, "using-the-primitive"]], "Utilizing nn.average_gradients": [[498, "utilizing-nn-average-gradients"]], "Value and Grad": [[340, "value-and-grad"]], "Weight loading and benchmarking": [[6, "weight-loading-and-benchmarking"]], "When to Evaluate": [[503, "when-to-evaluate"]], "Why Lazy Evaluation": [[503, "why-lazy-evaluation"]], "Xcode Workflow": [[3, "xcode-workflow"]], "mlx.core.Device": [[10, null]], "mlx.core.Dtype": [[11, null]], "mlx.core.DtypeCategory": [[12, null]], "mlx.core.Stream": [[330, null]], "mlx.core.abs": [[13, null]], "mlx.core.add": [[14, null]], "mlx.core.addmm": [[15, null]], "mlx.core.all": [[16, null]], "mlx.core.allclose": [[17, null]], "mlx.core.any": [[18, null]], "mlx.core.arange": [[19, null]], "mlx.core.arccos": [[20, null]], "mlx.core.arccosh": [[21, null]], "mlx.core.arcsin": [[22, null]], "mlx.core.arcsinh": [[23, null]], "mlx.core.arctan": [[24, null]], "mlx.core.arctan2": [[25, null]], "mlx.core.arctanh": [[26, null]], "mlx.core.argmax": [[27, null]], "mlx.core.argmin": [[28, null]], "mlx.core.argpartition": [[29, null]], "mlx.core.argsort": [[30, null]], "mlx.core.array": [[31, null]], "mlx.core.array.T": [[32, null]], "mlx.core.array.abs": [[33, null]], "mlx.core.array.all": [[34, null]], "mlx.core.array.any": [[35, null]], "mlx.core.array.argmax": [[36, null]], "mlx.core.array.argmin": [[37, null]], "mlx.core.array.astype": [[38, null]], "mlx.core.array.at": [[39, null]], "mlx.core.array.conj": [[40, null]], "mlx.core.array.cos": [[41, null]], "mlx.core.array.cummax": [[42, null]], "mlx.core.array.cummin": [[43, null]], "mlx.core.array.cumprod": [[44, null]], "mlx.core.array.cumsum": [[45, null]], "mlx.core.array.diag": [[46, null]], "mlx.core.array.diagonal": [[47, null]], "mlx.core.array.dtype": [[48, null]], "mlx.core.array.exp": [[49, null]], "mlx.core.array.flatten": [[50, null]], "mlx.core.array.item": [[51, null]], "mlx.core.array.itemsize": [[52, null]], "mlx.core.array.log": [[53, null]], "mlx.core.array.log10": [[54, null]], "mlx.core.array.log1p": [[55, null]], "mlx.core.array.log2": [[56, null]], "mlx.core.array.logsumexp": [[57, null]], "mlx.core.array.max": [[58, null]], "mlx.core.array.mean": [[59, null]], "mlx.core.array.min": [[60, null]], "mlx.core.array.moveaxis": [[61, null]], "mlx.core.array.nbytes": [[62, null]], "mlx.core.array.ndim": [[63, null]], "mlx.core.array.prod": [[64, null]], "mlx.core.array.reciprocal": [[65, null]], "mlx.core.array.reshape": [[66, null]], "mlx.core.array.round": [[67, null]], "mlx.core.array.rsqrt": [[68, null]], "mlx.core.array.shape": [[69, null]], "mlx.core.array.sin": [[70, null]], "mlx.core.array.size": [[71, null]], "mlx.core.array.split": [[72, null]], "mlx.core.array.sqrt": [[73, null]], "mlx.core.array.square": [[74, null]], "mlx.core.array.squeeze": [[75, null]], "mlx.core.array.std": [[76, null]], "mlx.core.array.sum": [[77, null]], "mlx.core.array.swapaxes": [[78, null]], "mlx.core.array.tolist": [[79, null]], "mlx.core.array.transpose": [[80, null]], "mlx.core.array.var": [[81, null]], "mlx.core.array.view": [[82, null]], "mlx.core.array_equal": [[83, null]], "mlx.core.as_strided": [[84, null]], "mlx.core.atleast_1d": [[85, null]], "mlx.core.atleast_2d": [[86, null]], "mlx.core.atleast_3d": [[87, null]], "mlx.core.bitwise_and": [[88, null]], "mlx.core.bitwise_invert": [[89, null]], "mlx.core.bitwise_or": [[90, null]], "mlx.core.bitwise_xor": [[91, null]], "mlx.core.block_masked_mm": [[92, null]], "mlx.core.broadcast_to": [[93, null]], "mlx.core.ceil": [[94, null]], "mlx.core.clip": [[95, null]], "mlx.core.compile": [[96, null]], "mlx.core.concatenate": [[97, null]], "mlx.core.conj": [[98, null]], "mlx.core.conjugate": [[99, null]], "mlx.core.conv1d": [[100, null]], "mlx.core.conv2d": [[101, null]], "mlx.core.conv3d": [[102, null]], "mlx.core.conv_general": [[103, null]], "mlx.core.conv_transpose1d": [[104, null]], "mlx.core.conv_transpose2d": [[105, null]], "mlx.core.conv_transpose3d": [[106, null]], "mlx.core.convolve": [[107, null]], "mlx.core.cos": [[108, null]], "mlx.core.cosh": [[109, null]], "mlx.core.cummax": [[110, null]], "mlx.core.cummin": [[111, null]], "mlx.core.cumprod": [[112, null]], "mlx.core.cumsum": [[113, null]], "mlx.core.custom_function": [[114, null]], "mlx.core.default_device": [[115, null]], "mlx.core.default_stream": [[116, null]], "mlx.core.degrees": [[117, null]], "mlx.core.dequantize": [[118, null]], "mlx.core.diag": [[119, null]], "mlx.core.diagonal": [[120, null]], "mlx.core.disable_compile": [[121, null]], "mlx.core.distributed.Group": [[122, null]], "mlx.core.distributed.all_gather": [[123, null]], "mlx.core.distributed.all_sum": [[124, null]], "mlx.core.distributed.init": [[125, null]], "mlx.core.distributed.is_available": [[126, null]], "mlx.core.distributed.recv": [[127, null]], "mlx.core.distributed.recv_like": [[128, null]], "mlx.core.distributed.send": [[129, null]], "mlx.core.divide": [[130, null]], "mlx.core.divmod": [[131, null]], "mlx.core.einsum": [[132, null]], "mlx.core.einsum_path": [[133, null]], "mlx.core.enable_compile": [[134, null]], "mlx.core.equal": [[135, null]], "mlx.core.erf": [[136, null]], "mlx.core.erfinv": [[137, null]], "mlx.core.eval": [[138, null]], "mlx.core.exp": [[139, null]], "mlx.core.expand_dims": [[140, null]], "mlx.core.expm1": [[141, null]], "mlx.core.export_function": [[142, null]], "mlx.core.export_to_dot": [[143, null]], "mlx.core.exporter": [[144, null]], "mlx.core.eye": [[145, null]], "mlx.core.fast.layer_norm": [[146, null]], "mlx.core.fast.metal_kernel": [[147, null]], "mlx.core.fast.rms_norm": [[148, null]], "mlx.core.fast.rope": [[149, null]], "mlx.core.fast.scaled_dot_product_attention": [[150, null]], "mlx.core.fft.fft": [[151, null]], "mlx.core.fft.fft2": [[152, null]], "mlx.core.fft.fftn": [[153, null]], "mlx.core.fft.ifft": [[154, null]], "mlx.core.fft.ifft2": [[155, null]], "mlx.core.fft.ifftn": [[156, null]], "mlx.core.fft.irfft": [[157, null]], "mlx.core.fft.irfft2": [[158, null]], "mlx.core.fft.irfftn": [[159, null]], "mlx.core.fft.rfft": [[160, null]], "mlx.core.fft.rfft2": [[161, null]], "mlx.core.fft.rfftn": [[162, null]], "mlx.core.finfo": [[163, null]], "mlx.core.flatten": [[164, null]], "mlx.core.floor": [[165, null]], "mlx.core.floor_divide": [[166, null]], "mlx.core.full": [[167, null]], "mlx.core.gather_mm": [[168, null]], "mlx.core.gather_qmm": [[169, null]], "mlx.core.grad": [[170, null]], "mlx.core.greater": [[171, null]], "mlx.core.greater_equal": [[172, null]], "mlx.core.hadamard_transform": [[173, null]], "mlx.core.identity": [[174, null]], "mlx.core.imag": [[175, null]], "mlx.core.import_function": [[176, null]], "mlx.core.inner": [[177, null]], "mlx.core.isclose": [[178, null]], "mlx.core.isfinite": [[179, null]], "mlx.core.isinf": [[180, null]], "mlx.core.isnan": [[181, null]], "mlx.core.isneginf": [[182, null]], "mlx.core.isposinf": [[183, null]], "mlx.core.issubdtype": [[184, null]], "mlx.core.jvp": [[185, null]], "mlx.core.kron": [[186, null]], "mlx.core.left_shift": [[187, null]], "mlx.core.less": [[188, null]], "mlx.core.less_equal": [[189, null]], "mlx.core.linalg.cholesky": [[190, null]], "mlx.core.linalg.cholesky_inv": [[191, null]], "mlx.core.linalg.cross": [[192, null]], "mlx.core.linalg.eigh": [[193, null]], "mlx.core.linalg.eigvalsh": [[194, null]], "mlx.core.linalg.inv": [[195, null]], "mlx.core.linalg.lu": [[196, null]], "mlx.core.linalg.lu_factor": [[197, null]], "mlx.core.linalg.norm": [[198, null]], "mlx.core.linalg.qr": [[199, null]], "mlx.core.linalg.solve": [[200, null]], "mlx.core.linalg.solve_triangular": [[201, null]], "mlx.core.linalg.svd": [[202, null]], "mlx.core.linalg.tri_inv": [[203, null]], "mlx.core.linspace": [[204, null]], "mlx.core.load": [[205, null]], "mlx.core.log": [[206, null]], "mlx.core.log10": [[207, null]], "mlx.core.log1p": [[208, null]], "mlx.core.log2": [[209, null]], "mlx.core.logaddexp": [[210, null]], "mlx.core.logical_and": [[211, null]], "mlx.core.logical_not": [[212, null]], "mlx.core.logical_or": [[213, null]], "mlx.core.logsumexp": [[214, null]], "mlx.core.matmul": [[215, null]], "mlx.core.max": [[216, null]], "mlx.core.maximum": [[217, null]], "mlx.core.mean": [[218, null]], "mlx.core.meshgrid": [[219, null]], "mlx.core.metal.clear_cache": [[220, null]], "mlx.core.metal.device_info": [[221, null]], "mlx.core.metal.get_active_memory": [[222, null]], "mlx.core.metal.get_cache_memory": [[223, null]], "mlx.core.metal.get_peak_memory": [[224, null]], "mlx.core.metal.is_available": [[225, null]], "mlx.core.metal.reset_peak_memory": [[226, null]], "mlx.core.metal.set_cache_limit": [[227, null]], "mlx.core.metal.set_memory_limit": [[228, null]], "mlx.core.metal.set_wired_limit": [[229, null]], "mlx.core.metal.start_capture": [[230, null]], "mlx.core.metal.stop_capture": [[231, null]], "mlx.core.min": [[232, null]], "mlx.core.minimum": [[233, null]], "mlx.core.moveaxis": [[234, null]], "mlx.core.multiply": [[235, null]], "mlx.core.nan_to_num": [[236, null]], "mlx.core.negative": [[237, null]], "mlx.core.new_stream": [[238, null]], "mlx.core.not_equal": [[239, null]], "mlx.core.ones": [[240, null]], "mlx.core.ones_like": [[241, null]], "mlx.core.outer": [[242, null]], "mlx.core.pad": [[243, null]], "mlx.core.partition": [[244, null]], "mlx.core.power": [[245, null]], "mlx.core.prod": [[246, null]], "mlx.core.put_along_axis": [[247, null]], "mlx.core.quantize": [[248, null]], "mlx.core.quantized_matmul": [[249, null]], "mlx.core.radians": [[250, null]], "mlx.core.random.bernoulli": [[251, null]], "mlx.core.random.categorical": [[252, null]], "mlx.core.random.gumbel": [[253, null]], "mlx.core.random.key": [[254, null]], "mlx.core.random.laplace": [[255, null]], "mlx.core.random.multivariate_normal": [[256, null]], "mlx.core.random.normal": [[257, null]], "mlx.core.random.permutation": [[258, null]], "mlx.core.random.randint": [[259, null]], "mlx.core.random.seed": [[260, null]], "mlx.core.random.split": [[261, null]], "mlx.core.random.truncated_normal": [[262, null]], "mlx.core.random.uniform": [[263, null]], "mlx.core.real": [[264, null]], "mlx.core.reciprocal": [[265, null]], "mlx.core.remainder": [[266, null]], "mlx.core.repeat": [[267, null]], "mlx.core.reshape": [[268, null]], "mlx.core.right_shift": [[269, null]], "mlx.core.roll": [[270, null]], "mlx.core.round": [[271, null]], "mlx.core.rsqrt": [[272, null]], "mlx.core.save": [[273, null]], "mlx.core.save_gguf": [[274, null]], "mlx.core.save_safetensors": [[275, null]], "mlx.core.savez": [[276, null]], "mlx.core.savez_compressed": [[277, null]], "mlx.core.set_default_device": [[278, null]], "mlx.core.set_default_stream": [[279, null]], "mlx.core.sigmoid": [[280, null]], "mlx.core.sign": [[281, null]], "mlx.core.sin": [[282, null]], "mlx.core.sinh": [[283, null]], "mlx.core.slice": [[284, null]], "mlx.core.slice_update": [[285, null]], "mlx.core.softmax": [[286, null]], "mlx.core.sort": [[287, null]], "mlx.core.split": [[288, null]], "mlx.core.sqrt": [[289, null]], "mlx.core.square": [[290, null]], "mlx.core.squeeze": [[291, null]], "mlx.core.stack": [[292, null]], "mlx.core.std": [[293, null]], "mlx.core.stop_gradient": [[294, null]], "mlx.core.stream": [[295, null]], "mlx.core.subtract": [[296, null]], "mlx.core.sum": [[297, null]], "mlx.core.swapaxes": [[298, null]], "mlx.core.synchronize": [[299, null]], "mlx.core.take": [[300, null]], "mlx.core.take_along_axis": [[301, null]], "mlx.core.tan": [[302, null]], "mlx.core.tanh": [[303, null]], "mlx.core.tensordot": [[304, null]], "mlx.core.tile": [[305, null]], "mlx.core.topk": [[306, null]], "mlx.core.trace": [[307, null]], "mlx.core.transpose": [[308, null]], "mlx.core.tri": [[309, null]], "mlx.core.tril": [[310, null]], "mlx.core.triu": [[311, null]], "mlx.core.unflatten": [[312, null]], "mlx.core.value_and_grad": [[313, null]], "mlx.core.var": [[314, null]], "mlx.core.view": [[315, null]], "mlx.core.vjp": [[316, null]], "mlx.core.vmap": [[317, null]], "mlx.core.where": [[318, null]], "mlx.core.zeros": [[319, null]], "mlx.core.zeros_like": [[320, null]], "mlx.nn.ALiBi": [[341, null]], "mlx.nn.AvgPool1d": [[342, null]], "mlx.nn.AvgPool2d": [[343, null]], "mlx.nn.AvgPool3d": [[344, null]], "mlx.nn.BatchNorm": [[345, null]], "mlx.nn.CELU": [[346, null]], "mlx.nn.Conv1d": [[347, null]], "mlx.nn.Conv2d": [[348, null]], "mlx.nn.Conv3d": [[349, null]], "mlx.nn.ConvTranspose1d": [[350, null]], "mlx.nn.ConvTranspose2d": [[351, null]], "mlx.nn.ConvTranspose3d": [[352, null]], "mlx.nn.Dropout": [[353, null]], "mlx.nn.Dropout2d": [[354, null]], "mlx.nn.Dropout3d": [[355, null]], "mlx.nn.ELU": [[356, null]], "mlx.nn.Embedding": [[357, null]], "mlx.nn.GELU": [[358, null]], "mlx.nn.GLU": [[359, null]], "mlx.nn.GRU": [[360, null]], "mlx.nn.GroupNorm": [[361, null]], "mlx.nn.HardShrink": [[362, null]], "mlx.nn.HardTanh": [[363, null]], "mlx.nn.Hardswish": [[364, null]], "mlx.nn.InstanceNorm": [[365, null]], "mlx.nn.LSTM": [[366, null]], "mlx.nn.LayerNorm": [[367, null]], "mlx.nn.LeakyReLU": [[368, null]], "mlx.nn.Linear": [[369, null]], "mlx.nn.LogSigmoid": [[370, null]], "mlx.nn.LogSoftmax": [[371, null]], "mlx.nn.MaxPool1d": [[372, null]], "mlx.nn.MaxPool2d": [[373, null]], "mlx.nn.MaxPool3d": [[374, null]], "mlx.nn.Mish": [[375, null]], "mlx.nn.Module.apply": [[376, null]], "mlx.nn.Module.apply_to_modules": [[377, null]], "mlx.nn.Module.children": [[378, null]], "mlx.nn.Module.eval": [[379, null]], "mlx.nn.Module.filter_and_map": [[380, null]], "mlx.nn.Module.freeze": [[381, null]], "mlx.nn.Module.leaf_modules": [[382, null]], "mlx.nn.Module.load_weights": [[383, null]], "mlx.nn.Module.modules": [[384, null]], "mlx.nn.Module.named_modules": [[385, null]], "mlx.nn.Module.parameters": [[386, null]], "mlx.nn.Module.save_weights": [[387, null]], "mlx.nn.Module.set_dtype": [[388, null]], "mlx.nn.Module.state": [[389, null]], "mlx.nn.Module.train": [[390, null]], "mlx.nn.Module.trainable_parameters": [[391, null]], "mlx.nn.Module.training": [[392, null]], "mlx.nn.Module.unfreeze": [[393, null]], "mlx.nn.Module.update": [[394, null]], "mlx.nn.Module.update_modules": [[395, null]], "mlx.nn.MultiHeadAttention": [[396, null]], "mlx.nn.PReLU": [[397, null]], "mlx.nn.QuantizedEmbedding": [[398, null]], "mlx.nn.QuantizedLinear": [[399, null]], "mlx.nn.RMSNorm": [[400, null]], "mlx.nn.RNN": [[401, null]], "mlx.nn.ReLU": [[402, null]], "mlx.nn.ReLU6": [[403, null]], "mlx.nn.RoPE": [[404, null]], "mlx.nn.SELU": [[405, null]], "mlx.nn.Sequential": [[406, null]], "mlx.nn.SiLU": [[407, null]], "mlx.nn.Sigmoid": [[408, null]], "mlx.nn.SinusoidalPositionalEncoding": [[409, null]], "mlx.nn.Softmax": [[410, null]], "mlx.nn.Softmin": [[411, null]], "mlx.nn.Softplus": [[412, null]], "mlx.nn.Softshrink": [[413, null]], "mlx.nn.Softsign": [[414, null]], "mlx.nn.Step": [[415, null]], "mlx.nn.Tanh": [[416, null]], "mlx.nn.Transformer": [[417, null]], "mlx.nn.Upsample": [[418, null]], "mlx.nn.average_gradients": [[321, null]], "mlx.nn.celu": [[427, null]], "mlx.nn.elu": [[428, null]], "mlx.nn.gelu": [[429, null]], "mlx.nn.gelu_approx": [[430, null]], "mlx.nn.gelu_fast_approx": [[431, null]], "mlx.nn.glu": [[432, null]], "mlx.nn.hard_shrink": [[433, null]], "mlx.nn.hard_tanh": [[434, null]], "mlx.nn.hardswish": [[435, null]], "mlx.nn.init.constant": [[419, null]], "mlx.nn.init.glorot_normal": [[420, null]], "mlx.nn.init.glorot_uniform": [[421, null]], "mlx.nn.init.he_normal": [[422, null]], "mlx.nn.init.he_uniform": [[423, null]], "mlx.nn.init.identity": [[424, null]], "mlx.nn.init.normal": [[425, null]], "mlx.nn.init.uniform": [[426, null]], "mlx.nn.leaky_relu": [[436, null]], "mlx.nn.log_sigmoid": [[437, null]], "mlx.nn.log_softmax": [[438, null]], "mlx.nn.losses.binary_cross_entropy": [[439, null]], "mlx.nn.losses.cosine_similarity_loss": [[440, null]], "mlx.nn.losses.cross_entropy": [[441, null]], "mlx.nn.losses.gaussian_nll_loss": [[442, null]], "mlx.nn.losses.hinge_loss": [[443, null]], "mlx.nn.losses.huber_loss": [[444, null]], "mlx.nn.losses.kl_div_loss": [[445, null]], "mlx.nn.losses.l1_loss": [[446, null]], "mlx.nn.losses.log_cosh_loss": [[447, null]], "mlx.nn.losses.margin_ranking_loss": [[448, null]], "mlx.nn.losses.mse_loss": [[449, null]], "mlx.nn.losses.nll_loss": [[450, null]], "mlx.nn.losses.smooth_l1_loss": [[451, null]], "mlx.nn.losses.triplet_loss": [[452, null]], "mlx.nn.mish": [[453, null]], "mlx.nn.prelu": [[454, null]], "mlx.nn.quantize": [[322, null]], "mlx.nn.relu": [[455, null]], "mlx.nn.relu6": [[456, null]], "mlx.nn.selu": [[457, null]], "mlx.nn.sigmoid": [[458, null]], "mlx.nn.silu": [[459, null]], "mlx.nn.softmax": [[460, null]], "mlx.nn.softmin": [[461, null]], "mlx.nn.softplus": [[462, null]], "mlx.nn.softshrink": [[463, null]], "mlx.nn.step": [[464, null]], "mlx.nn.tanh": [[465, null]], "mlx.nn.value_and_grad": [[323, null]], "mlx.optimizers.AdaDelta": [[473, null]], "mlx.optimizers.Adafactor": [[474, null]], "mlx.optimizers.Adagrad": [[475, null]], "mlx.optimizers.Adam": [[476, null]], "mlx.optimizers.AdamW": [[477, null]], "mlx.optimizers.Adamax": [[478, null]], "mlx.optimizers.Lion": [[479, null]], "mlx.optimizers.Optimizer.apply_gradients": [[480, null]], "mlx.optimizers.Optimizer.init": [[481, null]], "mlx.optimizers.Optimizer.state": [[482, null]], "mlx.optimizers.Optimizer.update": [[483, null]], "mlx.optimizers.RMSprop": [[484, null]], "mlx.optimizers.SGD": [[485, null]], "mlx.optimizers.clip_grad_norm": [[324, null]], "mlx.optimizers.cosine_decay": [[486, null]], "mlx.optimizers.exponential_decay": [[487, null]], "mlx.optimizers.join_schedules": [[488, null]], "mlx.optimizers.linear_schedule": [[489, null]], "mlx.optimizers.step_decay": [[490, null]], "mlx.utils.tree_flatten": [[325, null]], "mlx.utils.tree_map": [[326, null]], "mlx.utils.tree_map_with_path": [[327, null]], "mlx.utils.tree_reduce": [[328, null]], "mlx.utils.tree_unflatten": [[329, null]], "x86 Shell": [[9, "x86-shell"]]}, "docnames": ["cpp/ops", "dev/custom_metal_kernels", "dev/extensions", "dev/metal_debugger", "dev/mlx_in_cpp", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.conj", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.std", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array.view", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_invert", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv3d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.conv_transpose1d", "python/_autosummary/mlx.core.conv_transpose2d", "python/_autosummary/mlx.core.conv_transpose3d", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.custom_function", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.distributed.Group", "python/_autosummary/mlx.core.distributed.all_gather", "python/_autosummary/mlx.core.distributed.all_sum", "python/_autosummary/mlx.core.distributed.init", "python/_autosummary/mlx.core.distributed.is_available", "python/_autosummary/mlx.core.distributed.recv", "python/_autosummary/mlx.core.distributed.recv_like", "python/_autosummary/mlx.core.distributed.send", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.einsum", "python/_autosummary/mlx.core.einsum_path", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.export_function", "python/_autosummary/mlx.core.export_to_dot", "python/_autosummary/mlx.core.exporter", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.metal_kernel", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.finfo", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.hadamard_transform", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.imag", "python/_autosummary/mlx.core.import_function", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isfinite", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.kron", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.cholesky_inv", "python/_autosummary/mlx.core.linalg.cross", "python/_autosummary/mlx.core.linalg.eigh", "python/_autosummary/mlx.core.linalg.eigvalsh", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.lu", "python/_autosummary/mlx.core.linalg.lu_factor", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.solve", "python/_autosummary/mlx.core.linalg.solve_triangular", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linalg.tri_inv", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.clear_cache", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.get_active_memory", "python/_autosummary/mlx.core.metal.get_cache_memory", "python/_autosummary/mlx.core.metal.get_peak_memory", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.reset_peak_memory", "python/_autosummary/mlx.core.metal.set_cache_limit", "python/_autosummary/mlx.core.metal.set_memory_limit", "python/_autosummary/mlx.core.metal.set_wired_limit", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.nan_to_num", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.put_along_axis", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.laplace", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.permutation", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.real", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.roll", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.slice", "python/_autosummary/mlx.core.slice_update", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.unflatten", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.view", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.average_gradients", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/distributed", "python/export", "python/fast", "python/fft", "python/linalg", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.AvgPool3d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.CELU", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.ConvTranspose1d", "python/nn/_autosummary/mlx.nn.ConvTranspose2d", "python/nn/_autosummary/mlx.nn.ConvTranspose3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.ELU", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GLU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.HardShrink", "python/nn/_autosummary/mlx.nn.HardTanh", "python/nn/_autosummary/mlx.nn.Hardswish", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.LeakyReLU", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.LogSigmoid", "python/nn/_autosummary/mlx.nn.LogSoftmax", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.MaxPool3d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.ReLU6", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.Sigmoid", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softmax", "python/nn/_autosummary/mlx.nn.Softmin", "python/nn/_autosummary/mlx.nn.Softplus", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Softsign", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Tanh", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.celu", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hard_shrink", "python/nn/_autosummary_functions/mlx.nn.hard_tanh", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softmin", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/distributed", "usage/export", "usage/function_transforms", "usage/indexing", "usage/launching_distributed", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["cpp/ops.rst", "dev/custom_metal_kernels.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "dev/mlx_in_cpp.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.conj.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.std.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array.view.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_invert.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv3d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.conv_transpose1d.rst", "python/_autosummary/mlx.core.conv_transpose2d.rst", "python/_autosummary/mlx.core.conv_transpose3d.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.custom_function.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.distributed.Group.rst", "python/_autosummary/mlx.core.distributed.all_gather.rst", "python/_autosummary/mlx.core.distributed.all_sum.rst", "python/_autosummary/mlx.core.distributed.init.rst", "python/_autosummary/mlx.core.distributed.is_available.rst", "python/_autosummary/mlx.core.distributed.recv.rst", "python/_autosummary/mlx.core.distributed.recv_like.rst", "python/_autosummary/mlx.core.distributed.send.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.einsum.rst", "python/_autosummary/mlx.core.einsum_path.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.export_function.rst", "python/_autosummary/mlx.core.export_to_dot.rst", "python/_autosummary/mlx.core.exporter.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.metal_kernel.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.finfo.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.hadamard_transform.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.imag.rst", "python/_autosummary/mlx.core.import_function.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isfinite.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.kron.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.cholesky_inv.rst", "python/_autosummary/mlx.core.linalg.cross.rst", "python/_autosummary/mlx.core.linalg.eigh.rst", "python/_autosummary/mlx.core.linalg.eigvalsh.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.lu.rst", "python/_autosummary/mlx.core.linalg.lu_factor.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.solve.rst", "python/_autosummary/mlx.core.linalg.solve_triangular.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linalg.tri_inv.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.clear_cache.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.get_active_memory.rst", "python/_autosummary/mlx.core.metal.get_cache_memory.rst", "python/_autosummary/mlx.core.metal.get_peak_memory.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.reset_peak_memory.rst", "python/_autosummary/mlx.core.metal.set_cache_limit.rst", "python/_autosummary/mlx.core.metal.set_memory_limit.rst", "python/_autosummary/mlx.core.metal.set_wired_limit.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.nan_to_num.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.put_along_axis.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.laplace.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.permutation.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.real.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.roll.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.slice.rst", "python/_autosummary/mlx.core.slice_update.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.unflatten.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.view.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.average_gradients.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/distributed.rst", "python/export.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.AvgPool3d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.CELU.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose1d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose2d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.ELU.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GLU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.HardShrink.rst", "python/nn/_autosummary/mlx.nn.HardTanh.rst", "python/nn/_autosummary/mlx.nn.Hardswish.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.LeakyReLU.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.LogSigmoid.rst", "python/nn/_autosummary/mlx.nn.LogSoftmax.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.MaxPool3d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.ReLU6.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.Sigmoid.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softmax.rst", "python/nn/_autosummary/mlx.nn.Softmin.rst", "python/nn/_autosummary/mlx.nn.Softplus.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Softsign.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Tanh.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.celu.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hard_shrink.rst", "python/nn/_autosummary_functions/mlx.nn.hard_tanh.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softmin.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/distributed.rst", "usage/export.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/launching_distributed.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "indexentries": {"__init__() (array method)": [[31, "mlx.core.array.__init__", false]], "__init__() (custom_function method)": [[114, "mlx.core.custom_function.__init__", false]], "__init__() (device method)": [[10, "mlx.core.Device.__init__", false]], "__init__() (dtype method)": [[11, "mlx.core.Dtype.__init__", false]], "__init__() (dtypecategory method)": [[12, "mlx.core.DtypeCategory.__init__", false]], "__init__() (finfo method)": [[163, "mlx.core.finfo.__init__", false]], "__init__() (group method)": [[122, "mlx.core.distributed.Group.__init__", false]], "__init__() (stream method)": [[330, "mlx.core.Stream.__init__", false]], "abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice", false]], "abs() (array method)": [[33, "mlx.core.array.abs", false]], "abs() (in module mlx.core)": [[13, "mlx.core.abs", false]], "adadelta (class in mlx.optimizers)": [[473, "mlx.optimizers.AdaDelta", false]], "adafactor (class in mlx.optimizers)": [[474, "mlx.optimizers.Adafactor", false]], "adagrad (class in mlx.optimizers)": [[475, "mlx.optimizers.Adagrad", false]], "adam (class in mlx.optimizers)": [[476, "mlx.optimizers.Adam", false]], "adamax (class in mlx.optimizers)": [[478, "mlx.optimizers.Adamax", false]], "adamw (class in mlx.optimizers)": [[477, "mlx.optimizers.AdamW", false]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice", false]], "add() (in module mlx.core)": [[14, "mlx.core.add", false]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", false]], "addmm() (in module mlx.core)": [[15, "mlx.core.addmm", false]], "alibi (class in mlx.nn)": [[341, "mlx.nn.ALiBi", false]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice", false], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayib14StreamOrDevice", false]], "all() (array method)": [[34, "mlx.core.array.all", false]], "all() (in module mlx.core)": [[16, "mlx.core.all", false]], "all_gather() (in module mlx.core.distributed)": [[123, "mlx.core.distributed.all_gather", false]], "all_sum() (in module mlx.core.distributed)": [[124, "mlx.core.distributed.all_sum", false]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "allclose() (in module mlx.core)": [[17, "mlx.core.allclose", false]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayib14StreamOrDevice", false]], "any() (array method)": [[35, "mlx.core.array.any", false]], "any() (in module mlx.core)": [[18, "mlx.core.any", false]], "apply() (module method)": [[376, "mlx.nn.Module.apply", false]], "apply_gradients() (optimizer method)": [[480, "mlx.optimizers.Optimizer.apply_gradients", false]], "apply_to_modules() (module method)": [[377, "mlx.nn.Module.apply_to_modules", false]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice", false], [0, "_CPPv46aranged5Dtype14StreamOrDevice", false], [0, "_CPPv46arangedd14StreamOrDevice", false], [0, "_CPPv46arangedd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangeddd14StreamOrDevice", false], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangei14StreamOrDevice", false], [0, "_CPPv46arangeii14StreamOrDevice", false], [0, "_CPPv46arangeiii14StreamOrDevice", false]], "arange() (in module mlx.core)": [[19, "mlx.core.arange", false]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice", false]], "arccos() (in module mlx.core)": [[20, "mlx.core.arccos", false]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice", false]], "arccosh() (in module mlx.core)": [[21, "mlx.core.arccosh", false]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice", false]], "arcsin() (in module mlx.core)": [[22, "mlx.core.arcsin", false]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice", false]], "arcsinh() (in module mlx.core)": [[23, "mlx.core.arcsinh", false]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice", false]], "arctan() (in module mlx.core)": [[24, "mlx.core.arctan", false]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", false]], "arctan2() (in module mlx.core)": [[25, "mlx.core.arctan2", false]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice", false]], "arctanh() (in module mlx.core)": [[26, "mlx.core.arctanh", false]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice", false]], "argmax() (array method)": [[36, "mlx.core.array.argmax", false]], "argmax() (in module mlx.core)": [[27, "mlx.core.argmax", false]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayib14StreamOrDevice", false]], "argmin() (array method)": [[37, "mlx.core.array.argmin", false]], "argmin() (in module mlx.core)": [[28, "mlx.core.argmin", false]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", false]], "argpartition() (in module mlx.core)": [[29, "mlx.core.argpartition", false]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice", false], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice", false]], "argsort() (in module mlx.core)": [[30, "mlx.core.argsort", false]], "array (class in mlx.core)": [[31, "mlx.core.array", false]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", false]], "array_equal() (in module mlx.core)": [[83, "mlx.core.array_equal", false]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", false]], "as_strided() (in module mlx.core)": [[84, "mlx.core.as_strided", false]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice", false]], "astype() (array method)": [[38, "mlx.core.array.astype", false]], "at (array property)": [[39, "mlx.core.array.at", false]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_1d() (in module mlx.core)": [[85, "mlx.core.atleast_1d", false]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_2d() (in module mlx.core)": [[86, "mlx.core.atleast_2d", false]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_3d() (in module mlx.core)": [[87, "mlx.core.atleast_3d", false]], "average_gradients() (in module mlx.nn)": [[321, "mlx.nn.average_gradients", false]], "avgpool1d (class in mlx.nn)": [[342, "mlx.nn.AvgPool1d", false]], "avgpool2d (class in mlx.nn)": [[343, "mlx.nn.AvgPool2d", false]], "avgpool3d (class in mlx.nn)": [[344, "mlx.nn.AvgPool3d", false]], "batchnorm (class in mlx.nn)": [[345, "mlx.nn.BatchNorm", false]], "bernoulli() (in module mlx.core.random)": [[251, "mlx.core.random.bernoulli", false]], "binary_cross_entropy (class in mlx.nn.losses)": [[439, "mlx.nn.losses.binary_cross_entropy", false]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", false]], "bitwise_and() (in module mlx.core)": [[88, "mlx.core.bitwise_and", false]], "bitwise_invert (c++ function)": [[0, "_CPPv414bitwise_invertRK5array14StreamOrDevice", false]], "bitwise_invert() (in module mlx.core)": [[89, "mlx.core.bitwise_invert", false]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", false]], "bitwise_or() (in module mlx.core)": [[90, "mlx.core.bitwise_or", false]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", false]], "bitwise_xor() (in module mlx.core)": [[91, "mlx.core.bitwise_xor", false]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", false]], "block_masked_mm() (in module mlx.core)": [[92, "mlx.core.block_masked_mm", false]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", false]], "broadcast_to() (in module mlx.core)": [[93, "mlx.core.broadcast_to", false]], "categorical() (in module mlx.core.random)": [[252, "mlx.core.random.categorical", false]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice", false]], "ceil() (in module mlx.core)": [[94, "mlx.core.ceil", false]], "celu (class in mlx.nn)": [[346, "mlx.nn.CELU", false], [427, "mlx.nn.celu", false]], "children() (module method)": [[378, "mlx.nn.Module.children", false]], "cholesky() (in module mlx.core.linalg)": [[190, "mlx.core.linalg.cholesky", false]], "cholesky_inv() (in module mlx.core.linalg)": [[191, "mlx.core.linalg.cholesky_inv", false]], "clear_cache() (in module mlx.core.metal)": [[220, "mlx.core.metal.clear_cache", false]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", false]], "clip() (in module mlx.core)": [[95, "mlx.core.clip", false]], "clip_grad_norm() (in module mlx.optimizers)": [[324, "mlx.optimizers.clip_grad_norm", false]], "compile() (in module mlx.core)": [[96, "mlx.core.compile", false]], "concatenate (c++ function)": [[0, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", false]], "concatenate() (in module mlx.core)": [[97, "mlx.core.concatenate", false]], "conj() (array method)": [[40, "mlx.core.array.conj", false]], "conj() (in module mlx.core)": [[98, "mlx.core.conj", false]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice", false]], "conjugate() (in module mlx.core)": [[99, "mlx.core.conjugate", false]], "constant() (in module mlx.nn.init)": [[419, "mlx.nn.init.constant", false]], "contiguous (c++ function)": [[0, "_CPPv410contiguousRK5arrayb14StreamOrDevice", false]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", false]], "conv1d (class in mlx.nn)": [[347, "mlx.nn.Conv1d", false]], "conv1d() (in module mlx.core)": [[100, "mlx.core.conv1d", false]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv2d (class in mlx.nn)": [[348, "mlx.nn.Conv2d", false]], "conv2d() (in module mlx.core)": [[101, "mlx.core.conv2d", false]], "conv3d (c++ function)": [[0, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "conv3d (class in mlx.nn)": [[349, "mlx.nn.Conv3d", false]], "conv3d() (in module mlx.core)": [[102, "mlx.core.conv3d", false]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false]], "conv_general() (in module mlx.core)": [[103, "mlx.core.conv_general", false]], "conv_transpose1d (c++ function)": [[0, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", false]], "conv_transpose1d() (in module mlx.core)": [[104, "mlx.core.conv_transpose1d", false]], "conv_transpose2d (c++ function)": [[0, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv_transpose2d() (in module mlx.core)": [[105, "mlx.core.conv_transpose2d", false]], "conv_transpose3d (c++ function)": [[0, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "conv_transpose3d() (in module mlx.core)": [[106, "mlx.core.conv_transpose3d", false]], "convolve() (in module mlx.core)": [[107, "mlx.core.convolve", false]], "convtranspose1d (class in mlx.nn)": [[350, "mlx.nn.ConvTranspose1d", false]], "convtranspose2d (class in mlx.nn)": [[351, "mlx.nn.ConvTranspose2d", false]], "convtranspose3d (class in mlx.nn)": [[352, "mlx.nn.ConvTranspose3d", false]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice", false]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice", false]], "cos() (array method)": [[41, "mlx.core.array.cos", false]], "cos() (in module mlx.core)": [[108, "mlx.core.cos", false]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice", false]], "cosh() (in module mlx.core)": [[109, "mlx.core.cosh", false]], "cosine_decay() (in module mlx.optimizers)": [[486, "mlx.optimizers.cosine_decay", false]], "cosine_similarity_loss (class in mlx.nn.losses)": [[440, "mlx.nn.losses.cosine_similarity_loss", false]], "cross() (in module mlx.core.linalg)": [[192, "mlx.core.linalg.cross", false]], "cross_entropy (class in mlx.nn.losses)": [[441, "mlx.nn.losses.cross_entropy", false]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", false]], "cummax() (array method)": [[42, "mlx.core.array.cummax", false]], "cummax() (in module mlx.core)": [[110, "mlx.core.cummax", false]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice", false]], "cummin() (array method)": [[43, "mlx.core.array.cummin", false]], "cummin() (in module mlx.core)": [[111, "mlx.core.cummin", false]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", false]], "cumprod() (array method)": [[44, "mlx.core.array.cumprod", false]], "cumprod() (in module mlx.core)": [[112, "mlx.core.cumprod", false]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", false]], "cumsum() (array method)": [[45, "mlx.core.array.cumsum", false]], "cumsum() (in module mlx.core)": [[113, "mlx.core.cumsum", false]], "custom_function (class in mlx.core)": [[114, "mlx.core.custom_function", false]], "default_device() (in module mlx.core)": [[115, "mlx.core.default_device", false]], "default_stream() (in module mlx.core)": [[116, "mlx.core.default_stream", false]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice", false]], "degrees() (in module mlx.core)": [[117, "mlx.core.degrees", false]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", false]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", false]], "dequantize() (in module mlx.core)": [[118, "mlx.core.dequantize", false]], "device (class in mlx.core)": [[10, "mlx.core.Device", false]], "device_info() (in module mlx.core.metal)": [[221, "mlx.core.metal.device_info", false]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice", false]], "diag() (array method)": [[46, "mlx.core.array.diag", false]], "diag() (in module mlx.core)": [[119, "mlx.core.diag", false]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", false]], "diagonal() (array method)": [[47, "mlx.core.array.diagonal", false]], "diagonal() (in module mlx.core)": [[120, "mlx.core.diagonal", false]], "disable_compile() (in module mlx.core)": [[121, "mlx.core.disable_compile", false]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", false]], "divide() (in module mlx.core)": [[130, "mlx.core.divide", false]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", false]], "divmod() (in module mlx.core)": [[131, "mlx.core.divmod", false]], "dropout (class in mlx.nn)": [[353, "mlx.nn.Dropout", false]], "dropout2d (class in mlx.nn)": [[354, "mlx.nn.Dropout2d", false]], "dropout3d (class in mlx.nn)": [[355, "mlx.nn.Dropout3d", false]], "dtype (array property)": [[48, "mlx.core.array.dtype", false]], "dtype (class in mlx.core)": [[11, "mlx.core.Dtype", false]], "dtypecategory (class in mlx.core)": [[12, "mlx.core.DtypeCategory", false]], "eigh() (in module mlx.core.linalg)": [[193, "mlx.core.linalg.eigh", false]], "eigvalsh() (in module mlx.core.linalg)": [[194, "mlx.core.linalg.eigvalsh", false]], "einsum() (in module mlx.core)": [[132, "mlx.core.einsum", false]], "einsum_path() (in module mlx.core)": [[133, "mlx.core.einsum_path", false]], "elu (class in mlx.nn)": [[356, "mlx.nn.ELU", false], [428, "mlx.nn.elu", false]], "embedding (class in mlx.nn)": [[357, "mlx.nn.Embedding", false]], "enable_compile() (in module mlx.core)": [[134, "mlx.core.enable_compile", false]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", false]], "equal() (in module mlx.core)": [[135, "mlx.core.equal", false]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice", false]], "erf() (in module mlx.core)": [[136, "mlx.core.erf", false]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice", false]], "erfinv() (in module mlx.core)": [[137, "mlx.core.erfinv", false]], "eval() (in module mlx.core)": [[138, "mlx.core.eval", false]], "eval() (module method)": [[379, "mlx.nn.Module.eval", false]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice", false]], "exp() (array method)": [[49, "mlx.core.array.exp", false]], "exp() (in module mlx.core)": [[139, "mlx.core.exp", false]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", false]], "expand_dims() (in module mlx.core)": [[140, "mlx.core.expand_dims", false]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice", false]], "expm1() (in module mlx.core)": [[141, "mlx.core.expm1", false]], "exponential_decay() (in module mlx.optimizers)": [[487, "mlx.optimizers.exponential_decay", false]], "export_function() (in module mlx.core)": [[142, "mlx.core.export_function", false]], "export_to_dot() (in module mlx.core)": [[143, "mlx.core.export_to_dot", false]], "exporter() (in module mlx.core)": [[144, "mlx.core.exporter", false]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice", false], [0, "_CPPv43eyei5Dtype14StreamOrDevice", false], [0, "_CPPv43eyeii14StreamOrDevice", false], [0, "_CPPv43eyeiii14StreamOrDevice", false], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice", false]], "eye() (in module mlx.core)": [[145, "mlx.core.eye", false]], "fft() (in module mlx.core.fft)": [[151, "mlx.core.fft.fft", false]], "fft2() (in module mlx.core.fft)": [[152, "mlx.core.fft.fft2", false]], "fftn() (in module mlx.core.fft)": [[153, "mlx.core.fft.fftn", false]], "filter_and_map() (module method)": [[380, "mlx.nn.Module.filter_and_map", false]], "finfo (class in mlx.core)": [[163, "mlx.core.finfo", false]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice", false], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice", false]], "flatten() (array method)": [[50, "mlx.core.array.flatten", false]], "flatten() (in module mlx.core)": [[164, "mlx.core.flatten", false]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice", false]], "floor() (in module mlx.core)": [[165, "mlx.core.floor", false]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", false]], "floor_divide() (in module mlx.core)": [[166, "mlx.core.floor_divide", false]], "freeze() (module method)": [[381, "mlx.nn.Module.freeze", false]], "full (c++ function)": [[0, "_CPPv44full5Shape5array14StreamOrDevice", false], [0, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", false], [0, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", false], [0, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", false]], "full() (in module mlx.core)": [[167, "mlx.core.full", false]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", false], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", false]], "gather_mm (c++ function)": [[0, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", false]], "gather_mm() (in module mlx.core)": [[168, "mlx.core.gather_mm", false]], "gather_qmm (c++ function)": [[0, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", false]], "gather_qmm() (in module mlx.core)": [[169, "mlx.core.gather_qmm", false]], "gaussian_nll_loss (class in mlx.nn.losses)": [[442, "mlx.nn.losses.gaussian_nll_loss", false]], "gelu (class in mlx.nn)": [[358, "mlx.nn.GELU", false], [429, "mlx.nn.gelu", false]], "gelu_approx (class in mlx.nn)": [[430, "mlx.nn.gelu_approx", false]], "gelu_fast_approx (class in mlx.nn)": [[431, "mlx.nn.gelu_fast_approx", false]], "get_active_memory() (in module mlx.core.metal)": [[222, "mlx.core.metal.get_active_memory", false]], "get_cache_memory() (in module mlx.core.metal)": [[223, "mlx.core.metal.get_cache_memory", false]], "get_peak_memory() (in module mlx.core.metal)": [[224, "mlx.core.metal.get_peak_memory", false]], "glorot_normal() (in module mlx.nn.init)": [[420, "mlx.nn.init.glorot_normal", false]], "glorot_uniform() (in module mlx.nn.init)": [[421, "mlx.nn.init.glorot_uniform", false]], "glu (class in mlx.nn)": [[359, "mlx.nn.GLU", false], [432, "mlx.nn.glu", false]], "grad() (in module mlx.core)": [[170, "mlx.core.grad", false]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", false]], "greater() (in module mlx.core)": [[171, "mlx.core.greater", false]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", false]], "greater_equal() (in module mlx.core)": [[172, "mlx.core.greater_equal", false]], "group (class in mlx.core.distributed)": [[122, "mlx.core.distributed.Group", false]], "groupnorm (class in mlx.nn)": [[361, "mlx.nn.GroupNorm", false]], "gru (class in mlx.nn)": [[360, "mlx.nn.GRU", false]], "gumbel() (in module mlx.core.random)": [[253, "mlx.core.random.gumbel", false]], "hadamard_transform (c++ function)": [[0, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", false]], "hadamard_transform() (in module mlx.core)": [[173, "mlx.core.hadamard_transform", false]], "hard_shrink (class in mlx.nn)": [[433, "mlx.nn.hard_shrink", false]], "hard_tanh (class in mlx.nn)": [[434, "mlx.nn.hard_tanh", false]], "hardshrink (class in mlx.nn)": [[362, "mlx.nn.HardShrink", false]], "hardswish (class in mlx.nn)": [[364, "mlx.nn.Hardswish", false], [435, "mlx.nn.hardswish", false]], "hardtanh (class in mlx.nn)": [[363, "mlx.nn.HardTanh", false]], "he_normal() (in module mlx.nn.init)": [[422, "mlx.nn.init.he_normal", false]], "he_uniform() (in module mlx.nn.init)": [[423, "mlx.nn.init.he_uniform", false]], "hinge_loss (class in mlx.nn.losses)": [[443, "mlx.nn.losses.hinge_loss", false]], "huber_loss (class in mlx.nn.losses)": [[444, "mlx.nn.losses.huber_loss", false]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice", false], [0, "_CPPv48identityi5Dtype14StreamOrDevice", false]], "identity() (in module mlx.core)": [[174, "mlx.core.identity", false]], "identity() (in module mlx.nn.init)": [[424, "mlx.nn.init.identity", false]], "ifft() (in module mlx.core.fft)": [[154, "mlx.core.fft.ifft", false]], "ifft2() (in module mlx.core.fft)": [[155, "mlx.core.fft.ifft2", false]], "ifftn() (in module mlx.core.fft)": [[156, "mlx.core.fft.ifftn", false]], "imag (c++ function)": [[0, "_CPPv44imagRK5array14StreamOrDevice", false]], "imag() (in module mlx.core)": [[175, "mlx.core.imag", false]], "import_function() (in module mlx.core)": [[176, "mlx.core.import_function", false]], "init() (in module mlx.core.distributed)": [[125, "mlx.core.distributed.init", false]], "init() (optimizer method)": [[481, "mlx.optimizers.Optimizer.init", false]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", false]], "inner() (in module mlx.core)": [[177, "mlx.core.inner", false]], "instancenorm (class in mlx.nn)": [[365, "mlx.nn.InstanceNorm", false]], "inv() (in module mlx.core.linalg)": [[195, "mlx.core.linalg.inv", false]], "irfft() (in module mlx.core.fft)": [[157, "mlx.core.fft.irfft", false]], "irfft2() (in module mlx.core.fft)": [[158, "mlx.core.fft.irfft2", false]], "irfftn() (in module mlx.core.fft)": [[159, "mlx.core.fft.irfftn", false]], "is_available() (in module mlx.core.distributed)": [[126, "mlx.core.distributed.is_available", false]], "is_available() (in module mlx.core.metal)": [[225, "mlx.core.metal.is_available", false]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "isclose() (in module mlx.core)": [[178, "mlx.core.isclose", false]], "isfinite (c++ function)": [[0, "_CPPv48isfiniteRK5array14StreamOrDevice", false]], "isfinite() (in module mlx.core)": [[179, "mlx.core.isfinite", false]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice", false]], "isinf() (in module mlx.core)": [[180, "mlx.core.isinf", false]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice", false]], "isnan() (in module mlx.core)": [[181, "mlx.core.isnan", false]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice", false]], "isneginf() (in module mlx.core)": [[182, "mlx.core.isneginf", false]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice", false]], "isposinf() (in module mlx.core)": [[183, "mlx.core.isposinf", false]], "issubdtype() (in module mlx.core)": [[184, "mlx.core.issubdtype", false]], "item() (array method)": [[51, "mlx.core.array.item", false]], "itemsize (array property)": [[52, "mlx.core.array.itemsize", false]], "join_schedules() (in module mlx.optimizers)": [[488, "mlx.optimizers.join_schedules", false]], "jvp() (in module mlx.core)": [[185, "mlx.core.jvp", false]], "key() (in module mlx.core.random)": [[254, "mlx.core.random.key", false]], "kl_div_loss (class in mlx.nn.losses)": [[445, "mlx.nn.losses.kl_div_loss", false]], "kron (c++ function)": [[0, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", false]], "kron() (in module mlx.core)": [[186, "mlx.core.kron", false]], "l1_loss (class in mlx.nn.losses)": [[446, "mlx.nn.losses.l1_loss", false]], "laplace() (in module mlx.core.random)": [[255, "mlx.core.random.laplace", false]], "layer_norm() (in module mlx.core.fast)": [[146, "mlx.core.fast.layer_norm", false]], "layernorm (class in mlx.nn)": [[367, "mlx.nn.LayerNorm", false]], "leaf_modules() (module method)": [[382, "mlx.nn.Module.leaf_modules", false]], "leaky_relu (class in mlx.nn)": [[436, "mlx.nn.leaky_relu", false]], "leakyrelu (class in mlx.nn)": [[368, "mlx.nn.LeakyReLU", false]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", false]], "left_shift() (in module mlx.core)": [[187, "mlx.core.left_shift", false]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", false]], "less() (in module mlx.core)": [[188, "mlx.core.less", false]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", false]], "less_equal() (in module mlx.core)": [[189, "mlx.core.less_equal", false]], "linear (class in mlx.nn)": [[369, "mlx.nn.Linear", false]], "linear_schedule() (in module mlx.optimizers)": [[489, "mlx.optimizers.linear_schedule", false]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice", false]], "linspace() (in module mlx.core)": [[204, "mlx.core.linspace", false]], "lion (class in mlx.optimizers)": [[479, "mlx.optimizers.Lion", false]], "load() (in module mlx.core)": [[205, "mlx.core.load", false]], "load_weights() (module method)": [[383, "mlx.nn.Module.load_weights", false]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice", false]], "log() (array method)": [[53, "mlx.core.array.log", false]], "log() (in module mlx.core)": [[206, "mlx.core.log", false]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice", false]], "log10() (array method)": [[54, "mlx.core.array.log10", false]], "log10() (in module mlx.core)": [[207, "mlx.core.log10", false]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice", false]], "log1p() (array method)": [[55, "mlx.core.array.log1p", false]], "log1p() (in module mlx.core)": [[208, "mlx.core.log1p", false]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice", false]], "log2() (array method)": [[56, "mlx.core.array.log2", false]], "log2() (in module mlx.core)": [[209, "mlx.core.log2", false]], "log_cosh_loss (class in mlx.nn.losses)": [[447, "mlx.nn.losses.log_cosh_loss", false]], "log_sigmoid (class in mlx.nn)": [[437, "mlx.nn.log_sigmoid", false]], "log_softmax (class in mlx.nn)": [[438, "mlx.nn.log_softmax", false]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", false]], "logaddexp() (in module mlx.core)": [[210, "mlx.core.logaddexp", false]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", false]], "logical_and() (in module mlx.core)": [[211, "mlx.core.logical_and", false]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice", false]], "logical_not() (in module mlx.core)": [[212, "mlx.core.logical_not", false]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", false]], "logical_or() (in module mlx.core)": [[213, "mlx.core.logical_or", false]], "logsigmoid (class in mlx.nn)": [[370, "mlx.nn.LogSigmoid", false]], "logsoftmax (class in mlx.nn)": [[371, "mlx.nn.LogSoftmax", false]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", false]], "logsumexp() (array method)": [[57, "mlx.core.array.logsumexp", false]], "logsumexp() (in module mlx.core)": [[214, "mlx.core.logsumexp", false]], "lstm (class in mlx.nn)": [[366, "mlx.nn.LSTM", false]], "lu() (in module mlx.core.linalg)": [[196, "mlx.core.linalg.lu", false]], "lu_factor() (in module mlx.core.linalg)": [[197, "mlx.core.linalg.lu_factor", false]], "margin_ranking_loss (class in mlx.nn.losses)": [[448, "mlx.nn.losses.margin_ranking_loss", false]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", false]], "matmul() (in module mlx.core)": [[215, "mlx.core.matmul", false]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayib14StreamOrDevice", false]], "max() (array method)": [[58, "mlx.core.array.max", false]], "max() (in module mlx.core)": [[216, "mlx.core.max", false]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", false]], "maximum() (in module mlx.core)": [[217, "mlx.core.maximum", false]], "maxpool1d (class in mlx.nn)": [[372, "mlx.nn.MaxPool1d", false]], "maxpool2d (class in mlx.nn)": [[373, "mlx.nn.MaxPool2d", false]], "maxpool3d (class in mlx.nn)": [[374, "mlx.nn.MaxPool3d", false]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayib14StreamOrDevice", false]], "mean() (array method)": [[59, "mlx.core.array.mean", false]], "mean() (in module mlx.core)": [[218, "mlx.core.mean", false]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", false]], "meshgrid() (in module mlx.core)": [[219, "mlx.core.meshgrid", false]], "metal_kernel() (in module mlx.core.fast)": [[147, "mlx.core.fast.metal_kernel", false]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice", false], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayib14StreamOrDevice", false]], "min() (array method)": [[60, "mlx.core.array.min", false]], "min() (in module mlx.core)": [[232, "mlx.core.min", false]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", false]], "minimum() (in module mlx.core)": [[233, "mlx.core.minimum", false]], "mish (class in mlx.nn)": [[375, "mlx.nn.Mish", false], [453, "mlx.nn.mish", false]], "module (class in mlx.nn)": [[470, "mlx.nn.Module", false]], "modules() (module method)": [[384, "mlx.nn.Module.modules", false]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", false]], "moveaxis() (array method)": [[61, "mlx.core.array.moveaxis", false]], "moveaxis() (in module mlx.core)": [[234, "mlx.core.moveaxis", false]], "mse_loss (class in mlx.nn.losses)": [[449, "mlx.nn.losses.mse_loss", false]], "multiheadattention (class in mlx.nn)": [[396, "mlx.nn.MultiHeadAttention", false]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", false]], "multiply() (in module mlx.core)": [[235, "mlx.core.multiply", false]], "multivariate_normal() (in module mlx.core.random)": [[256, "mlx.core.random.multivariate_normal", false]], "named_modules() (module method)": [[385, "mlx.nn.Module.named_modules", false]], "nan_to_num (c++ function)": [[0, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", false]], "nan_to_num() (in module mlx.core)": [[236, "mlx.core.nan_to_num", false]], "nbytes (array property)": [[62, "mlx.core.array.nbytes", false]], "ndim (array property)": [[63, "mlx.core.array.ndim", false]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice", false]], "negative() (in module mlx.core)": [[237, "mlx.core.negative", false]], "new_stream() (in module mlx.core)": [[238, "mlx.core.new_stream", false]], "nll_loss (class in mlx.nn.losses)": [[450, "mlx.nn.losses.nll_loss", false]], "norm() (in module mlx.core.linalg)": [[198, "mlx.core.linalg.norm", false]], "normal() (in module mlx.core.random)": [[257, "mlx.core.random.normal", false]], "normal() (in module mlx.nn.init)": [[425, "mlx.nn.init.normal", false]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", false]], "not_equal() (in module mlx.core)": [[239, "mlx.core.not_equal", false]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", false]], "ones (c++ function)": [[0, "_CPPv44onesRK5Shape14StreamOrDevice", false], [0, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", false]], "ones() (in module mlx.core)": [[240, "mlx.core.ones", false]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice", false]], "ones_like() (in module mlx.core)": [[241, "mlx.core.ones_like", false]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array", false], [0, "_CPPv4I0Ene5arrayRK5array1T", false], [0, "_CPPv4neRK5arrayRK5array", false]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array", false], [0, "_CPPv4I0Erm5arrayRK5array1T", false], [0, "_CPPv4rmRK5arrayRK5array", false]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array", false]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array", false]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array", false], [0, "_CPPv4I0Eml5arrayRK5array1T", false], [0, "_CPPv4mlRK5arrayRK5array", false]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array", false], [0, "_CPPv4I0Epl5arrayRK5array1T", false], [0, "_CPPv4plRK5arrayRK5array", false]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array", false], [0, "_CPPv4I0Emi5arrayRK5array1T", false], [0, "_CPPv4miRK5array", false], [0, "_CPPv4miRK5arrayRK5array", false]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array", false], [0, "_CPPv4dvRK5arrayd", false], [0, "_CPPv4dvdRK5array", false]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array", false], [0, "_CPPv4I0Elt5arrayRK5array1T", false], [0, "_CPPv4ltRK5arrayRK5array", false]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array", false]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array", false], [0, "_CPPv4I0Ele5arrayRK5array1T", false], [0, "_CPPv4leRK5arrayRK5array", false]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array", false], [0, "_CPPv4I0Eeq5arrayRK5array1T", false], [0, "_CPPv4eqRK5arrayRK5array", false]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array", false], [0, "_CPPv4I0Egt5arrayRK5array1T", false], [0, "_CPPv4gtRK5arrayRK5array", false]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array", false], [0, "_CPPv4I0Ege5arrayRK5array1T", false], [0, "_CPPv4geRK5arrayRK5array", false]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array", false]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array", false]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array", false]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array", false]], "operator~ (c++ function)": [[0, "_CPPv4coRK5array", false]], "optimizer (class in mlx.optimizers)": [[492, "mlx.optimizers.Optimizer", false]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", false]], "outer() (in module mlx.core)": [[242, "mlx.core.outer", false]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", false]], "pad() (in module mlx.core)": [[243, "mlx.core.pad", false]], "parameters() (module method)": [[386, "mlx.nn.Module.parameters", false]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice", false]], "partition() (in module mlx.core)": [[244, "mlx.core.partition", false]], "permutation() (in module mlx.core.random)": [[258, "mlx.core.random.permutation", false]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", false]], "power() (in module mlx.core)": [[245, "mlx.core.power", false]], "prelu (class in mlx.nn)": [[397, "mlx.nn.PReLU", false], [454, "mlx.nn.prelu", false]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayib14StreamOrDevice", false]], "prod() (array method)": [[64, "mlx.core.array.prod", false]], "prod() (in module mlx.core)": [[246, "mlx.core.prod", false]], "put_along_axis (c++ function)": [[0, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false]], "put_along_axis() (in module mlx.core)": [[247, "mlx.core.put_along_axis", false]], "qr() (in module mlx.core.linalg)": [[199, "mlx.core.linalg.qr", false]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice", false]], "quantize() (in module mlx.core)": [[248, "mlx.core.quantize", false]], "quantize() (in module mlx.nn)": [[322, "mlx.nn.quantize", false]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", false]], "quantized_matmul() (in module mlx.core)": [[249, "mlx.core.quantized_matmul", false]], "quantizedembedding (class in mlx.nn)": [[398, "mlx.nn.QuantizedEmbedding", false]], "quantizedlinear (class in mlx.nn)": [[399, "mlx.nn.QuantizedLinear", false]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice", false]], "radians() (in module mlx.core)": [[250, "mlx.core.radians", false]], "randint() (in module mlx.core.random)": [[259, "mlx.core.random.randint", false]], "real (c++ function)": [[0, "_CPPv44realRK5array14StreamOrDevice", false]], "real() (in module mlx.core)": [[264, "mlx.core.real", false]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice", false]], "reciprocal() (array method)": [[65, "mlx.core.array.reciprocal", false]], "reciprocal() (in module mlx.core)": [[265, "mlx.core.reciprocal", false]], "recv() (in module mlx.core.distributed)": [[127, "mlx.core.distributed.recv", false]], "recv_like() (in module mlx.core.distributed)": [[128, "mlx.core.distributed.recv_like", false]], "relu (class in mlx.nn)": [[402, "mlx.nn.ReLU", false], [455, "mlx.nn.relu", false]], "relu6 (class in mlx.nn)": [[403, "mlx.nn.ReLU6", false], [456, "mlx.nn.relu6", false]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", false]], "remainder() (in module mlx.core)": [[266, "mlx.core.remainder", false]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice", false], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice", false]], "repeat() (in module mlx.core)": [[267, "mlx.core.repeat", false]], "reset_peak_memory() (in module mlx.core.metal)": [[226, "mlx.core.metal.reset_peak_memory", false]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", false]], "reshape() (array method)": [[66, "mlx.core.array.reshape", false]], "reshape() (in module mlx.core)": [[268, "mlx.core.reshape", false]], "rfft() (in module mlx.core.fft)": [[160, "mlx.core.fft.rfft", false]], "rfft2() (in module mlx.core.fft)": [[161, "mlx.core.fft.rfft2", false]], "rfftn() (in module mlx.core.fft)": [[162, "mlx.core.fft.rfftn", false]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", false]], "right_shift() (in module mlx.core)": [[269, "mlx.core.right_shift", false]], "rms_norm() (in module mlx.core.fast)": [[148, "mlx.core.fast.rms_norm", false]], "rmsnorm (class in mlx.nn)": [[400, "mlx.nn.RMSNorm", false]], "rmsprop (class in mlx.optimizers)": [[484, "mlx.optimizers.RMSprop", false]], "rnn (class in mlx.nn)": [[401, "mlx.nn.RNN", false]], "roll (c++ function)": [[0, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayi14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayii14StreamOrDevice", false]], "roll() (in module mlx.core)": [[270, "mlx.core.roll", false]], "rope (class in mlx.nn)": [[404, "mlx.nn.RoPE", false]], "rope() (in module mlx.core.fast)": [[149, "mlx.core.fast.rope", false]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice", false], [0, "_CPPv45roundRK5arrayi14StreamOrDevice", false]], "round() (array method)": [[67, "mlx.core.array.round", false]], "round() (in module mlx.core)": [[271, "mlx.core.round", false]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice", false]], "rsqrt() (array method)": [[68, "mlx.core.array.rsqrt", false]], "rsqrt() (in module mlx.core)": [[272, "mlx.core.rsqrt", false]], "save() (in module mlx.core)": [[273, "mlx.core.save", false]], "save_gguf() (in module mlx.core)": [[274, "mlx.core.save_gguf", false]], "save_safetensors() (in module mlx.core)": [[275, "mlx.core.save_safetensors", false]], "save_weights() (module method)": [[387, "mlx.nn.Module.save_weights", false]], "savez() (in module mlx.core)": [[276, "mlx.core.savez", false]], "savez_compressed() (in module mlx.core)": [[277, "mlx.core.savez_compressed", false]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[150, "mlx.core.fast.scaled_dot_product_attention", false]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_add_axis (c++ function)": [[0, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "seed() (in module mlx.core.random)": [[260, "mlx.core.random.seed", false]], "selu (class in mlx.nn)": [[405, "mlx.nn.SELU", false], [457, "mlx.nn.selu", false]], "send() (in module mlx.core.distributed)": [[129, "mlx.core.distributed.send", false]], "sequential (class in mlx.nn)": [[406, "mlx.nn.Sequential", false]], "set_cache_limit() (in module mlx.core.metal)": [[227, "mlx.core.metal.set_cache_limit", false]], "set_default_device() (in module mlx.core)": [[278, "mlx.core.set_default_device", false]], "set_default_stream() (in module mlx.core)": [[279, "mlx.core.set_default_stream", false]], "set_dtype() (module method)": [[388, "mlx.nn.Module.set_dtype", false]], "set_memory_limit() (in module mlx.core.metal)": [[228, "mlx.core.metal.set_memory_limit", false]], "set_wired_limit() (in module mlx.core.metal)": [[229, "mlx.core.metal.set_wired_limit", false]], "sgd (class in mlx.optimizers)": [[485, "mlx.optimizers.SGD", false]], "shape (array property)": [[69, "mlx.core.array.shape", false]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice", false]], "sigmoid (class in mlx.nn)": [[408, "mlx.nn.Sigmoid", false], [458, "mlx.nn.sigmoid", false]], "sigmoid() (in module mlx.core)": [[280, "mlx.core.sigmoid", false]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice", false]], "sign() (in module mlx.core)": [[281, "mlx.core.sign", false]], "silu (class in mlx.nn)": [[407, "mlx.nn.SiLU", false], [459, "mlx.nn.silu", false]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice", false]], "sin() (array method)": [[70, "mlx.core.array.sin", false]], "sin() (in module mlx.core)": [[282, "mlx.core.sin", false]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice", false]], "sinh() (in module mlx.core)": [[283, "mlx.core.sinh", false]], "sinusoidalpositionalencoding (class in mlx.nn)": [[409, "mlx.nn.SinusoidalPositionalEncoding", false]], "size (array property)": [[71, "mlx.core.array.size", false]], "slice (c++ function)": [[0, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", false]], "slice() (in module mlx.core)": [[284, "mlx.core.slice", false]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", false], [0, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", false], [0, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "slice_update() (in module mlx.core)": [[285, "mlx.core.slice_update", false]], "smooth_l1_loss (class in mlx.nn.losses)": [[451, "mlx.nn.losses.smooth_l1_loss", false]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice", false]], "softmax (class in mlx.nn)": [[410, "mlx.nn.Softmax", false], [460, "mlx.nn.softmax", false]], "softmax() (in module mlx.core)": [[286, "mlx.core.softmax", false]], "softmin (class in mlx.nn)": [[411, "mlx.nn.Softmin", false], [461, "mlx.nn.softmin", false]], "softplus (class in mlx.nn)": [[412, "mlx.nn.Softplus", false], [462, "mlx.nn.softplus", false]], "softshrink (class in mlx.nn)": [[413, "mlx.nn.Softshrink", false], [463, "mlx.nn.softshrink", false]], "softsign (class in mlx.nn)": [[414, "mlx.nn.Softsign", false]], "solve() (in module mlx.core.linalg)": [[200, "mlx.core.linalg.solve", false]], "solve_triangular() (in module mlx.core.linalg)": [[201, "mlx.core.linalg.solve_triangular", false]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice", false], [0, "_CPPv44sortRK5arrayi14StreamOrDevice", false]], "sort() (in module mlx.core)": [[287, "mlx.core.sort", false]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayi14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayii14StreamOrDevice", false]], "split() (array method)": [[72, "mlx.core.array.split", false]], "split() (in module mlx.core)": [[288, "mlx.core.split", false]], "split() (in module mlx.core.random)": [[261, "mlx.core.random.split", false]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice", false]], "sqrt() (array method)": [[73, "mlx.core.array.sqrt", false]], "sqrt() (in module mlx.core)": [[289, "mlx.core.sqrt", false]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice", false]], "square() (array method)": [[74, "mlx.core.array.square", false]], "square() (in module mlx.core)": [[290, "mlx.core.square", false]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice", false]], "squeeze() (array method)": [[75, "mlx.core.array.squeeze", false]], "squeeze() (in module mlx.core)": [[291, "mlx.core.squeeze", false]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", false]], "stack() (in module mlx.core)": [[292, "mlx.core.stack", false]], "start_capture() (in module mlx.core.metal)": [[230, "mlx.core.metal.start_capture", false]], "state (module property)": [[389, "mlx.nn.Module.state", false]], "state (optimizer property)": [[482, "mlx.optimizers.Optimizer.state", false]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice", false], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv4StRK5arraybi14StreamOrDevice", false], [0, "_CPPv4StRK5arrayibi14StreamOrDevice", false]], "std() (array method)": [[76, "mlx.core.array.std", false]], "std() (in module mlx.core)": [[293, "mlx.core.std", false]], "step (class in mlx.nn)": [[415, "mlx.nn.Step", false], [464, "mlx.nn.step", false]], "step_decay() (in module mlx.optimizers)": [[490, "mlx.optimizers.step_decay", false]], "stop_capture() (in module mlx.core.metal)": [[231, "mlx.core.metal.stop_capture", false]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice", false]], "stop_gradient() (in module mlx.core)": [[294, "mlx.core.stop_gradient", false]], "stream (class in mlx.core)": [[330, "mlx.core.Stream", false]], "stream() (in module mlx.core)": [[295, "mlx.core.stream", false]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", false]], "subtract() (in module mlx.core)": [[296, "mlx.core.subtract", false]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayib14StreamOrDevice", false]], "sum() (array method)": [[77, "mlx.core.array.sum", false]], "sum() (in module mlx.core)": [[297, "mlx.core.sum", false]], "svd() (in module mlx.core.linalg)": [[202, "mlx.core.linalg.svd", false]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", false]], "swapaxes() (array method)": [[78, "mlx.core.array.swapaxes", false]], "swapaxes() (in module mlx.core)": [[298, "mlx.core.swapaxes", false]], "synchronize() (in module mlx.core)": [[299, "mlx.core.synchronize", false]], "t (array property)": [[32, "mlx.core.array.T", false]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayi14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayii14StreamOrDevice", false]], "take() (in module mlx.core)": [[300, "mlx.core.take", false]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", false]], "take_along_axis() (in module mlx.core)": [[301, "mlx.core.take_along_axis", false]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice", false]], "tan() (in module mlx.core)": [[302, "mlx.core.tan", false]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice", false]], "tanh (class in mlx.nn)": [[416, "mlx.nn.Tanh", false], [465, "mlx.nn.tanh", false]], "tanh() (in module mlx.core)": [[303, "mlx.core.tanh", false]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", false], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", false]], "tensordot() (in module mlx.core)": [[304, "mlx.core.tensordot", false]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "tile() (in module mlx.core)": [[305, "mlx.core.tile", false]], "tolist() (array method)": [[79, "mlx.core.array.tolist", false]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice", false], [0, "_CPPv44topkRK5arrayii14StreamOrDevice", false]], "topk() (in module mlx.core)": [[306, "mlx.core.topk", false]], "trace (c++ function)": [[0, "_CPPv45traceRK5array14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", false]], "trace() (in module mlx.core)": [[307, "mlx.core.trace", false]], "train() (module method)": [[390, "mlx.nn.Module.train", false]], "trainable_parameters() (module method)": [[391, "mlx.nn.Module.trainable_parameters", false]], "training (module property)": [[392, "mlx.nn.Module.training", false]], "transformer (class in mlx.nn)": [[417, "mlx.nn.Transformer", false]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "transpose() (array method)": [[80, "mlx.core.array.transpose", false]], "transpose() (in module mlx.core)": [[308, "mlx.core.transpose", false]], "tree_flatten() (in module mlx.utils)": [[325, "mlx.utils.tree_flatten", false]], "tree_map() (in module mlx.utils)": [[326, "mlx.utils.tree_map", false]], "tree_map_with_path() (in module mlx.utils)": [[327, "mlx.utils.tree_map_with_path", false]], "tree_reduce() (in module mlx.utils)": [[328, "mlx.utils.tree_reduce", false]], "tree_unflatten() (in module mlx.utils)": [[329, "mlx.utils.tree_unflatten", false]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice", false], [0, "_CPPv43triiii5Dtype14StreamOrDevice", false]], "tri() (in module mlx.core)": [[309, "mlx.core.tri", false]], "tri_inv() (in module mlx.core.linalg)": [[203, "mlx.core.linalg.tri_inv", false]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice", false]], "tril() (in module mlx.core)": [[310, "mlx.core.tril", false]], "triplet_loss (class in mlx.nn.losses)": [[452, "mlx.nn.losses.triplet_loss", false]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice", false]], "triu() (in module mlx.core)": [[311, "mlx.core.triu", false]], "truncated_normal() (in module mlx.core.random)": [[262, "mlx.core.random.truncated_normal", false]], "unflatten (c++ function)": [[0, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", false]], "unflatten() (in module mlx.core)": [[312, "mlx.core.unflatten", false]], "unfreeze() (module method)": [[393, "mlx.nn.Module.unfreeze", false]], "uniform() (in module mlx.core.random)": [[263, "mlx.core.random.uniform", false]], "uniform() (in module mlx.nn.init)": [[426, "mlx.nn.init.uniform", false]], "update() (module method)": [[394, "mlx.nn.Module.update", false]], "update() (optimizer method)": [[483, "mlx.optimizers.Optimizer.update", false]], "update_modules() (module method)": [[395, "mlx.nn.Module.update_modules", false]], "upsample (class in mlx.nn)": [[418, "mlx.nn.Upsample", false]], "value_and_grad() (in module mlx.core)": [[313, "mlx.core.value_and_grad", false]], "value_and_grad() (in module mlx.nn)": [[323, "mlx.nn.value_and_grad", false]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice", false], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv43varRK5arraybi14StreamOrDevice", false], [0, "_CPPv43varRK5arrayibi14StreamOrDevice", false]], "var() (array method)": [[81, "mlx.core.array.var", false]], "var() (in module mlx.core)": [[314, "mlx.core.var", false]], "view (c++ function)": [[0, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", false]], "view() (array method)": [[82, "mlx.core.array.view", false]], "view() (in module mlx.core)": [[315, "mlx.core.view", false]], "vjp() (in module mlx.core)": [[316, "mlx.core.vjp", false]], "vmap() (in module mlx.core)": [[317, "mlx.core.vmap", false]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", false]], "where() (in module mlx.core)": [[318, "mlx.core.where", false]], "zeros (c++ function)": [[0, "_CPPv45zerosRK5Shape14StreamOrDevice", false], [0, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", false]], "zeros() (in module mlx.core)": [[319, "mlx.core.zeros", false]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice", false]], "zeros_like() (in module mlx.core)": [[320, "mlx.core.zeros_like", false]]}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv414bitwise_invertRK5array14StreamOrDevice", "bitwise_invert"], [0, 1, 1, "_CPPv414bitwise_invertRK5array14StreamOrDevice", "bitwise_invert::a"], [0, 1, 1, "_CPPv414bitwise_invertRK5array14StreamOrDevice", "bitwise_invert::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::a"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::allow_col_major"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::dilation"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::groups"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::input"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::padding"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::s"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::stride"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::weight"], [0, 0, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::dilation"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::groups"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::input"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::padding"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::s"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::stride"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::weight"], [0, 0, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::dilation"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::groups"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::input"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::padding"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::s"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::stride"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::a"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::b"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::lhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::rhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::s"], [0, 0, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::biases"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::bits"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::group_size"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::lhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::rhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::s"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::scales"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::transpose"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::w"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::x"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::a"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::s"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::scale"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag"], [0, 1, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag::a"], [0, 1, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::a"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::a"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::b"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::a"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::nan"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::neginf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::posinf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv4coRK5array", "operator~"], [0, 1, 1, "_CPPv4coRK5array", "operator~::a"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::a"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::axis"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::indices"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::s"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::values"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv44realRK5array14StreamOrDevice", "real"], [0, 1, 1, "_CPPv44realRK5array14StreamOrDevice", "real::a"], [0, 1, 1, "_CPPv44realRK5array14StreamOrDevice", "real::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::axes"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::axes"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::axis"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::axis"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::shift"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::a"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::axis"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::indices"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::s"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::values"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::axes"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::slice_size"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::strides"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::axes"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::index"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::index"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::dtype"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::a"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::axis"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::s"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::shape"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::a"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::dtype"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[10, 3, 1, "", "Device"], [11, 3, 1, "", "Dtype"], [12, 3, 1, "", "DtypeCategory"], [330, 3, 1, "", "Stream"], [13, 5, 1, "", "abs"], [14, 5, 1, "", "add"], [15, 5, 1, "", "addmm"], [16, 5, 1, "", "all"], [17, 5, 1, "", "allclose"], [18, 5, 1, "", "any"], [19, 5, 1, "", "arange"], [20, 5, 1, "", "arccos"], [21, 5, 1, "", "arccosh"], [22, 5, 1, "", "arcsin"], [23, 5, 1, "", "arcsinh"], [24, 5, 1, "", "arctan"], [25, 5, 1, "", "arctan2"], [26, 5, 1, "", "arctanh"], [27, 5, 1, "", "argmax"], [28, 5, 1, "", "argmin"], [29, 5, 1, "", "argpartition"], [30, 5, 1, "", "argsort"], [31, 3, 1, "", "array"], [83, 5, 1, "", "array_equal"], [84, 5, 1, "", "as_strided"], [85, 5, 1, "", "atleast_1d"], [86, 5, 1, "", "atleast_2d"], [87, 5, 1, "", "atleast_3d"], [88, 5, 1, "", "bitwise_and"], [89, 5, 1, "", "bitwise_invert"], [90, 5, 1, "", "bitwise_or"], [91, 5, 1, "", "bitwise_xor"], [92, 5, 1, "", "block_masked_mm"], [93, 5, 1, "", "broadcast_to"], [94, 5, 1, "", "ceil"], [95, 5, 1, "", "clip"], [96, 5, 1, "", "compile"], [97, 5, 1, "", "concatenate"], [98, 5, 1, "", "conj"], [99, 5, 1, "", "conjugate"], [100, 5, 1, "", "conv1d"], [101, 5, 1, "", "conv2d"], [102, 5, 1, "", "conv3d"], [103, 5, 1, "", "conv_general"], [104, 5, 1, "", "conv_transpose1d"], [105, 5, 1, "", "conv_transpose2d"], [106, 5, 1, "", "conv_transpose3d"], [107, 5, 1, "", "convolve"], [108, 5, 1, "", "cos"], [109, 5, 1, "", "cosh"], [110, 5, 1, "", "cummax"], [111, 5, 1, "", "cummin"], [112, 5, 1, "", "cumprod"], [113, 5, 1, "", "cumsum"], [114, 3, 1, "", "custom_function"], [115, 5, 1, "", "default_device"], [116, 5, 1, "", "default_stream"], [117, 5, 1, "", "degrees"], [118, 5, 1, "", "dequantize"], [119, 5, 1, "", "diag"], [120, 5, 1, "", "diagonal"], [121, 5, 1, "", "disable_compile"], [130, 5, 1, "", "divide"], [131, 5, 1, "", "divmod"], [132, 5, 1, "", "einsum"], [133, 5, 1, "", "einsum_path"], [134, 5, 1, "", "enable_compile"], [135, 5, 1, "", "equal"], [136, 5, 1, "", "erf"], [137, 5, 1, "", "erfinv"], [138, 5, 1, "", "eval"], [139, 5, 1, "", "exp"], [140, 5, 1, "", "expand_dims"], [141, 5, 1, "", "expm1"], [142, 5, 1, "", "export_function"], [143, 5, 1, "", "export_to_dot"], [144, 5, 1, "", "exporter"], [145, 5, 1, "", "eye"], [163, 3, 1, "", "finfo"], [164, 5, 1, "", "flatten"], [165, 5, 1, "", "floor"], [166, 5, 1, "", "floor_divide"], [167, 5, 1, "", "full"], [168, 5, 1, "", "gather_mm"], [169, 5, 1, "", "gather_qmm"], [170, 5, 1, "", "grad"], [171, 5, 1, "", "greater"], [172, 5, 1, "", "greater_equal"], [173, 5, 1, "", "hadamard_transform"], [174, 5, 1, "", "identity"], [175, 5, 1, "", "imag"], [176, 5, 1, "", "import_function"], [177, 5, 1, "", "inner"], [178, 5, 1, "", "isclose"], [179, 5, 1, "", "isfinite"], [180, 5, 1, "", "isinf"], [181, 5, 1, "", "isnan"], [182, 5, 1, "", "isneginf"], [183, 5, 1, "", "isposinf"], [184, 5, 1, "", "issubdtype"], [185, 5, 1, "", "jvp"], [186, 5, 1, "", "kron"], [187, 5, 1, "", "left_shift"], [188, 5, 1, "", "less"], [189, 5, 1, "", "less_equal"], [204, 5, 1, "", "linspace"], [205, 5, 1, "", "load"], [206, 5, 1, "", "log"], [207, 5, 1, "", "log10"], [208, 5, 1, "", "log1p"], [209, 5, 1, "", "log2"], [210, 5, 1, "", "logaddexp"], [211, 5, 1, "", "logical_and"], [212, 5, 1, "", "logical_not"], [213, 5, 1, "", "logical_or"], [214, 5, 1, "", "logsumexp"], [215, 5, 1, "", "matmul"], [216, 5, 1, "", "max"], [217, 5, 1, "", "maximum"], [218, 5, 1, "", "mean"], [219, 5, 1, "", "meshgrid"], [232, 5, 1, "", "min"], [233, 5, 1, "", "minimum"], [234, 5, 1, "", "moveaxis"], [235, 5, 1, "", "multiply"], [236, 5, 1, "", "nan_to_num"], [237, 5, 1, "", "negative"], [238, 5, 1, "", "new_stream"], [239, 5, 1, "", "not_equal"], [240, 5, 1, "", "ones"], [241, 5, 1, "", "ones_like"], [242, 5, 1, "", "outer"], [243, 5, 1, "", "pad"], [244, 5, 1, "", "partition"], [245, 5, 1, "", "power"], [246, 5, 1, "", "prod"], [247, 5, 1, "", "put_along_axis"], [248, 5, 1, "", "quantize"], [249, 5, 1, "", "quantized_matmul"], [250, 5, 1, "", "radians"], [264, 5, 1, "", "real"], [265, 5, 1, "", "reciprocal"], [266, 5, 1, "", "remainder"], [267, 5, 1, "", "repeat"], [268, 5, 1, "", "reshape"], [269, 5, 1, "", "right_shift"], [270, 5, 1, "", "roll"], [271, 5, 1, "", "round"], [272, 5, 1, "", "rsqrt"], [273, 5, 1, "", "save"], [274, 5, 1, "", "save_gguf"], [275, 5, 1, "", "save_safetensors"], [276, 5, 1, "", "savez"], [277, 5, 1, "", "savez_compressed"], [278, 5, 1, "", "set_default_device"], [279, 5, 1, "", "set_default_stream"], [280, 5, 1, "", "sigmoid"], [281, 5, 1, "", "sign"], [282, 5, 1, "", "sin"], [283, 5, 1, "", "sinh"], [284, 5, 1, "", "slice"], [285, 5, 1, "", "slice_update"], [286, 5, 1, "", "softmax"], [287, 5, 1, "", "sort"], [288, 5, 1, "", "split"], [289, 5, 1, "", "sqrt"], [290, 5, 1, "", "square"], [291, 5, 1, "", "squeeze"], [292, 5, 1, "", "stack"], [293, 5, 1, "", "std"], [294, 5, 1, "", "stop_gradient"], [295, 5, 1, "", "stream"], [296, 5, 1, "", "subtract"], [297, 5, 1, "", "sum"], [298, 5, 1, "", "swapaxes"], [299, 5, 1, "", "synchronize"], [300, 5, 1, "", "take"], [301, 5, 1, "", "take_along_axis"], [302, 5, 1, "", "tan"], [303, 5, 1, "", "tanh"], [304, 5, 1, "", "tensordot"], [305, 5, 1, "", "tile"], [306, 5, 1, "", "topk"], [307, 5, 1, "", "trace"], [308, 5, 1, "", "transpose"], [309, 5, 1, "", "tri"], [310, 5, 1, "", "tril"], [311, 5, 1, "", "triu"], [312, 5, 1, "", "unflatten"], [313, 5, 1, "", "value_and_grad"], [314, 5, 1, "", "var"], [315, 5, 1, "", "view"], [316, 5, 1, "", "vjp"], [317, 5, 1, "", "vmap"], [318, 5, 1, "", "where"], [319, 5, 1, "", "zeros"], [320, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[10, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[11, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[12, 4, 1, "", "__init__"]], "mlx.core.Stream": [[330, 4, 1, "", "__init__"]], "mlx.core.array": [[32, 6, 1, "", "T"], [31, 4, 1, "", "__init__"], [33, 4, 1, "", "abs"], [34, 4, 1, "", "all"], [35, 4, 1, "", "any"], [36, 4, 1, "", "argmax"], [37, 4, 1, "", "argmin"], [38, 4, 1, "", "astype"], [39, 6, 1, "", "at"], [40, 4, 1, "", "conj"], [41, 4, 1, "", "cos"], [42, 4, 1, "", "cummax"], [43, 4, 1, "", "cummin"], [44, 4, 1, "", "cumprod"], [45, 4, 1, "", "cumsum"], [46, 4, 1, "", "diag"], [47, 4, 1, "", "diagonal"], [48, 6, 1, "", "dtype"], [49, 4, 1, "", "exp"], [50, 4, 1, "", "flatten"], [51, 4, 1, "", "item"], [52, 6, 1, "", "itemsize"], [53, 4, 1, "", "log"], [54, 4, 1, "", "log10"], [55, 4, 1, "", "log1p"], [56, 4, 1, "", "log2"], [57, 4, 1, "", "logsumexp"], [58, 4, 1, "", "max"], [59, 4, 1, "", "mean"], [60, 4, 1, "", "min"], [61, 4, 1, "", "moveaxis"], [62, 6, 1, "", "nbytes"], [63, 6, 1, "", "ndim"], [64, 4, 1, "", "prod"], [65, 4, 1, "", "reciprocal"], [66, 4, 1, "", "reshape"], [67, 4, 1, "", "round"], [68, 4, 1, "", "rsqrt"], [69, 6, 1, "", "shape"], [70, 4, 1, "", "sin"], [71, 6, 1, "", "size"], [72, 4, 1, "", "split"], [73, 4, 1, "", "sqrt"], [74, 4, 1, "", "square"], [75, 4, 1, "", "squeeze"], [76, 4, 1, "", "std"], [77, 4, 1, "", "sum"], [78, 4, 1, "", "swapaxes"], [79, 4, 1, "", "tolist"], [80, 4, 1, "", "transpose"], [81, 4, 1, "", "var"], [82, 4, 1, "", "view"]], "mlx.core.custom_function": [[114, 4, 1, "", "__init__"]], "mlx.core.distributed": [[122, 3, 1, "", "Group"], [123, 5, 1, "", "all_gather"], [124, 5, 1, "", "all_sum"], [125, 5, 1, "", "init"], [126, 5, 1, "", "is_available"], [127, 5, 1, "", "recv"], [128, 5, 1, "", "recv_like"], [129, 5, 1, "", "send"]], "mlx.core.distributed.Group": [[122, 4, 1, "", "__init__"]], "mlx.core.fast": [[146, 5, 1, "", "layer_norm"], [147, 5, 1, "", "metal_kernel"], [148, 5, 1, "", "rms_norm"], [149, 5, 1, "", "rope"], [150, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[151, 5, 1, "", "fft"], [152, 5, 1, "", "fft2"], [153, 5, 1, "", "fftn"], [154, 5, 1, "", "ifft"], [155, 5, 1, "", "ifft2"], [156, 5, 1, "", "ifftn"], [157, 5, 1, "", "irfft"], [158, 5, 1, "", "irfft2"], [159, 5, 1, "", "irfftn"], [160, 5, 1, "", "rfft"], [161, 5, 1, "", "rfft2"], [162, 5, 1, "", "rfftn"]], "mlx.core.finfo": [[163, 4, 1, "", "__init__"]], "mlx.core.linalg": [[190, 5, 1, "", "cholesky"], [191, 5, 1, "", "cholesky_inv"], [192, 5, 1, "", "cross"], [193, 5, 1, "", "eigh"], [194, 5, 1, "", "eigvalsh"], [195, 5, 1, "", "inv"], [196, 5, 1, "", "lu"], [197, 5, 1, "", "lu_factor"], [198, 5, 1, "", "norm"], [199, 5, 1, "", "qr"], [200, 5, 1, "", "solve"], [201, 5, 1, "", "solve_triangular"], [202, 5, 1, "", "svd"], [203, 5, 1, "", "tri_inv"]], "mlx.core.metal": [[220, 5, 1, "", "clear_cache"], [221, 5, 1, "", "device_info"], [222, 5, 1, "", "get_active_memory"], [223, 5, 1, "", "get_cache_memory"], [224, 5, 1, "", "get_peak_memory"], [225, 5, 1, "", "is_available"], [226, 5, 1, "", "reset_peak_memory"], [227, 5, 1, "", "set_cache_limit"], [228, 5, 1, "", "set_memory_limit"], [229, 5, 1, "", "set_wired_limit"], [230, 5, 1, "", "start_capture"], [231, 5, 1, "", "stop_capture"]], "mlx.core.random": [[251, 5, 1, "", "bernoulli"], [252, 5, 1, "", "categorical"], [253, 5, 1, "", "gumbel"], [254, 5, 1, "", "key"], [255, 5, 1, "", "laplace"], [256, 5, 1, "", "multivariate_normal"], [257, 5, 1, "", "normal"], [258, 5, 1, "", "permutation"], [259, 5, 1, "", "randint"], [260, 5, 1, "", "seed"], [261, 5, 1, "", "split"], [262, 5, 1, "", "truncated_normal"], [263, 5, 1, "", "uniform"]], "mlx.nn": [[341, 3, 1, "", "ALiBi"], [342, 3, 1, "", "AvgPool1d"], [343, 3, 1, "", "AvgPool2d"], [344, 3, 1, "", "AvgPool3d"], [345, 3, 1, "", "BatchNorm"], [346, 3, 1, "", "CELU"], [347, 3, 1, "", "Conv1d"], [348, 3, 1, "", "Conv2d"], [349, 3, 1, "", "Conv3d"], [350, 3, 1, "", "ConvTranspose1d"], [351, 3, 1, "", "ConvTranspose2d"], [352, 3, 1, "", "ConvTranspose3d"], [353, 3, 1, "", "Dropout"], [354, 3, 1, "", "Dropout2d"], [355, 3, 1, "", "Dropout3d"], [356, 3, 1, "", "ELU"], [357, 3, 1, "", "Embedding"], [358, 3, 1, "", "GELU"], [359, 3, 1, "", "GLU"], [360, 3, 1, "", "GRU"], [361, 3, 1, "", "GroupNorm"], [362, 3, 1, "", "HardShrink"], [363, 3, 1, "", "HardTanh"], [364, 3, 1, "", "Hardswish"], [365, 3, 1, "", "InstanceNorm"], [366, 3, 1, "", "LSTM"], [367, 3, 1, "", "LayerNorm"], [368, 3, 1, "", "LeakyReLU"], [369, 3, 1, "", "Linear"], [370, 3, 1, "", "LogSigmoid"], [371, 3, 1, "", "LogSoftmax"], [372, 3, 1, "", "MaxPool1d"], [373, 3, 1, "", "MaxPool2d"], [374, 3, 1, "", "MaxPool3d"], [375, 3, 1, "", "Mish"], [470, 3, 1, "", "Module"], [396, 3, 1, "", "MultiHeadAttention"], [397, 3, 1, "", "PReLU"], [398, 3, 1, "", "QuantizedEmbedding"], [399, 3, 1, "", "QuantizedLinear"], [400, 3, 1, "", "RMSNorm"], [401, 3, 1, "", "RNN"], [402, 3, 1, "", "ReLU"], [403, 3, 1, "", "ReLU6"], [404, 3, 1, "", "RoPE"], [405, 3, 1, "", "SELU"], [406, 3, 1, "", "Sequential"], [407, 3, 1, "", "SiLU"], [408, 3, 1, "", "Sigmoid"], [409, 3, 1, "", "SinusoidalPositionalEncoding"], [410, 3, 1, "", "Softmax"], [411, 3, 1, "", "Softmin"], [412, 3, 1, "", "Softplus"], [413, 3, 1, "", "Softshrink"], [414, 3, 1, "", "Softsign"], [415, 3, 1, "", "Step"], [416, 3, 1, "", "Tanh"], [417, 3, 1, "", "Transformer"], [418, 3, 1, "", "Upsample"], [321, 5, 1, "", "average_gradients"], [427, 3, 1, "", "celu"], [428, 3, 1, "", "elu"], [429, 3, 1, "", "gelu"], [430, 3, 1, "", "gelu_approx"], [431, 3, 1, "", "gelu_fast_approx"], [432, 3, 1, "", "glu"], [433, 3, 1, "", "hard_shrink"], [434, 3, 1, "", "hard_tanh"], [435, 3, 1, "", "hardswish"], [436, 3, 1, "", "leaky_relu"], [437, 3, 1, "", "log_sigmoid"], [438, 3, 1, "", "log_softmax"], [453, 3, 1, "", "mish"], [454, 3, 1, "", "prelu"], [322, 5, 1, "", "quantize"], [455, 3, 1, "", "relu"], [456, 3, 1, "", "relu6"], [457, 3, 1, "", "selu"], [458, 3, 1, "", "sigmoid"], [459, 3, 1, "", "silu"], [460, 3, 1, "", "softmax"], [461, 3, 1, "", "softmin"], [462, 3, 1, "", "softplus"], [463, 3, 1, "", "softshrink"], [464, 3, 1, "", "step"], [465, 3, 1, "", "tanh"], [323, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[376, 4, 1, "", "apply"], [377, 4, 1, "", "apply_to_modules"], [378, 4, 1, "", "children"], [379, 4, 1, "", "eval"], [380, 4, 1, "", "filter_and_map"], [381, 4, 1, "", "freeze"], [382, 4, 1, "", "leaf_modules"], [383, 4, 1, "", "load_weights"], [384, 4, 1, "", "modules"], [385, 4, 1, "", "named_modules"], [386, 4, 1, "", "parameters"], [387, 4, 1, "", "save_weights"], [388, 4, 1, "", "set_dtype"], [389, 6, 1, "", "state"], [390, 4, 1, "", "train"], [391, 4, 1, "", "trainable_parameters"], [392, 6, 1, "", "training"], [393, 4, 1, "", "unfreeze"], [394, 4, 1, "", "update"], [395, 4, 1, "", "update_modules"]], "mlx.nn.init": [[419, 5, 1, "", "constant"], [420, 5, 1, "", "glorot_normal"], [421, 5, 1, "", "glorot_uniform"], [422, 5, 1, "", "he_normal"], [423, 5, 1, "", "he_uniform"], [424, 5, 1, "", "identity"], [425, 5, 1, "", "normal"], [426, 5, 1, "", "uniform"]], "mlx.nn.losses": [[439, 3, 1, "", "binary_cross_entropy"], [440, 3, 1, "", "cosine_similarity_loss"], [441, 3, 1, "", "cross_entropy"], [442, 3, 1, "", "gaussian_nll_loss"], [443, 3, 1, "", "hinge_loss"], [444, 3, 1, "", "huber_loss"], [445, 3, 1, "", "kl_div_loss"], [446, 3, 1, "", "l1_loss"], [447, 3, 1, "", "log_cosh_loss"], [448, 3, 1, "", "margin_ranking_loss"], [449, 3, 1, "", "mse_loss"], [450, 3, 1, "", "nll_loss"], [451, 3, 1, "", "smooth_l1_loss"], [452, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[473, 3, 1, "", "AdaDelta"], [474, 3, 1, "", "Adafactor"], [475, 3, 1, "", "Adagrad"], [476, 3, 1, "", "Adam"], [477, 3, 1, "", "AdamW"], [478, 3, 1, "", "Adamax"], [479, 3, 1, "", "Lion"], [492, 3, 1, "", "Optimizer"], [484, 3, 1, "", "RMSprop"], [485, 3, 1, "", "SGD"], [324, 5, 1, "", "clip_grad_norm"], [486, 5, 1, "", "cosine_decay"], [487, 5, 1, "", "exponential_decay"], [488, 5, 1, "", "join_schedules"], [489, 5, 1, "", "linear_schedule"], [490, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[480, 4, 1, "", "apply_gradients"], [481, 4, 1, "", "init"], [482, 6, 1, "", "state"], [483, 4, 1, "", "update"]], "mlx.utils": [[325, 5, 1, "", "tree_flatten"], [326, 5, 1, "", "tree_map"], [327, 5, 1, "", "tree_map_with_path"], [328, 5, 1, "", "tree_reduce"], [329, 5, 1, "", "tree_unflatten"]]}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "terms": {"": [0, 1, 2, 5, 6, 7, 48, 52, 63, 96, 116, 118, 152, 153, 155, 156, 158, 159, 161, 162, 170, 191, 198, 202, 205, 218, 242, 248, 252, 271, 274, 275, 293, 295, 313, 314, 315, 317, 323, 340, 343, 344, 360, 366, 373, 374, 380, 381, 383, 387, 388, 389, 393, 401, 472, 481, 482, 494, 497, 499, 500, 504, 505, 506, 507], "0": [0, 1, 2, 4, 5, 6, 7, 9, 10, 15, 19, 39, 46, 47, 50, 67, 72, 76, 81, 84, 97, 100, 101, 102, 103, 104, 105, 106, 114, 119, 120, 145, 147, 150, 164, 168, 170, 176, 186, 193, 195, 196, 198, 199, 203, 220, 227, 229, 236, 243, 251, 255, 257, 258, 263, 267, 271, 284, 285, 288, 292, 293, 307, 309, 310, 311, 312, 313, 314, 317, 321, 324, 325, 327, 328, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 361, 362, 365, 367, 368, 372, 373, 374, 397, 402, 404, 409, 413, 415, 417, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 433, 434, 435, 436, 439, 441, 443, 444, 448, 451, 452, 454, 455, 456, 457, 463, 464, 467, 470, 473, 474, 476, 477, 478, 479, 481, 484, 485, 486, 487, 488, 489, 490, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506], "00005": 5, "0001": 409, "0005": 430, "001": 474, "00364": 5, "01": [5, 368, 436, 477], "0137595": 422, "015": 431, "0184009": 423, "02264": 421, "024": 500, "02765": 422, "0300242": 423, "044715": [358, 430], "0485873": 441, "05": [17, 178, 345, 361, 365, 367, 400], "0507": 457, "05202": 6, "06": [442, 452, 473], "0638": 448, "06450": 367, "0645099": 425, "06561": 487, "06675": 479, "07467": 400, "08": [17, 178, 440, 475, 476, 477, 478, 484], "08022": 365, "081": 490, "08415": 431, "08494": 361, "08619": 423, "08681": [375, 453], "09864": 6, "0999938": 488, "0999961": 486, "0f": 0, "1": [0, 1, 2, 3, 4, 6, 7, 15, 19, 29, 30, 39, 47, 50, 100, 101, 102, 103, 104, 105, 106, 114, 119, 120, 141, 142, 143, 144, 147, 150, 151, 152, 154, 155, 157, 158, 159, 160, 161, 162, 164, 173, 177, 184, 186, 191, 192, 193, 194, 196, 198, 199, 215, 219, 228, 242, 244, 248, 252, 255, 256, 257, 263, 280, 284, 285, 287, 300, 306, 307, 312, 313, 324, 327, 328, 332, 340, 342, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 359, 360, 361, 365, 366, 367, 369, 372, 397, 400, 401, 404, 408, 409, 415, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 447, 448, 450, 451, 452, 457, 458, 460, 461, 462, 464, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 486, 487, 488, 489, 490, 497, 498, 499, 500, 501, 502, 504, 505, 506, 507], "10": [0, 3, 6, 7, 186, 207, 271, 276, 326, 340, 383, 467, 488, 490, 497, 498, 501], "100": [2, 5, 6, 439, 489, 497, 500, 503, 507], "1000": [2, 486, 497], "10000": 404, "101": 489, "1024": [1, 6], "105361": 439, "10_000": 5, "10x": 479, "11": 198, "12": [6, 173, 186, 488], "1212": 473, "123": [498, 502], "12451": 421, "128": [276, 340], "13": 9, "14": [9, 186], "15": [1, 9, 186, 198, 229, 328, 497], "150594": 420, "15268": 422, "16": [1, 147, 332, 342, 344, 365, 372, 374, 376, 470], "1606": 431, "1607": [365, 367], "16384": 173, "16506": 423, "168": 498, "17": [4, 9], "177208": 422, "18": 186, "1803": 361, "1908": [375, 453], "1910": 400, "191107": 420, "192": 498, "1985": 198, "1_000": 5, "1d": [0, 100, 104, 107, 274, 301], "1e": [0, 5, 7, 17, 178, 345, 361, 365, 367, 368, 400, 440, 442, 452, 472, 473, 474, 475, 476, 477, 478, 481, 484, 486, 487, 488, 489, 490], "1e3": 497, "1st": 248, "2": [0, 1, 2, 4, 5, 6, 7, 39, 101, 105, 114, 119, 120, 136, 142, 143, 144, 152, 155, 157, 158, 159, 160, 161, 162, 164, 173, 184, 186, 190, 191, 192, 193, 194, 195, 196, 198, 199, 202, 203, 209, 215, 248, 256, 261, 284, 285, 304, 307, 309, 310, 311, 312, 324, 328, 332, 340, 342, 343, 344, 348, 351, 358, 368, 372, 373, 374, 400, 409, 418, 419, 420, 421, 422, 423, 424, 425, 426, 430, 441, 442, 444, 451, 452, 467, 470, 472, 473, 475, 476, 477, 481, 484, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507], "20": [173, 186, 198], "200": [6, 488, 500], "2002": 6, "2011": 475, "2012": [473, 484], "2015": [354, 476, 478], "2019": [6, 477], "2020": 6, "2021": 6, "20397": 439, "20_000": 6, "21": [6, 186, 490], "2104": 6, "223144": 439, "223404": 421, "225": 198, "225763": 448, "2302": 479, "23607": [198, 199], "24": 186, "24264": 198, "247": 6, "25": [9, 397, 418], "25211": 422, "256": [1, 7, 147], "256995": 448, "27": 4, "28": [173, 186], "2d": [0, 101, 105, 120, 248, 345, 354], "2nd": 248, "2x": 504, "3": [0, 1, 2, 4, 6, 9, 102, 106, 114, 142, 144, 164, 184, 186, 192, 193, 194, 198, 199, 284, 285, 312, 324, 328, 344, 349, 352, 358, 374, 418, 421, 423, 430, 435, 474, 479, 494, 497, 498, 499, 501, 504, 505], "30": 474, "3118": 504, "32": [1, 6, 7, 92, 248, 249, 332, 343, 344, 373, 374, 400, 497], "32mib": 321, "330": 6, "33333": 418, "33554432": 321, "348587": 441, "363207": 420, "36788": 497, "379159": 421, "380709": 425, "39": 6, "3d": [0, 2, 102, 106, 345, 355, 418], "3f": [2, 7, 497], "3x": 2, "4": [0, 1, 2, 6, 118, 147, 150, 164, 169, 186, 198, 248, 249, 276, 284, 312, 322, 328, 332, 342, 343, 344, 345, 365, 372, 373, 374, 398, 399, 417, 418, 420, 421, 422, 439, 497, 498, 499, 501, 505, 507], "4096": [2, 497, 500, 507], "40x": 1, "41421": 198, "417497": 426, "42": 329, "437": 6, "44": 6, "447214": 199, "458835": 422, "475": 6, "48095": 420, "4d": [1, 418], "4m": 1, "5": [0, 1, 2, 5, 6, 9, 186, 198, 228, 251, 284, 328, 342, 345, 353, 354, 355, 358, 362, 365, 372, 413, 418, 419, 422, 423, 430, 433, 451, 463, 467, 472, 484, 486, 487, 497, 500, 501], "50": [0, 204], "500": [6, 507], "510826": 439, "512": [3, 6, 417, 507], "534422": 425, "539245": 439, "53947": 420, "55": 1, "559": 2, "5701": 473, "573409": 448, "57771": 199, "579": 6, "5f": 5, "6": [1, 2, 6, 114, 186, 198, 276, 284, 403, 417, 421, 430, 431, 435, 442, 452, 456, 484, 497, 501, 505], "61278": 420, "617261": 426, "628": 6, "633": 6, "639": 500, "64": [0, 1, 92, 118, 169, 248, 249, 322, 332, 398, 399], "64331": 423, "666329": 423, "66667": 418, "67326": 457, "676": 1, "690": 6, "6967": 422, "7": [2, 6, 186, 198, 248, 501], "702": [358, 431], "707107": 193, "71828": 497, "74166": 198, "74597": 198, "75": 418, "75596": 448, "75787": 422, "765166": 448, "773433": 448, "774": 2, "776856": 421, "793615": 423, "79854": 423, "7b": 6, "7m": 1, "8": [0, 1, 2, 6, 9, 198, 248, 332, 343, 344, 365, 373, 374, 417, 440, 473, 474, 475, 476, 477, 478, 484, 497, 501, 505, 507], "8192": [6, 173], "84804": 198, "863726": 426, "883935": 426, "890597": 421, "894427": 199, "89613": 420, "8gb": 6, "8x": 1, "9": [4, 9, 198, 441, 473, 476, 477, 478, 479, 481, 487, 490, 504], "90041": 421, "912766": 421, "916291": 439, "95": 7, "982273": 425, "99": [479, 484], "995016": 420, "999": [476, 477, 478], "A": [0, 2, 6, 8, 9, 10, 69, 83, 96, 142, 143, 146, 147, 148, 150, 170, 184, 185, 191, 193, 194, 196, 198, 199, 202, 205, 214, 215, 216, 221, 232, 248, 251, 252, 253, 255, 256, 257, 258, 259, 262, 263, 288, 292, 295, 313, 316, 317, 322, 323, 324, 325, 326, 327, 328, 329, 330, 340, 345, 354, 360, 361, 365, 367, 380, 384, 385, 388, 394, 395, 400, 406, 409, 417, 420, 421, 423, 431, 452, 453, 470, 472, 476, 478, 480, 481, 483, 488, 497, 498, 499, 500, 502, 503, 504], "AS": 168, "And": [4, 6, 418], "As": [7, 39, 300, 340, 498], "At": [95, 312, 498], "But": [499, 507], "By": [6, 322, 388, 439, 498, 500, 504], "For": [0, 1, 2, 4, 6, 9, 39, 114, 150, 168, 184, 198, 248, 329, 340, 345, 354, 358, 376, 381, 390, 393, 399, 404, 409, 418, 420, 421, 422, 423, 439, 467, 472, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507], "If": [0, 1, 2, 4, 6, 9, 16, 17, 18, 19, 27, 28, 29, 30, 79, 83, 84, 95, 97, 107, 110, 111, 112, 113, 119, 120, 123, 124, 125, 127, 128, 129, 138, 146, 148, 149, 150, 160, 161, 162, 166, 167, 170, 178, 190, 191, 192, 198, 202, 205, 214, 215, 216, 218, 219, 227, 228, 232, 236, 240, 243, 244, 246, 247, 252, 256, 258, 267, 270, 286, 287, 288, 293, 297, 299, 300, 301, 304, 306, 307, 313, 314, 317, 319, 321, 322, 326, 328, 345, 347, 348, 349, 350, 351, 352, 361, 367, 369, 381, 383, 393, 399, 401, 404, 406, 409, 418, 439, 441, 452, 474, 476, 477, 497, 498, 499, 500, 502, 503, 506, 507, 508], "In": [0, 1, 2, 6, 7, 39, 150, 215, 248, 326, 340, 354, 361, 470, 473, 475, 476, 478, 479, 480, 496, 497, 498, 499, 500, 502, 503, 506, 507], "It": [2, 6, 9, 128, 170, 279, 313, 324, 328, 340, 395, 399, 480, 492, 498, 502, 504, 506], "Its": [340, 499], "No": [2, 6, 193, 194, 498], "Not": [96, 239, 497], "ON": [3, 4, 9], "Of": 500, "On": [1, 497, 500, 503], "One": [151, 154, 160, 243, 272, 497, 499, 500, 502], "THE": 9, "That": 6, "The": [0, 1, 2, 3, 4, 6, 7, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 48, 52, 62, 63, 69, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 223, 224, 227, 228, 229, 230, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 274, 275, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 334, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 357, 359, 360, 361, 365, 366, 367, 369, 372, 373, 374, 376, 377, 381, 383, 387, 388, 389, 390, 393, 394, 395, 396, 398, 399, 400, 401, 404, 406, 409, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 464, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 482, 484, 485, 486, 489, 492, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508], "Then": [5, 9], "There": [1, 340, 418, 497], "These": [1, 2, 96, 247, 301, 441, 507], "To": [0, 2, 3, 5, 6, 7, 9, 196, 227, 340, 467, 472, 497, 498, 499, 500, 505], "With": 499, "_": [1, 3, 5, 6, 327, 340, 486, 487, 488, 489, 490, 494, 497, 503, 507], "__call__": [1, 6, 7, 340, 470, 499], "__init__": [2, 6, 7, 10, 11, 12, 31, 114, 122, 163, 330, 340, 470], "__main__": [2, 6], "__name__": [2, 6], "_a": 2, "_ext": 2, "_f": 198, "_in": [420, 421], "_out": [420, 421], "_p": 452, "_val": 434, "a1": 168, "a2": 168, "a_": 198, "a_max": [0, 95], "a_min": [0, 95], "a_ndim": 1, "a_shap": 1, "a_strid": 1, "a_view": 504, "ab": [0, 17, 178, 198, 313, 361, 365, 367, 375, 400, 431, 453, 497, 499], "abil": 498, "abl": [2, 4, 248, 502], "abort": 114, "about": [1, 2, 6, 7, 133, 221, 503, 507], "abov": [1, 2, 6, 248, 310, 340, 418, 498, 499, 500, 501, 502, 503, 507], "absolut": [0, 13, 17, 178, 430, 431, 451, 498], "acc": 328, "acceler": [4, 345], "accept": [498, 502], "access": [0, 6, 51, 340, 470, 481, 498, 503, 507], "accord": [0, 253, 318, 322, 396, 420, 421, 422, 423], "accordingli": 2, "accumul": [328, 400], "accuraci": 7, "accustom": 6, "achiev": [340, 498], "across": [1, 2, 9, 321, 361, 498], "act": [2, 447], "action": 340, "activ": [2, 9, 222, 354, 415, 417, 433, 453, 463, 464, 466, 497], "actual": [6, 19, 383, 470, 503], "ad": [0, 1, 2, 5, 9, 146, 327, 365, 470, 473, 474, 475, 476, 477, 478, 484, 498, 503, 506], "adadelta": 472, "adafactor": 472, "adagrad": 472, "adam": [472, 478, 479, 488, 489], "adamax": 472, "adamw": [472, 479], "adapt": [473, 474, 475, 498], "add": [0, 1, 2, 3, 4, 6, 15, 39, 140, 210, 243, 248, 347, 348, 349, 350, 351, 352, 499, 500, 502, 507], "add_argu": 6, "add_depend": 2, "add_execut": 4, "add_fun": 499, "add_librari": 2, "addit": [0, 2, 4, 6, 9, 14, 15, 142, 146, 148, 150, 205, 345, 361, 367, 396, 400, 470, 500], "addmm": 0, "address": 2, "adjac": 354, "advanc": [6, 497], "advantag": 507, "advis": 504, "affin": [345, 361, 365, 367, 369, 399], "after": [2, 6, 7, 29, 164, 166, 169, 220, 244, 248, 345, 361, 367, 376, 377, 381, 383, 390, 393, 394, 395, 396, 417, 451, 497, 498, 507], "after_1": 243, "after_2": 243, "after_i": 243, "after_n": 243, "afternoon": 6, "again": [6, 9, 340, 497], "against": [0, 4], "aggreg": [396, 498], "ago": 6, "ai": 114, "aim": 498, "ainv": [195, 203], "albeit": 507, "algebra": 8, "algorithm": [418, 479], "alia": [98, 99, 358], "alibi": 340, "align": [191, 248, 360, 366], "align_corn": 418, "all": [0, 1, 2, 3, 7, 9, 17, 29, 39, 85, 86, 87, 96, 101, 102, 103, 105, 106, 114, 123, 124, 125, 143, 145, 153, 156, 159, 162, 168, 169, 202, 215, 243, 244, 270, 291, 321, 322, 340, 376, 377, 381, 384, 385, 386, 391, 393, 396, 409, 417, 418, 467, 470, 492, 494, 497, 501, 502, 503, 505, 508], "all_avg": 498, "all_reduce_grad": 498, "all_reduce_s": 321, "all_sum": 498, "allclos": [0, 1, 147], "alloc": [2, 223, 227, 228, 470], "allow": [0, 1, 2, 142, 144, 184, 324, 340, 395, 470, 492, 498, 501, 502, 505], "allow_col_major": 0, "almost": [6, 498], "alon": [2, 504], "along": [0, 2, 27, 28, 96, 97, 110, 111, 112, 113, 123, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 168, 169, 173, 192, 198, 247, 258, 267, 270, 286, 288, 292, 300, 301, 304, 305, 306, 307, 315, 340, 359, 401, 432], "alpha": [0, 2, 15, 248, 346, 356, 427, 428, 452, 454, 457, 477, 484], "alpha_": 2, "alreadi": [2, 3, 6, 498], "also": [0, 1, 2, 4, 6, 7, 8, 9, 12, 14, 88, 90, 91, 121, 130, 131, 135, 153, 156, 159, 162, 171, 172, 187, 188, 189, 210, 217, 233, 235, 239, 245, 248, 266, 269, 296, 322, 323, 334, 340, 380, 394, 396, 398, 399, 407, 429, 457, 459, 466, 472, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508], "altern": 494, "although": 498, "alwai": [1, 84, 176, 222, 325, 498, 499, 500], "am": 6, "among": 2, "amount": [6, 224, 342, 372, 499], "amus": 6, "an": [0, 1, 2, 3, 4, 6, 7, 9, 11, 16, 18, 31, 85, 86, 87, 93, 100, 101, 102, 103, 104, 105, 106, 122, 127, 128, 129, 138, 142, 144, 145, 146, 150, 164, 167, 174, 176, 179, 190, 198, 205, 228, 229, 234, 240, 241, 243, 246, 247, 248, 249, 258, 267, 268, 270, 271, 288, 291, 298, 300, 301, 304, 305, 309, 312, 317, 319, 320, 325, 326, 327, 328, 332, 340, 353, 358, 361, 366, 367, 369, 376, 396, 397, 399, 401, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 430, 454, 467, 472, 473, 483, 487, 492, 494, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508], "anaconda": 498, "anchor": 452, "angl": [117, 250, 368], "angular": [149, 404], "ani": [0, 1, 2, 6, 8, 19, 96, 114, 125, 321, 325, 326, 327, 328, 329, 340, 358, 376, 377, 380, 389, 399, 417, 418, 467, 489, 496, 497, 498, 500, 503, 505, 506, 507], "anonym": 497, "anoth": [0, 95, 184, 215, 296, 318, 332, 340, 376, 497, 499, 500, 501, 507], "anwywher": 9, "anyhow": 6, "anymor": 6, "anyth": [6, 313, 498, 503], "anytim": 503, "api": [1, 2, 142, 144, 176, 358, 498, 499, 500], "app": 9, "append": [6, 215, 497, 503], "appl": [2, 6, 8, 9, 507], "appli": [0, 39, 149, 150, 168, 202, 326, 327, 328, 340, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 358, 359, 361, 362, 363, 364, 365, 367, 368, 369, 370, 371, 372, 373, 374, 375, 377, 390, 397, 399, 400, 401, 402, 403, 405, 407, 408, 410, 411, 412, 413, 414, 415, 416, 418, 427, 428, 429, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 476, 477, 480, 483, 489, 492, 497, 498], "applic": [3, 9], "apply_fn": 377, "apply_gradi": 472, "apply_to_modul": [340, 381], "approach": [447, 500], "appropri": 497, "approx": 358, "approxim": [17, 358, 429, 430, 431], "ar": [0, 1, 2, 5, 6, 7, 8, 9, 17, 19, 83, 92, 93, 95, 96, 103, 107, 114, 120, 125, 127, 128, 138, 145, 147, 150, 152, 153, 155, 156, 158, 159, 161, 162, 164, 169, 170, 178, 179, 180, 181, 182, 183, 184, 185, 193, 194, 196, 198, 199, 205, 215, 228, 242, 243, 244, 248, 249, 251, 252, 253, 258, 259, 262, 263, 270, 276, 277, 291, 292, 300, 313, 316, 317, 322, 325, 326, 332, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 361, 365, 367, 369, 383, 396, 399, 418, 439, 441, 442, 466, 470, 472, 479, 481, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507], "arang": [0, 1, 198, 258, 332, 418, 501, 504], "arbitrari": [325, 470, 498], "arbitrarili": [1, 96, 340, 496, 500, 505], "arc": 0, "arcco": 0, "arccosh": 0, "architectur": [6, 9, 221, 340, 395, 507], "archiv": 506, "arcsin": 0, "arcsinh": 0, "arctan": 0, "arctan2": 0, "arctanh": 0, "arg": [2, 6, 11, 19, 122, 138, 142, 143, 144, 163, 176, 276, 277, 330, 502], "arg1": 184, "arg2": 184, "argmax": [0, 7], "argmin": 0, "argnam": [170, 313], "argnum": [2, 114, 170, 313, 500], "argpars": 6, "argpartit": 0, "argsort": 0, "argument": [1, 32, 66, 80, 96, 138, 170, 313, 326, 327, 328, 340, 418, 494, 498, 499, 500, 502, 506, 507, 508], "argumentpars": 6, "ari": [85, 86, 87], "aris": 504, "arm": 9, "arm64": 9, "around": 6, "arr": [0, 273, 501], "arr_0": 506, "arrai": [0, 1, 2, 4, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 123, 124, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 332, 340, 345, 366, 376, 383, 386, 391, 397, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 464, 467, 470, 473, 474, 475, 476, 477, 478, 479, 484, 485, 486, 487, 488, 489, 490, 497, 498, 499, 500, 503, 504, 505, 507], "array_equ": [0, 17, 178], "arrayfir": 8, "arxiv": [6, 361, 365, 367, 375, 400, 431, 453, 473, 479], "as_strid": 0, "ascend": [193, 194], "ask": [6, 498, 502], "assert": [1, 2, 147], "assign": [0, 2, 39, 470, 498], "associ": [2, 276, 277, 503], "assum": [0, 6, 92, 192, 193, 194, 199, 326, 340, 361, 498], "astyp": [0, 1, 2, 6, 147, 376, 504], "atleast": 0, "atleast_1d": 0, "atleast_2d": 0, "atleast_3d": 0, "atol": [0, 17, 178], "atom": [1, 147], "atomic_fetch_add_explicit": 1, "atomic_output": [1, 147], "attach": 2, "attempt": [96, 498], "attend": 396, "attent": [150, 381, 396, 409, 417], "attention_norm": 6, "attribut": [1, 10, 11, 12, 31, 163, 330, 389, 470, 492], "audio": 418, "auto": [0, 2, 4, 9, 498, 499], "autom": 500, "automat": [1, 2, 8, 147, 205, 498, 505, 506, 507], "autoregress": 6, "avail": [2, 5, 6, 7, 9, 11, 125, 126, 225, 334, 498, 502, 507], "averag": [321, 342, 343, 344, 473, 474, 476, 477, 478, 498], "avgpool1d": 340, "avgpool2d": 340, "avgpool3d": 340, "avoid": [1, 2, 388, 497, 498], "awai": [2, 6], "awar": [497, 503], "ax": [0, 2, 16, 18, 27, 28, 80, 114, 140, 152, 153, 155, 156, 158, 159, 161, 162, 164, 177, 198, 200, 201, 214, 216, 218, 232, 243, 246, 270, 284, 285, 286, 291, 293, 297, 298, 304, 308, 314, 500], "axes_a": 0, "axes_b": 0, "axi": [0, 2, 6, 7, 16, 18, 27, 28, 29, 30, 34, 35, 36, 37, 42, 43, 44, 45, 57, 58, 59, 60, 64, 72, 75, 76, 77, 81, 97, 110, 111, 112, 113, 120, 123, 140, 146, 148, 151, 154, 157, 158, 159, 160, 161, 162, 164, 173, 192, 196, 198, 214, 216, 218, 232, 234, 243, 244, 246, 247, 252, 258, 267, 270, 286, 287, 288, 291, 292, 293, 297, 298, 300, 301, 305, 306, 307, 308, 312, 314, 315, 317, 342, 343, 344, 359, 372, 373, 374, 401, 432, 438, 440, 441, 445, 450, 452, 460, 461, 501], "axis1": [0, 47, 78, 120, 298, 307], "axis2": [0, 47, 78, 120, 298, 307], "axpbi": 2, "axpby_": 2, "axpby_gener": 2, "axpby_general_bfloat16": 2, "axpby_general_complex64": 2, "axpby_general_float16": 2, "axpby_general_float32": 2, "axpby_impl": 2, "b": [0, 1, 2, 3, 4, 6, 14, 15, 17, 25, 83, 88, 90, 91, 92, 130, 131, 135, 147, 150, 166, 168, 171, 172, 176, 177, 178, 186, 187, 188, 189, 192, 198, 200, 201, 210, 211, 213, 215, 217, 233, 235, 239, 242, 245, 248, 255, 266, 269, 296, 304, 313, 327, 328, 359, 369, 401, 418, 432, 500, 501, 503, 504, 505, 506, 507], "b1": 168, "b2": 168, "b_": [360, 366], "b_stride": 1, "ba": [476, 478], "back": [6, 114, 225, 504], "backend": [1, 9, 125, 126, 502], "backward": [1, 497, 500], "bad": 503, "balanc": 447, "baltimor": 198, "bandwidth": [497, 498], "base": [0, 2, 4, 149, 207, 209, 245, 404, 417, 470, 472, 478, 492, 494, 497, 501], "base_idx": 1, "basi": 492, "basic": [5, 271, 500], "batch": [6, 15, 92, 150, 168, 169, 215, 256, 345, 347, 348, 349, 350, 351, 352, 354, 355, 360, 366, 396, 401, 418, 503], "batch_idx": 1, "batch_iter": [7, 472], "batch_siz": [7, 472], "batchnorm": 340, "becaus": [6, 222, 340, 497, 498, 499, 503], "becom": 125, "been": [0, 2, 6, 223, 503], "befor": [1, 2, 6, 9, 29, 147, 244, 321, 380, 417, 481, 498, 501, 503], "before_1": 243, "before_2": 243, "before_i": 243, "before_n": 243, "beforehand": 242, "beggin": 270, "begin": [84, 191, 224, 248, 360, 366, 415, 433, 444, 451, 457, 463, 464, 498], "behav": 114, "behavior": [196, 256, 447, 501, 503], "behaviour": [114, 190, 191], "behind": 500, "being": [294, 340], "bell": 2, "below": [2, 9, 198, 309, 311, 332, 418, 498, 503], "bench": 2, "benchmark": [2, 497], "benefici": [354, 355, 503], "benefit": 498, "best": 498, "beta": [0, 2, 15, 118, 248, 345, 361, 365, 367, 451, 472, 476, 477, 478, 479], "beta_": 2, "beta_1": [474, 476, 477, 478, 479], "beta_2": [476, 477, 478, 479], "better": [321, 500, 507], "between": [0, 2, 8, 95, 164, 417, 440, 443, 444, 447, 488, 498, 502, 503, 504, 507], "beyond": [270, 486, 489], "bfloat16": [2, 12, 173, 332, 504], "bfloat16_t": 2, "bia": [6, 118, 146, 169, 248, 249, 326, 340, 347, 348, 349, 350, 351, 352, 360, 366, 367, 369, 381, 383, 393, 396, 399, 401, 476, 477, 478, 481, 500], "bias": [0, 118, 169, 248, 249, 360, 366, 381, 393, 396], "bias_correct": [476, 477], "bicub": 418, "big": [1, 321, 497], "bigger": [6, 474], "bilinear": [1, 418], "binari": [205, 273, 274, 275, 276, 277, 315, 415, 439, 464, 497, 502], "binary_cross_entropi": [340, 497], "bind": 502, "bit": [0, 118, 169, 187, 248, 249, 269, 322, 332, 376, 398, 399, 400], "bitwis": [0, 88, 89, 90, 91, 187, 269], "bitwise_and": 0, "bitwise_invert": 0, "bitwise_or": 0, "bitwise_xor": 0, "block": [0, 2, 6, 92, 417], "block_masked_mm": 0, "block_siz": [0, 92], "bn": 345, "bodi": [1, 147], "bool": [0, 1, 2, 16, 17, 18, 27, 28, 34, 35, 36, 37, 42, 43, 44, 45, 57, 58, 59, 60, 64, 76, 77, 79, 81, 83, 96, 103, 110, 111, 112, 113, 125, 126, 142, 144, 147, 149, 169, 178, 184, 190, 191, 198, 201, 202, 203, 205, 214, 216, 218, 219, 225, 228, 232, 246, 249, 293, 297, 314, 322, 345, 347, 348, 349, 350, 351, 352, 360, 361, 365, 366, 367, 369, 376, 380, 381, 383, 388, 390, 393, 396, 399, 401, 404, 409, 417, 418, 439, 442, 474, 476, 477, 485], "bool_": [12, 332], "boolean": [0, 17, 83, 150, 178, 179, 180, 181, 182, 183, 184, 211, 212, 213, 332, 392, 501], "both": [1, 2, 14, 88, 90, 91, 130, 131, 135, 171, 172, 184, 187, 188, 189, 198, 210, 217, 233, 235, 239, 245, 252, 266, 269, 296, 322, 342, 343, 344, 365, 366, 372, 373, 374, 472, 497, 498, 499, 500, 505, 507], "bottom": 418, "bound": [0, 259, 262, 263, 358, 426, 497, 501, 507], "boundari": 488, "bracket": 6, "brain": 332, "break": 504, "bregler": 354, "bridg": 498, "broadcast": [0, 2, 14, 17, 88, 90, 91, 93, 95, 130, 131, 135, 150, 167, 171, 172, 178, 187, 188, 189, 210, 215, 217, 233, 235, 239, 245, 247, 251, 252, 256, 259, 262, 263, 266, 269, 296, 301, 318, 396], "broadcast_arrai": [0, 2], "broadcast_to": 0, "broadcasted_input": 2, "brought": 8, "btl_tcp_if_includ": [498, 502], "btl_tcp_link": [498, 502], "buffer": [1, 2, 222, 504], "bui": 6, "build": [3, 4, 6, 8, 422, 470, 497, 499], "build_ext": [2, 9], "build_shared_lib": [2, 9], "built": [1, 2, 4, 9, 503], "bundl": 6, "byte": [52, 62, 222, 223, 224, 227, 228, 229, 321, 332, 502], "c": [0, 1, 2, 6, 15, 198, 345, 347, 348, 349, 350, 351, 352, 354, 355, 365, 366, 504, 505, 507], "c_": [366, 479], "c_in": [100, 101, 102, 103, 104, 105, 106], "c_out": [100, 101, 102, 103, 104, 105, 106], "c_pad": 1, "c_t": [366, 479], "cabl": 498, "cach": [6, 9, 220, 222, 223, 227, 497], "calcul": [198, 439, 442, 448, 474], "call": [2, 3, 6, 7, 32, 125, 128, 166, 176, 220, 224, 321, 340, 357, 381, 393, 398, 406, 470, 472, 481, 497, 498, 499, 500, 502, 503], "callabl": [96, 114, 142, 144, 147, 170, 176, 185, 313, 316, 317, 322, 323, 325, 326, 327, 328, 376, 377, 380, 388, 401, 406, 417, 419, 420, 421, 422, 423, 424, 425, 426, 473, 474, 475, 476, 477, 478, 479, 484, 485, 486, 487, 488, 489, 490], "can": [1, 2, 3, 4, 6, 8, 9, 14, 19, 66, 80, 84, 88, 90, 91, 96, 120, 121, 122, 130, 131, 135, 138, 142, 143, 150, 171, 172, 176, 187, 188, 189, 198, 210, 217, 229, 233, 235, 239, 245, 251, 252, 259, 262, 263, 266, 269, 274, 296, 307, 312, 313, 328, 340, 343, 344, 357, 358, 373, 374, 380, 393, 398, 406, 418, 441, 467, 470, 472, 480, 481, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508], "cannot": [6, 95, 501, 504], "captur": [2, 3, 96, 114, 230, 231, 340, 497], "care": [6, 498, 499, 502, 503], "carefulli": [497, 499], "carri": 2, "cartesian": 219, "case": [2, 6, 123, 124, 125, 127, 128, 129, 153, 156, 157, 159, 160, 161, 162, 164, 190, 191, 192, 193, 194, 195, 196, 197, 199, 200, 201, 202, 203, 215, 268, 291, 312, 343, 344, 354, 373, 374, 415, 433, 451, 457, 463, 464, 480, 481, 497, 498, 499, 500, 502, 505, 506, 507, 508], "cast": [2, 38, 160, 161, 162, 205, 321, 376, 388, 504], "caster": 2, "categor": 6, "categori": [12, 184, 332], "caus": [340, 497, 503], "causal": [6, 150], "caution": 84, "cd": [3, 9], "cdf": [253, 358, 429], "cdot": [431, 440, 443, 459], "ceil": 0, "ceildiv": 1, "cell": 366, "celu": 340, "certain": [390, 497], "chang": [84, 96, 142, 144, 176, 279, 315, 394, 399, 418, 444, 451, 497, 504], "channel": [1, 100, 101, 102, 103, 104, 105, 106, 345, 347, 348, 349, 350, 351, 352, 354, 355], "channel_idx": 1, "charact": 325, "check": [0, 2, 9, 83, 126, 184, 193, 194, 225, 383, 498, 499, 500, 501], "checklist": [498, 502], "checkout": [3, 497], "checkpoint": [417, 472], "chen": 479, "child": 395, "children": 340, "chip": 9, "choleski": 191, "choos": [6, 149, 404, 502], "chosen": 133, "clamp": 164, "clang": 9, "clarifi": 498, "clariti": 500, "class": [2, 6, 7, 10, 11, 12, 31, 114, 122, 163, 330, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 473, 474, 475, 476, 477, 478, 479, 484, 485, 492], "class_pred": 322, "classif": [422, 423], "classifi": 7, "classmethod": [398, 399], "clear": 220, "click": 9, "clip": [0, 324, 439, 474], "clip_threshold": 474, "clipped_grad": 324, "clone": 9, "close": [5, 8, 9, 17, 178], "closer": 326, "cmake": [3, 4, 9], "cmake_arg": 3, "cmake_build_parallel_level": 9, "cmake_build_typ": 9, "cmake_current_list_dir": 2, "cmake_cxx_standard": 4, "cmake_cxx_standard_requir": 4, "cmake_host_system_processor": 9, "cmake_library_output_directori": 2, "cmake_minimum_requir": 4, "cmakebuild": 2, "cmakeextens": 2, "cmakelist": [2, 4], "cmdclass": 2, "co": [0, 2, 114, 409, 500], "code": [1, 147, 497, 498, 499, 503], "coeffici": [2, 473, 474, 476, 477, 478, 479], "col": 309, "cold": 9, "collect": [326, 327, 496], "column": [145, 174, 193, 248], "com": 9, "combin": [6, 202, 328], "come": [2, 6, 498, 500], "command": [2, 3, 4, 9, 498, 502], "command_buff": 2, "common": [472, 497, 503], "commonli": [7, 394, 467, 497], "commun": [8, 122, 125, 126, 321, 502], "communication_typ": 321, "compact": 197, "compar": [2, 83, 497], "comparison": [17, 135, 171, 172, 188, 189, 239], "compat": [6, 142, 144, 150, 176, 252, 256, 358, 506], "compil": [0, 3, 4, 8, 9, 121, 134, 147, 498, 499, 500, 503], "compiled_fun": [497, 499], "compiled_grad_fn": 497, "complement": 89, "complet": [5, 6, 9, 228, 394, 395, 499, 500, 507], "complex": [2, 98, 99, 158, 159, 160, 161, 162, 175, 193, 194, 264, 325, 332, 340, 395, 497, 499, 500], "complex64": [2, 12, 332], "complex64_t": 2, "complexflo": 12, "compon": [2, 4, 6, 202], "compos": [8, 340, 497, 500, 505], "composit": 505, "compress": 277, "compromis": 6, "comput": [0, 1, 2, 5, 6, 7, 8, 9, 110, 111, 112, 113, 114, 118, 133, 141, 149, 170, 185, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 201, 203, 210, 218, 242, 248, 266, 286, 293, 294, 304, 313, 314, 316, 323, 340, 345, 360, 361, 365, 366, 367, 381, 394, 399, 400, 404, 417, 420, 421, 422, 423, 430, 431, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 472, 473, 474, 476, 477, 478, 479, 483, 497, 498, 499, 500, 505, 507], "computation": 503, "compute_encod": 2, "compute_uv": 202, "concaten": [0, 6, 123, 321], "concept": 470, "concis": 6, "concret": [2, 360, 366, 369, 401, 503, 507], "conda": [9, 498], "condit": [0, 318, 497, 507], "config": [2, 4, 498], "configu": 472, "configur": [118, 498], "confirm": [498, 502], "confus": 7, "conj": 99, "conjug": [0, 98], "connect": [498, 502], "consecut": [149, 248, 404], "consequ": 6, "consid": [6, 17, 83, 178, 325, 326, 327, 361, 496, 498], "consider": 497, "const": [0, 1, 2, 442], "constant": [0, 2, 6, 9, 114, 146, 148, 243, 340, 345, 361, 367, 400, 442, 452, 484, 486, 497, 499, 504], "constant_valu": 243, "constitut": 326, "construct": [0, 2, 7, 46, 119, 167, 196, 240, 305, 319], "consult": 498, "consum": 503, "contain": [2, 6, 9, 29, 30, 69, 96, 120, 133, 157, 158, 159, 168, 169, 193, 198, 211, 212, 213, 248, 288, 318, 321, 324, 340, 380, 382, 383, 389, 417, 448, 467, 470, 497, 500], "content": [9, 380, 497], "context": [295, 499], "contigu": [0, 1, 2, 84, 147], "continu": [346, 427, 498, 500], "contract": [0, 133], "contribut": 2, "contriv": [500, 507], "control": [0, 368, 494, 503], "conv": 107, "conv1d": [0, 340], "conv2d": [0, 340], "conv3d": [0, 340], "conv_gener": 0, "conv_transpose1d": 0, "conv_transpose2d": 0, "conv_transpose3d": 0, "conveni": [1, 2, 7, 184], "convent": [19, 107, 132, 133, 418], "convers": 8, "convert": [0, 1, 2, 79, 85, 86, 87, 117, 164, 250, 398, 399, 503, 504, 505], "convolut": [0, 100, 101, 102, 103, 104, 105, 106, 107, 347, 348, 349, 350, 351, 352, 354, 355], "convolv": [100, 101, 102, 103, 104, 105, 106], "convtranspose1d": 340, "convtranspose2d": 340, "convtranspose3d": 340, "coordin": [0, 219], "copi": [0, 1, 2, 6, 8, 244, 287, 504], "core": [1, 2, 3, 4, 5, 6, 7, 322, 340, 342, 343, 344, 345, 365, 372, 373, 374, 383, 386, 388, 391, 418, 419, 420, 421, 422, 423, 424, 425, 426, 439, 441, 448, 467, 470, 472, 497, 498, 504, 505], "corner": 418, "correct": [2, 9, 476, 477, 478, 501, 503], "correctli": [39, 498], "correl": [103, 354], "correspond": [0, 1, 2, 16, 18, 79, 95, 118, 120, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 193, 214, 216, 232, 246, 284, 285, 297, 304, 312, 317, 326, 498, 500, 502], "cos_first": 409, "cosh": [0, 447], "cosin": [0, 20, 21, 108, 109, 440, 486, 488, 500], "cosine_decai": [472, 488], "cosine_similarity_loss": 340, "cost": [9, 474, 498, 503], "costli": 503, "cot": 1, "cot_index": 1, "cotan": [2, 114], "cotang": [1, 2, 114, 316], "could": [6, 340], "count": [340, 488], "counter": 494, "cours": 500, "coursera": 484, "cout": [4, 499], "cov": 256, "covari": [256, 345], "cover": 2, "cpp": [2, 4], "cpu": [8, 9, 193, 194, 199, 332, 507], "cpython": 2, "crash": [84, 497], "creat": [0, 2, 6, 9, 84, 125, 145, 174, 295, 340, 470, 472, 488, 497, 498, 499, 501, 502, 504], "create_additive_causal_mask": 6, "cross": [7, 103, 439, 441], "cross_entropi": [7, 340], "crowd": 6, "cry": 6, "cubic": 418, "cummax": 0, "cummin": 0, "cumprod": 0, "cumsum": 0, "cumul": [0, 84, 110, 111, 112, 113], "current": [6, 8, 9, 84, 92, 102, 105, 106, 129, 221, 223, 248, 328, 340, 474, 498, 503], "custom": [8, 114, 147, 417], "custom_decod": 417, "custom_encod": 417, "custom_funct": 1, "custom_kernel_myexp_float": 1, "custom_tim": 2, "cvpr": 354, "cxx": 4, "cycl": 496, "d": [0, 1, 2, 6, 102, 106, 119, 120, 150, 177, 198, 215, 219, 242, 300, 307, 309, 310, 311, 329, 349, 352, 355, 360, 366, 401, 473, 476, 478, 507], "d1": 507, "d2": 507, "d2fdx2": 500, "d_i": 369, "dampen": 485, "darwin": 2, "data": [0, 2, 7, 8, 11, 19, 127, 145, 160, 161, 167, 174, 204, 236, 240, 253, 262, 307, 309, 315, 319, 355, 419, 420, 421, 422, 423, 424, 425, 426, 497, 498, 499, 501, 504], "dataset": [5, 498, 503], "datatyp": 52, "dbuild_shared_lib": 9, "dcmake_build_typ": [4, 9], "ddof": [0, 76, 81, 293, 314], "deal": 497, "debug": [1, 3, 498, 502], "debugg": 8, "decai": [474, 477, 479, 485, 486, 487, 490], "decay_r": [474, 487, 490], "decay_step": 486, "decent": 7, "decid": [326, 380], "decim": [0, 67, 271], "declar": 2, "decltyp": 1, "decod": 417, "decomposit": [190, 191, 202], "decor": [1, 114], "decoupl": 477, "dedic": 498, "deep": [345, 420, 421, 422, 423], "def": [1, 2, 5, 6, 7, 114, 142, 144, 147, 313, 340, 470, 497, 498, 499, 500, 501, 503, 504, 507], "default": [1, 2, 9, 15, 16, 17, 18, 19, 27, 28, 29, 30, 83, 84, 92, 96, 97, 100, 101, 102, 103, 104, 105, 106, 114, 115, 116, 118, 119, 120, 123, 124, 125, 127, 128, 129, 142, 144, 145, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 168, 169, 170, 173, 174, 178, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 214, 216, 218, 219, 227, 228, 229, 232, 236, 240, 243, 244, 246, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 267, 268, 271, 278, 279, 287, 288, 291, 292, 293, 295, 297, 299, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 319, 321, 322, 332, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 356, 359, 360, 362, 365, 366, 368, 369, 372, 373, 374, 376, 381, 383, 388, 390, 393, 396, 397, 398, 399, 401, 404, 409, 413, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 470, 473, 474, 475, 476, 477, 478, 479, 484, 485, 486, 494, 496, 497, 498, 499, 500, 502, 504, 506, 508], "default_devic": 508, "default_stream": 508, "defin": [1, 2, 5, 6, 7, 9, 114, 128, 147, 169, 192, 198, 249, 322, 325, 502, 504], "definit": [114, 190, 191, 256], "degre": [0, 250, 452], "delta": [444, 473], "delv": [422, 423], "demonstr": 504, "denomin": [365, 440, 473, 475, 476, 477, 478, 484], "dens": [219, 507], "depend": [0, 2, 3, 4, 5, 9, 79, 198, 360, 366, 401, 497, 498, 501, 506, 507], "depth": [325, 344, 349, 352, 355, 374, 500], "dequant": [0, 248], "deriv": [2, 499, 500, 503], "descend": 378, "descent": [485, 497, 503], "describ": [2, 503], "descript": [2, 4, 6, 332], "design": [1, 5, 8, 494, 507], "destin": [0, 2, 61, 129, 234, 247], "destroi": 497, "detach": 500, "detail": [1, 2, 11, 227, 340, 354, 404, 409, 418, 420, 421, 422, 423, 473, 475, 476, 478, 479, 498, 501, 505], "detect": 497, "determin": [0, 2, 120, 256, 328, 332, 387, 506], "dev": [2, 9], "develop": [2, 4, 9], "developer_dir": 9, "deviat": [0, 257, 293, 420, 422, 425], "deviatoin": 0, "devic": [1, 2, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 115, 116, 117, 118, 119, 120, 123, 124, 127, 128, 129, 130, 131, 132, 135, 136, 137, 139, 140, 141, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 318, 319, 320, 330, 507, 508], "device_info": 229, "devicetyp": 10, "df": 504, "dfdx": [499, 500, 501], "dft": [151, 152, 153, 154, 155, 156, 160, 161, 162], "dhwc": 355, "diag": [0, 202], "diagon": [0, 46, 119, 145, 307, 309, 310, 311], "dict": [96, 138, 143, 205, 221, 274, 275, 276, 322, 324, 386, 391, 394, 395, 470, 472, 480, 481, 483, 496, 499, 500, 506], "dict_kei": [326, 481], "dictionari": [6, 96, 142, 176, 205, 221, 274, 275, 324, 325, 328, 340, 380, 389, 394, 395, 482, 496, 506], "did": 6, "diff": 2, "differ": [8, 184, 296, 315, 451, 497, 498, 499, 500, 502], "differenti": [1, 8, 346, 427], "difficult": 500, "difficulti": [420, 421], "dilat": [0, 100, 101, 102, 103, 104, 105, 106, 347, 348, 349, 350, 351, 352], "dim": [1, 6, 149, 150, 357, 361, 365, 367, 396, 398, 400, 404, 409, 417], "dimens": [0, 1, 2, 6, 16, 18, 27, 28, 63, 69, 79, 85, 86, 87, 96, 101, 102, 103, 105, 106, 120, 140, 149, 150, 158, 159, 161, 162, 164, 168, 169, 177, 190, 191, 193, 194, 195, 196, 198, 199, 202, 203, 214, 215, 216, 218, 232, 246, 247, 248, 252, 261, 293, 297, 301, 304, 308, 314, 345, 347, 348, 349, 350, 351, 352, 354, 355, 359, 360, 361, 365, 366, 367, 396, 400, 401, 404, 417, 418, 432, 441, 497, 500], "dimension": [31, 146, 148, 151, 152, 153, 154, 155, 156, 160, 161, 162, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 357, 369, 372, 373, 374, 398, 399, 409, 501, 504], "dir": 4, "direct": [6, 378, 479, 507], "directli": [2, 6, 84], "directori": [2, 4, 6, 9], "disabl": [121, 227, 321, 497, 498], "disable_compil": 497, "disappoint": 6, "discard": [6, 325], "discov": [9, 498], "discoveri": 479, "discret": [107, 151, 152, 153, 154, 155, 156, 160, 161, 162, 357, 398], "discuss": 2, "disk": 6, "dispatch": 2, "dispatch_thread": 2, "dispatchthread": 1, "displai": 340, "distanc": [6, 452], "distribut": [8, 9, 251, 252, 253, 255, 256, 257, 262, 263, 321, 369, 420, 421, 422, 423, 425, 426, 442, 445, 450, 452, 467], "distributed_config": [498, 502], "diverg": 445, "divid": [0, 2, 39, 166, 248, 266, 498], "divis": [0, 130, 166, 248, 266], "divisor": [293, 314], "divmod": 0, "dloss_dw": 500, "dloss_dx": 500, "dlpack": 504, "dlvalu": 313, "dmlx_build_cpu": 9, "dmlx_build_gguf": 9, "dmlx_build_safetensor": 9, "dmlx_metal_debug": 3, "dmlx_metal_jit": 9, "do": [0, 2, 6, 9, 196, 315, 340, 382, 393, 467, 470, 497, 498, 499, 500, 503], "doc": [2, 7, 498, 502], "document": [2, 3, 4, 66, 80, 147, 274, 275, 332, 497, 498, 499, 500, 501], "doe": [0, 2, 3, 6, 9, 222, 315, 324, 340, 497, 498, 501, 502, 503, 504], "doesn": [2, 340, 499], "domain": 262, "don": [1, 9, 497, 507], "done": [340, 353, 400, 497, 498, 503, 504], "dot": [143, 195, 203, 304, 325, 385, 396, 498], "doubl": [0, 6, 332], "doubt": 6, "down": [6, 324], "downsampl": [342, 343, 344, 372, 373, 374], "dparam": 313, "draw": 252, "drop": 380, "dropout": [340, 354, 355, 390, 417, 497], "dropout2d": 340, "dropout3d": 340, "dst": 129, "dt": 136, "dtype": [0, 1, 2, 6, 12, 19, 31, 38, 39, 79, 82, 127, 128, 145, 147, 163, 164, 167, 174, 184, 186, 193, 194, 198, 199, 204, 240, 253, 255, 256, 257, 259, 262, 263, 284, 285, 307, 309, 312, 315, 319, 321, 332, 388, 418, 419, 420, 421, 422, 423, 424, 425, 426, 439, 441, 448, 486, 487, 488, 489, 490, 497, 498, 499, 500, 501, 504, 505, 506], "dtypecategori": [184, 332], "dual": 447, "duchi": 475, "duplic": 499, "dure": [3, 96, 353, 354, 355, 418, 504], "dx": 114, "dy": 114, "dyld": 498, "dyld_library_path": 498, "dylib": 2, "dynam": [0, 499, 503], "e": [2, 7, 9, 114, 136, 147, 168, 169, 185, 280, 345, 347, 348, 349, 350, 351, 352, 354, 355, 361, 365, 367, 381, 400, 437, 438, 460, 461, 466, 472, 475, 497, 499, 503, 508], "e5": 332, "e8": 332, "each": [0, 1, 2, 69, 118, 138, 149, 169, 184, 190, 191, 193, 194, 195, 202, 203, 215, 219, 243, 248, 249, 252, 267, 276, 277, 288, 305, 308, 315, 317, 318, 354, 355, 357, 360, 361, 366, 401, 404, 417, 439, 441, 494, 497, 498, 499, 502, 503], "eager": 503, "earli": 354, "eas": 6, "easi": [2, 340], "easier": [1, 143, 503], "easiest": 498, "edg": [95, 243, 418, 497], "edit": [9, 395], "effect": [354, 497, 503], "effici": [6, 8, 168, 354, 404, 498, 503, 505], "eigenvalu": [193, 194], "eigenvector": 193, "einstein": [132, 133], "einsum": 133, "either": [9, 14, 66, 79, 80, 88, 90, 91, 95, 130, 131, 135, 166, 171, 172, 176, 187, 188, 189, 198, 210, 215, 217, 233, 235, 239, 245, 266, 269, 296, 313, 343, 344, 373, 374, 406, 418, 422, 423, 498, 502, 504], "elem": [1, 147], "elem_to_loc": [1, 2], "element": [0, 1, 2, 13, 14, 20, 21, 22, 23, 24, 25, 26, 29, 71, 84, 88, 89, 90, 91, 94, 108, 109, 110, 111, 112, 113, 118, 130, 131, 135, 136, 137, 139, 141, 145, 165, 166, 169, 171, 172, 178, 179, 180, 181, 182, 183, 187, 188, 189, 206, 207, 208, 209, 210, 211, 212, 213, 217, 219, 233, 235, 237, 239, 244, 245, 248, 249, 265, 266, 267, 269, 270, 272, 280, 281, 282, 283, 289, 290, 296, 300, 302, 303, 306, 313, 315, 318, 346, 353, 354, 355, 360, 364, 366, 375, 397, 401, 404, 408, 427, 434, 435, 437, 438, 453, 454, 456, 459, 460, 461, 462, 497, 500], "elementwis": [1, 98, 99], "elif": 6, "ellipsi": 501, "elman": 401, "els": [0, 2, 6, 340, 381, 498, 503], "elsewher": [309, 501], "elu": [340, 457], "emb": [6, 357, 398, 409], "embed": [6, 322, 340, 398, 404, 409, 440], "empti": 256, "en0": 502, "en2": 498, "enabl": [3, 6, 9, 96, 134, 321, 485], "enclos": 499, "encod": [2, 149, 404, 409, 417, 441], "encount": [2, 500], "end": [120, 191, 225, 248, 270, 360, 366, 415, 433, 444, 451, 457, 463, 464, 486, 489, 499], "end_axi": [0, 50, 164], "end_encod": 2, "endif": 2, "endl": [4, 499], "endswith": 381, "enhanc": [6, 404, 503], "enough": [2, 503], "ensur": [0, 1, 2, 9, 147, 324, 447, 498, 499], "ensure_row_contigu": [1, 147], "enter": 6, "entir": [16, 18, 27, 28, 214, 216, 218, 232, 246, 293, 297, 314, 354, 355], "entri": [0, 258, 312, 354, 355], "entropi": [7, 439, 441], "enumer": 340, "environ": [9, 121, 134, 498], "ep": [5, 146, 148, 345, 361, 365, 367, 400, 440, 442, 452, 472, 473, 474, 475, 476, 477, 478, 484], "epoch": 7, "epsilon": [345, 361, 365, 367, 400, 440, 442, 473, 475, 476, 477, 478, 484], "epsilon_1": 474, "epsilon_2": 474, "equal": [0, 1, 17, 29, 83, 145, 172, 178, 189, 239, 244, 259, 288, 321, 365, 369], "equal_nan": [0, 17, 83, 178], "equat": [132, 133, 200, 201], "equival": [0, 2, 32, 66, 80, 128, 131, 166, 169, 173, 300, 346, 356, 358, 362, 363, 364, 370, 371, 395, 397, 399, 402, 403, 405, 407, 410, 411, 412, 413, 414, 416, 498], "erf": [0, 137, 497], "erfinv": 0, "error": [0, 2, 9, 125, 136, 137, 228, 229, 288, 358, 429, 430, 431, 447, 449, 497, 500, 502, 504], "error_norm": 5, "estim": 478, "eta": 479, "etc": [2, 248, 340, 418, 498], "ethernet": [498, 502], "eval": [2, 3, 5, 6, 7, 340, 470, 472, 497, 498, 499, 500, 503, 505], "eval_cpu": 2, "eval_fn": 7, "eval_gpu": 2, "evalu": [2, 6, 7, 8, 129, 138, 185, 316, 340, 379, 390, 470, 472, 497, 499, 505], "even": [1, 2, 6, 96, 497, 498, 499, 503, 504], "evenli": [0, 204], "everi": [248, 326, 472, 490, 500, 502], "everyth": [6, 498], "everywher": 0, "exact": [430, 431], "exactli": [2, 6, 149, 383, 500], "exampl": [0, 3, 4, 5, 6, 7, 9, 19, 39, 114, 125, 142, 143, 144, 147, 150, 164, 176, 184, 186, 193, 194, 198, 199, 284, 285, 295, 300, 312, 324, 327, 328, 340, 342, 343, 344, 345, 365, 372, 373, 374, 381, 383, 390, 393, 418, 419, 420, 421, 422, 423, 424, 425, 426, 439, 441, 448, 467, 472, 481, 486, 487, 488, 489, 490, 494, 500, 501, 502, 503, 504, 505, 506], "exce": [321, 324], "exceed": 228, "except": [8, 114, 145, 157, 158, 160, 161, 162, 332, 361, 383, 499, 501, 504], "exclud": [247, 301], "exclus": [0, 84, 91], "execut": [2, 4, 9, 85, 86, 87, 186, 224, 498, 504, 507], "execute_process": 4, "exist": [2, 3, 6, 381, 393, 498], "exp": [0, 1, 141, 147, 210, 214, 253, 286, 346, 356, 408, 427, 428, 445, 457, 458, 462, 497, 499, 507], "exp_elementwis": [1, 147], "expand_dim": 0, "expect": [6, 347, 348, 349, 350, 351, 352, 353, 354, 355, 409, 417, 442, 497, 498, 501], "expens": 417, "expensive_fun": 503, "experiment": [142, 144, 176, 504], "explain": 2, "explicit": [2, 481, 494, 504], "explicitli": [168, 340, 494, 502], "explor": 9, "expm1": 0, "exponenti": [0, 139, 141, 346, 356, 405, 427, 428, 457, 487], "exponential_decai": 472, "export": [8, 9, 142, 143, 176], "export_funct": 499, "ext_modul": 2, "extend": [2, 243], "extens": [8, 205, 230, 387, 506], "extern": 504, "extra": [1, 326, 327, 499], "extract": [0, 6, 46, 119, 120, 284, 340, 380, 470], "extras_requir": 2, "extrem": [501, 503], "ey": [0, 6, 195, 203], "f": [0, 2, 5, 7, 114, 198, 340, 366, 477, 497, 504], "f_jvp": 114, "f_t": 366, "f_vjp": 114, "f_vmap": 114, "face": 6, "factor": [2, 15, 173, 190, 191, 196, 197, 199, 418, 441, 487, 490], "fail": [497, 498, 502], "fall": [2, 114], "fals": [0, 1, 2, 6, 16, 17, 18, 27, 28, 34, 35, 36, 37, 42, 43, 44, 45, 57, 58, 59, 60, 64, 76, 77, 81, 83, 96, 103, 110, 111, 112, 113, 125, 142, 144, 147, 178, 184, 190, 191, 198, 201, 202, 203, 205, 214, 216, 218, 219, 228, 232, 246, 293, 297, 314, 318, 322, 325, 326, 327, 328, 332, 361, 365, 367, 369, 381, 383, 393, 396, 399, 404, 409, 417, 418, 439, 442, 474, 476, 477, 485, 499, 504], "famili": 6, "fan": [420, 421, 422, 423], "fan_in": [420, 421, 422, 423], "fan_out": [420, 421, 422, 423], "far": 472, "fast": [1, 8, 358, 431, 498, 507], "faster": [1, 2, 9, 131, 429, 439, 497, 498, 500], "featur": [1, 8, 100, 101, 102, 103, 104, 105, 106, 149, 345, 360, 361, 365, 366, 367, 369, 399, 400, 401, 404, 417, 418, 497, 498, 503], "feed": 6, "feed_forward": 6, "feedforward": [420, 421], "feel": 6, "fetch": 1, "few": [1, 2, 6, 7, 8, 9, 499, 503, 505], "fewer": 498, "ffn": 6, "ffn_norm": 6, "fft": 8, "fi": 498, "figur": 498, "file": [4, 6, 9, 142, 143, 144, 176, 205, 273, 274, 275, 276, 277, 383, 387, 498, 499, 500, 506], "file_or_weight": 383, "fill": [0, 167, 241, 309, 320, 419, 420, 421, 422, 423, 425, 426], "filter": [0, 107, 347, 348, 349, 350, 351, 352, 376, 380], "filter_and_map": 340, "filter_fn": [376, 380], "final": [2, 4, 5, 6, 7, 173, 486, 489, 498, 502], "find": [2, 4, 5, 9, 498], "find_packag": [2, 4], "finder": 9, "fine": [494, 499, 503], "finetun": 340, "finit": [0, 179, 236], "first": [0, 1, 2, 3, 4, 5, 6, 7, 9, 120, 123, 125, 164, 170, 184, 186, 187, 202, 211, 213, 215, 244, 261, 269, 298, 304, 307, 313, 325, 327, 328, 340, 343, 344, 361, 373, 374, 418, 440, 448, 474, 478, 481, 497, 498, 499, 500, 502, 504, 507], "first_lay": 503, "firt": 497, "fit": [248, 507], "five": 497, "fix": [2, 6, 9, 497, 503], "flag": [4, 9, 497, 504], "flat": [168, 169, 325, 329], "flat_param": 276, "flatten": [0, 29, 30, 110, 111, 112, 113, 198, 242, 244, 247, 267, 270, 287, 300, 301, 306, 325, 497], "flexibl": 8, "flexibli": 395, "flip": [0, 103, 107], "float": [0, 1, 2, 12, 15, 17, 19, 79, 146, 147, 148, 149, 150, 163, 166, 167, 173, 178, 184, 198, 236, 249, 251, 255, 257, 321, 324, 332, 345, 353, 354, 355, 361, 365, 367, 376, 388, 400, 404, 409, 415, 417, 418, 419, 420, 421, 422, 423, 425, 426, 440, 441, 442, 444, 448, 451, 452, 463, 464, 473, 474, 475, 476, 477, 478, 479, 484, 485, 486, 487, 489, 490], "float16": [1, 2, 12, 147, 173, 205, 332, 376, 503, 504], "float16_t": [1, 2], "float32": [0, 1, 2, 12, 19, 145, 147, 150, 173, 174, 184, 193, 194, 198, 199, 204, 240, 253, 255, 256, 257, 262, 263, 285, 309, 319, 332, 418, 419, 420, 421, 422, 423, 424, 425, 426, 439, 441, 448, 486, 487, 488, 489, 490, 497, 498, 499, 500, 501, 503, 504, 505, 506], "float64": [12, 184, 332, 504], "floor": [0, 1, 166], "floor_divid": 0, "flow": [0, 294, 503], "flush": 2, "fn": [176, 323, 326, 327, 328, 505], "follow": [1, 2, 4, 6, 7, 8, 9, 19, 107, 118, 150, 168, 198, 243, 248, 327, 340, 430, 431, 445, 473, 474, 475, 478, 479, 485, 494, 497, 498, 499, 500, 502, 507], "food": 6, "forc": [6, 7, 340, 498, 505], "forg": [9, 498], "formal": [118, 248], "format": [6, 143, 205, 273, 274, 275, 276, 277, 498, 504], "formul": [346, 356], "formula": 451, "forth": [418, 498], "forward": [1, 2, 313, 497, 502, 503], "found": [4, 380], "four": 345, "fourier": [151, 152, 153, 154, 155, 156, 160, 161, 162], "fourth": 499, "frac": [136, 248, 280, 345, 353, 354, 355, 361, 365, 367, 369, 400, 408, 420, 421, 422, 423, 440, 442, 444, 447, 458, 460, 461, 473, 475, 476, 477, 478, 484], "fraction": 19, "framework": 8, "free": 227, "freez": [340, 393, 470], "freq": 149, "frequenc": [149, 404, 409], "frequent": [497, 503], "friend": 6, "fro": 198, "frobeniu": 198, "from": [0, 1, 2, 4, 6, 7, 8, 84, 117, 118, 120, 123, 124, 127, 128, 129, 147, 158, 159, 161, 162, 167, 168, 173, 176, 198, 205, 215, 219, 224, 227, 241, 248, 250, 251, 252, 253, 254, 255, 259, 262, 276, 284, 291, 294, 296, 300, 301, 306, 307, 318, 320, 325, 326, 327, 328, 329, 340, 369, 381, 383, 396, 420, 421, 422, 423, 425, 426, 442, 451, 467, 472, 496, 497, 498, 499, 500, 503, 504, 505, 506, 507], "from_embed": 398, "from_linear": 399, "front": [2, 499], "frozen": [340, 381, 391, 393, 399, 470], "fuction": 131, "full": [0, 1, 2, 7, 66, 80, 107, 147, 196, 286, 394, 395, 442, 497, 498, 499, 503], "full_turn": 409, "fulli": [2, 8, 502, 504, 507], "fun": [96, 142, 144, 170, 185, 313, 316, 317, 497, 499, 501, 503, 507], "fun1": 503, "func": 401, "function": [0, 1, 2, 3, 5, 6, 7, 8, 17, 19, 84, 96, 114, 131, 136, 137, 142, 144, 147, 170, 176, 178, 185, 190, 191, 193, 194, 195, 198, 199, 202, 203, 215, 229, 280, 313, 316, 317, 323, 324, 326, 327, 328, 340, 346, 356, 358, 359, 362, 363, 364, 370, 371, 375, 377, 381, 388, 393, 397, 401, 402, 403, 405, 406, 407, 408, 410, 411, 412, 413, 414, 415, 416, 417, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 453, 458, 460, 461, 462, 463, 464, 465, 467, 472, 481, 494, 496, 498, 501, 503, 504, 506], "functionexport": 144, "functool": 497, "further": [2, 9, 500], "fuse": [1, 497], "fusibl": 497, "futur": [6, 142, 144, 176, 399, 501, 503], "fx": 114, "g": [3, 9, 114, 147, 198, 248, 366, 466, 484, 485, 499, 503, 508], "g_t": [366, 473, 475, 476, 477, 478, 479, 484, 485], "gain": [420, 421, 422, 423], "gamma": [345, 361, 365, 367, 400, 420, 421, 422, 423], "gap": 1, "gate": [359, 360, 432], "gather": [0, 123, 168, 169], "gather_mm": [0, 169], "gather_qmm": 0, "gaurante": 315, "gaussian": [5, 358, 429, 430, 431, 442], "gaussian_nll_loss": 340, "gc_func": 417, "gelu": [340, 430, 431, 497], "gelu_approx": [340, 358, 429], "gelu_fast_approx": [340, 358, 429], "geluapprox": 358, "gelufast": 358, "gener": [0, 1, 3, 5, 12, 19, 103, 145, 147, 158, 159, 204, 219, 251, 256, 257, 258, 259, 262, 263, 417, 494, 497, 501, 503, 508], "general_": 2, "generate_stub": 9, "geq": [415, 464], "get": [2, 5, 7, 9, 101, 102, 103, 105, 106, 115, 116, 163, 221, 222, 223, 224, 254, 340, 497, 499, 500, 503, 507], "get_cache_memori": 220, "get_command_encod": 2, "get_kernel": 2, "gguf": [9, 205, 274, 506], "gh": 1, "gii": 1, "git": 9, "github": [5, 7, 9, 497], "give": [2, 6, 7, 29, 497], "given": [0, 2, 9, 16, 18, 29, 39, 84, 93, 95, 97, 110, 111, 112, 113, 118, 120, 133, 138, 140, 150, 151, 152, 153, 154, 155, 156, 160, 161, 162, 167, 168, 196, 198, 214, 216, 218, 227, 232, 236, 238, 246, 256, 258, 259, 270, 271, 279, 286, 288, 293, 297, 299, 305, 306, 307, 309, 310, 311, 314, 330, 353, 380, 396, 440, 442, 448], "gix": 1, "gix_mult": 1, "giy_mult": 1, "global": [121, 123, 124, 125, 127, 128, 129, 134, 260, 321, 324, 494, 497], "glorot": [420, 421], "glorot_norm": 340, "glorot_uniform": 340, "glu": [6, 340], "gm": 1, "gn": 1, "go": [2, 6, 498, 500], "golub": 198, "good": [2, 9, 472, 497, 498, 502, 507], "goroshin": 354, "gower": 6, "gpu": [1, 3, 8, 9, 221, 332, 501, 507], "gputrac": [3, 230], "grad": [2, 5, 7, 114, 313, 324, 472, 480, 497, 498, 499, 500, 501, 503, 505], "grad_fn": [5, 497, 500], "gradient": [0, 5, 7, 114, 170, 294, 313, 321, 323, 324, 340, 381, 394, 399, 417, 447, 470, 472, 473, 474, 476, 477, 478, 479, 480, 483, 485, 497, 498, 500, 501, 503, 504, 505], "grain": 494, "graph": [2, 6, 7, 8, 143, 499, 500], "great": 3, "greater": [0, 6, 29, 141, 172, 244, 324, 415, 464], "greater_equ": 0, "grep": 9, "grid": [2, 147, 219], "grid_dim": 2, "grid_grad": 1, "grid_idx": 1, "grid_sampl": 1, "grid_sample_grad": 1, "grid_sample_ref": 1, "grid_sample_vjp": 1, "grid_shap": 1, "grid_siz": 1, "ground": [5, 6, 441, 451], "group": [0, 1, 100, 101, 102, 103, 104, 105, 106, 118, 123, 124, 125, 127, 128, 129, 150, 169, 248, 249, 315, 321, 322, 347, 348, 361, 398, 399, 498], "group_dim": 2, "group_siz": [0, 118, 169, 248, 249, 322, 398, 399], "groupnorm": 340, "grow": 503, "gru": 340, "guid": [2, 4, 8, 498, 499], "gw": 1, "h": [1, 2, 4, 100, 101, 102, 104, 105, 106, 198, 345, 348, 349, 351, 352, 354, 355, 360, 366, 401, 500, 503], "h_": [360, 366, 401], "h_in": 1, "h_stride": 1, "h_t": [360, 366, 401], "ha": [2, 3, 6, 7, 8, 9, 79, 96, 120, 129, 157, 158, 160, 161, 162, 170, 190, 191, 193, 194, 195, 202, 203, 219, 223, 252, 345, 360, 366, 369, 401, 470, 472, 497, 498, 499, 501, 502, 503, 505, 507], "had": 6, "hadamard": [0, 173], "hadamard_transform": 0, "half": [19, 259, 263, 404, 503], "halv": [359, 432], "hand": [6, 500, 503], "handi": 500, "handl": [2, 340, 497], "happen": [2, 6, 146, 148, 417, 472, 497, 503], "happi": 6, "hard": 6, "hard_shrink": [340, 362], "hard_tanh": [340, 363], "hardcod": 497, "hardshrink": [340, 433], "hardswish": 340, "hardtanh": [340, 434], "hat": [118, 248], "have": [0, 1, 2, 6, 9, 17, 83, 85, 86, 87, 92, 114, 123, 150, 158, 159, 161, 162, 169, 178, 215, 230, 252, 315, 321, 325, 366, 396, 406, 479, 481, 496, 497, 498, 499, 501, 502, 503, 507], "haven": 6, "hazan": 475, "he": [6, 422, 423], "he_norm": 340, "he_uniform": 340, "head": [150, 396, 417], "header": [2, 147], "heart": 6, "heavi": 6, "height": [343, 344, 345, 348, 349, 351, 352, 354, 355, 373, 374], "hello": [325, 329], "help": [2, 6, 497, 507], "helper": [6, 147, 321, 497, 498, 502], "henc": [0, 2, 248, 497], "hendryck": 431, "here": [2, 6, 472, 497, 499, 500, 503, 506, 507], "hermitian": [193, 194], "hf": 366, "hg": 366, "hh": 401, "hi": [6, 366], "hidden": [360, 366, 401, 417], "hidden_dim": [7, 470, 472], "hidden_s": [360, 366, 401], "hierarchi": 332, "high": [259, 263, 340, 357, 426, 467], "high_pad_s": 0, "higher": [2, 177, 229, 448, 498, 500], "highli": 9, "him": 6, "hing": 443, "hinge_loss": 340, "hinton": 484, "hit": 2, "hn": 360, "ho": 366, "hold": [2, 6, 11, 12, 198, 497], "homebrew": 498, "hopkin": 198, "host": 2, "host1": 498, "host2": 498, "host3": 498, "host4": 498, "host_nam": 1, "hostfil": [498, 502], "hostnam": [498, 502], "hostname1": [498, 502], "hostname2": [498, 502], "hostname3": 498, "hostname4": 498, "hot": 441, "hour": 6, "how": [2, 4, 6, 7, 340, 342, 343, 344, 347, 348, 349, 350, 351, 352, 357, 372, 373, 374, 398, 418, 480, 497, 501, 507], "howev": [2, 114, 340, 358, 361, 481, 494, 497, 498, 503, 504], "hr": 360, "http": [361, 365, 367, 375, 400, 431, 453], "huber": 444, "huber_loss": 340, "human": [422, 423], "hundr": 9, "hurri": 6, "hutter": 477, "hyperbol": [0, 21, 23, 26, 109, 283, 303, 416, 465], "hz": 360, "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 17, 19, 29, 38, 79, 84, 95, 101, 102, 103, 105, 106, 107, 110, 111, 112, 113, 114, 119, 120, 123, 124, 126, 127, 128, 129, 131, 138, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 166, 167, 168, 169, 173, 176, 178, 179, 184, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 210, 214, 215, 219, 225, 228, 229, 243, 244, 247, 248, 249, 256, 257, 258, 268, 270, 273, 274, 275, 280, 286, 288, 293, 294, 299, 300, 301, 304, 307, 308, 312, 313, 314, 315, 316, 317, 318, 321, 322, 324, 325, 326, 327, 328, 332, 334, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 358, 360, 361, 365, 366, 367, 369, 372, 373, 374, 380, 381, 387, 389, 390, 392, 393, 395, 396, 397, 399, 400, 401, 404, 409, 415, 417, 418, 422, 423, 429, 431, 439, 440, 442, 447, 448, 451, 452, 454, 459, 464, 470, 472, 474, 476, 477, 479, 480, 481, 486, 488, 489, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508], "i386": 9, "i_n": 1, "i_nw": 1, "i_s": 1, "i_sw": 1, "i_t": 366, "iclr": [476, 477, 478], "id": [7, 9], "idea": [500, 503], "idempot": [381, 393], "ident": [0, 114, 129, 145, 294, 340, 390, 498], "identifi": [2, 325, 496], "idim": 7, "idiom": [7, 497], "idx": [39, 501], "ie": 393, "ieee": 332, "ifac": 498, "ignor": [6, 39, 95, 96, 138, 474, 502], "ih": 401, "ii": 1, "ij": 219, "imag": [0, 348, 349, 351, 352, 354, 355, 418], "imagenet": [422, 423], "imaginari": 175, "immedi": [6, 376], "implement": [0, 1, 5, 7, 149, 150, 357, 380, 396, 404, 406, 409, 415, 417, 418, 464, 473, 474, 475, 478, 479, 480, 492, 497, 500], "impli": 315, "implicit": [494, 497, 500], "implicitli": 503, "import": [2, 3, 5, 6, 7, 9, 114, 125, 173, 176, 198, 276, 313, 325, 326, 327, 328, 329, 340, 342, 343, 344, 345, 365, 372, 373, 374, 383, 418, 439, 441, 448, 467, 470, 472, 497, 498, 500, 501, 503, 504, 505], "import_funct": 499, "imported_ab": 499, "imported_fun": 499, "imported_funct": 499, "improv": [1, 2, 3, 6, 439, 473, 474, 475, 476, 477, 478, 484, 497, 498], "in_ax": [317, 500], "in_channel": [347, 348, 349, 350, 351, 352], "in_dim": [340, 470], "in_proj": 470, "includ": [1, 2, 4, 110, 111, 112, 113, 143, 147, 222, 223, 228, 367, 377, 389, 399, 442, 472, 497, 499, 500, 501, 505, 506, 508], "include_dir": 2, "inclus": [0, 42, 43, 44, 45, 110, 111, 112, 113, 164], "incom": 2, "inconveni": 497, "incorpor": 504, "incorrect": 504, "increas": [229, 502], "increment": 19, "incur": [6, 9], "independ": [122, 354, 355], "index": [0, 1, 2, 8, 10, 29, 39, 140, 145, 170, 219, 244, 284, 285, 300, 301, 313], "indic": [0, 2, 17, 27, 28, 29, 30, 39, 168, 169, 170, 178, 179, 180, 181, 182, 183, 184, 196, 202, 247, 284, 285, 288, 300, 301, 313, 390, 392, 441, 448, 488, 501], "indices_or_sect": [72, 288], "indirectli": 504, "individu": [340, 354, 355], "ineffici": [501, 503], "inexact": [12, 184], "inf": [198, 236, 396], "infer": [8, 167, 205, 307, 312, 498, 499], "infin": [0, 180, 182, 183, 236, 372, 373, 374, 478], "infinit": [17, 178, 179], "info": [6, 9], "inform": [3, 4, 6, 7, 9, 133, 163, 221, 274, 275, 332, 340, 345, 358, 396, 498, 499, 500, 507], "inherit": [7, 496], "inifn": 180, "init": [340, 397, 467, 472, 486, 487, 489, 490, 498], "init_fn": [419, 420, 421, 422, 423, 424, 425, 426, 467], "init_valu": 1, "initi": [1, 3, 5, 6, 125, 328, 340, 345, 361, 365, 367, 369, 397, 400, 419, 420, 421, 422, 423, 424, 425, 426, 470, 481, 486, 487, 489, 490, 497, 498, 499, 503], "initializer_list": 0, "inject": 0, "inlin": 0, "inner": [0, 497], "inorm": 365, "inp": [1, 147], "inp_ndim": 1, "inp_shap": 1, "inp_strid": 1, "inplac": [2, 9], "input": [0, 1, 2, 5, 6, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 119, 120, 123, 124, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 258, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 310, 311, 312, 313, 314, 315, 317, 318, 320, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 357, 359, 360, 361, 365, 366, 367, 369, 372, 373, 374, 396, 399, 400, 401, 404, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 439, 440, 442, 443, 444, 445, 447, 448, 450, 452, 464, 467, 497, 499, 500, 501, 502, 505, 506], "input_dil": [0, 103], "input_dim": [7, 340, 369, 399], "input_nam": [1, 147], "input_s": [360, 366, 401], "inputs1": 448, "inputs2": 448, "insert": [120, 140, 507], "insid": [497, 499], "inspect": [3, 497, 505], "inspir": 8, "instabl": 452, "instal": [2, 4, 502], "instanc": [6, 39, 114, 248, 329, 340, 365, 376, 377, 378, 381, 383, 384, 385, 390, 393, 394, 395, 406, 470, 498, 502, 504], "instancenorm": 340, "instanti": [1, 2, 7, 503], "instantiate_kernel": 2, "instead": [2, 9, 114, 340, 395, 409, 500, 503], "instruct": [4, 499], "int": [0, 1, 2, 4, 6, 7, 10, 16, 18, 19, 27, 28, 29, 30, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 50, 57, 58, 59, 60, 61, 64, 67, 69, 72, 75, 76, 77, 78, 79, 81, 84, 92, 93, 97, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 118, 119, 120, 127, 128, 129, 133, 140, 145, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 169, 170, 174, 184, 192, 198, 204, 214, 216, 218, 221, 222, 223, 224, 227, 228, 229, 232, 234, 240, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 268, 270, 271, 284, 285, 286, 287, 288, 291, 292, 293, 297, 298, 300, 301, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 319, 321, 322, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 357, 359, 360, 361, 365, 366, 367, 369, 372, 373, 374, 396, 398, 399, 400, 401, 404, 409, 417, 432, 440, 441, 445, 450, 452, 470, 486, 488, 489, 490], "int16": 332, "int32": [0, 1, 12, 19, 39, 164, 184, 186, 198, 259, 284, 312, 332, 418, 501, 505], "int64": [12, 332], "int64_t": 2, "int8": [12, 332], "int_0": 136, "integ": [0, 12, 166, 168, 169, 184, 198, 221, 243, 248, 249, 251, 258, 259, 288, 300, 304, 317, 332, 357, 388, 488, 501], "integr": [19, 300, 503], "intend": [0, 497], "interact": 417, "interest": 507, "interfac": [2, 498, 502], "intermedi": 504, "intern": 345, "interpol": 418, "interpret": 4, "interv": [19, 204, 259, 263], "introduc": [0, 270], "intuit": 340, "invalid": [0, 84], "invers": [0, 20, 21, 22, 23, 24, 25, 26, 89, 137, 154, 155, 156, 157, 158, 159, 191, 195, 203], "invert": 0, "involv": [472, 497], "iogpu": 229, "iostream": 4, "ip": [498, 502], "ip1": [498, 502], "ip2": [498, 502], "ip3": 498, "ip4": 498, "is_avail": 125, "is_equival": 2, "is_leaf": [325, 326, 327, 328], "is_leaf_fn": 380, "isclos": 0, "isfinit": 0, "ish": 6, "ishmael": 6, "isinf": 0, "isnan": 0, "isneginf": 0, "isposinf": 0, "issu": [498, 500, 504], "issubdtyp": [2, 12, 332], "item": [0, 2, 5, 6, 7, 326, 472, 499, 503, 504, 505], "iter": [5, 7, 202, 326, 327, 494, 497, 503], "iterm": 9, "itertool": [6, 326], "its": [0, 1, 2, 9, 150, 191, 215, 244, 261, 309, 323, 329, 340, 399, 472, 476, 477, 478, 498, 503, 504, 507], "itself": [2, 322, 481], "ix": 1, "ix_n": 1, "ix_nw": 1, "ix_s": 1, "ix_sw": 1, "iy_n": 1, "iy_nw": 1, "iy_s": 1, "iy_sw": 1, "j": [6, 9, 198, 354, 475, 476, 478], "j8": 2, "jacobian": [2, 185, 316, 505], "jain": 354, "jax": [8, 494], "jit": 147, "jmlr": 475, "jnp": 504, "john": 198, "join": 488, "join_schedul": 472, "jointli": 256, "json": [498, 502], "just": [2, 4, 7, 367, 497, 499, 501], "jvp": [2, 114, 505], "k": [0, 6, 46, 92, 119, 145, 150, 168, 173, 306, 309, 310, 311, 369, 381], "kaim": 423, "keep": [2, 16, 18, 27, 28, 214, 216, 218, 232, 246, 293, 297, 314, 340, 380, 500, 503], "keepdim": [0, 16, 18, 27, 28, 34, 35, 36, 37, 57, 58, 59, 60, 64, 76, 77, 81, 198, 214, 216, 218, 232, 246, 286, 293, 297, 314], "kei": [1, 3, 6, 142, 150, 176, 221, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 325, 326, 380, 381, 393, 396, 481, 494, 496, 499, 500], "kept": 229, "kernel": [2, 8, 9, 100, 101, 102, 103, 104, 105, 106, 147, 342, 372, 497, 501], "kernel_dil": [0, 103], "kernel_s": [342, 343, 344, 347, 348, 349, 350, 351, 352, 372, 373, 374], "key_cach": 6, "key_input_dim": 396, "key_proj": 6, "keyword": [142, 170, 276, 277, 313, 326, 340, 494, 499, 506, 508], "kind": 6, "kingma": [476, 478], "kl_div_loss": 340, "kname": 2, "know": [2, 6], "known": [407, 459], "kron": 0, "kroneck": [0, 186], "kth": [0, 29, 244], "kullback": 445, "kw_onli": 2, "kwarg": [11, 122, 142, 143, 176, 276, 277, 330, 499, 508], "l": [6, 7, 190, 191, 193, 194, 196, 340, 345, 347, 350, 360, 366, 401, 451], "l1": [313, 444, 446, 447, 451], "l1_loss": 340, "l2": [444, 447, 485], "l2_loss": 340, "l_": 444, "la": 198, "label": [3, 5, 441, 448], "label_smooth": 441, "lack": 501, "lambd": [362, 413, 433, 463], "lambda": [326, 327, 328, 340, 362, 376, 381, 388, 413, 433, 457, 463, 473, 474, 475, 476, 477, 478, 479, 484, 485, 497, 498, 499, 500], "languag": [1, 2, 4], "larg": [6, 340, 396, 447, 497, 499, 503], "larger": [1, 149, 229, 404, 479], "largest": [198, 236, 306], "lasso": 313, "last": [0, 1, 6, 30, 79, 146, 148, 153, 156, 158, 159, 161, 162, 164, 168, 169, 177, 190, 191, 193, 194, 195, 199, 202, 203, 215, 224, 252, 287, 304, 315, 347, 348, 349, 350, 351, 352, 354, 355, 361, 418, 504], "later": [3, 9, 472], "launch": [1, 2, 125, 498, 501], "layer": [8, 146, 322, 340, 342, 343, 344, 354, 355, 360, 361, 366, 367, 369, 372, 373, 374, 390, 395, 398, 399, 401, 406, 417, 466, 470, 499, 502], "layer_s": 7, "layernorm": 340, "layout": 1, "lazi": [8, 470, 505], "lazili": [6, 340], "lceil": 92, "ld": [360, 366, 401], "lead": [0, 19, 84, 497], "leaf": [96, 322, 325, 326, 327, 328, 380], "leaf_modul": 340, "leaki": [368, 436], "leaky_relu": 340, "leakyrelu": 340, "learn": [5, 7, 8, 345, 361, 365, 367, 397, 400, 472, 473, 474, 475, 476, 477, 478, 479, 484, 485], "learnabl": [347, 348, 349, 350, 351, 352, 406], "learning_r": [7, 472, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 486, 487, 488, 489, 490, 497], "least": [6, 85, 86, 87, 95, 190, 191, 193, 194, 195, 199, 202, 203, 248], "leav": [2, 138, 326, 327, 328], "lectur": 484, "lecun": 354, "left": [0, 6, 149, 187, 198, 248, 270, 358, 404, 418, 430, 431, 442, 444, 452], "left_shift": 0, "leibler": 445, "len": [6, 153, 156, 159, 162, 173, 488], "length": [6, 291, 345, 347, 350, 360, 366, 401, 488], "leq": [444, 457], "less": [0, 1, 6, 29, 189, 229, 244, 321, 404, 451, 498], "less_equ": 0, "let": [1, 2, 5, 6, 191, 497, 499, 500, 503, 504], "level": [0, 168, 169, 422, 423], "lh": [360, 366, 401], "lhs_indic": [0, 168, 169], "lhs_mask": 92, "lib": 498, "libmlx": 9, "libmlx_ext": 2, "libmpi": 498, "librari": [2, 4, 9, 334, 340, 498, 499], "like": [2, 6, 8, 128, 142, 144, 176, 184, 241, 320, 355, 447, 481, 483, 497, 498, 499, 500, 502, 503, 504, 505, 507], "likelihood": [442, 450], "limit": [0, 2, 95, 227, 228, 229, 501], "linalg": 173, "line": [6, 498, 499, 502, 503, 504], "linear": [0, 2, 6, 7, 8, 200, 201, 322, 326, 340, 346, 356, 358, 359, 368, 383, 399, 401, 402, 403, 405, 407, 418, 427, 428, 429, 430, 431, 432, 436, 455, 456, 457, 459, 467, 470, 481, 488, 489, 497, 499], "linear1": 6, "linear2": 6, "linear3": 6, "linear_schedul": [472, 488], "linearli": 396, "link": [2, 4, 9], "linspac": 0, "lion": 472, "list": [1, 6, 11, 16, 18, 31, 72, 79, 84, 85, 86, 87, 93, 96, 97, 103, 133, 138, 147, 152, 153, 155, 156, 158, 159, 161, 162, 167, 170, 185, 198, 214, 216, 218, 219, 232, 240, 243, 246, 251, 252, 253, 255, 256, 257, 259, 262, 263, 274, 286, 288, 292, 293, 297, 304, 305, 308, 313, 314, 316, 319, 325, 328, 329, 340, 381, 383, 384, 385, 386, 391, 393, 394, 395, 470, 472, 476, 477, 478, 479, 488, 496, 497, 498, 499, 500, 502, 503], "listen": 498, "liter": [2, 243, 418, 422, 423, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452], "littl": 6, "liu": 6, "live": [8, 147, 507], "ll": [1, 5, 7, 444, 497, 500], "llama": 6, "llamaattent": 6, "llamaencoderlay": 6, "llm": 8, "load": [7, 8, 334, 383, 498], "load_weight": [340, 503], "loader": 7, "loader_path": 2, "loan": 198, "loc": [1, 255, 257], "local": [340, 354, 498], "localhost": [498, 502], "locat": [0, 2, 4, 84, 284, 285, 394, 395, 498, 507], "log": [0, 208, 210, 214, 370, 371, 437, 438, 439, 442, 445, 447, 450, 462], "log10": 0, "log1p": 0, "log2": 0, "log_cosh_loss": 340, "log_sigmoid": [340, 370], "log_softmax": [340, 371], "logaddexp": 0, "logarithm": [0, 206, 207, 208, 209], "logcosh": 447, "logic": [0, 2, 211, 212, 213, 498], "logical_and": 0, "logical_not": 0, "logical_or": 0, "logist": [0, 5, 280, 431, 459], "logit": [6, 252, 439, 441, 497], "logsigmoid": 340, "logsoftmax": 340, "logsumexp": 0, "long": 6, "longer": [6, 107, 500], "look": [2, 6, 498], "lookup": 357, "loop": [6, 7, 497, 498, 500, 503], "loshchilov": 477, "loss": [5, 7, 313, 340, 472, 497, 498, 500, 503], "loss_and_grad": 340, "loss_and_grad_fn": [7, 472, 497, 500], "loss_fn": [5, 7, 472, 497, 500], "loss_grad_fn": 498, "lot": 500, "low": [259, 263, 426, 467], "low_pad_s": 0, "lower": [190, 191, 193, 194, 201, 203, 248, 259, 262, 263, 309, 426], "lr": [5, 479], "lr_schedul": [486, 487, 488, 489, 490], "lstm": 340, "lto": 2, "lu": [6, 197], "luckili": 503, "lvalu": 313, "m": [0, 2, 4, 6, 9, 92, 145, 168, 173, 198, 309, 473, 497], "m1": [1, 6, 497, 500, 507], "m10": 332, "m7": 332, "m_": [476, 477, 478, 479], "m_t": [476, 477, 478, 479], "mac": 498, "machin": [6, 8, 9, 484, 498], "maco": [9, 229], "macosx": 9, "made": [6, 334], "mai": [2, 4, 142, 144, 176, 198, 322, 354, 498, 500, 501], "main": [4, 8, 120, 145, 147, 307, 326, 327, 340, 498], "maintain": [354, 355, 479], "major": [0, 2], "make": [1, 2, 3, 4, 6, 7, 9, 143, 144, 215, 238, 279, 340, 486, 487, 489, 490, 497, 503, 505, 507], "make_shar": 2, "malloc_or_wait": 2, "man": 6, "manag": [295, 494, 498, 499, 507], "mani": [2, 84, 288, 347, 348, 349, 350, 351, 352, 357, 398, 497, 498, 499, 503], "manual": [340, 498], "map": [2, 7, 39, 205, 326, 357, 376, 499], "map_fn": [376, 380], "map_torch_to_mlx": 6, "margin": [448, 452], "margin_ranking_loss": 340, "mask": [0, 6, 92, 150, 390, 396, 501], "mask_lh": [0, 92], "mask_n": 1, "mask_nw": 1, "mask_out": [0, 92], "mask_rh": [0, 92], "mask_s": 1, "mask_sw": 1, "matadata": 205, "match": [9, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 222, 383, 418, 441, 501, 504], "materi": [6, 8], "math": [6, 452, 497], "mathbf": 191, "mathcal": 369, "mathemat": 198, "mathrm": [136, 280, 365], "matmul": [0, 168, 507], "matric": [198, 199, 202], "matrix": [0, 5, 15, 46, 92, 118, 119, 145, 168, 169, 173, 174, 190, 191, 193, 194, 195, 196, 197, 198, 199, 202, 203, 215, 219, 248, 249, 256, 398, 399, 424, 467], "matter": [6, 340, 499], "matur": 498, "max": [0, 1, 2, 198, 217, 346, 372, 373, 374, 397, 427, 434, 435, 440, 442, 443, 448, 452, 454, 456, 474, 478, 497, 500, 507], "max_buffer_s": 221, "max_freq": 409, "max_i": 248, "max_norm": 324, "max_recommended_working_set_s": [221, 229], "max_val": 434, "maximum": [0, 7, 27, 39, 95, 110, 224, 228, 324, 340, 368, 372, 373, 374, 402, 409, 430, 431, 436, 455, 470, 503], "maxpool1d": 340, "maxpool2d": 340, "maxpool3d": 340, "maxtotalthreadsperthreadgroup": 2, "mca": [498, 502], "md": 198, "me": 6, "mean": [0, 1, 5, 6, 7, 148, 255, 256, 257, 313, 340, 345, 361, 381, 400, 425, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 497, 498, 500, 504], "meant": 114, "measur": 507, "mechan": 417, "medic": 355, "meet": 9, "member": [340, 386, 391], "memori": [0, 1, 2, 8, 84, 220, 222, 223, 224, 226, 227, 228, 229, 417, 470, 474, 497, 503, 504], "memory_order_relax": 1, "memory_s": [221, 229], "memoryview": [503, 504], "merg": 497, "meshgrid": 0, "metadata": [5, 205, 274, 275], "metal": [2, 4, 8, 147], "metal_captur": 3, "metal_kernel": 1, "metal_path": 9, "metallib": [2, 9], "method": [2, 6, 10, 11, 31, 114, 122, 163, 322, 330, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 387, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 470, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 492], "millisecond": [9, 497, 507], "min": [0, 2, 198, 233, 346, 397, 427, 434, 435, 454, 456], "min_freq": 409, "min_i": 248, "min_val": 434, "mind": 6, "mine": 6, "minibatch": 7, "minim": [498, 502], "minimum": [0, 28, 39, 95, 111, 409, 439, 440], "minsizerel": 9, "minu": 141, "minut": 6, "mish": 340, "mismatch": 499, "miss": [383, 499, 506], "mix": 501, "mkdir": [3, 9], "ml": 9, "mlp": [7, 340, 417, 472], "mlp_dim": [6, 417], "mlx": [1, 3, 5, 6, 7, 9, 334, 340, 467, 470, 472, 494, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507], "mlx_build_acceler": 4, "mlx_build_benchmark": 9, "mlx_build_cpu": 9, "mlx_build_exampl": 9, "mlx_build_gguf": 9, "mlx_build_met": [2, 4, 9], "mlx_build_metallib": 2, "mlx_build_python_bind": 9, "mlx_build_safetensor": 9, "mlx_build_test": 9, "mlx_cxx_flag": 4, "mlx_disable_compil": [121, 134, 497], "mlx_ext": 2, "mlx_ext_metallib": 2, "mlx_found": 4, "mlx_include_dir": [2, 4], "mlx_librari": 4, "mlx_metal_debug": [3, 9], "mlx_metal_jit": 9, "mlx_root": 4, "mlx_sample_extens": 2, "mlx_trace": 3, "mlxfn": [142, 144, 176, 499], "mnist": 7, "mode": [0, 1, 2, 107, 243, 379, 390, 392, 418, 422, 423], "model": [5, 7, 8, 276, 322, 323, 326, 327, 340, 376, 379, 381, 383, 387, 390, 392, 393, 394, 396, 417, 467, 470, 472, 480, 481, 483, 497, 498, 499, 503], "modest": 2, "modif": 504, "modifi": 504, "modul": [2, 4, 6, 7, 322, 323, 406, 417, 467, 483, 496, 497, 503], "moment": [6, 474, 478, 498], "momentum": [345, 479, 481, 485, 497], "monei": 6, "monitor": 502, "monoton": 453, "more": [1, 2, 3, 4, 7, 11, 79, 120, 142, 168, 190, 191, 193, 194, 195, 196, 202, 203, 215, 227, 228, 274, 275, 332, 340, 345, 354, 404, 409, 417, 418, 420, 421, 422, 423, 439, 494, 497, 498, 500, 501, 505, 507], "moreov": 502, "most": [2, 150, 252, 312, 340, 483, 497, 498, 500, 501, 503], "move": [0, 2, 234, 507], "moveaxi": 0, "mpi": [125, 334], "mpirun": [498, 502], "mse": 313, "mse_loss": 340, "mtl": 2, "mtl_capture_en": 3, "mtlcommandbuff": 2, "mu": 485, "much": [1, 2, 6, 342, 343, 344, 372, 373, 374, 497, 503], "multi": [8, 150, 347, 348, 349, 350, 351, 352, 499, 501, 504], "multidimension": 219, "multiheadattent": [6, 340], "multipl": [0, 1, 9, 15, 92, 144, 146, 148, 168, 169, 215, 235, 248, 249, 396, 409, 487, 488, 490, 497, 503, 506], "multipli": [0, 2, 39, 169, 248, 249, 353, 409, 418], "murtadha": 6, "must": [0, 1, 2, 3, 9, 92, 95, 142, 149, 150, 167, 169, 193, 194, 198, 251, 252, 256, 259, 262, 263, 318, 418, 504], "mx": [1, 2, 3, 4, 5, 6, 7, 39, 98, 99, 114, 125, 128, 142, 143, 144, 147, 164, 176, 184, 186, 193, 194, 196, 198, 199, 205, 258, 276, 284, 285, 312, 313, 324, 340, 342, 343, 344, 345, 356, 365, 368, 372, 373, 374, 376, 383, 387, 402, 418, 419, 420, 421, 422, 423, 424, 425, 426, 428, 436, 439, 440, 441, 445, 448, 455, 465, 467, 470, 472, 494, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508], "my": [6, 9], "my_devic": 508, "my_path": 276, "my_script": [498, 502], "myexp": [1, 147], "myexp_strid": 1, "mymlp": 470, "n": [0, 1, 2, 6, 31, 92, 100, 101, 102, 103, 104, 105, 106, 145, 150, 151, 153, 154, 156, 157, 160, 162, 173, 174, 256, 293, 309, 314, 345, 347, 348, 349, 350, 351, 352, 354, 355, 360, 366, 401, 418, 447, 452, 498, 502], "n_kv": 150, "n_q": 150, "n_t": 360, "naiv": [2, 500], "naive_add": 500, "name": [1, 2, 114, 143, 147, 169, 205, 248, 249, 274, 275, 276, 277, 340, 361, 380, 383, 385, 498, 501, 506], "named_modul": 340, "namespac": 4, "nan": [0, 17, 83, 178, 179, 181, 236], "nan_to_num": 0, "nanobind": 2, "nanobind_add_modul": 2, "nativ": [9, 498], "natur": [0, 206, 208, 503], "nb": 2, "nb_domain": 2, "nb_modul": 2, "nb_static": 2, "nbyte": 2, "nc": 345, "ndarrai": [31, 501, 503, 505], "ndhwc": [349, 352, 355], "ndim": [0, 1, 2, 164, 198, 202, 418], "ne": 1, "nearest": [1, 418], "necessari": 340, "necessarili": 306, "need": [1, 2, 4, 6, 7, 8, 9, 83, 248, 340, 394, 395, 409, 417, 494, 498, 500, 502, 503, 504, 505, 507], "neg": [0, 120, 164, 182, 236, 270, 307, 368, 372, 373, 374, 396, 442, 450, 452, 501], "negat": [0, 237], "negative_slop": [368, 436], "neginf": [0, 236], "neighbor": [418, 502], "neither": [170, 313], "nelem": 2, "nervou": 6, "nest": [79, 96, 328, 340, 470, 496, 500], "nesterov": 485, "network": [6, 8, 321, 345, 354, 357, 420, 421, 467, 470, 484, 498], "neural": [6, 8, 357, 420, 421, 453, 467, 470, 484], "never": [6, 503], "new": [0, 2, 7, 93, 120, 234, 238, 268, 292, 308, 315, 326, 327, 388, 396, 470, 472, 483, 488, 497, 499, 501, 503, 504], "new_tre": 327, "next": [2, 4, 6, 7, 227, 499], "nh": [360, 366, 401], "nhwc": [345, 348, 351], "nice": [500, 503], "nlc": [345, 347, 350], "nld": [360, 366, 401], "nlh": [360, 366, 401], "nll": [442, 450], "nll_loss": 340, "nn": [2, 6, 7, 276, 326, 340, 467, 470, 472, 481, 483, 497, 499, 503], "nobodi": 6, "node": [96, 138, 317, 327, 328, 498, 502], "nois": 5, "noisi": 5, "nomins": 2, "non": [0, 1, 2, 4, 9, 219, 391, 401, 453, 470], "none": [1, 2, 6, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 123, 124, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 226, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 317, 318, 319, 320, 321, 322, 325, 326, 327, 328, 342, 343, 344, 358, 372, 373, 374, 376, 380, 381, 388, 393, 396, 401, 409, 417, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 474, 492, 499, 501], "nonlinear": [401, 497], "nonzero": 501, "noop": [393, 498], "nor": [2, 170, 313], "norm": [6, 148, 324, 361, 452, 478, 479], "norm1": 6, "norm2": 6, "norm_first": 417, "normal": [1, 2, 5, 6, 146, 147, 148, 193, 256, 262, 340, 342, 343, 344, 345, 361, 365, 367, 372, 373, 374, 400, 417, 420, 422, 504, 507], "not_equ": 0, "notabl": [6, 8], "notat": [118, 325, 385], "note": [0, 1, 2, 4, 6, 9, 17, 19, 84, 92, 96, 102, 105, 106, 114, 150, 158, 159, 169, 178, 196, 198, 222, 248, 252, 315, 322, 340, 400, 418, 472, 504, 506], "noth": [6, 114, 340, 503], "notic": [6, 499, 500, 506], "now": [1, 2, 6, 9, 399, 497, 504], "np": [1, 6, 7, 498, 504, 505], "npy": [205, 273, 506], "npz": [6, 205, 276, 277, 383, 387, 506], "nuc": 198, "nuclear": 198, "nuisanc": 498, "nullopt": 0, "num": [0, 6, 204, 261], "num_class": [7, 472], "num_decoder_lay": 417, "num_embed": [357, 398], "num_encoder_lay": 417, "num_epoch": [7, 472], "num_exampl": 5, "num_featur": [5, 345], "num_group": 361, "num_head": [6, 396, 417], "num_it": 5, "num_lay": [6, 7, 472], "num_param": 340, "num_paramet": 397, "num_sampl": 252, "num_split": 0, "number": [0, 2, 12, 19, 62, 71, 96, 101, 102, 103, 105, 106, 118, 143, 145, 150, 169, 170, 174, 185, 204, 236, 243, 248, 249, 252, 255, 257, 261, 263, 267, 270, 271, 304, 305, 309, 313, 316, 317, 321, 322, 340, 345, 347, 348, 349, 350, 351, 352, 354, 355, 361, 365, 396, 397, 417, 418, 420, 421, 422, 423, 486, 488, 489, 494, 497, 500, 502, 508], "number_of_el": 0, "numer": [6, 146, 148, 198, 210, 214, 286, 345, 361, 365, 367, 400, 439, 440, 442, 452, 473, 474, 475, 476, 477, 478, 484, 497, 503], "numpi": [2, 6, 7, 8, 14, 17, 19, 88, 90, 91, 93, 130, 131, 135, 171, 172, 178, 187, 188, 189, 210, 215, 217, 233, 235, 239, 245, 266, 269, 296, 503, 505, 506], "nw": 1, "nwhc": 354, "o": [2, 9, 150, 366], "o_t": 366, "obj": 274, "object": [3, 11, 31, 51, 79, 96, 143, 144, 147, 184, 276, 317, 325, 326, 327, 328, 332, 354, 417, 496, 502], "observ": 6, "occupi": [118, 169, 248, 249], "occur": 504, "odim": 7, "odot": [360, 366], "off": [6, 9, 503], "offer": 447, "offset": [0, 1, 2, 6, 47, 84, 120, 146, 149, 307], "often": 355, "ok": [383, 497, 499, 500], "okai": [497, 503], "old": 6, "older": [142, 144, 176], "omit": [478, 498], "onc": [2, 9, 497, 499], "one": [0, 2, 4, 6, 9, 39, 79, 85, 95, 101, 102, 103, 105, 106, 125, 140, 142, 145, 146, 148, 149, 198, 208, 215, 249, 252, 291, 296, 312, 321, 332, 393, 418, 441, 498, 499, 502, 507], "ones": [0, 2, 6, 241, 276, 285, 309, 394, 395, 472, 498, 501], "ones_lik": 0, "onli": [1, 2, 6, 8, 9, 83, 92, 101, 102, 103, 105, 106, 114, 193, 194, 198, 202, 229, 248, 256, 315, 332, 340, 380, 381, 383, 388, 390, 393, 394, 395, 470, 497, 498, 499, 500, 502, 506, 507], "onlin": 475, "op": [1, 2, 242, 315, 381, 503], "open": [3, 9, 19, 259, 263, 498], "openmpi": 498, "oper": [3, 6, 8, 10, 38, 85, 86, 87, 103, 150, 168, 169, 245, 247, 286, 294, 301, 330, 332, 340, 417, 479, 497, 498, 500, 501, 503, 504, 505, 507, 508], "operand": [132, 133, 168], "opportun": 497, "opt": [480, 498], "optim": [1, 3, 5, 7, 8, 394, 497, 498, 500, 503], "option": [0, 3, 6, 15, 16, 18, 19, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 92, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 114, 118, 119, 120, 123, 124, 125, 127, 128, 129, 142, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 168, 169, 170, 174, 182, 183, 186, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 214, 216, 218, 219, 228, 232, 236, 240, 243, 244, 246, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 267, 268, 270, 286, 287, 288, 291, 292, 293, 297, 299, 300, 304, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 319, 321, 322, 325, 326, 327, 328, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 360, 366, 369, 372, 373, 374, 376, 380, 381, 383, 388, 393, 396, 398, 399, 401, 404, 409, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 473, 474, 475, 476, 477, 478, 479, 481, 484, 485, 486, 494, 497, 499, 506, 508], "ord": 198, "order": [0, 1, 29, 84, 103, 133, 193, 194, 198, 244, 248, 306, 340, 361, 394, 406, 481, 497, 500, 502], "ordinari": 177, "org": [361, 365, 367, 375, 400, 431, 453], "origin": [6, 120, 324, 345, 389, 420, 421, 422, 423, 473, 474, 475, 478, 479, 499, 504], "orthonorm": 173, "ostream": 2, "ostringstream": 2, "other": [0, 2, 6, 8, 184, 198, 340, 382, 470, 479, 497, 498, 499, 501, 502, 503, 505], "other_input": 340, "otherwis": [19, 103, 125, 228, 258, 322, 325, 326, 327, 328, 381, 383, 393, 415, 417, 418, 433, 439, 444, 451, 463, 464, 503, 504], "our": [1, 2, 6, 7, 406, 473, 474, 475, 478, 479, 498], "out": [0, 1, 2, 9, 92, 147, 176, 354, 355, 390, 497, 498, 499, 500, 501], "out_ax": [317, 500], "out_channel": [347, 348, 349, 350, 351, 352], "out_dim": [340, 470], "out_dtyp": 2, "out_idx": 2, "out_mask": 92, "out_proj": [6, 470], "out_ptr": 2, "out_shap": [1, 2], "outer": [0, 497, 503], "outlier": 447, "output": [0, 1, 2, 6, 9, 16, 17, 18, 19, 29, 84, 92, 93, 96, 98, 99, 110, 111, 112, 113, 114, 132, 143, 145, 146, 147, 148, 149, 150, 157, 160, 161, 162, 167, 168, 170, 173, 174, 178, 198, 204, 214, 216, 218, 219, 232, 236, 240, 241, 244, 246, 247, 251, 252, 253, 255, 256, 257, 259, 262, 263, 276, 277, 284, 285, 286, 291, 293, 297, 301, 307, 309, 313, 314, 315, 316, 317, 318, 319, 320, 345, 347, 348, 349, 350, 351, 352, 365, 369, 396, 399, 415, 417, 418, 420, 421, 422, 423, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 464, 467, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507], "output_dim": [7, 340, 369, 399], "output_directori": 2, "output_dtyp": [1, 147], "output_fil": 6, "output_nam": [1, 147], "output_shap": [1, 147], "output_strip_trailing_whitespac": 4, "output_vari": 4, "outsid": [147, 164], "over": [0, 2, 6, 7, 16, 18, 27, 28, 29, 30, 100, 101, 102, 103, 104, 105, 106, 110, 111, 112, 113, 153, 156, 159, 162, 177, 198, 202, 204, 214, 216, 218, 232, 244, 246, 272, 286, 287, 293, 297, 304, 306, 314, 345, 347, 348, 349, 350, 351, 352, 361, 367, 400, 441, 486, 489, 498, 500, 502], "overal": 2, "overhead": [497, 503, 507], "overlap": 1, "overload": 19, "overrid": [2, 134], "overview": 3, "overwrit": 6, "own": [9, 498, 504], "owndata": 504, "p": [9, 196, 251, 340, 353, 354, 355, 452, 476, 478], "pack": [169, 248, 249], "packag": [2, 5, 7, 9, 334, 467, 498, 502], "package_data": 2, "pad": [0, 1, 100, 101, 102, 103, 104, 105, 106, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 342, 343, 344, 347, 348, 349, 350, 351, 352, 372, 373, 374], "pad_valu": 0, "pad_width": [0, 243], "padding_hi": 0, "padding_lo": 0, "page": [498, 505], "pain": 6, "pair": [0, 2, 243, 383, 404], "pairwis": 452, "pan": 6, "paper": [345, 409, 473, 474, 475, 478, 479], "parallel": [498, 507], "param": [313, 322, 340, 467, 499, 500], "paramet": [0, 1, 2, 5, 6, 7, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 227, 228, 229, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 365, 366, 367, 368, 369, 372, 373, 374, 376, 377, 380, 381, 383, 388, 389, 390, 393, 394, 395, 396, 397, 398, 399, 400, 401, 404, 406, 409, 413, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 432, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 464, 466, 467, 470, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 492, 497, 498, 499, 500, 503], "parameter_scal": 474, "parametr": [397, 454], "pars": [6, 143], "parse_arg": 6, "parser": 6, "part": [1, 2, 142, 144, 175, 176, 264, 500, 501], "parti": 498, "partial": [394, 395, 497, 503], "particip": [123, 124, 127, 128, 129], "particular": [248, 361], "particularli": 497, "partit": [0, 29], "pass": [1, 2, 6, 7, 66, 80, 242, 243, 313, 321, 323, 325, 326, 327, 340, 381, 393, 394, 395, 406, 497, 498, 499, 502, 503], "password": [498, 502], "path": [3, 4, 9, 133, 142, 143, 144, 176, 230, 276, 277, 322, 327, 383, 498, 502], "pattern": [340, 503], "peak": [224, 226], "penalti": 485, "pep": 504, "per": [6, 7, 118, 150, 169, 248, 249, 321, 322, 345, 361, 365, 367, 400, 492, 497, 498, 502, 503], "perceptron": [8, 499], "perf_count": 497, "perfectli": 503, "perform": [0, 1, 2, 3, 6, 8, 15, 92, 103, 110, 111, 112, 113, 129, 132, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 168, 169, 173, 193, 194, 215, 249, 271, 286, 300, 321, 340, 361, 417, 422, 423, 472, 497, 498, 501, 503, 507], "perhap": [2, 6], "perm": 7, "permtuat": 258, "permuat": 196, "permut": [0, 7], "persist": 9, "pg": 198, "phi": [358, 429], "physic": 498, "pi": [136, 358, 409, 430, 500], "pick": 2, "pip": [2, 4, 9], "pipelin": 2, "pivot": [196, 197], "pixel": 354, "place": [6, 39, 270, 271, 322, 498, 503, 504], "placehold": 497, "plai": [2, 6], "plain": 406, "plan": [2, 497], "platform": 9, "plot": 498, "plu": [0, 208], "png": 498, "point": [0, 2, 5, 6, 9, 84, 163, 166, 249, 332], "pool": [342, 343, 344, 372, 373, 374, 507], "popul": 2, "port": 502, "portion": 353, "posinf": [0, 236], "posit": [0, 6, 29, 120, 149, 164, 170, 183, 190, 191, 234, 236, 244, 256, 270, 307, 313, 326, 340, 347, 348, 349, 350, 351, 352, 396, 404, 409, 442, 452, 499], "possibl": [125, 288, 357, 398, 497, 498, 501, 507], "possibli": [6, 15, 92, 168, 215, 324], "postur": 6, "potenti": [2, 228], "power": [0, 500, 504], "practic": [2, 497], "pre": [9, 150, 439], "preced": 361, "precis": [0, 6, 141, 150, 340, 358, 400, 439, 480, 497], "preclud": 340, "pred": [443, 447], "predic": [322, 388], "predict": [439, 442, 443, 444, 445, 446, 447, 449, 450, 451], "prefix": [317, 325, 327], "prelu": 340, "prepar": [2, 6, 498], "prepend": [3, 215], "preprint": [6, 473, 479], "preprocessor": 9, "present": 1, "preserv": [268, 500], "press": [6, 198], "pressur": 2, "pretti": [497, 503], "prevent": [294, 452, 504], "previou": [227, 228, 229], "primal": [1, 2, 114, 185, 316], "primit": 500, "print": [1, 2, 5, 6, 7, 9, 114, 186, 324, 325, 326, 327, 329, 340, 494, 497, 498, 499, 500, 501, 502, 503, 504, 505], "prior": [247, 300, 301], "priorit": 500, "privat": [2, 4], "prng": [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 494], "prob": 439, "probabl": [9, 259, 353, 354, 355, 399, 439, 441, 445, 507], "problem": [5, 7, 340], "process": [6, 103, 107, 122, 123, 124, 125, 127, 128, 129, 321, 326, 327, 355, 357, 417, 496, 498, 502], "processor": 9, "prod": [0, 1], "produc": [0, 2, 9, 96, 396, 467, 499], "product": [0, 2, 15, 84, 112, 177, 185, 186, 192, 215, 242, 246, 304, 316, 396, 505], "profil": 3, "program": [4, 224], "programmat": 395, "project": [3, 4, 6, 396, 499], "project_source_dir": 2, "promot": [2, 150], "promote_typ": 2, "promoted_dtyp": 2, "prompt": 6, "propag": [500, 501], "properti": [32, 39, 48, 52, 62, 63, 69, 71, 389, 392, 482, 498, 500], "proportion": 324, "protocol": 504, "provid": [0, 2, 6, 84, 118, 142, 143, 170, 258, 270, 304, 313, 321, 326, 328, 334, 340, 376, 381, 383, 393, 394, 395, 398, 399, 417, 418, 466, 470, 498, 499, 506, 508], "pseudo": 494, "pth": 6, "public": [2, 340], "pun": 0, "pure": [1, 114, 340, 472], "purpos": [1, 198, 498], "purs": 6, "push": 2, "push_back": 2, "put": [0, 1, 7, 247, 497, 498], "put_along_axi": [0, 196], "py": [2, 6, 9, 498, 502], "pypi": 9, "python": [1, 3, 4, 6, 51, 69, 79, 138, 321, 325, 326, 327, 328, 329, 470, 480, 481, 483, 496, 498, 499, 500, 502, 504], "python_execut": 4, "python_requir": 2, "pytorch": [6, 8, 358, 361, 500], "pytorch_compat": 361, "q": [150, 199], "quantiz": [0, 118, 169, 205, 249, 398, 399], "quantized_matmul": 0, "quantizedembed": 340, "quantizedlinear": 340, "quarter": 6, "queri": [6, 150, 229, 396], "query_input_dim": 396, "query_proj": 6, "question": [6, 503], "queue": 3, "quick": [2, 8], "quit": [500, 504], "quotient": [0, 130, 131, 166], "r": [2, 6, 199, 313, 354, 360], "r_t": 360, "race": 507, "radian": [0, 117], "rag": 6, "rain": 6, "rais": [0, 6, 114, 198, 228, 245, 288, 383, 499], "ram": 6, "random": [1, 2, 3, 5, 6, 7, 8, 147, 342, 343, 344, 345, 365, 372, 373, 374, 383, 390, 497, 499, 500, 507, 508], "randomli": [5, 6, 258, 353, 354, 355], "rang": [0, 2, 3, 5, 6, 7, 9, 19, 164, 168, 204, 421, 423, 430, 431, 472, 486, 487, 488, 489, 490, 494, 497, 500, 503, 507], "rank": [0, 127, 128, 129, 448, 498, 502], "rate": [5, 472, 473, 474, 475, 476, 477, 478, 479, 484, 485], "rather": [2, 500, 507], "ratio": [0, 25], "rceil": 92, "re": [7, 9, 467], "reachabl": 498, "readabl": 3, "real": [0, 157, 158, 159, 160, 161, 162, 190, 191, 193, 194], "realli": 367, "reason": [1, 6, 501], "reboot": 9, "receiv": [127, 128, 322, 488, 498, 504], "reciproc": [0, 272], "reclaim": 227, "recommend": [9, 228, 479], "recompil": [96, 497], "reconstruct": 196, "record": [3, 224, 503], "recreat": [329, 472], "rectifi": [368, 402, 403, 422, 423, 436, 455, 456], "recurr": [360, 366, 401], "recurs": [143, 340, 380, 381, 386, 391, 393, 470], "recv": [128, 498], "reduc": [0, 1, 9, 16, 18, 27, 28, 124, 214, 216, 218, 232, 246, 293, 297, 314, 321, 328, 345, 417, 447], "reduct": [16, 18, 124, 214, 216, 232, 246, 328, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452], "redund": 500, "refer": [198, 365, 375, 389, 420, 421, 422, 423, 431, 453, 501], "reflect": [389, 497, 501, 504], "regard": 358, "regardless": [84, 150, 498], "regist": [2, 7], "register_librari": 2, "regress": [8, 447], "regular": [39, 354, 453, 477, 497, 499, 501], "regularli": 2, "reimplement": 2, "rel": [17, 178, 474, 497, 498], "relative_step": 474, "relax": 228, "releas": 4, "relev": 2, "reli": [1, 2], "relu": [340, 397, 417, 454, 467], "relu6": 340, "remain": [0, 6, 229, 313, 327, 353, 354, 355, 498], "remaind": [0, 131], "remov": [0, 120, 215, 252, 291, 441], "rep": [0, 305], "repeat": [0, 305], "repeatedli": 5, "repetit": 267, "replac": [0, 6, 236, 394, 395, 417, 451], "replai": 3, "repli": 6, "repo": [5, 7, 9, 497], "report": [222, 228], "repres": [2, 6, 122, 125, 169, 448, 452, 504], "represent": [6, 197, 248, 315, 325, 329], "requir": [1, 2, 4, 6, 340, 498, 502, 503, 504], "requires_grad": 500, "rerun": [497, 503], "rescal": 324, "research": 8, "reset": 226, "reset_peak_memori": 224, "reshap": [0, 6, 198, 418, 497, 501], "resid": 229, "resolv": 2, "resourc": 2, "resource_limit": 221, "respect": [2, 5, 7, 114, 146, 148, 168, 169, 170, 248, 313, 326, 340, 345, 358, 361, 365, 367, 470, 498, 500, 502, 505], "respons": 2, "rest": [6, 149, 326, 327, 404, 502], "restart": 9, "restor": 270, "result": [0, 6, 15, 19, 39, 79, 84, 96, 143, 146, 148, 169, 186, 198, 215, 249, 256, 267, 292, 326, 327, 328, 332, 409, 439, 497, 498, 500, 504], "resum": 6, "return": [0, 1, 2, 4, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 51, 69, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 328, 329, 340, 360, 366, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 390, 391, 393, 394, 395, 401, 419, 420, 421, 422, 423, 424, 425, 426, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 467, 470, 480, 496, 497, 498, 499, 500, 501, 503, 504, 506, 507], "return_metadata": 205, "revers": [0, 2, 42, 43, 44, 45, 84, 110, 111, 112, 113, 308, 409], "rf": 9, "rfft": 157, "rfft2": 158, "rfftn": 159, "rho": 473, "rhs_indic": [0, 168, 169], "rhs_mask": 92, "right": [0, 1, 2, 9, 248, 269, 270, 358, 418, 430, 431, 442, 444, 452], "right_shift": 0, "ring": 125, "rm": [6, 9, 148, 474], "rmsnorm": [6, 340], "rmsprop": 472, "rnn": [340, 360], "robust": 447, "roform": [6, 404], "roll": 0, "root": [0, 6, 148, 272, 289, 400], "rope": [6, 340], "rosetta": 9, "rotari": [6, 149, 404], "rotat": [149, 404], "round": [0, 248], "row": [0, 1, 2, 84, 145, 147, 174, 248, 309], "rpath": 2, "rsqrt": 0, "rtol": [0, 17, 178], "rule": [2, 472], "run": [1, 2, 3, 4, 6, 7, 8, 9, 10, 147, 242, 330, 345, 376, 473, 474, 476, 477, 478, 497, 499, 502, 503, 507, 508], "runtim": [6, 125, 334, 497, 498], "runtime_error": 2, "safetensor": [9, 205, 275, 383, 387, 472, 503, 506], "sai": [2, 6, 467, 503], "said": 6, "sake": 500, "same": [0, 2, 6, 9, 17, 39, 83, 93, 96, 101, 102, 103, 105, 106, 107, 123, 146, 148, 157, 160, 161, 162, 169, 170, 178, 185, 243, 252, 270, 271, 285, 315, 316, 318, 321, 327, 340, 343, 344, 345, 353, 361, 365, 373, 374, 398, 419, 420, 421, 422, 423, 424, 425, 426, 441, 452, 470, 480, 494, 497, 498, 499, 501, 502, 507], "sampl": [2, 5, 6, 204, 251, 252, 253, 255, 256, 259, 262, 263, 420, 421, 422, 423, 425, 426, 442, 448, 452, 494, 497, 499], "sat": 6, "save": [3, 6, 8, 205, 230, 248, 274, 275, 276, 277, 387, 499, 503], "save_gguf": 506, "save_safetensor": [387, 472, 506], "save_weight": 340, "savez": [6, 387, 506], "savez_compress": 506, "saw": [6, 500], "scalar": [0, 2, 14, 15, 17, 31, 51, 79, 83, 88, 89, 90, 91, 92, 93, 95, 130, 131, 135, 166, 167, 170, 171, 172, 173, 178, 187, 188, 189, 204, 210, 211, 212, 213, 215, 217, 233, 235, 236, 239, 243, 245, 251, 259, 262, 263, 266, 269, 274, 296, 313, 315, 318, 323, 452, 499, 500, 503, 505], "scale": [0, 2, 6, 15, 118, 146, 148, 149, 150, 169, 173, 248, 249, 255, 257, 324, 354, 355, 367, 396, 404, 405, 409, 418, 457, 474], "scale_arr": 2, "scale_factor": 418, "scale_paramet": 474, "scatter": 0, "scatter_add": 0, "scatter_add_axi": 0, "scatter_max": 0, "scatter_min": 0, "scatter_prod": 0, "schedul": [2, 228, 472, 486, 487, 488, 489, 490, 492, 507], "schema": [3, 502], "scipi": [173, 196], "scope": 340, "score": [6, 150, 448], "script": [498, 502], "sdk": 9, "se": 1, "second": [6, 9, 120, 184, 186, 187, 211, 213, 215, 269, 298, 307, 313, 343, 344, 373, 374, 440, 448, 474, 478, 497, 499, 500, 507], "second_layer_a": 503, "second_layer_b": 503, "secret": 6, "section": [1, 6, 9, 288, 452, 497, 498, 500], "see": [1, 2, 4, 6, 7, 9, 11, 12, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 198, 227, 274, 275, 322, 332, 340, 345, 346, 354, 356, 358, 362, 363, 364, 370, 371, 379, 397, 398, 399, 402, 403, 404, 405, 407, 409, 410, 411, 412, 413, 414, 416, 418, 420, 421, 422, 423, 429, 430, 431, 457, 497, 498, 499, 500, 501, 502, 505, 507], "seed": 254, "seen": [498, 504], "select": [0, 3, 9, 193, 194, 306, 318, 376, 380, 388, 502], "self": [6, 7, 10, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 114, 163, 340, 453, 470], "selu": 340, "semant": [14, 88, 90, 91, 93, 130, 131, 135, 171, 172, 187, 188, 189, 210, 215, 217, 233, 235, 239, 245, 266, 269, 296, 507], "semi": [190, 191, 256], "send": 498, "sender": 498, "sennrich": 6, "sensit": 447, "sentencepiec": 6, "separ": [6, 66, 80, 361, 448], "sequenc": [6, 16, 18, 34, 35, 57, 58, 59, 60, 64, 72, 75, 76, 77, 81, 84, 93, 103, 127, 140, 147, 152, 153, 155, 156, 158, 159, 161, 162, 167, 170, 214, 216, 218, 232, 240, 246, 251, 252, 253, 255, 256, 257, 259, 262, 263, 268, 284, 285, 286, 288, 291, 293, 297, 304, 305, 308, 312, 313, 314, 319, 345, 347, 350, 360, 366, 401, 417, 494, 507], "sequenti": [340, 467], "seri": 9, "serial": 472, "set": [2, 4, 6, 7, 9, 96, 114, 121, 123, 124, 125, 127, 128, 129, 134, 146, 148, 149, 221, 227, 228, 229, 278, 279, 295, 321, 358, 367, 369, 379, 381, 388, 389, 390, 393, 394, 399, 404, 415, 440, 452, 464, 470, 472, 474, 476, 477, 481, 494, 499, 500, 503], "set_byt": 2, "set_compute_pipeline_st": 2, "set_data": 2, "set_dtyp": 340, "set_input_arrai": 2, "set_memory_limit": 227, "set_output_arrai": 2, "set_vector_byt": 2, "setup": [2, 4, 5, 7, 9, 497, 498, 499], "sever": [6, 9, 100, 101, 102, 103, 104, 105, 106, 276, 277, 321, 497, 498, 502, 506], "sgd": [5, 7, 472, 479, 481, 486, 487, 490, 497], "shade": [1, 2], "shall": 6, "shape": [0, 2, 3, 6, 7, 66, 83, 84, 92, 93, 96, 100, 101, 102, 103, 104, 105, 106, 120, 123, 127, 128, 142, 144, 147, 150, 151, 154, 157, 160, 161, 162, 167, 168, 173, 185, 195, 203, 215, 240, 241, 251, 252, 253, 255, 256, 257, 259, 262, 263, 268, 270, 285, 312, 315, 316, 318, 319, 320, 340, 342, 343, 344, 345, 347, 348, 349, 350, 351, 352, 354, 355, 360, 365, 366, 369, 372, 373, 374, 383, 401, 419, 420, 421, 422, 423, 424, 425, 426, 441, 452, 472, 497, 499, 500, 501, 505, 507], "shapeless": [0, 96, 142, 144], "share": [8, 118, 169, 248, 249, 315, 498], "shazeer": 6, "shift": [0, 187, 269, 270, 345], "shop": 6, "should": [1, 2, 4, 5, 6, 7, 9, 84, 120, 123, 146, 147, 148, 150, 185, 220, 229, 230, 247, 248, 301, 307, 313, 316, 321, 322, 325, 340, 347, 348, 349, 350, 351, 352, 354, 355, 390, 396, 406, 441, 443, 448, 470, 496, 497, 498, 499, 500, 503, 504, 508], "show": [9, 332, 497], "shown": 2, "shuffl": 7, "side": [0, 243, 342, 343, 344, 372, 373, 374, 497], "sigma": [358, 359, 360, 366, 408, 420, 421, 422, 423, 431, 432, 437, 458, 459], "sigmoid": [0, 6, 340, 370, 407, 431, 437, 439, 459], "sign": [0, 17, 178, 332, 479], "signal": [107, 418], "signatur": [1, 147], "signedinteg": [12, 184], "signific": 248, "significantli": 498, "silent": [160, 161, 162], "silicon": [2, 6, 8, 9, 507], "silu": 340, "simd": 1, "simd_sum": 1, "simdgroup": 1, "simdgroup_s": 1, "similar": [6, 169, 184, 326, 394, 395, 396, 440, 498, 504, 506], "similarli": [2, 9, 215, 500, 503], "simpl": [2, 6, 7, 340, 357, 466, 472, 497, 498, 499, 500, 502, 503], "simple_axpbi": 2, "simple_tim": 2, "simplest": [2, 340, 498], "simpli": [2, 6, 9, 356, 368, 402, 428, 436, 455, 465, 470, 497, 498, 500, 502], "simplic": 0, "simplifi": 498, "simultan": 1, "sin": [0, 114, 409, 499, 500, 505], "sinc": [1, 2, 6, 7, 169, 224, 470, 479, 488, 497, 499, 504, 507], "sine": [0, 22, 23, 282, 283, 499, 500], "sing": 198, "singer": 475, "singl": [7, 138, 185, 205, 219, 243, 316, 343, 344, 373, 374, 497, 499, 501, 506], "singleton": [0, 16, 18, 27, 28, 125, 214, 215, 216, 218, 232, 246, 293, 297, 314, 498], "singular": [198, 202], "sinh": 0, "sinusoid": 409, "sinusoidalpositionalencod": 340, "size": [0, 1, 2, 6, 7, 52, 69, 92, 101, 102, 105, 106, 118, 140, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 167, 169, 173, 174, 184, 192, 198, 223, 228, 229, 248, 249, 252, 268, 284, 288, 291, 312, 315, 321, 322, 340, 342, 343, 344, 347, 348, 349, 350, 351, 352, 357, 365, 372, 373, 374, 398, 399, 418, 474, 498, 503, 504], "size_in_megabyt": 229, "size_t": [0, 2], "skip": [3, 84], "slice": [0, 285, 501], "slice_s": [0, 284], "slice_upd": 0, "slide": [342, 343, 344, 372, 373, 374], "slight": [6, 503], "slightli": [404, 507], "slope": 368, "slow": 497, "slowli": 6, "small": [6, 141, 146, 148, 321, 345, 361, 367, 400, 442, 447, 452, 497, 507], "smaller": [0, 9, 244, 321, 479, 497], "smallest": 198, "smile": 6, "smooth": [441, 451, 484], "smooth_l1_loss": 340, "sned": 129, "snippet": 498, "so": [1, 2, 6, 9, 170, 173, 313, 353, 418, 472, 497, 498, 503, 507], "socket": 498, "softmax": [0, 6, 150, 340, 371, 438, 441], "softmin": 340, "softplu": [340, 375, 453], "softshrink": 340, "softsign": 340, "solut": [200, 201], "solv": 340, "some": [0, 2, 5, 6, 7, 143, 381, 393, 472, 481, 497, 498, 499, 500, 502, 503], "someon": 6, "someth": [5, 6, 501], "sometim": 497, "sonoma": 9, "soon": 6, "sort": [0, 29, 30, 244, 306], "sourc": [0, 1, 2, 3, 4, 61, 127, 128, 147, 234, 308, 498], "space": [0, 2, 204, 439, 450], "spars": [0, 219], "spatial": [101, 102, 103, 105, 106, 342, 343, 344, 361, 372, 373, 374, 418], "speak": [6, 198], "specif": [1, 2, 9, 498, 500], "specifi": [0, 2, 19, 38, 101, 102, 103, 105, 106, 120, 158, 159, 167, 170, 192, 198, 204, 234, 240, 247, 252, 267, 298, 300, 301, 304, 307, 308, 313, 317, 319, 345, 415, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 464, 497, 498, 499, 500, 507], "speed": 1, "spent": 6, "split": [0, 359, 361, 432], "splittabl": 494, "sqrt": [0, 6, 136, 150, 173, 345, 358, 361, 365, 367, 369, 400, 409, 420, 421, 422, 423, 430, 473, 475, 476, 477, 484, 497], "squar": [0, 5, 6, 148, 174, 195, 203, 272, 289, 313, 326, 340, 400, 449, 451, 473, 474, 476, 477, 478, 500, 504], "squeez": [0, 418, 497], "src": [0, 127, 128], "ssh": [498, 502], "stabil": [146, 148, 345, 361, 365, 367, 400, 439, 440, 442, 473, 474, 475, 476, 477, 478, 484], "stabl": [210, 214, 286, 447], "stable_abi": 2, "stack": [0, 497], "standard": [0, 1, 4, 7, 51, 79, 215, 253, 257, 293, 417, 420, 422, 425, 498, 505], "starmap": [6, 326], "start": [0, 1, 2, 5, 6, 8, 9, 19, 149, 204, 230, 284, 285, 288, 328, 497, 499, 501, 502, 507], "start_axi": [0, 50, 164], "start_captur": 3, "start_indic": [284, 285], "state": [6, 7, 340, 360, 366, 401, 472, 481, 494, 497], "static": [9, 497], "static_cast": 2, "std": [0, 2, 4, 425, 499], "stderr": 502, "stdout": 502, "step": [0, 3, 4, 6, 7, 19, 321, 340, 360, 366, 401, 474, 481, 486, 488, 489, 490, 497, 498], "step_decai": 472, "step_siz": 490, "still": [6, 9, 198, 497, 503], "stochast": [475, 476, 478, 485, 503], "stood": 6, "stop": [0, 2, 6, 19, 204, 231, 294, 500, 501], "stop_captur": 3, "stop_gradi": [0, 500], "storag": 84, "store": 6, "str": [2, 107, 125, 132, 133, 142, 143, 144, 147, 150, 170, 176, 193, 194, 198, 205, 219, 221, 230, 273, 274, 275, 276, 277, 313, 322, 325, 329, 376, 377, 380, 381, 383, 385, 387, 393, 418, 422, 423, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452], "straight": 6, "strang": 6, "stream": [2, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 123, 124, 127, 128, 129, 130, 131, 132, 135, 136, 137, 139, 140, 141, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 318, 319, 320, 498, 507], "streamcontext": 295, "streamordevic": [0, 2], "street": 6, "strength": [479, 485], "strict": [125, 171, 188, 381, 383, 393], "strictli": [198, 229], "stride": [0, 2, 84, 100, 101, 102, 103, 104, 105, 106, 342, 343, 344, 347, 348, 349, 350, 351, 352, 372, 373, 374, 404, 501], "string": [0, 2, 133, 142, 147, 176, 221, 243, 499, 504, 506], "stronger": 502, "structur": [2, 321, 480, 500], "stub": 9, "style": [2, 14, 17, 88, 90, 91, 130, 131, 135, 171, 172, 178, 187, 188, 189, 210, 215, 217, 233, 235, 239, 245, 266, 269, 296], "su": 6, "sub": [0, 7, 120, 261, 284, 285, 307, 322], "subarrai": [120, 288], "subclass": 470, "subdivid": 1, "subdtyp": 184, "subgradi": 475, "sublinear": 474, "submodul": [6, 7, 340, 377, 381, 382, 393, 395], "subnetwork": 498, "suboptim": 499, "subscript": [132, 133], "subsect": 6, "subsequ": [125, 472, 498, 502], "subset": [340, 380], "substanti": 9, "subtl": 497, "subtract": [0, 39], "subtyp": [184, 332], "succe": 125, "successfulli": 498, "sudo": [9, 229, 498], "suggest": 498, "sum": [0, 2, 5, 14, 113, 124, 144, 177, 198, 214, 286, 304, 307, 340, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 498, 501, 504], "sum_": [198, 447], "sum_i": 438, "sum_j": [460, 461], "summat": [132, 133], "super": [6, 7, 340, 470], "superset": [326, 480], "support": [1, 2, 6, 8, 9, 17, 92, 102, 105, 106, 150, 164, 173, 178, 190, 191, 193, 194, 195, 199, 202, 203, 205, 215, 248, 256, 498, 500, 501, 504, 506], "suppos": [500, 507], "sure": [2, 3, 6, 9, 340, 497], "surpass": [422, 423], "surpris": 6, "sw": 1, "swap": [0, 107, 228, 298, 395], "swapax": [0, 114], "swiglu": 6, "swish": [407, 459], "switch": 9, "symbol": 479, "symmetr": [101, 102, 105, 106, 190, 191, 193, 194], "symmetri": [193, 194], "synchron": [2, 497], "syntax": [39, 501], "synthet": 5, "sysctl": 229, "system": [2, 4, 6, 9, 200, 201, 221, 222, 223, 229], "t": [0, 1, 2, 4, 6, 9, 136, 147, 150, 169, 190, 191, 249, 313, 340, 360, 366, 401, 473, 474, 475, 476, 477, 478, 479, 484, 485, 497, 499, 500, 507], "t_kv": 150, "t_q": 150, "tabl": [1, 198, 332, 357], "take": [0, 2, 6, 7, 88, 89, 90, 91, 96, 142, 168, 170, 185, 217, 233, 241, 249, 301, 313, 316, 317, 320, 327, 328, 342, 343, 344, 372, 373, 374, 396, 439, 494, 498, 499, 500, 501, 502, 506, 507, 508], "take_along_axi": [0, 196, 501], "taken": [120, 300, 307], "talk": 498, "tan": 0, "tangent": [0, 2, 24, 25, 26, 114, 185, 302, 303, 416, 465], "tangent_i": 2, "tangent_x": 2, "tanh": [0, 340, 358, 360, 366, 375, 401, 430, 453], "target": [2, 313, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 497], "target_include_directori": 2, "target_link_librari": [2, 4], "target_link_opt": 2, "target_sourc": 2, "task": [228, 447], "tau": 485, "tcp": 498, "tediou": 498, "tell": [4, 6, 497, 504], "temp": 6, "templat": [0, 1, 2, 147], "ten": 503, "tend": 479, "tensor": [205, 304, 452, 504], "tensordot": 0, "term": [2, 442, 473, 474, 475, 476, 477, 478, 484], "termin": [9, 502], "test": [7, 9, 498, 502], "test_imag": 7, "test_label": 7, "text": [6, 358, 360, 366, 375, 401, 408, 415, 420, 421, 422, 423, 430, 433, 434, 435, 442, 443, 444, 447, 448, 451, 453, 454, 457, 458, 463, 464, 474, 479], "textrm": [248, 358, 359, 429, 432], "tf": 504, "tgp_size": 2, "th": [110, 111, 112, 113, 119, 145, 193, 488], "than": [1, 2, 6, 79, 107, 120, 131, 149, 168, 171, 172, 188, 189, 190, 191, 193, 194, 195, 196, 202, 203, 215, 227, 229, 324, 326, 404, 415, 418, 448, 451, 464, 474, 479, 497, 499, 500, 507], "thank": 503, "thei": [1, 2, 5, 6, 9, 17, 107, 169, 178, 406, 443, 470, 479, 496, 497, 498, 499, 503, 505, 506, 507], "them": [0, 2, 6, 123, 340, 381, 393, 498, 499, 502, 507], "themselv": [2, 497], "thi": [0, 1, 2, 4, 6, 7, 9, 16, 17, 18, 19, 27, 28, 29, 30, 84, 114, 134, 142, 144, 147, 168, 169, 173, 176, 178, 185, 190, 191, 193, 194, 195, 198, 199, 202, 203, 210, 214, 215, 216, 218, 220, 222, 229, 232, 244, 246, 252, 279, 286, 287, 288, 293, 297, 300, 306, 314, 321, 324, 327, 328, 340, 353, 354, 355, 359, 360, 366, 377, 378, 380, 381, 384, 385, 386, 391, 393, 394, 395, 396, 399, 401, 415, 420, 421, 422, 423, 430, 431, 432, 439, 447, 464, 470, 481, 496, 497, 498, 499, 500, 502, 503, 504, 506], "thin": 502, "thing": [2, 6], "third": [192, 344, 374, 498, 499], "thompson": 354, "those": [2, 6, 340], "though": [2, 6, 497, 499, 503, 504], "thousand": 503, "thread": [1, 2], "thread_index_in_simdgroup": 1, "thread_position_in_grid": [1, 2, 147], "threadgroup": [1, 2, 147], "threads_per_simdgroup": 1, "three": [6, 87, 344, 374, 418], "threefri": 494, "threshold": [415, 444, 451, 464], "through": [1, 2, 294, 417, 479, 497, 498, 499, 500, 504], "throw": [2, 96, 125], "thu": [6, 340], "thumb": 472, "tic": 497, "tieleman": 484, "tile": [0, 150], "time": [2, 6, 9, 228, 305, 340, 360, 366, 401, 497, 498, 500, 503, 507], "timeit": [497, 500], "titl": 2, "tmp": [1, 147], "to_quant": 322, "to_stream": 2, "toc": 497, "togeth": [0, 1, 2, 7, 248, 326, 327, 498], "tok_embed": 6, "token": [6, 357, 398], "told": 6, "toler": [0, 17, 178], "too": [184, 497, 503], "took": 6, "tool": 9, "top": [2, 306, 369, 418], "topk": 0, "torch": [6, 504], "torch_weight": 6, "total": [229, 500], "total_norm": 324, "tpi": 497, "tpng": 498, "trace": [0, 3, 144, 497], "trace_fil": 3, "tracer": 394, "track": [2, 340, 345], "track_running_stat": 345, "trade": 503, "tradit": [6, 149, 354, 355, 404], "train": [6, 7, 340, 345, 353, 354, 355, 379, 381, 393, 420, 421, 499], "train_imag": [7, 472], "train_label": [7, 472], "trainabl": [7, 323, 340, 470], "trainable_paramet": [340, 380, 481], "transfer": 502, "transform": [1, 6, 8, 114, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 173, 323, 340, 345, 361, 367, 369, 380, 381, 393, 399, 404, 501], "transformerencod": 276, "transit": 488, "translat": [146, 367], "transpos": [0, 6, 32, 104, 105, 106, 169, 249, 350, 351, 352], "treat": [0, 2, 114, 158, 159, 161, 162, 300, 418, 497], "tree": [8, 96, 138, 170, 313, 317, 321, 325, 326, 327, 328, 329, 480, 481, 483, 492, 500], "tree_flatten": [276, 326, 329, 340, 472, 499], "tree_map": [327, 340, 498], "tree_unflatten": [6, 472, 499], "trembl": 6, "tri": [0, 125], "triangl": [193, 194, 309], "triangular": [190, 191, 201, 203], "trigger": 497, "tril": 0, "trilinear": 418, "triplet": 452, "triplet_loss": 340, "triu": 0, "true": [0, 1, 2, 4, 5, 6, 17, 42, 43, 44, 45, 83, 96, 110, 111, 112, 113, 147, 149, 169, 178, 184, 190, 191, 198, 202, 205, 219, 228, 249, 286, 318, 322, 325, 326, 327, 328, 332, 340, 345, 347, 348, 349, 350, 351, 352, 360, 361, 365, 366, 367, 369, 380, 381, 383, 390, 393, 399, 401, 404, 409, 417, 418, 439, 447, 474, 476, 477, 497, 499], "truncat": [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 262], "truth": [5, 441, 451], "try": [2, 9, 498], "tupl": [0, 31, 66, 69, 80, 97, 101, 102, 103, 105, 106, 127, 131, 133, 138, 140, 142, 176, 185, 193, 196, 197, 198, 199, 202, 243, 248, 268, 270, 284, 285, 291, 312, 313, 316, 325, 326, 327, 328, 329, 342, 343, 344, 348, 349, 351, 352, 372, 373, 374, 383, 385, 406, 418, 474, 476, 477, 478, 479, 496, 499, 500], "tutori": 2, "twice": 507, "two": [0, 2, 14, 15, 17, 25, 83, 86, 88, 90, 91, 92, 120, 130, 135, 152, 155, 161, 168, 169, 171, 172, 178, 186, 188, 189, 190, 191, 192, 193, 194, 195, 199, 202, 203, 210, 215, 217, 233, 235, 239, 242, 298, 328, 343, 359, 366, 373, 432, 440, 497, 498, 499, 500, 501, 507], "txt": [2, 4], "type": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 69, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 139, 140, 141, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 227, 228, 229, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 324, 325, 328, 340, 388, 417, 419, 420, 421, 422, 423, 424, 425, 426, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 497, 499, 501, 504], "type_to_nam": 2, "typenam": [0, 1, 2], "typic": [0, 150, 321, 357, 472, 497, 503], "u": [1, 2, 4, 190, 193, 194, 196, 202, 369, 395, 492, 498, 502, 503], "u_": 473, "u_t": 473, "uint": [1, 2, 147], "uint16": [12, 332], "uint3": 1, "uint32": [12, 27, 28, 29, 30, 252, 332], "uint64": [12, 332], "uint8": [12, 332], "ultra": 6, "unabl": 9, "unam": 9, "unari": 497, "unchang": [149, 294, 404], "uncheck": 9, "uncompress": 276, "undefin": [0, 29, 114, 190, 191, 244, 256, 501], "under": [2, 198], "underli": [2, 315], "understand": [6, 420, 421], "unevalu": 143, "unexpect": [2, 19], "unexpectedli": 502, "unflatten": 0, "unfreez": [340, 381], "unfrozen": 393, "unifi": 8, "uniform": [3, 340, 369, 383, 421, 423, 467, 494, 497, 500, 507], "uniformli": 263, "unintend": 0, "union": [19, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 85, 86, 87, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 182, 183, 184, 186, 193, 194, 202, 221, 274, 295], "uniqu": [2, 200, 201, 494, 498], "unique_ptr": 2, "unit": [346, 356, 358, 359, 360, 368, 402, 403, 405, 407, 420, 421, 422, 423, 427, 428, 429, 430, 431, 432, 436, 455, 456, 457, 459], "unittest": 9, "univers": 198, "unless": [6, 17, 178, 198, 470], "unlik": [6, 17, 178, 196, 354, 355, 389], "unnecessari": [2, 6], "unnorm": [252, 439, 441], "unscal": 474, "unsign": [169, 248, 249, 332], "unsignedinteg": 12, "unspecifi": [16, 18, 19, 27, 28, 29, 30, 97, 110, 111, 112, 113, 167, 214, 216, 218, 232, 240, 244, 246, 267, 286, 287, 293, 297, 300, 306, 307, 314, 319, 508], "unsqueez": 6, "unsupport": 205, "until": [2, 321, 503, 505], "unus": 2, "up": [1, 2, 6, 114, 497], "upcast": 2, "updat": [0, 1, 2, 5, 6, 7, 39, 96, 285, 322, 326, 328, 345, 376, 377, 383, 388, 389, 390, 395, 472, 474, 477, 479, 480, 481, 485, 486, 487, 488, 489, 490, 497, 498, 499, 503], "update_modul": 340, "uplo": [193, 194], "upon": [6, 326, 327], "upper": [190, 191, 193, 194, 201, 203, 248, 259, 262, 263, 426], "upsampl": 340, "us": [0, 3, 5, 6, 7, 8, 9, 19, 39, 84, 114, 118, 121, 123, 124, 127, 128, 129, 131, 147, 149, 164, 169, 187, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 215, 222, 223, 224, 227, 229, 248, 249, 267, 268, 269, 270, 299, 312, 321, 325, 328, 332, 334, 340, 343, 344, 354, 357, 358, 360, 366, 369, 373, 374, 376, 380, 387, 394, 396, 398, 399, 401, 404, 409, 417, 418, 422, 423, 430, 431, 440, 467, 470, 472, 473, 474, 476, 477, 478, 479, 480, 481, 494, 496, 497, 498, 499, 500, 501, 502, 505, 507], "usag": [417, 497, 498], "user": [2, 6, 340], "usual": [357, 398, 496, 503], "util": [1, 2, 6, 8, 9, 276, 340, 472, 502], "v": [6, 107, 150, 193, 340, 381, 504], "v_": [473, 475, 476, 477, 478, 484, 485], "v_t": [473, 475, 476, 477, 478, 484, 485], "val": [0, 31, 167], "valid": [7, 107, 164, 317, 325, 381, 393, 496, 498], "valid_parameter_filt": 376, "valu": [0, 1, 5, 6, 12, 13, 17, 19, 27, 28, 51, 79, 83, 95, 125, 142, 145, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 167, 176, 178, 192, 198, 202, 204, 221, 229, 236, 243, 247, 251, 252, 253, 255, 256, 257, 259, 262, 263, 270, 274, 300, 301, 313, 317, 323, 325, 326, 327, 328, 332, 343, 344, 346, 353, 354, 355, 356, 362, 365, 369, 373, 374, 380, 396, 397, 413, 415, 417, 419, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 464, 470, 474, 477, 486, 487, 489, 490, 500], "value_and_grad": [7, 114, 340, 394, 470, 472, 483, 497, 500, 504, 505], "value_and_grad_fn": 503, "value_cach": 6, "value_dim": 396, "value_input_dim": 396, "value_output_dim": 396, "value_proj": 6, "valueerror": [114, 198, 383, 500], "values_hat": 6, "van": 198, "var": [0, 345, 361, 365, 367, 442], "variabl": [9, 96, 114, 121, 134, 142, 143, 144, 170, 185, 313, 316, 317, 497, 498, 499], "varianc": [0, 293, 314, 345, 361, 442], "variant": [6, 451, 478], "variou": 198, "vector": [0, 2, 5, 8, 177, 185, 198, 300, 316, 317, 357, 441, 499, 505], "verbos": [1, 147, 498], "veri": [6, 396, 502, 503, 507], "verifi": [5, 9], "versa": 270, "version": [2, 4, 9, 118, 142, 144, 176, 210, 214, 248, 286, 317, 494, 500, 501], "versu": 497, "via": [9, 114, 480, 483, 498, 502, 503, 504], "vice": 270, "video": 355, "view": [0, 3, 84, 504], "virtual": 2, "visual": 143, "vjp": [2, 114, 505], "vmap": [2, 114, 499, 500, 503, 505], "vmap_add": 500, "vocab_s": 6, "vocabulari": [357, 398], "void": [1, 2], "vt": 202, "w": [0, 1, 5, 101, 102, 105, 106, 118, 169, 193, 248, 249, 313, 327, 345, 348, 349, 351, 352, 354, 355, 369, 472, 485, 500], "w1": [6, 324], "w2": [6, 324], "w3": 6, "w_": [360, 366, 401, 473, 474, 475, 476, 477, 478, 479, 484, 485], "w_1": 248, "w_g": 248, "w_i": [118, 248], "w_in": 1, "w_q": 248, "w_star": 5, "w_stride": 1, "w_t": [473, 475, 476, 477, 478, 479, 484, 485], "wa": [4, 6, 84, 127, 128, 498, 499, 503], "wai": [2, 6, 9, 340, 418, 497, 498, 499, 500, 501, 502], "wait": [2, 6, 228], "walk": [6, 499], "walkthrough": 2, "walsh": 173, "want": [1, 2, 6, 498, 499, 500, 502, 507], "warm": [2, 497], "warmup_init": 474, "watch": [6, 497], "wd": 479, "we": [0, 1, 2, 5, 6, 7, 114, 118, 127, 128, 169, 248, 249, 340, 357, 398, 406, 477, 479, 494, 496, 497, 498, 499, 500, 502, 503, 507], "weight": [0, 5, 100, 101, 102, 103, 104, 105, 106, 146, 148, 326, 340, 383, 387, 398, 399, 439, 441, 470, 474, 477, 479, 481, 485, 500, 503], "weight_decai": [474, 477, 479, 485], "weight_fil": 6, "weights_fp16": 503, "well": [6, 340, 381, 393, 396, 498, 503], "wen": 6, "went": 6, "were": [6, 507], "wet": 6, "what": [2, 6, 326, 502], "whatsoev": 6, "whc": 354, "when": [0, 1, 2, 6, 8, 9, 96, 103, 114, 129, 190, 191, 193, 194, 195, 198, 202, 203, 205, 347, 348, 349, 350, 351, 352, 418, 422, 423, 439, 445, 451, 470, 472, 488, 494, 497, 498, 499, 507], "where": [0, 4, 7, 145, 178, 191, 248, 313, 317, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 358, 360, 361, 365, 366, 367, 369, 380, 397, 400, 401, 415, 422, 423, 428, 429, 431, 442, 448, 454, 457, 459, 464, 481, 498, 500, 501], "wherea": 500, "whether": [142, 144, 147, 169, 193, 194, 201, 203, 249, 360, 366, 380, 396, 401, 439, 442, 448], "which": [0, 1, 2, 6, 7, 8, 9, 19, 38, 84, 96, 103, 120, 123, 124, 125, 127, 128, 129, 138, 142, 144, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 170, 176, 179, 180, 181, 182, 183, 185, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 205, 219, 230, 248, 252, 253, 267, 268, 270, 273, 274, 275, 276, 277, 291, 292, 300, 307, 312, 313, 316, 317, 322, 343, 344, 354, 355, 358, 373, 374, 376, 380, 404, 439, 441, 444, 448, 451, 467, 480, 481, 494, 497, 498, 499, 500, 501, 502, 503, 507, 508], "while": [2, 3, 6, 9, 268, 404, 503, 504], "whistl": 2, "who": 6, "whose": [145, 322, 323], "why": 6, "wi": 498, "wide": 503, "width": [343, 344, 345, 348, 349, 351, 352, 354, 355, 373, 374, 398, 399], "window": [9, 342, 343, 344, 372, 373, 374], "wipe": 9, "wire": 229, "wired_limit_mb": 229, "wise": [0, 2, 13, 14, 20, 21, 22, 23, 24, 25, 26, 88, 89, 90, 91, 94, 108, 109, 130, 131, 135, 136, 137, 139, 141, 165, 166, 171, 172, 178, 187, 188, 189, 206, 207, 208, 209, 210, 211, 212, 213, 217, 233, 235, 237, 239, 245, 265, 266, 269, 272, 280, 281, 282, 283, 289, 290, 296, 302, 303, 346, 354, 355, 364, 375, 397, 408, 427, 434, 435, 437, 438, 453, 454, 456, 459, 460, 461, 462, 497], "wish": 9, "with_logit": 439, "within": [0, 3, 29, 178], "without": [1, 6, 8, 294, 396, 466, 496, 497, 498, 499, 502, 503, 504, 507], "wk": 6, "wl": 2, "wo": 6, "word": 0, "work": [2, 3, 6, 228, 332, 497, 498, 499, 500, 501, 502, 503], "workhors": 340, "world": [329, 498], "world2": 498, "world_ani": 498, "world_mpi": 498, "world_r": 498, "worri": [1, 503], "would": [2, 6, 418, 498, 499, 501, 503, 504, 507], "wq": 6, "wrap": [114, 340], "wrapper": [499, 502], "write": [0, 1, 6, 340, 504], "written": [2, 499], "wrong": 499, "wrt": 323, "wv": 6, "x": [0, 1, 2, 4, 5, 6, 7, 39, 92, 114, 123, 124, 128, 129, 136, 141, 142, 143, 146, 147, 148, 169, 173, 174, 176, 198, 249, 253, 258, 271, 276, 280, 310, 311, 318, 326, 328, 340, 342, 343, 344, 345, 346, 356, 358, 359, 361, 365, 367, 368, 369, 372, 373, 374, 375, 376, 397, 400, 402, 408, 409, 415, 418, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 451, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 470, 472, 479, 497, 498, 499, 500, 501, 503, 504, 505, 507], "x1": 440, "x2": 440, "x86_64": 9, "x_1": [440, 448], "x_2": [440, 448], "x_cast": 2, "x_grad": 1, "x_i": [438, 460, 461], "x_j": [460, 461], "x_offset": 2, "x_ptr": 2, "x_shape": 1, "x_stride": 2, "x_t": [360, 366, 401], "x_view": 504, "xcode": 9, "xcodeproj": 3, "xcrun": 9, "xf": 366, "xg": 366, "xi": 366, "xn": 360, "xo": 366, "xor": 91, "xr": 360, "xy": [0, 219], "xz": 360, "x\u00b2": 504, "y": [0, 2, 4, 5, 6, 7, 39, 114, 142, 143, 173, 176, 318, 340, 345, 354, 361, 365, 367, 369, 400, 443, 448, 451, 472, 475, 497, 498, 499, 500, 503, 504], "y_": [443, 447], "y_cast": 2, "y_hat": 340, "y_offset": 2, "y_ptr": 2, "y_stride": 2, "ye": 6, "year": 6, "yet": [6, 340, 470, 481, 500, 501, 503, 505], "yield": [6, 7, 494], "you": [2, 3, 4, 6, 7, 8, 9, 229, 340, 409, 417, 467, 494, 497, 498, 499, 500, 501, 502, 504, 506, 507], "your": [2, 6, 9, 470, 498, 500, 503], "z": [2, 360, 497, 499, 503], "z_t": 360, "zeiler": 473, "zero": [0, 142, 145, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 192, 219, 226, 285, 309, 310, 311, 320, 340, 342, 343, 344, 353, 354, 355, 383, 419, 420, 421, 422, 423, 424, 425, 426, 467, 472, 474, 499, 501], "zero_grad": 500, "zeros_lik": [0, 196], "zhang": 6, "zip": [6, 7], "zip_saf": 2}, "titles": ["Operations", "Custom Metal Kernels", "Custom Extensions in MLX", "Metal Debugger", "Using MLX in C++", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.conj", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.std", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array.view", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_invert", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv3d", "mlx.core.conv_general", "mlx.core.conv_transpose1d", "mlx.core.conv_transpose2d", "mlx.core.conv_transpose3d", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.custom_function", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.distributed.Group", "mlx.core.distributed.all_gather", "mlx.core.distributed.all_sum", "mlx.core.distributed.init", "mlx.core.distributed.is_available", "mlx.core.distributed.recv", "mlx.core.distributed.recv_like", "mlx.core.distributed.send", "mlx.core.divide", "mlx.core.divmod", "mlx.core.einsum", "mlx.core.einsum_path", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.export_function", "mlx.core.export_to_dot", "mlx.core.exporter", "mlx.core.eye", "mlx.core.fast.layer_norm", "mlx.core.fast.metal_kernel", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.finfo", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.hadamard_transform", "mlx.core.identity", "mlx.core.imag", "mlx.core.import_function", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isfinite", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.kron", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.cholesky_inv", "mlx.core.linalg.cross", "mlx.core.linalg.eigh", "mlx.core.linalg.eigvalsh", "mlx.core.linalg.inv", "mlx.core.linalg.lu", "mlx.core.linalg.lu_factor", "mlx.core.linalg.norm", "mlx.core.linalg.qr", "mlx.core.linalg.solve", "mlx.core.linalg.solve_triangular", "mlx.core.linalg.svd", "mlx.core.linalg.tri_inv", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.clear_cache", "mlx.core.metal.device_info", "mlx.core.metal.get_active_memory", "mlx.core.metal.get_cache_memory", "mlx.core.metal.get_peak_memory", "mlx.core.metal.is_available", "mlx.core.metal.reset_peak_memory", "mlx.core.metal.set_cache_limit", "mlx.core.metal.set_memory_limit", "mlx.core.metal.set_wired_limit", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.nan_to_num", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.put_along_axis", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.laplace", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.permutation", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.real", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.roll", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.slice", "mlx.core.slice_update", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.unflatten", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.view", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.average_gradients", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Distributed Communication", "Export Functions", "Fast", "FFT", "Linear Algebra", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.AvgPool3d", "mlx.nn.BatchNorm", "mlx.nn.CELU", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.ConvTranspose1d", "mlx.nn.ConvTranspose2d", "mlx.nn.ConvTranspose3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.ELU", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GLU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.HardShrink", "mlx.nn.HardTanh", "mlx.nn.Hardswish", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.LeakyReLU", "mlx.nn.Linear", "mlx.nn.LogSigmoid", "mlx.nn.LogSoftmax", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.MaxPool3d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.ReLU6", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.Sigmoid", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softmax", "mlx.nn.Softmin", "mlx.nn.Softplus", "mlx.nn.Softshrink", "mlx.nn.Softsign", "mlx.nn.Step", "mlx.nn.Tanh", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.celu", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hard_shrink", "mlx.nn.hard_tanh", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softmin", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Distributed Communication", "Exporting Functions", "Function Transforms", "Indexing Arrays", "Launching Distributed Programs", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "titleterms": {"A": 507, "In": 501, "The": 340, "ab": [13, 33], "adadelta": 473, "adafactor": 474, "adagrad": 475, "adam": 476, "adamax": 478, "adamw": 477, "add": 14, "addmm": 15, "algebra": 338, "alibi": 341, "all": [6, 16, 34, 498], "all_gath": 123, "all_sum": 124, "allclos": 17, "ani": [18, 35], "api": [8, 9], "appli": 376, "apply_gradi": 480, "apply_to_modul": 377, "arang": 19, "arcco": 20, "arccosh": 21, "arcsin": 22, "arcsinh": 23, "arctan": 24, "arctan2": 25, "arctanh": 26, "argmax": [27, 36], "argmin": [28, 37], "argpartit": 29, "argsort": 30, "arrai": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 331, 501, 506], "array_equ": 83, "as_strid": 84, "astyp": 38, "atleast_1d": 85, "atleast_2d": 86, "atleast_3d": 87, "attent": 6, "automat": 500, "average_gradi": [321, 498], "avgpool1d": 342, "avgpool2d": 343, "avgpool3d": 344, "back": 2, "backend": 498, "basic": [497, 499, 505], "batchnorm": 345, "benchmark": 6, "bernoulli": 251, "binari": 9, "binary_cross_entropi": 439, "bind": 2, "bitwise_and": 88, "bitwise_invert": 89, "bitwise_or": 90, "bitwise_xor": 91, "block_masked_mm": 92, "broadcast_to": 93, "build": [2, 9], "c": [4, 8, 9, 499], "categor": 252, "ceil": 94, "celu": [346, 427], "children": 378, "choleski": 190, "cholesky_inv": 191, "class": 340, "clear_cach": 220, "clip": 95, "clip_grad_norm": 324, "cmake": 2, "co": [41, 108], "code": [2, 6], "common": 491, "commun": [334, 498], "compil": [96, 497], "complex": 1, "comput": 503, "concaten": 97, "conj": [40, 98], "conjug": 99, "constant": 419, "conv1d": [100, 347], "conv2d": [101, 348], "conv3d": [102, 349], "conv_gener": 103, "conv_transpose1d": 104, "conv_transpose2d": 105, "conv_transpose3d": 106, "convers": 504, "convert": 6, "convolv": 107, "convtranspose1d": 350, "convtranspose2d": 351, "convtranspose3d": 352, "core": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 330], "cosh": 109, "cosine_decai": 486, "cosine_similarity_loss": 440, "cpu": 2, "cross": 192, "cross_entropi": 441, "cummax": [42, 110], "cummin": [43, 111], "cumprod": [44, 112], "cumsum": [45, 113], "custom": [1, 2], "custom_funct": 114, "data": 332, "debug": 497, "debugg": 3, "default_devic": 115, "default_stream": 116, "defin": 498, "degre": 117, "dequant": 118, "devic": [10, 333], "device_info": 221, "diag": [46, 119], "diagon": [47, 120], "differ": 501, "differenti": 500, "disable_compil": 121, "distribut": [122, 123, 124, 125, 126, 127, 128, 129, 334, 498, 502], "divid": 130, "divmod": 131, "download": [2, 6], "dropout": 353, "dropout2d": 354, "dropout3d": 355, "dtype": [11, 48], "dtypecategori": 12, "eigh": 193, "eigvalsh": 194, "einsum": 132, "einsum_path": 133, "elu": [356, 428], "embed": 357, "enable_compil": 134, "encod": 6, "end": 2, "equal": 135, "erf": 136, "erfinv": 137, "eval": [138, 379], "evalu": 503, "exampl": [1, 2, 8, 497, 498, 499, 507], "exp": [49, 139], "expand_dim": 140, "expm1": 141, "exponential_decai": 487, "export": [144, 335, 499], "export_funct": 142, "export_to_dot": 143, "extens": 2, "ey": 145, "fast": [146, 147, 148, 149, 150, 336], "fft": [151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 337], "fft2": 152, "fftn": 153, "filter_and_map": 380, "finfo": 163, "flatten": [50, 164], "floor": 165, "floor_divid": 166, "format": 506, "found": 9, "framework": 504, "freez": 381, "from": [9, 501], "full": [6, 167], "function": [335, 466, 469, 497, 499, 500, 505], "further": 8, "gather_mm": 168, "gather_qmm": 169, "gaussian_nll_loss": 442, "gelu": [358, 429], "gelu_approx": 430, "gelu_fast_approx": 431, "gener": 6, "get": 498, "get_active_memori": 222, "get_cache_memori": 223, "get_peak_memori": 224, "glorot_norm": 420, "glorot_uniform": 421, "glu": [359, 432], "gpu": 2, "grad": [170, 340], "graph": [497, 503, 505], "greater": 171, "greater_equ": 172, "grid": 1, "group": 122, "groupnorm": 361, "gru": 360, "guid": 505, "gumbel": 253, "hadamard_transform": 173, "hard_shrink": 433, "hard_tanh": 434, "hardshrink": 362, "hardswish": [364, 435], "hardtanh": 363, "he_norm": 422, "he_uniform": 423, "hinge_loss": 443, "host": [498, 502], "huber_loss": 444, "ident": [174, 424], "ifft": 154, "ifft2": 155, "ifftn": 156, "imag": 175, "implement": [2, 6], "import": 499, "import_funct": 176, "index": 501, "infer": 6, "init": [125, 419, 420, 421, 422, 423, 424, 425, 426, 481], "initi": 467, "inner": 177, "inspect": 340, "instal": [8, 9, 498], "instancenorm": 365, "introduc": 2, "inv": 195, "irfft": 157, "irfft2": 158, "irfftn": 159, "is_avail": [126, 225], "isclos": 178, "isfinit": 179, "isinf": 180, "isnan": 181, "isneginf": 182, "isposinf": 183, "issubdtyp": 184, "item": 51, "items": 52, "jax": 504, "join_schedul": 488, "jvp": 185, "kei": 254, "kernel": 1, "kl_div_loss": 445, "kron": 186, "l1_loss": 446, "laplac": 255, "launch": 502, "layer": [6, 7, 468], "layer_norm": 146, "layernorm": 367, "lazi": 503, "leaf_modul": 382, "leaky_relu": 436, "leakyrelu": 368, "left_shift": 187, "less": 188, "less_equ": 189, "linalg": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203], "linear": [5, 338, 369], "linear_schedul": 489, "linspac": 204, "lion": 479, "llm": 6, "load": [6, 205, 472, 506], "load_weight": 383, "log": [53, 206], "log10": [54, 207], "log1p": [55, 208], "log2": [56, 209], "log_cosh_loss": 447, "log_sigmoid": 437, "log_softmax": 438, "logaddexp": 210, "logical_and": 211, "logical_not": 212, "logical_or": 213, "logsigmoid": 370, "logsoftmax": 371, "logsumexp": [57, 214], "loss": [439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 469], "lstm": 366, "lu": 196, "lu_factor": 197, "margin_ranking_loss": 448, "matmul": 215, "max": [58, 216], "maximum": 217, "maxpool1d": 372, "maxpool2d": 373, "maxpool3d": 374, "mean": [59, 218], "memori": 507, "meshgrid": 219, "metal": [1, 3, 9, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 339], "metal_kernel": 147, "min": [60, 232], "minim": 9, "minimum": 233, "mish": [375, 453], "mlx": [2, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490], "model": 6, "modul": [340, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 470, 499], "more": 499, "moveaxi": [61, 234], "mpi": [498, 502], "mse_loss": 449, "multi": 7, "multiheadattent": 396, "multipl": 499, "multipli": 235, "multivariate_norm": 256, "named_modul": 385, "nan_to_num": 236, "nbyte": 62, "ndim": 63, "neg": 237, "network": 340, "neural": 340, "new_stream": 238, "nll_loss": 450, "nn": [321, 322, 323, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 498], "norm": 198, "normal": [257, 425], "not_equ": 239, "numpi": [501, 504], "ones": 240, "ones_lik": 241, "onli": 503, "oper": [0, 2, 471], "optim": [324, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492], "option": 9, "other": 504, "outer": 242, "packag": 4, "pad": 243, "paramet": [340, 386], "partit": 244, "perceptron": 7, "permut": 258, "place": 501, "power": 245, "prelu": [397, 454], "primit": 2, "prod": [64, 246], "program": [498, 502], "provid": 502, "pure": 497, "put": 6, "put_along_axi": 247, "python": [2, 8, 9], "pytorch": 504, "qr": 199, "quantiz": [248, 322], "quantized_matmul": 249, "quantizedembed": 398, "quantizedlinear": 399, "quick": [340, 505], "radian": 250, "randint": 259, "random": [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 494], "read": 8, "real": 264, "reciproc": [65, 265], "recv": 127, "recv_lik": 128, "reduc": 498, "refer": 8, "regress": 5, "relu": [402, 455], "relu6": [403, 456], "remaind": 266, "remot": [498, 502], "repeat": 267, "requir": 9, "reset_peak_memori": 226, "reshap": [66, 268], "result": 2, "rfft": 160, "rfft2": 161, "rfftn": 162, "right_shift": 269, "ring": [498, 502], "rms_norm": 148, "rmsnorm": 400, "rmsprop": 484, "rnn": 401, "roll": 270, "rope": [149, 404], "round": [67, 271], "rsqrt": [68, 272], "run": 498, "sampl": 1, "save": [273, 472, 506], "save_gguf": 274, "save_safetensor": 275, "save_weight": 387, "savez": 276, "savez_compress": 277, "scaled_dot_product_attent": 150, "schedul": 493, "script": [2, 6], "seed": 260, "select": 498, "selu": [405, 457], "send": 129, "sequenti": 406, "serial": 506, "set": [498, 502], "set_cache_limit": 227, "set_default_devic": 278, "set_default_stream": 279, "set_dtyp": 388, "set_memory_limit": 228, "set_wired_limit": 229, "setuptool": 2, "sgd": 485, "shape": [1, 69], "shapeless": [497, 499], "shell": 9, "sigmoid": [280, 408, 458], "sign": 281, "silu": [407, 459], "simpl": [1, 507], "sin": [70, 282], "sinh": 283, "sinusoidalpositionalencod": 409, "size": [9, 71], "slice": 284, "slice_upd": 285, "smooth_l1_loss": 451, "softmax": [286, 410, 460], "softmin": [411, 461], "softplu": [412, 462], "softshrink": [413, 463], "softsign": 414, "solv": 200, "solve_triangular": 201, "sort": 287, "sourc": 9, "specif": 502, "specifi": 508, "speedup": 497, "split": [72, 261, 288], "sqrt": [73, 289], "squar": [74, 290], "squeez": [75, 291], "stack": 292, "start": [340, 498, 505], "start_captur": 230, "state": [389, 482], "std": [76, 293], "step": [415, 464], "step_decai": 490, "stop_captur": 231, "stop_gradi": 294, "stream": [295, 330, 333, 508], "stride": 1, "subtract": 296, "sum": [77, 297], "support": 332, "svd": 202, "swapax": [78, 298], "synchron": 299, "t": 32, "take": 300, "take_along_axi": 301, "tan": 302, "tanh": [303, 416, 465], "tensordot": 304, "tensorflow": 504, "thunderbolt": 498, "tile": 305, "togeth": 6, "tolist": 79, "topk": 306, "trace": [307, 499], "train": [390, 392, 497, 498], "trainable_paramet": 391, "transform": [2, 417, 495, 497, 499, 500, 503, 505], "transpos": [80, 308], "tree": 496, "tree_flatten": 325, "tree_map": 326, "tree_map_with_path": 327, "tree_reduc": 328, "tree_unflatten": 329, "tri": 309, "tri_inv": 203, "tril": 310, "triplet_loss": 452, "triu": 311, "troubleshoot": 9, "truncated_norm": 262, "tune": 498, "type": 332, "unflatten": 312, "unfreez": 393, "unifi": 507, "uniform": [263, 426], "up": [498, 502], "updat": [340, 394, 483, 501], "update_modul": 395, "upsampl": 418, "us": [1, 2, 4, 503, 508], "usag": [2, 8, 502], "util": [325, 326, 327, 328, 329, 496, 498], "valu": 340, "value_and_grad": [313, 323], "var": [81, 314], "variabl": 4, "vector": 500, "view": [82, 315], "vjp": [1, 316], "vmap": 317, "weight": 6, "what": 503, "when": 503, "where": 318, "why": 503, "workflow": 3, "x86": 9, "xcode": 3, "you": 503, "zero": 319, "zeros_lik": 320}})