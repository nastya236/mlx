Search.setIndex({"alltitles": {"A Simple Example": [[512, "a-simple-example"]], "Array": [[335, null]], "Attention layer": [[6, "attention-layer"]], "Automatic Differentiation": [[505, "automatic-differentiation"]], "Automatic Vectorization": [[505, "automatic-vectorization"]], "Basics": [[510, "basics"]], "Basics of Compile": [[502, "basics-of-compile"]], "Basics of Exporting": [[504, "basics-of-exporting"]], "Binary Size Minimization": [[9, "binary-size-minimization"]], "Binding to Python": [[2, "binding-to-python"]], "Build Options": [[9, "id4"]], "Build Requirements": [[9, "build-requirements"]], "Build and Install": [[9, null]], "Build from source": [[9, "build-from-source"]], "Building and Binding": [[2, "building-and-binding"]], "Building with CMake": [[2, "building-with-cmake"]], "Building with setuptools": [[2, "building-with-setuptools"]], "C++ API": [[9, "c-api"]], "C++ API Reference": [[8, null]], "Common Optimizers": [[496, null]], "Compilation": [[502, null]], "Compiling Training Graphs": [[502, "compiling-training-graphs"]], "Complex Example": [[1, "complex-example"]], "Conversion to NumPy and Other Frameworks": [[509, null]], "Converting the weights": [[6, "converting-the-weights"]], "Custom Extensions in MLX": [[2, null]], "Custom Metal Kernels": [[1, null]], "Data Types": [[336, null]], "Debugging": [[502, "debugging"]], "Defining a Ring": [[503, "defining-a-ring"]], "Devices and Streams": [[337, null]], "Differences from NumPy": [[506, "differences-from-numpy"]], "Distributed Communication": [[338, null], [503, null]], "Download the code": [[2, null], [6, null]], "Encoder layer": [[6, "encoder-layer"]], "Example Speedup": [[502, "example-speedup"]], "Examples": [[8, null]], "Export Functions": [[339, null]], "Exporting Functions": [[504, null]], "Exporting Modules": [[504, "exporting-modules"]], "Exporting Multiple Traces": [[504, "exporting-multiple-traces"]], "FFT": [[341, null]], "Fast": [[340, null]], "Full model": [[6, "full-model"]], "Function Transforms": [[505, null]], "Function and Graph Transformations": [[510, "function-and-graph-transformations"]], "Functions": [[471, null]], "Further Reading": [[8, null]], "Generation": [[6, "generation"]], "Getting Started": [[503, "getting-started"]], "Getting Started with MPI": [[503, "getting-started-with-mpi"]], "Getting Started with Ring": [[503, "getting-started-with-ring"]], "Grid Sample VJP": [[1, "grid-sample-vjp"]], "Implementing the CPU Back-end": [[2, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[2, "implementing-the-gpu-back-end"]], "Implementing the Primitive": [[2, "implementing-the-primitive"]], "Implementing the model": [[6, "implementing-the-model"]], "Importing Functions in C++": [[504, "importing-functions-in-c"]], "In Place Updates": [[506, "in-place-updates"]], "Indexing Arrays": [[506, null]], "Initializers": [[472, null]], "Inspecting Modules": [[345, "inspecting-modules"]], "Install": [[8, null]], "Installing MPI": [[503, "installing-mpi"]], "Introducing the Example": [[2, "introducing-the-example"]], "JAX": [[509, "jax"]], "LLM inference": [[6, null]], "Launching Distributed Programs": [[507, null]], "Layers": [[473, null]], "Lazy Evaluation": [[508, null]], "Linear Algebra": [[342, null]], "Linear Regression": [[5, null]], "Loss Functions": [[474, null]], "MLX": [[8, null]], "MPI Specifics": [[507, "mpi-specifics"]], "Memory Management": [[343, null]], "Metal": [[344, null]], "Metal Debugger": [[3, null]], "Metal not found": [[9, "metal-not-found"]], "Module": [[475, null]], "More Examples": [[504, "more-examples"]], "Multi-Layer Perceptron": [[7, null]], "Neural Networks": [[345, null]], "Only Compute What You Use": [[508, "only-compute-what-you-use"]], "Operations": [[0, null], [2, "operations"], [476, null]], "Operations and Primitives": [[2, "operations-and-primitives"]], "Optimizer": [[497, null]], "Optimizers": [[477, null]], "Package Variables": [[4, "id1"]], "Parameters": [[345, "parameters"]], "Primitive Transforms": [[2, "primitive-transforms"]], "Primitives": [[2, "primitives"]], "Providing Hosts": [[507, "providing-hosts"]], "Pure Functions": [[502, "pure-functions"]], "Putting it all together": [[6, "putting-it-all-together"]], "PyTorch": [[509, "pytorch"]], "Python API": [[9, "python-api"]], "Python API Reference": [[8, null]], "Python Installation": [[9, "python-installation"]], "Quick Start Guide": [[510, null]], "Quick Start with Neural Networks": [[345, "quick-start-with-neural-networks"]], "Random": [[499, null]], "Results": [[2, "results"]], "Ring Specifics": [[507, "ring-specifics"]], "Running Distributed Programs": [[503, "running-distributed-programs"]], "Saving and Loading": [[477, "saving-and-loading"]], "Saving and Loading Arrays": [[511, null]], "Schedulers": [[498, null]], "Scripts": [[2, "scripts"], [6, "scripts"]], "Selecting Backend": [[503, "selecting-backend"]], "Serialization Formats": [[511, "id1"]], "Setting up Remote Hosts": [[503, "setting-up-remote-hosts"], [507, "setting-up-remote-hosts"]], "Shapeless Compilation": [[502, "shapeless-compilation"]], "Shapeless Exports": [[504, "shapeless-exports"]], "Simple Example": [[1, "simple-example"]], "Specifying the Stream": [[513, "specifying-the-stream"]], "Supported Data Types": [[336, "id2"]], "TensorFlow": [[509, "tensorflow"]], "The Module Class": [[345, "the-module-class"]], "Thunderbolt Ring": [[503, "thunderbolt-ring"]], "Training Example": [[503, "training-example"]], "Transformations with Compile": [[502, "transformations-with-compile"]], "Transformations with Imported Functions": [[504, "transformations-with-imported-functions"]], "Transforming Compute Graphs": [[508, "transforming-compute-graphs"]], "Transforms": [[500, null]], "Tree Utils": [[501, null]], "Troubleshooting": [[9, "troubleshooting"], [9, "id3"]], "Tuning MPI All Reduce": [[503, "tuning-mpi-all-reduce"]], "Unified Memory": [[512, null]], "Updating the Parameters": [[345, "updating-the-parameters"]], "Usage": [[2, "usage"], [8, null], [507, "usage"]], "Using MLX in C++": [[4, null]], "Using Shape/Strides": [[1, "using-shape-strides"]], "Using Streams": [[513, null]], "Using the Primitive": [[2, "using-the-primitive"]], "Utilizing nn.average_gradients": [[503, "utilizing-nn-average-gradients"]], "Value and Grad": [[345, "value-and-grad"]], "Weight loading and benchmarking": [[6, "weight-loading-and-benchmarking"]], "When to Evaluate": [[508, "when-to-evaluate"]], "Why Lazy Evaluation": [[508, "why-lazy-evaluation"]], "Xcode Workflow": [[3, "xcode-workflow"]], "mlx.core.Device": [[10, null]], "mlx.core.Dtype": [[11, null]], "mlx.core.DtypeCategory": [[12, null]], "mlx.core.Stream": [[334, null]], "mlx.core.abs": [[13, null]], "mlx.core.add": [[14, null]], "mlx.core.addmm": [[15, null]], "mlx.core.all": [[16, null]], "mlx.core.allclose": [[17, null]], "mlx.core.any": [[18, null]], "mlx.core.arange": [[19, null]], "mlx.core.arccos": [[20, null]], "mlx.core.arccosh": [[21, null]], "mlx.core.arcsin": [[22, null]], "mlx.core.arcsinh": [[23, null]], "mlx.core.arctan": [[24, null]], "mlx.core.arctan2": [[25, null]], "mlx.core.arctanh": [[26, null]], "mlx.core.argmax": [[27, null]], "mlx.core.argmin": [[28, null]], "mlx.core.argpartition": [[29, null]], "mlx.core.argsort": [[30, null]], "mlx.core.array": [[31, null]], "mlx.core.array.T": [[32, null]], "mlx.core.array.abs": [[33, null]], "mlx.core.array.all": [[34, null]], "mlx.core.array.any": [[35, null]], "mlx.core.array.argmax": [[36, null]], "mlx.core.array.argmin": [[37, null]], "mlx.core.array.astype": [[38, null]], "mlx.core.array.at": [[39, null]], "mlx.core.array.conj": [[40, null]], "mlx.core.array.cos": [[41, null]], "mlx.core.array.cummax": [[42, null]], "mlx.core.array.cummin": [[43, null]], "mlx.core.array.cumprod": [[44, null]], "mlx.core.array.cumsum": [[45, null]], "mlx.core.array.diag": [[46, null]], "mlx.core.array.diagonal": [[47, null]], "mlx.core.array.dtype": [[48, null]], "mlx.core.array.exp": [[49, null]], "mlx.core.array.flatten": [[50, null]], "mlx.core.array.item": [[51, null]], "mlx.core.array.itemsize": [[52, null]], "mlx.core.array.log": [[53, null]], "mlx.core.array.log10": [[54, null]], "mlx.core.array.log1p": [[55, null]], "mlx.core.array.log2": [[56, null]], "mlx.core.array.logsumexp": [[57, null]], "mlx.core.array.max": [[58, null]], "mlx.core.array.mean": [[59, null]], "mlx.core.array.min": [[60, null]], "mlx.core.array.moveaxis": [[61, null]], "mlx.core.array.nbytes": [[62, null]], "mlx.core.array.ndim": [[63, null]], "mlx.core.array.prod": [[64, null]], "mlx.core.array.reciprocal": [[65, null]], "mlx.core.array.reshape": [[66, null]], "mlx.core.array.round": [[67, null]], "mlx.core.array.rsqrt": [[68, null]], "mlx.core.array.shape": [[69, null]], "mlx.core.array.sin": [[70, null]], "mlx.core.array.size": [[71, null]], "mlx.core.array.split": [[72, null]], "mlx.core.array.sqrt": [[73, null]], "mlx.core.array.square": [[74, null]], "mlx.core.array.squeeze": [[75, null]], "mlx.core.array.std": [[76, null]], "mlx.core.array.sum": [[77, null]], "mlx.core.array.swapaxes": [[78, null]], "mlx.core.array.tolist": [[79, null]], "mlx.core.array.transpose": [[80, null]], "mlx.core.array.var": [[81, null]], "mlx.core.array.view": [[82, null]], "mlx.core.array_equal": [[83, null]], "mlx.core.as_strided": [[84, null]], "mlx.core.async_eval": [[85, null]], "mlx.core.atleast_1d": [[86, null]], "mlx.core.atleast_2d": [[87, null]], "mlx.core.atleast_3d": [[88, null]], "mlx.core.bitwise_and": [[89, null]], "mlx.core.bitwise_invert": [[90, null]], "mlx.core.bitwise_or": [[91, null]], "mlx.core.bitwise_xor": [[92, null]], "mlx.core.block_masked_mm": [[93, null]], "mlx.core.broadcast_arrays": [[94, null]], "mlx.core.broadcast_to": [[95, null]], "mlx.core.ceil": [[96, null]], "mlx.core.clear_cache": [[97, null]], "mlx.core.clip": [[98, null]], "mlx.core.compile": [[99, null]], "mlx.core.concatenate": [[100, null]], "mlx.core.conj": [[101, null]], "mlx.core.conjugate": [[102, null]], "mlx.core.contiguous": [[103, null]], "mlx.core.conv1d": [[104, null]], "mlx.core.conv2d": [[105, null]], "mlx.core.conv3d": [[106, null]], "mlx.core.conv_general": [[107, null]], "mlx.core.conv_transpose1d": [[108, null]], "mlx.core.conv_transpose2d": [[109, null]], "mlx.core.conv_transpose3d": [[110, null]], "mlx.core.convolve": [[111, null]], "mlx.core.cos": [[112, null]], "mlx.core.cosh": [[113, null]], "mlx.core.cummax": [[114, null]], "mlx.core.cummin": [[115, null]], "mlx.core.cumprod": [[116, null]], "mlx.core.cumsum": [[117, null]], "mlx.core.custom_function": [[118, null]], "mlx.core.default_device": [[119, null]], "mlx.core.default_stream": [[120, null]], "mlx.core.degrees": [[121, null]], "mlx.core.dequantize": [[122, null]], "mlx.core.diag": [[123, null]], "mlx.core.diagonal": [[124, null]], "mlx.core.disable_compile": [[125, null]], "mlx.core.distributed.Group": [[126, null]], "mlx.core.distributed.all_gather": [[127, null]], "mlx.core.distributed.all_sum": [[128, null]], "mlx.core.distributed.init": [[129, null]], "mlx.core.distributed.is_available": [[130, null]], "mlx.core.distributed.recv": [[131, null]], "mlx.core.distributed.recv_like": [[132, null]], "mlx.core.distributed.send": [[133, null]], "mlx.core.divide": [[134, null]], "mlx.core.divmod": [[135, null]], "mlx.core.einsum": [[136, null]], "mlx.core.einsum_path": [[137, null]], "mlx.core.enable_compile": [[138, null]], "mlx.core.equal": [[139, null]], "mlx.core.erf": [[140, null]], "mlx.core.erfinv": [[141, null]], "mlx.core.eval": [[142, null]], "mlx.core.exp": [[143, null]], "mlx.core.expand_dims": [[144, null]], "mlx.core.expm1": [[145, null]], "mlx.core.export_function": [[146, null]], "mlx.core.export_to_dot": [[147, null]], "mlx.core.exporter": [[148, null]], "mlx.core.eye": [[149, null]], "mlx.core.fast.layer_norm": [[150, null]], "mlx.core.fast.metal_kernel": [[151, null]], "mlx.core.fast.rms_norm": [[152, null]], "mlx.core.fast.rope": [[153, null]], "mlx.core.fast.scaled_dot_product_attention": [[154, null]], "mlx.core.fft.fft": [[155, null]], "mlx.core.fft.fft2": [[156, null]], "mlx.core.fft.fftn": [[157, null]], "mlx.core.fft.ifft": [[158, null]], "mlx.core.fft.ifft2": [[159, null]], "mlx.core.fft.ifftn": [[160, null]], "mlx.core.fft.irfft": [[161, null]], "mlx.core.fft.irfft2": [[162, null]], "mlx.core.fft.irfftn": [[163, null]], "mlx.core.fft.rfft": [[164, null]], "mlx.core.fft.rfft2": [[165, null]], "mlx.core.fft.rfftn": [[166, null]], "mlx.core.finfo": [[167, null]], "mlx.core.flatten": [[168, null]], "mlx.core.floor": [[169, null]], "mlx.core.floor_divide": [[170, null]], "mlx.core.full": [[171, null]], "mlx.core.gather_mm": [[172, null]], "mlx.core.gather_qmm": [[173, null]], "mlx.core.get_active_memory": [[174, null]], "mlx.core.get_cache_memory": [[175, null]], "mlx.core.get_peak_memory": [[176, null]], "mlx.core.grad": [[177, null]], "mlx.core.greater": [[178, null]], "mlx.core.greater_equal": [[179, null]], "mlx.core.hadamard_transform": [[180, null]], "mlx.core.identity": [[181, null]], "mlx.core.imag": [[182, null]], "mlx.core.import_function": [[183, null]], "mlx.core.inner": [[184, null]], "mlx.core.isclose": [[185, null]], "mlx.core.isfinite": [[186, null]], "mlx.core.isinf": [[187, null]], "mlx.core.isnan": [[188, null]], "mlx.core.isneginf": [[189, null]], "mlx.core.isposinf": [[190, null]], "mlx.core.issubdtype": [[191, null]], "mlx.core.jvp": [[192, null]], "mlx.core.kron": [[193, null]], "mlx.core.left_shift": [[194, null]], "mlx.core.less": [[195, null]], "mlx.core.less_equal": [[196, null]], "mlx.core.linalg.cholesky": [[197, null]], "mlx.core.linalg.cholesky_inv": [[198, null]], "mlx.core.linalg.cross": [[199, null]], "mlx.core.linalg.eigh": [[200, null]], "mlx.core.linalg.eigvalsh": [[201, null]], "mlx.core.linalg.inv": [[202, null]], "mlx.core.linalg.lu": [[203, null]], "mlx.core.linalg.lu_factor": [[204, null]], "mlx.core.linalg.norm": [[205, null]], "mlx.core.linalg.pinv": [[206, null]], "mlx.core.linalg.qr": [[207, null]], "mlx.core.linalg.solve": [[208, null]], "mlx.core.linalg.solve_triangular": [[209, null]], "mlx.core.linalg.svd": [[210, null]], "mlx.core.linalg.tri_inv": [[211, null]], "mlx.core.linspace": [[212, null]], "mlx.core.load": [[213, null]], "mlx.core.log": [[214, null]], "mlx.core.log10": [[215, null]], "mlx.core.log1p": [[216, null]], "mlx.core.log2": [[217, null]], "mlx.core.logaddexp": [[218, null]], "mlx.core.logical_and": [[219, null]], "mlx.core.logical_not": [[220, null]], "mlx.core.logical_or": [[221, null]], "mlx.core.logsumexp": [[222, null]], "mlx.core.matmul": [[223, null]], "mlx.core.max": [[224, null]], "mlx.core.maximum": [[225, null]], "mlx.core.mean": [[226, null]], "mlx.core.meshgrid": [[227, null]], "mlx.core.metal.device_info": [[228, null]], "mlx.core.metal.is_available": [[229, null]], "mlx.core.metal.start_capture": [[230, null]], "mlx.core.metal.stop_capture": [[231, null]], "mlx.core.min": [[232, null]], "mlx.core.minimum": [[233, null]], "mlx.core.moveaxis": [[234, null]], "mlx.core.multiply": [[235, null]], "mlx.core.nan_to_num": [[236, null]], "mlx.core.negative": [[237, null]], "mlx.core.new_stream": [[238, null]], "mlx.core.not_equal": [[239, null]], "mlx.core.ones": [[240, null]], "mlx.core.ones_like": [[241, null]], "mlx.core.outer": [[242, null]], "mlx.core.pad": [[243, null]], "mlx.core.partition": [[244, null]], "mlx.core.power": [[245, null]], "mlx.core.prod": [[246, null]], "mlx.core.put_along_axis": [[247, null]], "mlx.core.quantize": [[248, null]], "mlx.core.quantized_matmul": [[249, null]], "mlx.core.radians": [[250, null]], "mlx.core.random.bernoulli": [[251, null]], "mlx.core.random.categorical": [[252, null]], "mlx.core.random.gumbel": [[253, null]], "mlx.core.random.key": [[254, null]], "mlx.core.random.laplace": [[255, null]], "mlx.core.random.multivariate_normal": [[256, null]], "mlx.core.random.normal": [[257, null]], "mlx.core.random.permutation": [[258, null]], "mlx.core.random.randint": [[259, null]], "mlx.core.random.seed": [[260, null]], "mlx.core.random.split": [[261, null]], "mlx.core.random.truncated_normal": [[262, null]], "mlx.core.random.uniform": [[263, null]], "mlx.core.real": [[264, null]], "mlx.core.reciprocal": [[265, null]], "mlx.core.remainder": [[266, null]], "mlx.core.repeat": [[267, null]], "mlx.core.reset_peak_memory": [[268, null]], "mlx.core.reshape": [[269, null]], "mlx.core.right_shift": [[270, null]], "mlx.core.roll": [[271, null]], "mlx.core.round": [[272, null]], "mlx.core.rsqrt": [[273, null]], "mlx.core.save": [[274, null]], "mlx.core.save_gguf": [[275, null]], "mlx.core.save_safetensors": [[276, null]], "mlx.core.savez": [[277, null]], "mlx.core.savez_compressed": [[278, null]], "mlx.core.set_cache_limit": [[279, null]], "mlx.core.set_default_device": [[280, null]], "mlx.core.set_default_stream": [[281, null]], "mlx.core.set_memory_limit": [[282, null]], "mlx.core.set_wired_limit": [[283, null]], "mlx.core.sigmoid": [[284, null]], "mlx.core.sign": [[285, null]], "mlx.core.sin": [[286, null]], "mlx.core.sinh": [[287, null]], "mlx.core.slice": [[288, null]], "mlx.core.slice_update": [[289, null]], "mlx.core.softmax": [[290, null]], "mlx.core.sort": [[291, null]], "mlx.core.split": [[292, null]], "mlx.core.sqrt": [[293, null]], "mlx.core.square": [[294, null]], "mlx.core.squeeze": [[295, null]], "mlx.core.stack": [[296, null]], "mlx.core.std": [[297, null]], "mlx.core.stop_gradient": [[298, null]], "mlx.core.stream": [[299, null]], "mlx.core.subtract": [[300, null]], "mlx.core.sum": [[301, null]], "mlx.core.swapaxes": [[302, null]], "mlx.core.synchronize": [[303, null]], "mlx.core.take": [[304, null]], "mlx.core.take_along_axis": [[305, null]], "mlx.core.tan": [[306, null]], "mlx.core.tanh": [[307, null]], "mlx.core.tensordot": [[308, null]], "mlx.core.tile": [[309, null]], "mlx.core.topk": [[310, null]], "mlx.core.trace": [[311, null]], "mlx.core.transpose": [[312, null]], "mlx.core.tri": [[313, null]], "mlx.core.tril": [[314, null]], "mlx.core.triu": [[315, null]], "mlx.core.unflatten": [[316, null]], "mlx.core.value_and_grad": [[317, null]], "mlx.core.var": [[318, null]], "mlx.core.view": [[319, null]], "mlx.core.vjp": [[320, null]], "mlx.core.vmap": [[321, null]], "mlx.core.where": [[322, null]], "mlx.core.zeros": [[323, null]], "mlx.core.zeros_like": [[324, null]], "mlx.nn.ALiBi": [[346, null]], "mlx.nn.AvgPool1d": [[347, null]], "mlx.nn.AvgPool2d": [[348, null]], "mlx.nn.AvgPool3d": [[349, null]], "mlx.nn.BatchNorm": [[350, null]], "mlx.nn.CELU": [[351, null]], "mlx.nn.Conv1d": [[352, null]], "mlx.nn.Conv2d": [[353, null]], "mlx.nn.Conv3d": [[354, null]], "mlx.nn.ConvTranspose1d": [[355, null]], "mlx.nn.ConvTranspose2d": [[356, null]], "mlx.nn.ConvTranspose3d": [[357, null]], "mlx.nn.Dropout": [[358, null]], "mlx.nn.Dropout2d": [[359, null]], "mlx.nn.Dropout3d": [[360, null]], "mlx.nn.ELU": [[361, null]], "mlx.nn.Embedding": [[362, null]], "mlx.nn.GELU": [[363, null]], "mlx.nn.GLU": [[364, null]], "mlx.nn.GRU": [[365, null]], "mlx.nn.GroupNorm": [[366, null]], "mlx.nn.HardShrink": [[367, null]], "mlx.nn.HardTanh": [[368, null]], "mlx.nn.Hardswish": [[369, null]], "mlx.nn.InstanceNorm": [[370, null]], "mlx.nn.LSTM": [[371, null]], "mlx.nn.LayerNorm": [[372, null]], "mlx.nn.LeakyReLU": [[373, null]], "mlx.nn.Linear": [[374, null]], "mlx.nn.LogSigmoid": [[375, null]], "mlx.nn.LogSoftmax": [[376, null]], "mlx.nn.MaxPool1d": [[377, null]], "mlx.nn.MaxPool2d": [[378, null]], "mlx.nn.MaxPool3d": [[379, null]], "mlx.nn.Mish": [[380, null]], "mlx.nn.Module.apply": [[381, null]], "mlx.nn.Module.apply_to_modules": [[382, null]], "mlx.nn.Module.children": [[383, null]], "mlx.nn.Module.eval": [[384, null]], "mlx.nn.Module.filter_and_map": [[385, null]], "mlx.nn.Module.freeze": [[386, null]], "mlx.nn.Module.leaf_modules": [[387, null]], "mlx.nn.Module.load_weights": [[388, null]], "mlx.nn.Module.modules": [[389, null]], "mlx.nn.Module.named_modules": [[390, null]], "mlx.nn.Module.parameters": [[391, null]], "mlx.nn.Module.save_weights": [[392, null]], "mlx.nn.Module.set_dtype": [[393, null]], "mlx.nn.Module.state": [[394, null]], "mlx.nn.Module.train": [[395, null]], "mlx.nn.Module.trainable_parameters": [[396, null]], "mlx.nn.Module.training": [[397, null]], "mlx.nn.Module.unfreeze": [[398, null]], "mlx.nn.Module.update": [[399, null]], "mlx.nn.Module.update_modules": [[400, null]], "mlx.nn.MultiHeadAttention": [[401, null]], "mlx.nn.PReLU": [[402, null]], "mlx.nn.QuantizedEmbedding": [[403, null]], "mlx.nn.QuantizedLinear": [[404, null]], "mlx.nn.RMSNorm": [[405, null]], "mlx.nn.RNN": [[406, null]], "mlx.nn.ReLU": [[407, null]], "mlx.nn.ReLU6": [[408, null]], "mlx.nn.RoPE": [[409, null]], "mlx.nn.SELU": [[410, null]], "mlx.nn.Sequential": [[411, null]], "mlx.nn.SiLU": [[412, null]], "mlx.nn.Sigmoid": [[413, null]], "mlx.nn.SinusoidalPositionalEncoding": [[414, null]], "mlx.nn.Softmax": [[415, null]], "mlx.nn.Softmin": [[416, null]], "mlx.nn.Softplus": [[417, null]], "mlx.nn.Softshrink": [[418, null]], "mlx.nn.Softsign": [[419, null]], "mlx.nn.Step": [[420, null]], "mlx.nn.Tanh": [[421, null]], "mlx.nn.Transformer": [[422, null]], "mlx.nn.Upsample": [[423, null]], "mlx.nn.average_gradients": [[325, null]], "mlx.nn.celu": [[432, null]], "mlx.nn.elu": [[433, null]], "mlx.nn.gelu": [[434, null]], "mlx.nn.gelu_approx": [[435, null]], "mlx.nn.gelu_fast_approx": [[436, null]], "mlx.nn.glu": [[437, null]], "mlx.nn.hard_shrink": [[438, null]], "mlx.nn.hard_tanh": [[439, null]], "mlx.nn.hardswish": [[440, null]], "mlx.nn.init.constant": [[424, null]], "mlx.nn.init.glorot_normal": [[425, null]], "mlx.nn.init.glorot_uniform": [[426, null]], "mlx.nn.init.he_normal": [[427, null]], "mlx.nn.init.he_uniform": [[428, null]], "mlx.nn.init.identity": [[429, null]], "mlx.nn.init.normal": [[430, null]], "mlx.nn.init.uniform": [[431, null]], "mlx.nn.leaky_relu": [[441, null]], "mlx.nn.log_sigmoid": [[442, null]], "mlx.nn.log_softmax": [[443, null]], "mlx.nn.losses.binary_cross_entropy": [[444, null]], "mlx.nn.losses.cosine_similarity_loss": [[445, null]], "mlx.nn.losses.cross_entropy": [[446, null]], "mlx.nn.losses.gaussian_nll_loss": [[447, null]], "mlx.nn.losses.hinge_loss": [[448, null]], "mlx.nn.losses.huber_loss": [[449, null]], "mlx.nn.losses.kl_div_loss": [[450, null]], "mlx.nn.losses.l1_loss": [[451, null]], "mlx.nn.losses.log_cosh_loss": [[452, null]], "mlx.nn.losses.margin_ranking_loss": [[453, null]], "mlx.nn.losses.mse_loss": [[454, null]], "mlx.nn.losses.nll_loss": [[455, null]], "mlx.nn.losses.smooth_l1_loss": [[456, null]], "mlx.nn.losses.triplet_loss": [[457, null]], "mlx.nn.mish": [[458, null]], "mlx.nn.prelu": [[459, null]], "mlx.nn.quantize": [[326, null]], "mlx.nn.relu": [[460, null]], "mlx.nn.relu6": [[461, null]], "mlx.nn.selu": [[462, null]], "mlx.nn.sigmoid": [[463, null]], "mlx.nn.silu": [[464, null]], "mlx.nn.softmax": [[465, null]], "mlx.nn.softmin": [[466, null]], "mlx.nn.softplus": [[467, null]], "mlx.nn.softshrink": [[468, null]], "mlx.nn.step": [[469, null]], "mlx.nn.tanh": [[470, null]], "mlx.nn.value_and_grad": [[327, null]], "mlx.optimizers.AdaDelta": [[478, null]], "mlx.optimizers.Adafactor": [[479, null]], "mlx.optimizers.Adagrad": [[480, null]], "mlx.optimizers.Adam": [[481, null]], "mlx.optimizers.AdamW": [[482, null]], "mlx.optimizers.Adamax": [[483, null]], "mlx.optimizers.Lion": [[484, null]], "mlx.optimizers.Optimizer.apply_gradients": [[485, null]], "mlx.optimizers.Optimizer.init": [[486, null]], "mlx.optimizers.Optimizer.state": [[487, null]], "mlx.optimizers.Optimizer.update": [[488, null]], "mlx.optimizers.RMSprop": [[489, null]], "mlx.optimizers.SGD": [[490, null]], "mlx.optimizers.clip_grad_norm": [[328, null]], "mlx.optimizers.cosine_decay": [[491, null]], "mlx.optimizers.exponential_decay": [[492, null]], "mlx.optimizers.join_schedules": [[493, null]], "mlx.optimizers.linear_schedule": [[494, null]], "mlx.optimizers.step_decay": [[495, null]], "mlx.utils.tree_flatten": [[329, null]], "mlx.utils.tree_map": [[330, null]], "mlx.utils.tree_map_with_path": [[331, null]], "mlx.utils.tree_reduce": [[332, null]], "mlx.utils.tree_unflatten": [[333, null]], "x86 Shell": [[9, "x86-shell"]]}, "docnames": ["cpp/ops", "dev/custom_metal_kernels", "dev/extensions", "dev/metal_debugger", "dev/mlx_in_cpp", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.conj", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.std", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array.view", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.async_eval", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_invert", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.broadcast_arrays", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clear_cache", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.contiguous", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv3d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.conv_transpose1d", "python/_autosummary/mlx.core.conv_transpose2d", "python/_autosummary/mlx.core.conv_transpose3d", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.custom_function", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.distributed.Group", "python/_autosummary/mlx.core.distributed.all_gather", "python/_autosummary/mlx.core.distributed.all_sum", "python/_autosummary/mlx.core.distributed.init", "python/_autosummary/mlx.core.distributed.is_available", "python/_autosummary/mlx.core.distributed.recv", "python/_autosummary/mlx.core.distributed.recv_like", "python/_autosummary/mlx.core.distributed.send", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.einsum", "python/_autosummary/mlx.core.einsum_path", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.export_function", "python/_autosummary/mlx.core.export_to_dot", "python/_autosummary/mlx.core.exporter", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.metal_kernel", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.finfo", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.get_active_memory", "python/_autosummary/mlx.core.get_cache_memory", "python/_autosummary/mlx.core.get_peak_memory", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.hadamard_transform", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.imag", "python/_autosummary/mlx.core.import_function", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isfinite", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.kron", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.cholesky_inv", "python/_autosummary/mlx.core.linalg.cross", "python/_autosummary/mlx.core.linalg.eigh", "python/_autosummary/mlx.core.linalg.eigvalsh", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.lu", "python/_autosummary/mlx.core.linalg.lu_factor", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.pinv", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.solve", "python/_autosummary/mlx.core.linalg.solve_triangular", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linalg.tri_inv", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.nan_to_num", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.put_along_axis", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.laplace", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.permutation", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.real", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reset_peak_memory", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.roll", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_cache_limit", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.set_memory_limit", "python/_autosummary/mlx.core.set_wired_limit", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.slice", "python/_autosummary/mlx.core.slice_update", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.unflatten", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.view", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.average_gradients", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/distributed", "python/export", "python/fast", "python/fft", "python/linalg", "python/memory_management", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.AvgPool3d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.CELU", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.ConvTranspose1d", "python/nn/_autosummary/mlx.nn.ConvTranspose2d", "python/nn/_autosummary/mlx.nn.ConvTranspose3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.ELU", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GLU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.HardShrink", "python/nn/_autosummary/mlx.nn.HardTanh", "python/nn/_autosummary/mlx.nn.Hardswish", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.LeakyReLU", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.LogSigmoid", "python/nn/_autosummary/mlx.nn.LogSoftmax", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.MaxPool3d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.ReLU6", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.Sigmoid", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softmax", "python/nn/_autosummary/mlx.nn.Softmin", "python/nn/_autosummary/mlx.nn.Softplus", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Softsign", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Tanh", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.celu", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hard_shrink", "python/nn/_autosummary_functions/mlx.nn.hard_tanh", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softmin", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/distributed", "usage/export", "usage/function_transforms", "usage/indexing", "usage/launching_distributed", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["cpp/ops.rst", "dev/custom_metal_kernels.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "dev/mlx_in_cpp.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.conj.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.std.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array.view.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.async_eval.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_invert.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.broadcast_arrays.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clear_cache.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.contiguous.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv3d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.conv_transpose1d.rst", "python/_autosummary/mlx.core.conv_transpose2d.rst", "python/_autosummary/mlx.core.conv_transpose3d.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.custom_function.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.distributed.Group.rst", "python/_autosummary/mlx.core.distributed.all_gather.rst", "python/_autosummary/mlx.core.distributed.all_sum.rst", "python/_autosummary/mlx.core.distributed.init.rst", "python/_autosummary/mlx.core.distributed.is_available.rst", "python/_autosummary/mlx.core.distributed.recv.rst", "python/_autosummary/mlx.core.distributed.recv_like.rst", "python/_autosummary/mlx.core.distributed.send.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.einsum.rst", "python/_autosummary/mlx.core.einsum_path.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.export_function.rst", "python/_autosummary/mlx.core.export_to_dot.rst", "python/_autosummary/mlx.core.exporter.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.metal_kernel.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.finfo.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.get_active_memory.rst", "python/_autosummary/mlx.core.get_cache_memory.rst", "python/_autosummary/mlx.core.get_peak_memory.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.hadamard_transform.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.imag.rst", "python/_autosummary/mlx.core.import_function.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isfinite.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.kron.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.cholesky_inv.rst", "python/_autosummary/mlx.core.linalg.cross.rst", "python/_autosummary/mlx.core.linalg.eigh.rst", "python/_autosummary/mlx.core.linalg.eigvalsh.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.lu.rst", "python/_autosummary/mlx.core.linalg.lu_factor.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.pinv.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.solve.rst", "python/_autosummary/mlx.core.linalg.solve_triangular.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linalg.tri_inv.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.nan_to_num.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.put_along_axis.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.laplace.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.permutation.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.real.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reset_peak_memory.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.roll.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_cache_limit.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.set_memory_limit.rst", "python/_autosummary/mlx.core.set_wired_limit.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.slice.rst", "python/_autosummary/mlx.core.slice_update.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.unflatten.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.view.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.average_gradients.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/distributed.rst", "python/export.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/memory_management.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.AvgPool3d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.CELU.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose1d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose2d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.ELU.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GLU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.HardShrink.rst", "python/nn/_autosummary/mlx.nn.HardTanh.rst", "python/nn/_autosummary/mlx.nn.Hardswish.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.LeakyReLU.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.LogSigmoid.rst", "python/nn/_autosummary/mlx.nn.LogSoftmax.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.MaxPool3d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.ReLU6.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.Sigmoid.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softmax.rst", "python/nn/_autosummary/mlx.nn.Softmin.rst", "python/nn/_autosummary/mlx.nn.Softplus.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Softsign.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Tanh.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.celu.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hard_shrink.rst", "python/nn/_autosummary_functions/mlx.nn.hard_tanh.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softmin.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/distributed.rst", "usage/export.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/launching_distributed.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "indexentries": {"__init__() (array method)": [[31, "mlx.core.array.__init__", false]], "__init__() (custom_function method)": [[118, "mlx.core.custom_function.__init__", false]], "__init__() (device method)": [[10, "mlx.core.Device.__init__", false]], "__init__() (dtype method)": [[11, "mlx.core.Dtype.__init__", false]], "__init__() (dtypecategory method)": [[12, "mlx.core.DtypeCategory.__init__", false]], "__init__() (finfo method)": [[167, "mlx.core.finfo.__init__", false]], "__init__() (group method)": [[126, "mlx.core.distributed.Group.__init__", false]], "__init__() (stream method)": [[334, "mlx.core.Stream.__init__", false]], "abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice", false]], "abs() (array method)": [[33, "mlx.core.array.abs", false]], "abs() (in module mlx.core)": [[13, "mlx.core.abs", false]], "adadelta (class in mlx.optimizers)": [[478, "mlx.optimizers.AdaDelta", false]], "adafactor (class in mlx.optimizers)": [[479, "mlx.optimizers.Adafactor", false]], "adagrad (class in mlx.optimizers)": [[480, "mlx.optimizers.Adagrad", false]], "adam (class in mlx.optimizers)": [[481, "mlx.optimizers.Adam", false]], "adamax (class in mlx.optimizers)": [[483, "mlx.optimizers.Adamax", false]], "adamw (class in mlx.optimizers)": [[482, "mlx.optimizers.AdamW", false]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice", false]], "add() (in module mlx.core)": [[14, "mlx.core.add", false]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", false]], "addmm() (in module mlx.core)": [[15, "mlx.core.addmm", false]], "alibi (class in mlx.nn)": [[346, "mlx.nn.ALiBi", false]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice", false], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayib14StreamOrDevice", false]], "all() (array method)": [[34, "mlx.core.array.all", false]], "all() (in module mlx.core)": [[16, "mlx.core.all", false]], "all_gather() (in module mlx.core.distributed)": [[127, "mlx.core.distributed.all_gather", false]], "all_sum() (in module mlx.core.distributed)": [[128, "mlx.core.distributed.all_sum", false]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "allclose() (in module mlx.core)": [[17, "mlx.core.allclose", false]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayib14StreamOrDevice", false]], "any() (array method)": [[35, "mlx.core.array.any", false]], "any() (in module mlx.core)": [[18, "mlx.core.any", false]], "apply() (module method)": [[381, "mlx.nn.Module.apply", false]], "apply_gradients() (optimizer method)": [[485, "mlx.optimizers.Optimizer.apply_gradients", false]], "apply_to_modules() (module method)": [[382, "mlx.nn.Module.apply_to_modules", false]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice", false], [0, "_CPPv46aranged5Dtype14StreamOrDevice", false], [0, "_CPPv46arangedd14StreamOrDevice", false], [0, "_CPPv46arangedd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangeddd14StreamOrDevice", false], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangei14StreamOrDevice", false], [0, "_CPPv46arangeii14StreamOrDevice", false], [0, "_CPPv46arangeiii14StreamOrDevice", false]], "arange() (in module mlx.core)": [[19, "mlx.core.arange", false]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice", false]], "arccos() (in module mlx.core)": [[20, "mlx.core.arccos", false]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice", false]], "arccosh() (in module mlx.core)": [[21, "mlx.core.arccosh", false]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice", false]], "arcsin() (in module mlx.core)": [[22, "mlx.core.arcsin", false]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice", false]], "arcsinh() (in module mlx.core)": [[23, "mlx.core.arcsinh", false]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice", false]], "arctan() (in module mlx.core)": [[24, "mlx.core.arctan", false]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", false]], "arctan2() (in module mlx.core)": [[25, "mlx.core.arctan2", false]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice", false]], "arctanh() (in module mlx.core)": [[26, "mlx.core.arctanh", false]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice", false]], "argmax() (array method)": [[36, "mlx.core.array.argmax", false]], "argmax() (in module mlx.core)": [[27, "mlx.core.argmax", false]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayib14StreamOrDevice", false]], "argmin() (array method)": [[37, "mlx.core.array.argmin", false]], "argmin() (in module mlx.core)": [[28, "mlx.core.argmin", false]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", false]], "argpartition() (in module mlx.core)": [[29, "mlx.core.argpartition", false]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice", false], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice", false]], "argsort() (in module mlx.core)": [[30, "mlx.core.argsort", false]], "array (class in mlx.core)": [[31, "mlx.core.array", false]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", false]], "array_equal() (in module mlx.core)": [[83, "mlx.core.array_equal", false]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", false]], "as_strided() (in module mlx.core)": [[84, "mlx.core.as_strided", false]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice", false]], "astype() (array method)": [[38, "mlx.core.array.astype", false]], "async_eval() (in module mlx.core)": [[85, "mlx.core.async_eval", false]], "at (array property)": [[39, "mlx.core.array.at", false]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_1d() (in module mlx.core)": [[86, "mlx.core.atleast_1d", false]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_2d() (in module mlx.core)": [[87, "mlx.core.atleast_2d", false]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_3d() (in module mlx.core)": [[88, "mlx.core.atleast_3d", false]], "average_gradients() (in module mlx.nn)": [[325, "mlx.nn.average_gradients", false]], "avgpool1d (class in mlx.nn)": [[347, "mlx.nn.AvgPool1d", false]], "avgpool2d (class in mlx.nn)": [[348, "mlx.nn.AvgPool2d", false]], "avgpool3d (class in mlx.nn)": [[349, "mlx.nn.AvgPool3d", false]], "batchnorm (class in mlx.nn)": [[350, "mlx.nn.BatchNorm", false]], "bernoulli() (in module mlx.core.random)": [[251, "mlx.core.random.bernoulli", false]], "binary_cross_entropy (class in mlx.nn.losses)": [[444, "mlx.nn.losses.binary_cross_entropy", false]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", false]], "bitwise_and() (in module mlx.core)": [[89, "mlx.core.bitwise_and", false]], "bitwise_invert (c++ function)": [[0, "_CPPv414bitwise_invertRK5array14StreamOrDevice", false]], "bitwise_invert() (in module mlx.core)": [[90, "mlx.core.bitwise_invert", false]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", false]], "bitwise_or() (in module mlx.core)": [[91, "mlx.core.bitwise_or", false]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", false]], "bitwise_xor() (in module mlx.core)": [[92, "mlx.core.bitwise_xor", false]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", false]], "block_masked_mm() (in module mlx.core)": [[93, "mlx.core.block_masked_mm", false]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "broadcast_arrays() (in module mlx.core)": [[94, "mlx.core.broadcast_arrays", false]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", false]], "broadcast_to() (in module mlx.core)": [[95, "mlx.core.broadcast_to", false]], "categorical() (in module mlx.core.random)": [[252, "mlx.core.random.categorical", false]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice", false]], "ceil() (in module mlx.core)": [[96, "mlx.core.ceil", false]], "celu (class in mlx.nn)": [[351, "mlx.nn.CELU", false], [432, "mlx.nn.celu", false]], "children() (module method)": [[383, "mlx.nn.Module.children", false]], "cholesky() (in module mlx.core.linalg)": [[197, "mlx.core.linalg.cholesky", false]], "cholesky_inv() (in module mlx.core.linalg)": [[198, "mlx.core.linalg.cholesky_inv", false]], "clear_cache() (in module mlx.core)": [[97, "mlx.core.clear_cache", false]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", false]], "clip() (in module mlx.core)": [[98, "mlx.core.clip", false]], "clip_grad_norm() (in module mlx.optimizers)": [[328, "mlx.optimizers.clip_grad_norm", false]], "compile() (in module mlx.core)": [[99, "mlx.core.compile", false]], "concatenate (c++ function)": [[0, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", false]], "concatenate() (in module mlx.core)": [[100, "mlx.core.concatenate", false]], "conj() (array method)": [[40, "mlx.core.array.conj", false]], "conj() (in module mlx.core)": [[101, "mlx.core.conj", false]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice", false]], "conjugate() (in module mlx.core)": [[102, "mlx.core.conjugate", false]], "constant() (in module mlx.nn.init)": [[424, "mlx.nn.init.constant", false]], "contiguous (c++ function)": [[0, "_CPPv410contiguousRK5arrayb14StreamOrDevice", false]], "contiguous() (in module mlx.core)": [[103, "mlx.core.contiguous", false]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", false]], "conv1d (class in mlx.nn)": [[352, "mlx.nn.Conv1d", false]], "conv1d() (in module mlx.core)": [[104, "mlx.core.conv1d", false]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv2d (class in mlx.nn)": [[353, "mlx.nn.Conv2d", false]], "conv2d() (in module mlx.core)": [[105, "mlx.core.conv2d", false]], "conv3d (c++ function)": [[0, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "conv3d (class in mlx.nn)": [[354, "mlx.nn.Conv3d", false]], "conv3d() (in module mlx.core)": [[106, "mlx.core.conv3d", false]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false]], "conv_general() (in module mlx.core)": [[107, "mlx.core.conv_general", false]], "conv_transpose1d (c++ function)": [[0, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", false]], "conv_transpose1d() (in module mlx.core)": [[108, "mlx.core.conv_transpose1d", false]], "conv_transpose2d (c++ function)": [[0, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv_transpose2d() (in module mlx.core)": [[109, "mlx.core.conv_transpose2d", false]], "conv_transpose3d (c++ function)": [[0, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "conv_transpose3d() (in module mlx.core)": [[110, "mlx.core.conv_transpose3d", false]], "convolve() (in module mlx.core)": [[111, "mlx.core.convolve", false]], "convtranspose1d (class in mlx.nn)": [[355, "mlx.nn.ConvTranspose1d", false]], "convtranspose2d (class in mlx.nn)": [[356, "mlx.nn.ConvTranspose2d", false]], "convtranspose3d (class in mlx.nn)": [[357, "mlx.nn.ConvTranspose3d", false]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice", false]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice", false]], "cos() (array method)": [[41, "mlx.core.array.cos", false]], "cos() (in module mlx.core)": [[112, "mlx.core.cos", false]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice", false]], "cosh() (in module mlx.core)": [[113, "mlx.core.cosh", false]], "cosine_decay() (in module mlx.optimizers)": [[491, "mlx.optimizers.cosine_decay", false]], "cosine_similarity_loss (class in mlx.nn.losses)": [[445, "mlx.nn.losses.cosine_similarity_loss", false]], "cross() (in module mlx.core.linalg)": [[199, "mlx.core.linalg.cross", false]], "cross_entropy (class in mlx.nn.losses)": [[446, "mlx.nn.losses.cross_entropy", false]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", false]], "cummax() (array method)": [[42, "mlx.core.array.cummax", false]], "cummax() (in module mlx.core)": [[114, "mlx.core.cummax", false]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice", false]], "cummin() (array method)": [[43, "mlx.core.array.cummin", false]], "cummin() (in module mlx.core)": [[115, "mlx.core.cummin", false]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", false]], "cumprod() (array method)": [[44, "mlx.core.array.cumprod", false]], "cumprod() (in module mlx.core)": [[116, "mlx.core.cumprod", false]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", false]], "cumsum() (array method)": [[45, "mlx.core.array.cumsum", false]], "cumsum() (in module mlx.core)": [[117, "mlx.core.cumsum", false]], "custom_function (class in mlx.core)": [[118, "mlx.core.custom_function", false]], "default_device() (in module mlx.core)": [[119, "mlx.core.default_device", false]], "default_stream() (in module mlx.core)": [[120, "mlx.core.default_stream", false]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice", false]], "degrees() (in module mlx.core)": [[121, "mlx.core.degrees", false]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", false]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", false]], "dequantize() (in module mlx.core)": [[122, "mlx.core.dequantize", false]], "device (class in mlx.core)": [[10, "mlx.core.Device", false]], "device_info() (in module mlx.core.metal)": [[228, "mlx.core.metal.device_info", false]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice", false]], "diag() (array method)": [[46, "mlx.core.array.diag", false]], "diag() (in module mlx.core)": [[123, "mlx.core.diag", false]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", false]], "diagonal() (array method)": [[47, "mlx.core.array.diagonal", false]], "diagonal() (in module mlx.core)": [[124, "mlx.core.diagonal", false]], "disable_compile() (in module mlx.core)": [[125, "mlx.core.disable_compile", false]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", false]], "divide() (in module mlx.core)": [[134, "mlx.core.divide", false]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", false]], "divmod() (in module mlx.core)": [[135, "mlx.core.divmod", false]], "dropout (class in mlx.nn)": [[358, "mlx.nn.Dropout", false]], "dropout2d (class in mlx.nn)": [[359, "mlx.nn.Dropout2d", false]], "dropout3d (class in mlx.nn)": [[360, "mlx.nn.Dropout3d", false]], "dtype (array property)": [[48, "mlx.core.array.dtype", false]], "dtype (class in mlx.core)": [[11, "mlx.core.Dtype", false]], "dtypecategory (class in mlx.core)": [[12, "mlx.core.DtypeCategory", false]], "eigh() (in module mlx.core.linalg)": [[200, "mlx.core.linalg.eigh", false]], "eigvalsh() (in module mlx.core.linalg)": [[201, "mlx.core.linalg.eigvalsh", false]], "einsum() (in module mlx.core)": [[136, "mlx.core.einsum", false]], "einsum_path() (in module mlx.core)": [[137, "mlx.core.einsum_path", false]], "elu (class in mlx.nn)": [[361, "mlx.nn.ELU", false], [433, "mlx.nn.elu", false]], "embedding (class in mlx.nn)": [[362, "mlx.nn.Embedding", false]], "enable_compile() (in module mlx.core)": [[138, "mlx.core.enable_compile", false]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", false]], "equal() (in module mlx.core)": [[139, "mlx.core.equal", false]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice", false]], "erf() (in module mlx.core)": [[140, "mlx.core.erf", false]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice", false]], "erfinv() (in module mlx.core)": [[141, "mlx.core.erfinv", false]], "eval() (in module mlx.core)": [[142, "mlx.core.eval", false]], "eval() (module method)": [[384, "mlx.nn.Module.eval", false]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice", false]], "exp() (array method)": [[49, "mlx.core.array.exp", false]], "exp() (in module mlx.core)": [[143, "mlx.core.exp", false]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", false]], "expand_dims() (in module mlx.core)": [[144, "mlx.core.expand_dims", false]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice", false]], "expm1() (in module mlx.core)": [[145, "mlx.core.expm1", false]], "exponential_decay() (in module mlx.optimizers)": [[492, "mlx.optimizers.exponential_decay", false]], "export_function() (in module mlx.core)": [[146, "mlx.core.export_function", false]], "export_to_dot() (in module mlx.core)": [[147, "mlx.core.export_to_dot", false]], "exporter() (in module mlx.core)": [[148, "mlx.core.exporter", false]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice", false], [0, "_CPPv43eyei5Dtype14StreamOrDevice", false], [0, "_CPPv43eyeii14StreamOrDevice", false], [0, "_CPPv43eyeiii14StreamOrDevice", false], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice", false]], "eye() (in module mlx.core)": [[149, "mlx.core.eye", false]], "fft() (in module mlx.core.fft)": [[155, "mlx.core.fft.fft", false]], "fft2() (in module mlx.core.fft)": [[156, "mlx.core.fft.fft2", false]], "fftn() (in module mlx.core.fft)": [[157, "mlx.core.fft.fftn", false]], "filter_and_map() (module method)": [[385, "mlx.nn.Module.filter_and_map", false]], "finfo (class in mlx.core)": [[167, "mlx.core.finfo", false]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice", false], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice", false]], "flatten() (array method)": [[50, "mlx.core.array.flatten", false]], "flatten() (in module mlx.core)": [[168, "mlx.core.flatten", false]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice", false]], "floor() (in module mlx.core)": [[169, "mlx.core.floor", false]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", false]], "floor_divide() (in module mlx.core)": [[170, "mlx.core.floor_divide", false]], "freeze() (module method)": [[386, "mlx.nn.Module.freeze", false]], "full (c++ function)": [[0, "_CPPv44full5Shape5array14StreamOrDevice", false], [0, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", false], [0, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", false], [0, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", false]], "full() (in module mlx.core)": [[171, "mlx.core.full", false]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", false], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", false]], "gather_mm (c++ function)": [[0, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", false]], "gather_mm() (in module mlx.core)": [[172, "mlx.core.gather_mm", false]], "gather_qmm (c++ function)": [[0, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", false]], "gather_qmm() (in module mlx.core)": [[173, "mlx.core.gather_qmm", false]], "gaussian_nll_loss (class in mlx.nn.losses)": [[447, "mlx.nn.losses.gaussian_nll_loss", false]], "gelu (class in mlx.nn)": [[363, "mlx.nn.GELU", false], [434, "mlx.nn.gelu", false]], "gelu_approx (class in mlx.nn)": [[435, "mlx.nn.gelu_approx", false]], "gelu_fast_approx (class in mlx.nn)": [[436, "mlx.nn.gelu_fast_approx", false]], "get_active_memory() (in module mlx.core)": [[174, "mlx.core.get_active_memory", false]], "get_cache_memory() (in module mlx.core)": [[175, "mlx.core.get_cache_memory", false]], "get_peak_memory() (in module mlx.core)": [[176, "mlx.core.get_peak_memory", false]], "glorot_normal() (in module mlx.nn.init)": [[425, "mlx.nn.init.glorot_normal", false]], "glorot_uniform() (in module mlx.nn.init)": [[426, "mlx.nn.init.glorot_uniform", false]], "glu (class in mlx.nn)": [[364, "mlx.nn.GLU", false], [437, "mlx.nn.glu", false]], "grad() (in module mlx.core)": [[177, "mlx.core.grad", false]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", false]], "greater() (in module mlx.core)": [[178, "mlx.core.greater", false]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", false]], "greater_equal() (in module mlx.core)": [[179, "mlx.core.greater_equal", false]], "group (class in mlx.core.distributed)": [[126, "mlx.core.distributed.Group", false]], "groupnorm (class in mlx.nn)": [[366, "mlx.nn.GroupNorm", false]], "gru (class in mlx.nn)": [[365, "mlx.nn.GRU", false]], "gumbel() (in module mlx.core.random)": [[253, "mlx.core.random.gumbel", false]], "hadamard_transform (c++ function)": [[0, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", false]], "hadamard_transform() (in module mlx.core)": [[180, "mlx.core.hadamard_transform", false]], "hard_shrink (class in mlx.nn)": [[438, "mlx.nn.hard_shrink", false]], "hard_tanh (class in mlx.nn)": [[439, "mlx.nn.hard_tanh", false]], "hardshrink (class in mlx.nn)": [[367, "mlx.nn.HardShrink", false]], "hardswish (class in mlx.nn)": [[369, "mlx.nn.Hardswish", false], [440, "mlx.nn.hardswish", false]], "hardtanh (class in mlx.nn)": [[368, "mlx.nn.HardTanh", false]], "he_normal() (in module mlx.nn.init)": [[427, "mlx.nn.init.he_normal", false]], "he_uniform() (in module mlx.nn.init)": [[428, "mlx.nn.init.he_uniform", false]], "hinge_loss (class in mlx.nn.losses)": [[448, "mlx.nn.losses.hinge_loss", false]], "huber_loss (class in mlx.nn.losses)": [[449, "mlx.nn.losses.huber_loss", false]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice", false], [0, "_CPPv48identityi5Dtype14StreamOrDevice", false]], "identity() (in module mlx.core)": [[181, "mlx.core.identity", false]], "identity() (in module mlx.nn.init)": [[429, "mlx.nn.init.identity", false]], "ifft() (in module mlx.core.fft)": [[158, "mlx.core.fft.ifft", false]], "ifft2() (in module mlx.core.fft)": [[159, "mlx.core.fft.ifft2", false]], "ifftn() (in module mlx.core.fft)": [[160, "mlx.core.fft.ifftn", false]], "imag (c++ function)": [[0, "_CPPv44imagRK5array14StreamOrDevice", false]], "imag() (in module mlx.core)": [[182, "mlx.core.imag", false]], "import_function() (in module mlx.core)": [[183, "mlx.core.import_function", false]], "init() (in module mlx.core.distributed)": [[129, "mlx.core.distributed.init", false]], "init() (optimizer method)": [[486, "mlx.optimizers.Optimizer.init", false]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", false]], "inner() (in module mlx.core)": [[184, "mlx.core.inner", false]], "instancenorm (class in mlx.nn)": [[370, "mlx.nn.InstanceNorm", false]], "inv() (in module mlx.core.linalg)": [[202, "mlx.core.linalg.inv", false]], "irfft() (in module mlx.core.fft)": [[161, "mlx.core.fft.irfft", false]], "irfft2() (in module mlx.core.fft)": [[162, "mlx.core.fft.irfft2", false]], "irfftn() (in module mlx.core.fft)": [[163, "mlx.core.fft.irfftn", false]], "is_available() (in module mlx.core.distributed)": [[130, "mlx.core.distributed.is_available", false]], "is_available() (in module mlx.core.metal)": [[229, "mlx.core.metal.is_available", false]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "isclose() (in module mlx.core)": [[185, "mlx.core.isclose", false]], "isfinite (c++ function)": [[0, "_CPPv48isfiniteRK5array14StreamOrDevice", false]], "isfinite() (in module mlx.core)": [[186, "mlx.core.isfinite", false]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice", false]], "isinf() (in module mlx.core)": [[187, "mlx.core.isinf", false]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice", false]], "isnan() (in module mlx.core)": [[188, "mlx.core.isnan", false]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice", false]], "isneginf() (in module mlx.core)": [[189, "mlx.core.isneginf", false]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice", false]], "isposinf() (in module mlx.core)": [[190, "mlx.core.isposinf", false]], "issubdtype() (in module mlx.core)": [[191, "mlx.core.issubdtype", false]], "item() (array method)": [[51, "mlx.core.array.item", false]], "itemsize (array property)": [[52, "mlx.core.array.itemsize", false]], "join_schedules() (in module mlx.optimizers)": [[493, "mlx.optimizers.join_schedules", false]], "jvp() (in module mlx.core)": [[192, "mlx.core.jvp", false]], "key() (in module mlx.core.random)": [[254, "mlx.core.random.key", false]], "kl_div_loss (class in mlx.nn.losses)": [[450, "mlx.nn.losses.kl_div_loss", false]], "kron (c++ function)": [[0, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", false]], "kron() (in module mlx.core)": [[193, "mlx.core.kron", false]], "l1_loss (class in mlx.nn.losses)": [[451, "mlx.nn.losses.l1_loss", false]], "laplace() (in module mlx.core.random)": [[255, "mlx.core.random.laplace", false]], "layer_norm() (in module mlx.core.fast)": [[150, "mlx.core.fast.layer_norm", false]], "layernorm (class in mlx.nn)": [[372, "mlx.nn.LayerNorm", false]], "leaf_modules() (module method)": [[387, "mlx.nn.Module.leaf_modules", false]], "leaky_relu (class in mlx.nn)": [[441, "mlx.nn.leaky_relu", false]], "leakyrelu (class in mlx.nn)": [[373, "mlx.nn.LeakyReLU", false]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", false]], "left_shift() (in module mlx.core)": [[194, "mlx.core.left_shift", false]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", false]], "less() (in module mlx.core)": [[195, "mlx.core.less", false]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", false]], "less_equal() (in module mlx.core)": [[196, "mlx.core.less_equal", false]], "linear (class in mlx.nn)": [[374, "mlx.nn.Linear", false]], "linear_schedule() (in module mlx.optimizers)": [[494, "mlx.optimizers.linear_schedule", false]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice", false]], "linspace() (in module mlx.core)": [[212, "mlx.core.linspace", false]], "lion (class in mlx.optimizers)": [[484, "mlx.optimizers.Lion", false]], "load() (in module mlx.core)": [[213, "mlx.core.load", false]], "load_weights() (module method)": [[388, "mlx.nn.Module.load_weights", false]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice", false]], "log() (array method)": [[53, "mlx.core.array.log", false]], "log() (in module mlx.core)": [[214, "mlx.core.log", false]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice", false]], "log10() (array method)": [[54, "mlx.core.array.log10", false]], "log10() (in module mlx.core)": [[215, "mlx.core.log10", false]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice", false]], "log1p() (array method)": [[55, "mlx.core.array.log1p", false]], "log1p() (in module mlx.core)": [[216, "mlx.core.log1p", false]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice", false]], "log2() (array method)": [[56, "mlx.core.array.log2", false]], "log2() (in module mlx.core)": [[217, "mlx.core.log2", false]], "log_cosh_loss (class in mlx.nn.losses)": [[452, "mlx.nn.losses.log_cosh_loss", false]], "log_sigmoid (class in mlx.nn)": [[442, "mlx.nn.log_sigmoid", false]], "log_softmax (class in mlx.nn)": [[443, "mlx.nn.log_softmax", false]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", false]], "logaddexp() (in module mlx.core)": [[218, "mlx.core.logaddexp", false]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", false]], "logical_and() (in module mlx.core)": [[219, "mlx.core.logical_and", false]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice", false]], "logical_not() (in module mlx.core)": [[220, "mlx.core.logical_not", false]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", false]], "logical_or() (in module mlx.core)": [[221, "mlx.core.logical_or", false]], "logsigmoid (class in mlx.nn)": [[375, "mlx.nn.LogSigmoid", false]], "logsoftmax (class in mlx.nn)": [[376, "mlx.nn.LogSoftmax", false]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", false]], "logsumexp() (array method)": [[57, "mlx.core.array.logsumexp", false]], "logsumexp() (in module mlx.core)": [[222, "mlx.core.logsumexp", false]], "lstm (class in mlx.nn)": [[371, "mlx.nn.LSTM", false]], "lu() (in module mlx.core.linalg)": [[203, "mlx.core.linalg.lu", false]], "lu_factor() (in module mlx.core.linalg)": [[204, "mlx.core.linalg.lu_factor", false]], "margin_ranking_loss (class in mlx.nn.losses)": [[453, "mlx.nn.losses.margin_ranking_loss", false]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", false]], "matmul() (in module mlx.core)": [[223, "mlx.core.matmul", false]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayib14StreamOrDevice", false]], "max() (array method)": [[58, "mlx.core.array.max", false]], "max() (in module mlx.core)": [[224, "mlx.core.max", false]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", false]], "maximum() (in module mlx.core)": [[225, "mlx.core.maximum", false]], "maxpool1d (class in mlx.nn)": [[377, "mlx.nn.MaxPool1d", false]], "maxpool2d (class in mlx.nn)": [[378, "mlx.nn.MaxPool2d", false]], "maxpool3d (class in mlx.nn)": [[379, "mlx.nn.MaxPool3d", false]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayib14StreamOrDevice", false]], "mean() (array method)": [[59, "mlx.core.array.mean", false]], "mean() (in module mlx.core)": [[226, "mlx.core.mean", false]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", false]], "meshgrid() (in module mlx.core)": [[227, "mlx.core.meshgrid", false]], "metal_kernel() (in module mlx.core.fast)": [[151, "mlx.core.fast.metal_kernel", false]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice", false], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayib14StreamOrDevice", false]], "min() (array method)": [[60, "mlx.core.array.min", false]], "min() (in module mlx.core)": [[232, "mlx.core.min", false]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", false]], "minimum() (in module mlx.core)": [[233, "mlx.core.minimum", false]], "mish (class in mlx.nn)": [[380, "mlx.nn.Mish", false], [458, "mlx.nn.mish", false]], "module (class in mlx.nn)": [[475, "mlx.nn.Module", false]], "modules() (module method)": [[389, "mlx.nn.Module.modules", false]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", false]], "moveaxis() (array method)": [[61, "mlx.core.array.moveaxis", false]], "moveaxis() (in module mlx.core)": [[234, "mlx.core.moveaxis", false]], "mse_loss (class in mlx.nn.losses)": [[454, "mlx.nn.losses.mse_loss", false]], "multiheadattention (class in mlx.nn)": [[401, "mlx.nn.MultiHeadAttention", false]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", false]], "multiply() (in module mlx.core)": [[235, "mlx.core.multiply", false]], "multivariate_normal() (in module mlx.core.random)": [[256, "mlx.core.random.multivariate_normal", false]], "named_modules() (module method)": [[390, "mlx.nn.Module.named_modules", false]], "nan_to_num (c++ function)": [[0, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", false]], "nan_to_num() (in module mlx.core)": [[236, "mlx.core.nan_to_num", false]], "nbytes (array property)": [[62, "mlx.core.array.nbytes", false]], "ndim (array property)": [[63, "mlx.core.array.ndim", false]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice", false]], "negative() (in module mlx.core)": [[237, "mlx.core.negative", false]], "new_stream() (in module mlx.core)": [[238, "mlx.core.new_stream", false]], "nll_loss (class in mlx.nn.losses)": [[455, "mlx.nn.losses.nll_loss", false]], "norm() (in module mlx.core.linalg)": [[205, "mlx.core.linalg.norm", false]], "normal() (in module mlx.core.random)": [[257, "mlx.core.random.normal", false]], "normal() (in module mlx.nn.init)": [[430, "mlx.nn.init.normal", false]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", false]], "not_equal() (in module mlx.core)": [[239, "mlx.core.not_equal", false]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", false]], "ones (c++ function)": [[0, "_CPPv44onesRK5Shape14StreamOrDevice", false], [0, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", false]], "ones() (in module mlx.core)": [[240, "mlx.core.ones", false]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice", false]], "ones_like() (in module mlx.core)": [[241, "mlx.core.ones_like", false]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array", false], [0, "_CPPv4I0Ene5arrayRK5array1T", false], [0, "_CPPv4neRK5arrayRK5array", false]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array", false], [0, "_CPPv4I0Erm5arrayRK5array1T", false], [0, "_CPPv4rmRK5arrayRK5array", false]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array", false]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array", false]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array", false], [0, "_CPPv4I0Eml5arrayRK5array1T", false], [0, "_CPPv4mlRK5arrayRK5array", false]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array", false], [0, "_CPPv4I0Epl5arrayRK5array1T", false], [0, "_CPPv4plRK5arrayRK5array", false]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array", false], [0, "_CPPv4I0Emi5arrayRK5array1T", false], [0, "_CPPv4miRK5array", false], [0, "_CPPv4miRK5arrayRK5array", false]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array", false], [0, "_CPPv4dvRK5arrayd", false], [0, "_CPPv4dvdRK5array", false]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array", false], [0, "_CPPv4I0Elt5arrayRK5array1T", false], [0, "_CPPv4ltRK5arrayRK5array", false]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array", false]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array", false], [0, "_CPPv4I0Ele5arrayRK5array1T", false], [0, "_CPPv4leRK5arrayRK5array", false]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array", false], [0, "_CPPv4I0Eeq5arrayRK5array1T", false], [0, "_CPPv4eqRK5arrayRK5array", false]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array", false], [0, "_CPPv4I0Egt5arrayRK5array1T", false], [0, "_CPPv4gtRK5arrayRK5array", false]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array", false], [0, "_CPPv4I0Ege5arrayRK5array1T", false], [0, "_CPPv4geRK5arrayRK5array", false]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array", false]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array", false]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array", false]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array", false]], "operator~ (c++ function)": [[0, "_CPPv4coRK5array", false]], "optimizer (class in mlx.optimizers)": [[497, "mlx.optimizers.Optimizer", false]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", false]], "outer() (in module mlx.core)": [[242, "mlx.core.outer", false]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", false]], "pad() (in module mlx.core)": [[243, "mlx.core.pad", false]], "parameters() (module method)": [[391, "mlx.nn.Module.parameters", false]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice", false]], "partition() (in module mlx.core)": [[244, "mlx.core.partition", false]], "permutation() (in module mlx.core.random)": [[258, "mlx.core.random.permutation", false]], "pinv() (in module mlx.core.linalg)": [[206, "mlx.core.linalg.pinv", false]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", false]], "power() (in module mlx.core)": [[245, "mlx.core.power", false]], "prelu (class in mlx.nn)": [[402, "mlx.nn.PReLU", false], [459, "mlx.nn.prelu", false]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayib14StreamOrDevice", false]], "prod() (array method)": [[64, "mlx.core.array.prod", false]], "prod() (in module mlx.core)": [[246, "mlx.core.prod", false]], "put_along_axis (c++ function)": [[0, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false]], "put_along_axis() (in module mlx.core)": [[247, "mlx.core.put_along_axis", false]], "qr() (in module mlx.core.linalg)": [[207, "mlx.core.linalg.qr", false]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice", false]], "quantize() (in module mlx.core)": [[248, "mlx.core.quantize", false]], "quantize() (in module mlx.nn)": [[326, "mlx.nn.quantize", false]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", false]], "quantized_matmul() (in module mlx.core)": [[249, "mlx.core.quantized_matmul", false]], "quantizedembedding (class in mlx.nn)": [[403, "mlx.nn.QuantizedEmbedding", false]], "quantizedlinear (class in mlx.nn)": [[404, "mlx.nn.QuantizedLinear", false]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice", false]], "radians() (in module mlx.core)": [[250, "mlx.core.radians", false]], "randint() (in module mlx.core.random)": [[259, "mlx.core.random.randint", false]], "real (c++ function)": [[0, "_CPPv44realRK5array14StreamOrDevice", false]], "real() (in module mlx.core)": [[264, "mlx.core.real", false]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice", false]], "reciprocal() (array method)": [[65, "mlx.core.array.reciprocal", false]], "reciprocal() (in module mlx.core)": [[265, "mlx.core.reciprocal", false]], "recv() (in module mlx.core.distributed)": [[131, "mlx.core.distributed.recv", false]], "recv_like() (in module mlx.core.distributed)": [[132, "mlx.core.distributed.recv_like", false]], "relu (class in mlx.nn)": [[407, "mlx.nn.ReLU", false], [460, "mlx.nn.relu", false]], "relu6 (class in mlx.nn)": [[408, "mlx.nn.ReLU6", false], [461, "mlx.nn.relu6", false]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", false]], "remainder() (in module mlx.core)": [[266, "mlx.core.remainder", false]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice", false], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice", false]], "repeat() (in module mlx.core)": [[267, "mlx.core.repeat", false]], "reset_peak_memory() (in module mlx.core)": [[268, "mlx.core.reset_peak_memory", false]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", false]], "reshape() (array method)": [[66, "mlx.core.array.reshape", false]], "reshape() (in module mlx.core)": [[269, "mlx.core.reshape", false]], "rfft() (in module mlx.core.fft)": [[164, "mlx.core.fft.rfft", false]], "rfft2() (in module mlx.core.fft)": [[165, "mlx.core.fft.rfft2", false]], "rfftn() (in module mlx.core.fft)": [[166, "mlx.core.fft.rfftn", false]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", false]], "right_shift() (in module mlx.core)": [[270, "mlx.core.right_shift", false]], "rms_norm() (in module mlx.core.fast)": [[152, "mlx.core.fast.rms_norm", false]], "rmsnorm (class in mlx.nn)": [[405, "mlx.nn.RMSNorm", false]], "rmsprop (class in mlx.optimizers)": [[489, "mlx.optimizers.RMSprop", false]], "rnn (class in mlx.nn)": [[406, "mlx.nn.RNN", false]], "roll (c++ function)": [[0, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayi14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayii14StreamOrDevice", false]], "roll() (in module mlx.core)": [[271, "mlx.core.roll", false]], "rope (class in mlx.nn)": [[409, "mlx.nn.RoPE", false]], "rope() (in module mlx.core.fast)": [[153, "mlx.core.fast.rope", false]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice", false], [0, "_CPPv45roundRK5arrayi14StreamOrDevice", false]], "round() (array method)": [[67, "mlx.core.array.round", false]], "round() (in module mlx.core)": [[272, "mlx.core.round", false]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice", false]], "rsqrt() (array method)": [[68, "mlx.core.array.rsqrt", false]], "rsqrt() (in module mlx.core)": [[273, "mlx.core.rsqrt", false]], "save() (in module mlx.core)": [[274, "mlx.core.save", false]], "save_gguf() (in module mlx.core)": [[275, "mlx.core.save_gguf", false]], "save_safetensors() (in module mlx.core)": [[276, "mlx.core.save_safetensors", false]], "save_weights() (module method)": [[392, "mlx.nn.Module.save_weights", false]], "savez() (in module mlx.core)": [[277, "mlx.core.savez", false]], "savez_compressed() (in module mlx.core)": [[278, "mlx.core.savez_compressed", false]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[154, "mlx.core.fast.scaled_dot_product_attention", false]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_add_axis (c++ function)": [[0, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "seed() (in module mlx.core.random)": [[260, "mlx.core.random.seed", false]], "selu (class in mlx.nn)": [[410, "mlx.nn.SELU", false], [462, "mlx.nn.selu", false]], "send() (in module mlx.core.distributed)": [[133, "mlx.core.distributed.send", false]], "sequential (class in mlx.nn)": [[411, "mlx.nn.Sequential", false]], "set_cache_limit() (in module mlx.core)": [[279, "mlx.core.set_cache_limit", false]], "set_default_device() (in module mlx.core)": [[280, "mlx.core.set_default_device", false]], "set_default_stream() (in module mlx.core)": [[281, "mlx.core.set_default_stream", false]], "set_dtype() (module method)": [[393, "mlx.nn.Module.set_dtype", false]], "set_memory_limit() (in module mlx.core)": [[282, "mlx.core.set_memory_limit", false]], "set_wired_limit() (in module mlx.core)": [[283, "mlx.core.set_wired_limit", false]], "sgd (class in mlx.optimizers)": [[490, "mlx.optimizers.SGD", false]], "shape (array property)": [[69, "mlx.core.array.shape", false]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice", false]], "sigmoid (class in mlx.nn)": [[413, "mlx.nn.Sigmoid", false], [463, "mlx.nn.sigmoid", false]], "sigmoid() (in module mlx.core)": [[284, "mlx.core.sigmoid", false]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice", false]], "sign() (in module mlx.core)": [[285, "mlx.core.sign", false]], "silu (class in mlx.nn)": [[412, "mlx.nn.SiLU", false], [464, "mlx.nn.silu", false]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice", false]], "sin() (array method)": [[70, "mlx.core.array.sin", false]], "sin() (in module mlx.core)": [[286, "mlx.core.sin", false]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice", false]], "sinh() (in module mlx.core)": [[287, "mlx.core.sinh", false]], "sinusoidalpositionalencoding (class in mlx.nn)": [[414, "mlx.nn.SinusoidalPositionalEncoding", false]], "size (array property)": [[71, "mlx.core.array.size", false]], "slice (c++ function)": [[0, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", false]], "slice() (in module mlx.core)": [[288, "mlx.core.slice", false]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", false], [0, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", false], [0, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "slice_update() (in module mlx.core)": [[289, "mlx.core.slice_update", false]], "smooth_l1_loss (class in mlx.nn.losses)": [[456, "mlx.nn.losses.smooth_l1_loss", false]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice", false]], "softmax (class in mlx.nn)": [[415, "mlx.nn.Softmax", false], [465, "mlx.nn.softmax", false]], "softmax() (in module mlx.core)": [[290, "mlx.core.softmax", false]], "softmin (class in mlx.nn)": [[416, "mlx.nn.Softmin", false], [466, "mlx.nn.softmin", false]], "softplus (class in mlx.nn)": [[417, "mlx.nn.Softplus", false], [467, "mlx.nn.softplus", false]], "softshrink (class in mlx.nn)": [[418, "mlx.nn.Softshrink", false], [468, "mlx.nn.softshrink", false]], "softsign (class in mlx.nn)": [[419, "mlx.nn.Softsign", false]], "solve() (in module mlx.core.linalg)": [[208, "mlx.core.linalg.solve", false]], "solve_triangular() (in module mlx.core.linalg)": [[209, "mlx.core.linalg.solve_triangular", false]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice", false], [0, "_CPPv44sortRK5arrayi14StreamOrDevice", false]], "sort() (in module mlx.core)": [[291, "mlx.core.sort", false]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayi14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayii14StreamOrDevice", false]], "split() (array method)": [[72, "mlx.core.array.split", false]], "split() (in module mlx.core)": [[292, "mlx.core.split", false]], "split() (in module mlx.core.random)": [[261, "mlx.core.random.split", false]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice", false]], "sqrt() (array method)": [[73, "mlx.core.array.sqrt", false]], "sqrt() (in module mlx.core)": [[293, "mlx.core.sqrt", false]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice", false]], "square() (array method)": [[74, "mlx.core.array.square", false]], "square() (in module mlx.core)": [[294, "mlx.core.square", false]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice", false]], "squeeze() (array method)": [[75, "mlx.core.array.squeeze", false]], "squeeze() (in module mlx.core)": [[295, "mlx.core.squeeze", false]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", false]], "stack() (in module mlx.core)": [[296, "mlx.core.stack", false]], "start_capture() (in module mlx.core.metal)": [[230, "mlx.core.metal.start_capture", false]], "state (module property)": [[394, "mlx.nn.Module.state", false]], "state (optimizer property)": [[487, "mlx.optimizers.Optimizer.state", false]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice", false], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv4StRK5arraybi14StreamOrDevice", false], [0, "_CPPv4StRK5arrayibi14StreamOrDevice", false]], "std() (array method)": [[76, "mlx.core.array.std", false]], "std() (in module mlx.core)": [[297, "mlx.core.std", false]], "step (class in mlx.nn)": [[420, "mlx.nn.Step", false], [469, "mlx.nn.step", false]], "step_decay() (in module mlx.optimizers)": [[495, "mlx.optimizers.step_decay", false]], "stop_capture() (in module mlx.core.metal)": [[231, "mlx.core.metal.stop_capture", false]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice", false]], "stop_gradient() (in module mlx.core)": [[298, "mlx.core.stop_gradient", false]], "stream (class in mlx.core)": [[334, "mlx.core.Stream", false]], "stream() (in module mlx.core)": [[299, "mlx.core.stream", false]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", false]], "subtract() (in module mlx.core)": [[300, "mlx.core.subtract", false]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayib14StreamOrDevice", false]], "sum() (array method)": [[77, "mlx.core.array.sum", false]], "sum() (in module mlx.core)": [[301, "mlx.core.sum", false]], "svd() (in module mlx.core.linalg)": [[210, "mlx.core.linalg.svd", false]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", false]], "swapaxes() (array method)": [[78, "mlx.core.array.swapaxes", false]], "swapaxes() (in module mlx.core)": [[302, "mlx.core.swapaxes", false]], "synchronize() (in module mlx.core)": [[303, "mlx.core.synchronize", false]], "t (array property)": [[32, "mlx.core.array.T", false]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayi14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayii14StreamOrDevice", false]], "take() (in module mlx.core)": [[304, "mlx.core.take", false]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", false]], "take_along_axis() (in module mlx.core)": [[305, "mlx.core.take_along_axis", false]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice", false]], "tan() (in module mlx.core)": [[306, "mlx.core.tan", false]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice", false]], "tanh (class in mlx.nn)": [[421, "mlx.nn.Tanh", false], [470, "mlx.nn.tanh", false]], "tanh() (in module mlx.core)": [[307, "mlx.core.tanh", false]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", false], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", false]], "tensordot() (in module mlx.core)": [[308, "mlx.core.tensordot", false]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "tile() (in module mlx.core)": [[309, "mlx.core.tile", false]], "tolist() (array method)": [[79, "mlx.core.array.tolist", false]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice", false], [0, "_CPPv44topkRK5arrayii14StreamOrDevice", false]], "topk() (in module mlx.core)": [[310, "mlx.core.topk", false]], "trace (c++ function)": [[0, "_CPPv45traceRK5array14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", false]], "trace() (in module mlx.core)": [[311, "mlx.core.trace", false]], "train() (module method)": [[395, "mlx.nn.Module.train", false]], "trainable_parameters() (module method)": [[396, "mlx.nn.Module.trainable_parameters", false]], "training (module property)": [[397, "mlx.nn.Module.training", false]], "transformer (class in mlx.nn)": [[422, "mlx.nn.Transformer", false]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "transpose() (array method)": [[80, "mlx.core.array.transpose", false]], "transpose() (in module mlx.core)": [[312, "mlx.core.transpose", false]], "tree_flatten() (in module mlx.utils)": [[329, "mlx.utils.tree_flatten", false]], "tree_map() (in module mlx.utils)": [[330, "mlx.utils.tree_map", false]], "tree_map_with_path() (in module mlx.utils)": [[331, "mlx.utils.tree_map_with_path", false]], "tree_reduce() (in module mlx.utils)": [[332, "mlx.utils.tree_reduce", false]], "tree_unflatten() (in module mlx.utils)": [[333, "mlx.utils.tree_unflatten", false]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice", false], [0, "_CPPv43triiii5Dtype14StreamOrDevice", false]], "tri() (in module mlx.core)": [[313, "mlx.core.tri", false]], "tri_inv() (in module mlx.core.linalg)": [[211, "mlx.core.linalg.tri_inv", false]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice", false]], "tril() (in module mlx.core)": [[314, "mlx.core.tril", false]], "triplet_loss (class in mlx.nn.losses)": [[457, "mlx.nn.losses.triplet_loss", false]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice", false]], "triu() (in module mlx.core)": [[315, "mlx.core.triu", false]], "truncated_normal() (in module mlx.core.random)": [[262, "mlx.core.random.truncated_normal", false]], "unflatten (c++ function)": [[0, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", false]], "unflatten() (in module mlx.core)": [[316, "mlx.core.unflatten", false]], "unfreeze() (module method)": [[398, "mlx.nn.Module.unfreeze", false]], "uniform() (in module mlx.core.random)": [[263, "mlx.core.random.uniform", false]], "uniform() (in module mlx.nn.init)": [[431, "mlx.nn.init.uniform", false]], "update() (module method)": [[399, "mlx.nn.Module.update", false]], "update() (optimizer method)": [[488, "mlx.optimizers.Optimizer.update", false]], "update_modules() (module method)": [[400, "mlx.nn.Module.update_modules", false]], "upsample (class in mlx.nn)": [[423, "mlx.nn.Upsample", false]], "value_and_grad() (in module mlx.core)": [[317, "mlx.core.value_and_grad", false]], "value_and_grad() (in module mlx.nn)": [[327, "mlx.nn.value_and_grad", false]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice", false], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv43varRK5arraybi14StreamOrDevice", false], [0, "_CPPv43varRK5arrayibi14StreamOrDevice", false]], "var() (array method)": [[81, "mlx.core.array.var", false]], "var() (in module mlx.core)": [[318, "mlx.core.var", false]], "view (c++ function)": [[0, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", false]], "view() (array method)": [[82, "mlx.core.array.view", false]], "view() (in module mlx.core)": [[319, "mlx.core.view", false]], "vjp() (in module mlx.core)": [[320, "mlx.core.vjp", false]], "vmap() (in module mlx.core)": [[321, "mlx.core.vmap", false]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", false]], "where() (in module mlx.core)": [[322, "mlx.core.where", false]], "zeros (c++ function)": [[0, "_CPPv45zerosRK5Shape14StreamOrDevice", false], [0, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", false]], "zeros() (in module mlx.core)": [[323, "mlx.core.zeros", false]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice", false]], "zeros_like() (in module mlx.core)": [[324, "mlx.core.zeros_like", false]]}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv414bitwise_invertRK5array14StreamOrDevice", "bitwise_invert"], [0, 1, 1, "_CPPv414bitwise_invertRK5array14StreamOrDevice", "bitwise_invert::a"], [0, 1, 1, "_CPPv414bitwise_invertRK5array14StreamOrDevice", "bitwise_invert::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::a"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::allow_col_major"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::dilation"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::groups"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::input"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::padding"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::s"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::stride"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::weight"], [0, 0, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::dilation"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::groups"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::input"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::padding"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::s"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::stride"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::weight"], [0, 0, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::dilation"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::groups"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::input"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::padding"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::s"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::stride"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::a"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::b"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::lhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::rhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::s"], [0, 0, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::biases"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::bits"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::group_size"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::lhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::rhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::s"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::scales"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::transpose"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::w"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::x"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::a"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::s"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::scale"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag"], [0, 1, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag::a"], [0, 1, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::a"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::a"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::b"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::a"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::nan"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::neginf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::posinf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv4coRK5array", "operator~"], [0, 1, 1, "_CPPv4coRK5array", "operator~::a"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::a"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::axis"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::indices"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::s"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::values"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv44realRK5array14StreamOrDevice", "real"], [0, 1, 1, "_CPPv44realRK5array14StreamOrDevice", "real::a"], [0, 1, 1, "_CPPv44realRK5array14StreamOrDevice", "real::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::axes"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::axes"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::axis"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::axis"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::shift"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::a"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::axis"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::indices"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::s"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::values"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::axes"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::slice_size"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::strides"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::axes"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::index"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::index"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::dtype"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::a"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::axis"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::s"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::shape"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::a"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::dtype"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[10, 3, 1, "", "Device"], [11, 3, 1, "", "Dtype"], [12, 3, 1, "", "DtypeCategory"], [334, 3, 1, "", "Stream"], [13, 5, 1, "", "abs"], [14, 5, 1, "", "add"], [15, 5, 1, "", "addmm"], [16, 5, 1, "", "all"], [17, 5, 1, "", "allclose"], [18, 5, 1, "", "any"], [19, 5, 1, "", "arange"], [20, 5, 1, "", "arccos"], [21, 5, 1, "", "arccosh"], [22, 5, 1, "", "arcsin"], [23, 5, 1, "", "arcsinh"], [24, 5, 1, "", "arctan"], [25, 5, 1, "", "arctan2"], [26, 5, 1, "", "arctanh"], [27, 5, 1, "", "argmax"], [28, 5, 1, "", "argmin"], [29, 5, 1, "", "argpartition"], [30, 5, 1, "", "argsort"], [31, 3, 1, "", "array"], [83, 5, 1, "", "array_equal"], [84, 5, 1, "", "as_strided"], [85, 5, 1, "", "async_eval"], [86, 5, 1, "", "atleast_1d"], [87, 5, 1, "", "atleast_2d"], [88, 5, 1, "", "atleast_3d"], [89, 5, 1, "", "bitwise_and"], [90, 5, 1, "", "bitwise_invert"], [91, 5, 1, "", "bitwise_or"], [92, 5, 1, "", "bitwise_xor"], [93, 5, 1, "", "block_masked_mm"], [94, 5, 1, "", "broadcast_arrays"], [95, 5, 1, "", "broadcast_to"], [96, 5, 1, "", "ceil"], [97, 5, 1, "", "clear_cache"], [98, 5, 1, "", "clip"], [99, 5, 1, "", "compile"], [100, 5, 1, "", "concatenate"], [101, 5, 1, "", "conj"], [102, 5, 1, "", "conjugate"], [103, 5, 1, "", "contiguous"], [104, 5, 1, "", "conv1d"], [105, 5, 1, "", "conv2d"], [106, 5, 1, "", "conv3d"], [107, 5, 1, "", "conv_general"], [108, 5, 1, "", "conv_transpose1d"], [109, 5, 1, "", "conv_transpose2d"], [110, 5, 1, "", "conv_transpose3d"], [111, 5, 1, "", "convolve"], [112, 5, 1, "", "cos"], [113, 5, 1, "", "cosh"], [114, 5, 1, "", "cummax"], [115, 5, 1, "", "cummin"], [116, 5, 1, "", "cumprod"], [117, 5, 1, "", "cumsum"], [118, 3, 1, "", "custom_function"], [119, 5, 1, "", "default_device"], [120, 5, 1, "", "default_stream"], [121, 5, 1, "", "degrees"], [122, 5, 1, "", "dequantize"], [123, 5, 1, "", "diag"], [124, 5, 1, "", "diagonal"], [125, 5, 1, "", "disable_compile"], [134, 5, 1, "", "divide"], [135, 5, 1, "", "divmod"], [136, 5, 1, "", "einsum"], [137, 5, 1, "", "einsum_path"], [138, 5, 1, "", "enable_compile"], [139, 5, 1, "", "equal"], [140, 5, 1, "", "erf"], [141, 5, 1, "", "erfinv"], [142, 5, 1, "", "eval"], [143, 5, 1, "", "exp"], [144, 5, 1, "", "expand_dims"], [145, 5, 1, "", "expm1"], [146, 5, 1, "", "export_function"], [147, 5, 1, "", "export_to_dot"], [148, 5, 1, "", "exporter"], [149, 5, 1, "", "eye"], [167, 3, 1, "", "finfo"], [168, 5, 1, "", "flatten"], [169, 5, 1, "", "floor"], [170, 5, 1, "", "floor_divide"], [171, 5, 1, "", "full"], [172, 5, 1, "", "gather_mm"], [173, 5, 1, "", "gather_qmm"], [174, 5, 1, "", "get_active_memory"], [175, 5, 1, "", "get_cache_memory"], [176, 5, 1, "", "get_peak_memory"], [177, 5, 1, "", "grad"], [178, 5, 1, "", "greater"], [179, 5, 1, "", "greater_equal"], [180, 5, 1, "", "hadamard_transform"], [181, 5, 1, "", "identity"], [182, 5, 1, "", "imag"], [183, 5, 1, "", "import_function"], [184, 5, 1, "", "inner"], [185, 5, 1, "", "isclose"], [186, 5, 1, "", "isfinite"], [187, 5, 1, "", "isinf"], [188, 5, 1, "", "isnan"], [189, 5, 1, "", "isneginf"], [190, 5, 1, "", "isposinf"], [191, 5, 1, "", "issubdtype"], [192, 5, 1, "", "jvp"], [193, 5, 1, "", "kron"], [194, 5, 1, "", "left_shift"], [195, 5, 1, "", "less"], [196, 5, 1, "", "less_equal"], [212, 5, 1, "", "linspace"], [213, 5, 1, "", "load"], [214, 5, 1, "", "log"], [215, 5, 1, "", "log10"], [216, 5, 1, "", "log1p"], [217, 5, 1, "", "log2"], [218, 5, 1, "", "logaddexp"], [219, 5, 1, "", "logical_and"], [220, 5, 1, "", "logical_not"], [221, 5, 1, "", "logical_or"], [222, 5, 1, "", "logsumexp"], [223, 5, 1, "", "matmul"], [224, 5, 1, "", "max"], [225, 5, 1, "", "maximum"], [226, 5, 1, "", "mean"], [227, 5, 1, "", "meshgrid"], [232, 5, 1, "", "min"], [233, 5, 1, "", "minimum"], [234, 5, 1, "", "moveaxis"], [235, 5, 1, "", "multiply"], [236, 5, 1, "", "nan_to_num"], [237, 5, 1, "", "negative"], [238, 5, 1, "", "new_stream"], [239, 5, 1, "", "not_equal"], [240, 5, 1, "", "ones"], [241, 5, 1, "", "ones_like"], [242, 5, 1, "", "outer"], [243, 5, 1, "", "pad"], [244, 5, 1, "", "partition"], [245, 5, 1, "", "power"], [246, 5, 1, "", "prod"], [247, 5, 1, "", "put_along_axis"], [248, 5, 1, "", "quantize"], [249, 5, 1, "", "quantized_matmul"], [250, 5, 1, "", "radians"], [264, 5, 1, "", "real"], [265, 5, 1, "", "reciprocal"], [266, 5, 1, "", "remainder"], [267, 5, 1, "", "repeat"], [268, 5, 1, "", "reset_peak_memory"], [269, 5, 1, "", "reshape"], [270, 5, 1, "", "right_shift"], [271, 5, 1, "", "roll"], [272, 5, 1, "", "round"], [273, 5, 1, "", "rsqrt"], [274, 5, 1, "", "save"], [275, 5, 1, "", "save_gguf"], [276, 5, 1, "", "save_safetensors"], [277, 5, 1, "", "savez"], [278, 5, 1, "", "savez_compressed"], [279, 5, 1, "", "set_cache_limit"], [280, 5, 1, "", "set_default_device"], [281, 5, 1, "", "set_default_stream"], [282, 5, 1, "", "set_memory_limit"], [283, 5, 1, "", "set_wired_limit"], [284, 5, 1, "", "sigmoid"], [285, 5, 1, "", "sign"], [286, 5, 1, "", "sin"], [287, 5, 1, "", "sinh"], [288, 5, 1, "", "slice"], [289, 5, 1, "", "slice_update"], [290, 5, 1, "", "softmax"], [291, 5, 1, "", "sort"], [292, 5, 1, "", "split"], [293, 5, 1, "", "sqrt"], [294, 5, 1, "", "square"], [295, 5, 1, "", "squeeze"], [296, 5, 1, "", "stack"], [297, 5, 1, "", "std"], [298, 5, 1, "", "stop_gradient"], [299, 5, 1, "", "stream"], [300, 5, 1, "", "subtract"], [301, 5, 1, "", "sum"], [302, 5, 1, "", "swapaxes"], [303, 5, 1, "", "synchronize"], [304, 5, 1, "", "take"], [305, 5, 1, "", "take_along_axis"], [306, 5, 1, "", "tan"], [307, 5, 1, "", "tanh"], [308, 5, 1, "", "tensordot"], [309, 5, 1, "", "tile"], [310, 5, 1, "", "topk"], [311, 5, 1, "", "trace"], [312, 5, 1, "", "transpose"], [313, 5, 1, "", "tri"], [314, 5, 1, "", "tril"], [315, 5, 1, "", "triu"], [316, 5, 1, "", "unflatten"], [317, 5, 1, "", "value_and_grad"], [318, 5, 1, "", "var"], [319, 5, 1, "", "view"], [320, 5, 1, "", "vjp"], [321, 5, 1, "", "vmap"], [322, 5, 1, "", "where"], [323, 5, 1, "", "zeros"], [324, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[10, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[11, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[12, 4, 1, "", "__init__"]], "mlx.core.Stream": [[334, 4, 1, "", "__init__"]], "mlx.core.array": [[32, 6, 1, "", "T"], [31, 4, 1, "", "__init__"], [33, 4, 1, "", "abs"], [34, 4, 1, "", "all"], [35, 4, 1, "", "any"], [36, 4, 1, "", "argmax"], [37, 4, 1, "", "argmin"], [38, 4, 1, "", "astype"], [39, 6, 1, "", "at"], [40, 4, 1, "", "conj"], [41, 4, 1, "", "cos"], [42, 4, 1, "", "cummax"], [43, 4, 1, "", "cummin"], [44, 4, 1, "", "cumprod"], [45, 4, 1, "", "cumsum"], [46, 4, 1, "", "diag"], [47, 4, 1, "", "diagonal"], [48, 6, 1, "", "dtype"], [49, 4, 1, "", "exp"], [50, 4, 1, "", "flatten"], [51, 4, 1, "", "item"], [52, 6, 1, "", "itemsize"], [53, 4, 1, "", "log"], [54, 4, 1, "", "log10"], [55, 4, 1, "", "log1p"], [56, 4, 1, "", "log2"], [57, 4, 1, "", "logsumexp"], [58, 4, 1, "", "max"], [59, 4, 1, "", "mean"], [60, 4, 1, "", "min"], [61, 4, 1, "", "moveaxis"], [62, 6, 1, "", "nbytes"], [63, 6, 1, "", "ndim"], [64, 4, 1, "", "prod"], [65, 4, 1, "", "reciprocal"], [66, 4, 1, "", "reshape"], [67, 4, 1, "", "round"], [68, 4, 1, "", "rsqrt"], [69, 6, 1, "", "shape"], [70, 4, 1, "", "sin"], [71, 6, 1, "", "size"], [72, 4, 1, "", "split"], [73, 4, 1, "", "sqrt"], [74, 4, 1, "", "square"], [75, 4, 1, "", "squeeze"], [76, 4, 1, "", "std"], [77, 4, 1, "", "sum"], [78, 4, 1, "", "swapaxes"], [79, 4, 1, "", "tolist"], [80, 4, 1, "", "transpose"], [81, 4, 1, "", "var"], [82, 4, 1, "", "view"]], "mlx.core.custom_function": [[118, 4, 1, "", "__init__"]], "mlx.core.distributed": [[126, 3, 1, "", "Group"], [127, 5, 1, "", "all_gather"], [128, 5, 1, "", "all_sum"], [129, 5, 1, "", "init"], [130, 5, 1, "", "is_available"], [131, 5, 1, "", "recv"], [132, 5, 1, "", "recv_like"], [133, 5, 1, "", "send"]], "mlx.core.distributed.Group": [[126, 4, 1, "", "__init__"]], "mlx.core.fast": [[150, 5, 1, "", "layer_norm"], [151, 5, 1, "", "metal_kernel"], [152, 5, 1, "", "rms_norm"], [153, 5, 1, "", "rope"], [154, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[155, 5, 1, "", "fft"], [156, 5, 1, "", "fft2"], [157, 5, 1, "", "fftn"], [158, 5, 1, "", "ifft"], [159, 5, 1, "", "ifft2"], [160, 5, 1, "", "ifftn"], [161, 5, 1, "", "irfft"], [162, 5, 1, "", "irfft2"], [163, 5, 1, "", "irfftn"], [164, 5, 1, "", "rfft"], [165, 5, 1, "", "rfft2"], [166, 5, 1, "", "rfftn"]], "mlx.core.finfo": [[167, 4, 1, "", "__init__"]], "mlx.core.linalg": [[197, 5, 1, "", "cholesky"], [198, 5, 1, "", "cholesky_inv"], [199, 5, 1, "", "cross"], [200, 5, 1, "", "eigh"], [201, 5, 1, "", "eigvalsh"], [202, 5, 1, "", "inv"], [203, 5, 1, "", "lu"], [204, 5, 1, "", "lu_factor"], [205, 5, 1, "", "norm"], [206, 5, 1, "", "pinv"], [207, 5, 1, "", "qr"], [208, 5, 1, "", "solve"], [209, 5, 1, "", "solve_triangular"], [210, 5, 1, "", "svd"], [211, 5, 1, "", "tri_inv"]], "mlx.core.metal": [[228, 5, 1, "", "device_info"], [229, 5, 1, "", "is_available"], [230, 5, 1, "", "start_capture"], [231, 5, 1, "", "stop_capture"]], "mlx.core.random": [[251, 5, 1, "", "bernoulli"], [252, 5, 1, "", "categorical"], [253, 5, 1, "", "gumbel"], [254, 5, 1, "", "key"], [255, 5, 1, "", "laplace"], [256, 5, 1, "", "multivariate_normal"], [257, 5, 1, "", "normal"], [258, 5, 1, "", "permutation"], [259, 5, 1, "", "randint"], [260, 5, 1, "", "seed"], [261, 5, 1, "", "split"], [262, 5, 1, "", "truncated_normal"], [263, 5, 1, "", "uniform"]], "mlx.nn": [[346, 3, 1, "", "ALiBi"], [347, 3, 1, "", "AvgPool1d"], [348, 3, 1, "", "AvgPool2d"], [349, 3, 1, "", "AvgPool3d"], [350, 3, 1, "", "BatchNorm"], [351, 3, 1, "", "CELU"], [352, 3, 1, "", "Conv1d"], [353, 3, 1, "", "Conv2d"], [354, 3, 1, "", "Conv3d"], [355, 3, 1, "", "ConvTranspose1d"], [356, 3, 1, "", "ConvTranspose2d"], [357, 3, 1, "", "ConvTranspose3d"], [358, 3, 1, "", "Dropout"], [359, 3, 1, "", "Dropout2d"], [360, 3, 1, "", "Dropout3d"], [361, 3, 1, "", "ELU"], [362, 3, 1, "", "Embedding"], [363, 3, 1, "", "GELU"], [364, 3, 1, "", "GLU"], [365, 3, 1, "", "GRU"], [366, 3, 1, "", "GroupNorm"], [367, 3, 1, "", "HardShrink"], [368, 3, 1, "", "HardTanh"], [369, 3, 1, "", "Hardswish"], [370, 3, 1, "", "InstanceNorm"], [371, 3, 1, "", "LSTM"], [372, 3, 1, "", "LayerNorm"], [373, 3, 1, "", "LeakyReLU"], [374, 3, 1, "", "Linear"], [375, 3, 1, "", "LogSigmoid"], [376, 3, 1, "", "LogSoftmax"], [377, 3, 1, "", "MaxPool1d"], [378, 3, 1, "", "MaxPool2d"], [379, 3, 1, "", "MaxPool3d"], [380, 3, 1, "", "Mish"], [475, 3, 1, "", "Module"], [401, 3, 1, "", "MultiHeadAttention"], [402, 3, 1, "", "PReLU"], [403, 3, 1, "", "QuantizedEmbedding"], [404, 3, 1, "", "QuantizedLinear"], [405, 3, 1, "", "RMSNorm"], [406, 3, 1, "", "RNN"], [407, 3, 1, "", "ReLU"], [408, 3, 1, "", "ReLU6"], [409, 3, 1, "", "RoPE"], [410, 3, 1, "", "SELU"], [411, 3, 1, "", "Sequential"], [412, 3, 1, "", "SiLU"], [413, 3, 1, "", "Sigmoid"], [414, 3, 1, "", "SinusoidalPositionalEncoding"], [415, 3, 1, "", "Softmax"], [416, 3, 1, "", "Softmin"], [417, 3, 1, "", "Softplus"], [418, 3, 1, "", "Softshrink"], [419, 3, 1, "", "Softsign"], [420, 3, 1, "", "Step"], [421, 3, 1, "", "Tanh"], [422, 3, 1, "", "Transformer"], [423, 3, 1, "", "Upsample"], [325, 5, 1, "", "average_gradients"], [432, 3, 1, "", "celu"], [433, 3, 1, "", "elu"], [434, 3, 1, "", "gelu"], [435, 3, 1, "", "gelu_approx"], [436, 3, 1, "", "gelu_fast_approx"], [437, 3, 1, "", "glu"], [438, 3, 1, "", "hard_shrink"], [439, 3, 1, "", "hard_tanh"], [440, 3, 1, "", "hardswish"], [441, 3, 1, "", "leaky_relu"], [442, 3, 1, "", "log_sigmoid"], [443, 3, 1, "", "log_softmax"], [458, 3, 1, "", "mish"], [459, 3, 1, "", "prelu"], [326, 5, 1, "", "quantize"], [460, 3, 1, "", "relu"], [461, 3, 1, "", "relu6"], [462, 3, 1, "", "selu"], [463, 3, 1, "", "sigmoid"], [464, 3, 1, "", "silu"], [465, 3, 1, "", "softmax"], [466, 3, 1, "", "softmin"], [467, 3, 1, "", "softplus"], [468, 3, 1, "", "softshrink"], [469, 3, 1, "", "step"], [470, 3, 1, "", "tanh"], [327, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[381, 4, 1, "", "apply"], [382, 4, 1, "", "apply_to_modules"], [383, 4, 1, "", "children"], [384, 4, 1, "", "eval"], [385, 4, 1, "", "filter_and_map"], [386, 4, 1, "", "freeze"], [387, 4, 1, "", "leaf_modules"], [388, 4, 1, "", "load_weights"], [389, 4, 1, "", "modules"], [390, 4, 1, "", "named_modules"], [391, 4, 1, "", "parameters"], [392, 4, 1, "", "save_weights"], [393, 4, 1, "", "set_dtype"], [394, 6, 1, "", "state"], [395, 4, 1, "", "train"], [396, 4, 1, "", "trainable_parameters"], [397, 6, 1, "", "training"], [398, 4, 1, "", "unfreeze"], [399, 4, 1, "", "update"], [400, 4, 1, "", "update_modules"]], "mlx.nn.init": [[424, 5, 1, "", "constant"], [425, 5, 1, "", "glorot_normal"], [426, 5, 1, "", "glorot_uniform"], [427, 5, 1, "", "he_normal"], [428, 5, 1, "", "he_uniform"], [429, 5, 1, "", "identity"], [430, 5, 1, "", "normal"], [431, 5, 1, "", "uniform"]], "mlx.nn.losses": [[444, 3, 1, "", "binary_cross_entropy"], [445, 3, 1, "", "cosine_similarity_loss"], [446, 3, 1, "", "cross_entropy"], [447, 3, 1, "", "gaussian_nll_loss"], [448, 3, 1, "", "hinge_loss"], [449, 3, 1, "", "huber_loss"], [450, 3, 1, "", "kl_div_loss"], [451, 3, 1, "", "l1_loss"], [452, 3, 1, "", "log_cosh_loss"], [453, 3, 1, "", "margin_ranking_loss"], [454, 3, 1, "", "mse_loss"], [455, 3, 1, "", "nll_loss"], [456, 3, 1, "", "smooth_l1_loss"], [457, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[478, 3, 1, "", "AdaDelta"], [479, 3, 1, "", "Adafactor"], [480, 3, 1, "", "Adagrad"], [481, 3, 1, "", "Adam"], [482, 3, 1, "", "AdamW"], [483, 3, 1, "", "Adamax"], [484, 3, 1, "", "Lion"], [497, 3, 1, "", "Optimizer"], [489, 3, 1, "", "RMSprop"], [490, 3, 1, "", "SGD"], [328, 5, 1, "", "clip_grad_norm"], [491, 5, 1, "", "cosine_decay"], [492, 5, 1, "", "exponential_decay"], [493, 5, 1, "", "join_schedules"], [494, 5, 1, "", "linear_schedule"], [495, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[485, 4, 1, "", "apply_gradients"], [486, 4, 1, "", "init"], [487, 6, 1, "", "state"], [488, 4, 1, "", "update"]], "mlx.utils": [[329, 5, 1, "", "tree_flatten"], [330, 5, 1, "", "tree_map"], [331, 5, 1, "", "tree_map_with_path"], [332, 5, 1, "", "tree_reduce"], [333, 5, 1, "", "tree_unflatten"]]}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "terms": {"": [0, 1, 2, 5, 6, 7, 48, 52, 63, 99, 120, 122, 156, 157, 159, 160, 162, 163, 165, 166, 177, 198, 205, 210, 213, 226, 242, 248, 252, 272, 275, 276, 297, 299, 317, 318, 319, 321, 327, 345, 348, 349, 365, 371, 378, 379, 385, 386, 388, 392, 393, 394, 398, 406, 477, 486, 487, 499, 502, 504, 505, 509, 510, 511, 512], "0": [0, 1, 2, 4, 5, 6, 7, 9, 10, 15, 19, 39, 46, 47, 50, 67, 72, 76, 81, 84, 85, 97, 100, 104, 105, 106, 107, 108, 109, 110, 118, 123, 124, 149, 151, 154, 168, 172, 177, 183, 193, 200, 202, 203, 205, 207, 211, 236, 243, 251, 255, 257, 258, 263, 267, 272, 279, 283, 288, 289, 292, 296, 297, 311, 313, 314, 315, 316, 317, 318, 321, 325, 328, 329, 331, 332, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 366, 367, 370, 372, 373, 377, 378, 379, 402, 407, 409, 414, 418, 420, 422, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 438, 439, 440, 441, 444, 446, 448, 449, 453, 456, 457, 459, 460, 461, 462, 468, 469, 472, 475, 478, 479, 481, 482, 483, 484, 486, 489, 490, 491, 492, 493, 494, 495, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511], "00005": 5, "0001": 414, "0005": 435, "001": 479, "00364": 5, "01": [5, 373, 441, 482], "0137595": 427, "015": 436, "0184009": 428, "02264": 426, "024": 505, "02765": 427, "0300242": 428, "044715": [363, 435], "0485873": 446, "05": [17, 185, 350, 366, 370, 372, 405], "0507": 462, "05202": 6, "06": [447, 457, 478], "0638": 453, "06450": 372, "0645099": 430, "06561": 492, "06675": 484, "07467": 405, "08": [17, 185, 445, 480, 481, 482, 483, 489], "08022": 370, "081": 495, "08415": 436, "08494": 366, "08619": 428, "08681": [380, 458], "09864": 6, "0999938": 493, "0999961": 491, "0f": 0, "1": [0, 1, 2, 3, 4, 6, 7, 15, 19, 29, 30, 39, 47, 50, 85, 104, 105, 106, 107, 108, 109, 110, 118, 123, 124, 145, 146, 147, 148, 151, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 168, 180, 184, 191, 193, 198, 199, 200, 201, 203, 205, 207, 223, 227, 242, 244, 248, 252, 255, 256, 257, 263, 282, 284, 288, 289, 291, 304, 310, 311, 316, 317, 328, 331, 332, 336, 345, 347, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 366, 370, 371, 372, 374, 377, 402, 405, 406, 409, 413, 414, 420, 423, 425, 426, 427, 428, 429, 430, 431, 432, 433, 435, 436, 437, 439, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 455, 456, 457, 462, 463, 465, 466, 467, 469, 472, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 491, 492, 493, 494, 495, 502, 503, 504, 505, 506, 507, 509, 510, 511, 512], "10": [0, 3, 6, 7, 193, 215, 272, 277, 330, 345, 388, 472, 493, 495, 502, 503, 506], "100": [2, 5, 6, 444, 494, 502, 505, 508, 512], "1000": [2, 491, 502], "10000": 409, "101": 494, "1024": [1, 6], "105361": 444, "10_000": 5, "10x": 484, "11": 205, "12": [6, 180, 193, 493], "1212": 478, "123": [503, 507], "12451": 426, "128": [277, 345], "13": 9, "14": [9, 193], "15": [1, 9, 193, 205, 283, 332, 502], "150594": 425, "15268": 427, "16": [1, 151, 336, 347, 349, 370, 377, 379, 381, 475], "1606": 436, "1607": [370, 372], "16384": 180, "16506": 428, "168": 503, "17": [4, 9], "177208": 427, "18": 193, "1803": 366, "1908": [380, 458], "1910": 405, "191107": 425, "192": 503, "1985": 205, "1_000": 5, "1d": [0, 104, 108, 111, 275, 305], "1e": [0, 5, 7, 17, 185, 350, 366, 370, 372, 373, 405, 445, 447, 457, 477, 478, 479, 480, 481, 482, 483, 486, 489, 491, 492, 493, 494, 495], "1e3": 502, "1st": 248, "2": [0, 1, 2, 4, 5, 6, 7, 39, 105, 109, 118, 123, 124, 140, 146, 147, 148, 156, 159, 161, 162, 163, 164, 165, 166, 168, 180, 191, 193, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 210, 211, 217, 223, 248, 256, 261, 288, 289, 308, 311, 313, 314, 315, 316, 328, 332, 336, 345, 347, 348, 349, 353, 356, 363, 373, 377, 378, 379, 405, 414, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 446, 447, 449, 456, 457, 472, 475, 477, 478, 480, 481, 482, 486, 489, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "20": [180, 193, 205], "200": [6, 493, 505], "2002": 6, "2011": 480, "2012": [478, 489], "2015": [359, 481, 483], "2019": [6, 482], "2020": 6, "2021": 6, "20397": 444, "20_000": 6, "21": [6, 193, 495], "2104": 6, "223144": 444, "223404": 426, "225": 205, "225763": 453, "2302": 484, "23607": [205, 207], "24": 193, "24264": 205, "247": 6, "25": [9, 402, 423], "25211": 427, "256": [1, 7, 151], "256995": 453, "27": 4, "28": [180, 193], "2d": [0, 105, 109, 124, 248, 350, 359], "2nd": 248, "2x": 509, "3": [0, 1, 2, 4, 6, 9, 85, 106, 110, 118, 146, 148, 168, 191, 193, 199, 200, 201, 205, 207, 288, 289, 316, 328, 332, 349, 354, 357, 363, 379, 423, 426, 428, 435, 440, 479, 484, 499, 502, 503, 504, 506, 509, 510], "30": 479, "3118": 509, "32": [1, 6, 7, 93, 248, 249, 336, 348, 349, 378, 379, 405, 502], "32mib": 325, "330": 6, "33333": 423, "33554432": 325, "348587": 446, "363207": 425, "36788": 502, "379159": 426, "380709": 430, "39": 6, "3d": [0, 2, 106, 110, 350, 360, 423], "3f": [2, 7, 502], "3x": 2, "4": [0, 1, 2, 6, 122, 151, 154, 168, 173, 193, 205, 248, 249, 277, 288, 316, 326, 332, 336, 347, 348, 349, 350, 370, 377, 378, 379, 403, 404, 422, 423, 425, 426, 427, 444, 502, 503, 504, 506, 510, 512], "4096": [2, 502, 505, 512], "40x": 1, "41421": 205, "417497": 431, "42": 333, "437": 6, "44": 6, "447214": 207, "458835": 427, "475": 6, "48095": 425, "4d": [1, 423], "4m": 1, "5": [0, 1, 2, 5, 6, 9, 193, 205, 251, 282, 288, 332, 347, 350, 358, 359, 360, 363, 367, 370, 377, 418, 423, 424, 427, 428, 435, 438, 456, 468, 472, 477, 489, 491, 492, 502, 505, 506], "50": [0, 212], "500": [6, 512], "510826": 444, "512": [3, 6, 422, 512], "534422": 430, "539245": 444, "53947": 425, "55": 1, "559": 2, "5701": 478, "573409": 453, "57771": 207, "579": 6, "5f": 5, "6": [1, 2, 6, 118, 193, 205, 277, 288, 408, 422, 426, 435, 436, 440, 447, 457, 461, 489, 502, 506, 510], "61278": 425, "617261": 431, "628": 6, "633": 6, "639": 505, "64": [0, 1, 93, 122, 173, 248, 249, 326, 336, 403, 404], "64331": 428, "666329": 428, "66667": 423, "67326": 462, "676": 1, "690": 6, "6967": 427, "7": [2, 6, 193, 205, 248, 506], "702": [363, 436], "707107": 200, "71828": 502, "74166": 205, "74597": 205, "75": 423, "75596": 453, "75787": 427, "765166": 453, "773433": 453, "774": 2, "776856": 426, "793615": 428, "79854": 428, "7b": 6, "7m": 1, "8": [0, 1, 2, 6, 9, 205, 248, 336, 348, 349, 370, 378, 379, 422, 445, 478, 479, 480, 481, 482, 483, 489, 502, 506, 510, 512], "8192": [6, 180], "84804": 205, "863726": 431, "883935": 431, "890597": 426, "894427": 207, "89613": 425, "8gb": 6, "8x": 1, "9": [4, 9, 205, 446, 478, 481, 482, 483, 484, 486, 492, 495, 509], "90041": 426, "912766": 426, "916291": 444, "95": 7, "982273": 430, "99": [484, 489], "995016": 425, "999": [481, 482, 483], "A": [0, 2, 6, 8, 9, 10, 69, 83, 99, 146, 147, 150, 151, 152, 154, 177, 191, 192, 198, 200, 201, 203, 205, 207, 210, 213, 222, 223, 224, 228, 232, 248, 251, 252, 253, 255, 256, 257, 258, 259, 262, 263, 292, 296, 299, 317, 320, 321, 326, 327, 328, 329, 330, 331, 332, 333, 334, 345, 350, 359, 365, 366, 370, 372, 385, 389, 390, 393, 399, 400, 405, 411, 414, 422, 425, 426, 428, 436, 457, 458, 475, 477, 481, 483, 485, 486, 488, 493, 502, 503, 504, 505, 507, 508, 509], "AS": 172, "And": [4, 6, 423], "As": [7, 39, 304, 345, 503], "At": [98, 316, 503], "But": [504, 512], "By": [6, 326, 393, 444, 503, 505, 509], "For": [0, 1, 2, 4, 6, 9, 39, 118, 154, 172, 191, 205, 248, 333, 345, 350, 359, 363, 381, 386, 395, 398, 404, 409, 414, 423, 425, 426, 427, 428, 444, 472, 477, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "If": [0, 1, 2, 4, 6, 9, 16, 17, 18, 19, 27, 28, 29, 30, 79, 83, 84, 85, 98, 100, 111, 114, 115, 116, 117, 123, 124, 127, 128, 129, 131, 132, 133, 142, 150, 152, 153, 154, 164, 165, 166, 170, 171, 177, 185, 197, 198, 199, 205, 210, 213, 222, 223, 224, 226, 227, 232, 236, 240, 243, 244, 246, 247, 252, 256, 258, 267, 271, 279, 282, 290, 291, 292, 297, 301, 303, 304, 305, 308, 310, 311, 317, 318, 321, 323, 325, 326, 330, 332, 350, 352, 353, 354, 355, 356, 357, 366, 372, 374, 386, 388, 398, 404, 406, 409, 411, 414, 423, 444, 446, 457, 479, 481, 482, 502, 503, 504, 505, 507, 508, 511, 512, 513], "In": [0, 1, 2, 6, 7, 39, 154, 223, 248, 330, 345, 359, 366, 475, 478, 480, 481, 483, 484, 485, 501, 502, 503, 504, 505, 507, 508, 511, 512], "It": [2, 6, 9, 132, 177, 281, 317, 328, 332, 345, 400, 404, 485, 497, 503, 507, 509, 511], "Its": [345, 504], "No": [2, 6, 200, 201, 503], "Not": [99, 239, 502], "ON": [3, 4, 9], "Of": 505, "On": [1, 502, 505, 508], "One": [155, 158, 164, 243, 273, 502, 504, 505, 507], "THE": 9, "That": 6, "The": [0, 1, 2, 3, 4, 6, 7, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 48, 52, 62, 63, 69, 79, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 199, 200, 201, 203, 204, 205, 207, 208, 209, 210, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 275, 276, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 338, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 362, 364, 365, 366, 370, 371, 372, 374, 377, 378, 379, 381, 382, 386, 388, 392, 393, 394, 395, 398, 399, 400, 401, 403, 404, 405, 406, 409, 411, 414, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 469, 472, 475, 477, 478, 479, 480, 481, 482, 483, 484, 487, 489, 490, 491, 494, 497, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "Then": [5, 9], "There": [1, 345, 423, 502], "These": [1, 2, 99, 247, 305, 446, 512], "To": [0, 2, 3, 5, 6, 7, 9, 203, 279, 345, 472, 477, 502, 503, 504, 505, 510], "With": 504, "_": [1, 3, 5, 6, 331, 345, 491, 492, 493, 494, 495, 499, 502, 508, 512], "__call__": [1, 6, 7, 345, 475, 504], "__init__": [2, 6, 7, 10, 11, 12, 31, 118, 126, 167, 334, 345, 475], "__main__": [2, 6], "__name__": [2, 6], "_a": 2, "_ext": 2, "_f": 205, "_in": [425, 426], "_out": [425, 426], "_p": 457, "_val": 439, "a1": 172, "a2": 172, "a_": 205, "a_max": [0, 98], "a_min": [0, 98], "a_ndim": 1, "a_shap": 1, "a_strid": 1, "a_view": 509, "ab": [0, 17, 185, 205, 317, 366, 370, 372, 380, 405, 436, 458, 502, 504], "abil": 503, "abl": [2, 4, 248, 507], "abort": 118, "about": [1, 2, 6, 7, 137, 228, 508, 512], "abov": [1, 2, 6, 248, 314, 345, 423, 503, 504, 505, 506, 507, 508, 512], "absolut": [0, 13, 17, 185, 435, 436, 456, 503], "acc": 332, "acceler": [4, 350], "accept": [503, 507], "access": [0, 6, 51, 345, 475, 486, 503, 508, 512], "accord": [0, 253, 322, 326, 401, 425, 426, 427, 428], "accordingli": 2, "accumul": [332, 405], "accuraci": 7, "accustom": 6, "achiev": [345, 503], "across": [1, 2, 9, 325, 366, 503], "act": [2, 452], "action": 345, "activ": [2, 9, 174, 359, 420, 422, 438, 458, 468, 469, 471, 502], "actual": [6, 19, 388, 475, 508], "ad": [0, 1, 2, 5, 9, 150, 331, 370, 475, 478, 479, 480, 481, 482, 483, 489, 503, 508, 511], "adadelta": 477, "adafactor": 477, "adagrad": 477, "adam": [477, 483, 484, 493, 494], "adamax": 477, "adamw": [477, 484], "adapt": [478, 479, 480, 503], "add": [0, 1, 2, 3, 4, 6, 15, 39, 144, 218, 243, 248, 352, 353, 354, 355, 356, 357, 504, 505, 507, 512], "add_argu": 6, "add_depend": 2, "add_execut": 4, "add_fun": 504, "add_librari": 2, "addit": [0, 2, 4, 6, 9, 14, 15, 146, 150, 152, 154, 213, 350, 366, 372, 401, 405, 475, 505], "addmm": 0, "address": 2, "adjac": 359, "advanc": [6, 502], "advantag": 512, "advis": 509, "affin": [350, 366, 370, 372, 374, 404], "after": [2, 6, 7, 29, 97, 168, 170, 173, 244, 248, 350, 366, 372, 381, 382, 386, 388, 395, 398, 399, 400, 401, 422, 456, 502, 503, 512], "after_1": 243, "after_2": 243, "after_i": 243, "after_n": 243, "afternoon": 6, "again": [6, 9, 345, 502], "against": [0, 4, 94], "aggreg": [401, 503], "ago": 6, "ai": 118, "aim": 503, "ainv": [202, 211], "albeit": 512, "algebra": 8, "algorithm": [423, 484], "alia": [101, 102, 363], "alibi": 345, "align": [198, 248, 365, 371], "align_corn": 423, "all": [0, 1, 2, 3, 7, 9, 17, 29, 39, 86, 87, 88, 99, 105, 106, 107, 109, 110, 118, 127, 128, 129, 147, 149, 157, 160, 163, 166, 172, 173, 210, 223, 243, 244, 271, 295, 325, 326, 345, 381, 382, 386, 389, 390, 391, 396, 398, 401, 414, 422, 423, 472, 475, 497, 499, 502, 506, 507, 508, 510, 513], "all_avg": 503, "all_reduce_grad": 503, "all_reduce_s": 325, "all_sum": 503, "allclos": [0, 1, 151], "alloc": [2, 175, 279, 282, 475], "allow": [0, 1, 2, 146, 148, 191, 328, 345, 400, 475, 497, 503, 506, 507, 510], "allow_col_major": [0, 103], "almost": [6, 503], "alon": [2, 509], "along": [0, 2, 27, 28, 99, 100, 114, 115, 116, 117, 127, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 172, 173, 180, 199, 205, 247, 258, 267, 271, 290, 292, 296, 304, 305, 308, 309, 310, 311, 319, 345, 364, 406, 437], "alpha": [0, 2, 15, 248, 351, 361, 432, 433, 457, 459, 462, 482, 489], "alpha_": 2, "alreadi": [2, 3, 6, 503], "also": [0, 1, 2, 4, 6, 7, 8, 9, 12, 14, 89, 91, 92, 125, 134, 135, 139, 157, 160, 163, 166, 178, 179, 194, 195, 196, 218, 225, 233, 235, 239, 245, 248, 266, 270, 300, 326, 327, 338, 345, 385, 399, 401, 403, 404, 412, 434, 462, 464, 471, 477, 502, 503, 504, 505, 506, 507, 508, 509, 510, 513], "altern": 499, "although": 503, "alwai": [1, 84, 174, 183, 329, 503, 504, 505], "am": 6, "among": 2, "amount": [6, 176, 282, 347, 377, 504], "amus": 6, "an": [0, 1, 2, 3, 4, 6, 7, 9, 11, 16, 18, 31, 85, 86, 87, 88, 95, 103, 104, 105, 106, 107, 108, 109, 110, 126, 131, 132, 133, 142, 146, 148, 149, 150, 154, 168, 171, 181, 183, 186, 197, 205, 213, 234, 240, 241, 243, 246, 247, 248, 249, 258, 267, 269, 271, 272, 282, 283, 292, 295, 302, 304, 305, 308, 309, 313, 316, 321, 323, 324, 329, 330, 331, 332, 336, 345, 358, 363, 366, 371, 372, 374, 381, 401, 402, 404, 406, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 459, 472, 477, 478, 488, 492, 497, 499, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513], "anaconda": 503, "anchor": 457, "angl": [121, 250, 373], "angular": [153, 409], "ani": [0, 1, 2, 6, 8, 19, 99, 118, 129, 325, 329, 330, 331, 332, 333, 345, 363, 381, 382, 385, 394, 404, 422, 423, 472, 494, 501, 502, 503, 505, 508, 510, 511, 512], "anonym": 502, "anoth": [0, 94, 98, 191, 223, 300, 322, 336, 345, 381, 502, 504, 505, 506, 512], "anwywher": 9, "anyhow": 6, "anymor": 6, "anyth": [6, 317, 503, 508], "anytim": 508, "api": [1, 2, 85, 146, 148, 183, 363, 503, 504, 505], "aplu": 206, "app": 9, "append": [6, 223, 502, 508], "appl": [2, 6, 8, 9, 512], "appli": [0, 39, 153, 154, 172, 210, 330, 331, 332, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 363, 364, 366, 367, 368, 369, 370, 372, 373, 374, 375, 376, 377, 378, 379, 380, 382, 395, 402, 404, 405, 406, 407, 408, 410, 412, 413, 415, 416, 417, 418, 419, 420, 421, 423, 432, 433, 434, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 472, 481, 482, 485, 488, 494, 497, 502, 503], "applic": [3, 9], "apply_fn": 382, "apply_gradi": 477, "apply_to_modul": [345, 386], "approach": [452, 505], "appropri": 502, "approx": 363, "approxim": [17, 363, 434, 435, 436], "ar": [0, 1, 2, 5, 6, 7, 8, 9, 17, 19, 83, 85, 93, 94, 95, 98, 99, 107, 111, 118, 124, 129, 131, 132, 142, 149, 151, 154, 156, 157, 159, 160, 162, 163, 165, 166, 168, 173, 177, 185, 186, 187, 188, 189, 190, 191, 192, 200, 201, 203, 205, 207, 213, 223, 242, 243, 244, 248, 249, 251, 252, 253, 258, 259, 262, 263, 271, 277, 278, 295, 296, 304, 317, 320, 321, 326, 329, 330, 336, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 366, 370, 372, 374, 388, 401, 404, 423, 444, 446, 447, 471, 475, 477, 484, 486, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "arang": [0, 1, 205, 258, 336, 423, 506, 509], "arbitrari": [329, 475, 503], "arbitrarili": [1, 99, 345, 501, 505, 510], "arc": 0, "arcco": 0, "arccosh": 0, "architectur": [6, 9, 228, 345, 400, 512], "archiv": 511, "arcsin": 0, "arcsinh": 0, "arctan": 0, "arctan2": 0, "arctanh": 0, "arg": [2, 6, 11, 19, 85, 126, 142, 146, 147, 148, 167, 183, 277, 278, 334, 507], "arg1": 191, "arg2": 191, "argmax": [0, 7], "argmin": 0, "argnam": [177, 317], "argnum": [2, 118, 177, 317, 505], "argpars": 6, "argpartit": 0, "argsort": 0, "argument": [1, 32, 66, 80, 85, 99, 142, 177, 317, 330, 331, 332, 345, 423, 499, 503, 504, 505, 507, 511, 512, 513], "argumentpars": 6, "ari": [86, 87, 88], "aris": 509, "arm": 9, "arm64": 9, "around": 6, "arr": [0, 274, 506], "arr_0": 511, "arrai": [0, 1, 2, 4, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 127, 128, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 336, 345, 350, 371, 381, 388, 391, 396, 402, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 469, 472, 475, 478, 479, 480, 481, 482, 483, 484, 489, 490, 491, 492, 493, 494, 495, 502, 503, 504, 505, 508, 509, 510, 512], "array_equ": [0, 17, 185], "arrayfir": 8, "arxiv": [6, 366, 370, 372, 380, 405, 436, 458, 478, 484], "as_strid": 0, "ascend": [200, 201], "ask": [6, 503, 507], "assert": [1, 2, 151], "assign": [0, 2, 39, 475, 503], "associ": [2, 277, 278, 508], "assum": [0, 6, 93, 199, 200, 201, 207, 330, 345, 366, 503], "astyp": [0, 1, 2, 6, 151, 381, 509], "asynchron": 85, "atleast": 0, "atleast_1d": 0, "atleast_2d": 0, "atleast_3d": 0, "atol": [0, 17, 185], "atom": [1, 151], "atomic_fetch_add_explicit": 1, "atomic_output": [1, 151], "attach": 2, "attempt": [99, 503], "attend": 401, "attent": [154, 386, 401, 414, 422], "attention_norm": 6, "attribut": [1, 10, 11, 12, 31, 167, 334, 394, 475, 497], "audio": 423, "auto": [0, 2, 4, 9, 503, 504], "autom": 505, "automat": [1, 2, 8, 151, 213, 503, 510, 511, 512], "autoregress": 6, "avail": [2, 5, 6, 7, 9, 11, 129, 130, 229, 282, 338, 503, 507, 512], "averag": [325, 347, 348, 349, 478, 479, 481, 482, 483, 503], "avgpool1d": 345, "avgpool2d": 345, "avgpool3d": 345, "avoid": [1, 2, 393, 502, 503], "awai": [2, 6], "awar": [502, 508], "ax": [0, 2, 16, 18, 27, 28, 80, 118, 144, 156, 157, 159, 160, 162, 163, 165, 166, 168, 184, 205, 208, 209, 222, 224, 226, 232, 243, 246, 271, 288, 289, 290, 295, 297, 301, 302, 308, 312, 318, 505], "axes_a": 0, "axes_b": 0, "axi": [0, 2, 6, 7, 16, 18, 27, 28, 29, 30, 34, 35, 36, 37, 42, 43, 44, 45, 57, 58, 59, 60, 64, 72, 75, 76, 77, 81, 100, 114, 115, 116, 117, 124, 127, 144, 150, 152, 155, 158, 161, 162, 163, 164, 165, 166, 168, 180, 199, 203, 205, 222, 224, 226, 232, 234, 243, 244, 246, 247, 252, 258, 267, 271, 290, 291, 292, 295, 296, 297, 301, 302, 304, 305, 309, 310, 311, 312, 316, 318, 319, 321, 347, 348, 349, 364, 377, 378, 379, 406, 437, 443, 445, 446, 450, 455, 457, 465, 466, 506], "axis1": [0, 47, 78, 124, 302, 311], "axis2": [0, 47, 78, 124, 302, 311], "axpbi": 2, "axpby_": 2, "axpby_gener": 2, "axpby_general_bfloat16": 2, "axpby_general_complex64": 2, "axpby_general_float16": 2, "axpby_general_float32": 2, "axpby_impl": 2, "b": [0, 1, 2, 3, 4, 6, 14, 15, 17, 25, 83, 89, 91, 92, 93, 134, 135, 139, 151, 154, 170, 172, 178, 179, 183, 184, 185, 193, 194, 195, 196, 199, 205, 208, 209, 218, 219, 221, 223, 225, 233, 235, 239, 242, 245, 248, 255, 266, 270, 300, 308, 317, 331, 332, 364, 374, 406, 423, 437, 505, 506, 508, 509, 510, 511, 512], "b1": 172, "b2": 172, "b_": [365, 371], "b_stride": 1, "ba": [481, 483], "back": [6, 118, 229, 509], "backend": [1, 9, 129, 130, 507], "backward": [1, 502, 505], "bad": 508, "balanc": 452, "baltimor": 205, "bandwidth": [502, 503], "base": [0, 2, 4, 153, 215, 217, 245, 409, 422, 475, 477, 483, 497, 499, 502, 506], "base_idx": 1, "basi": 497, "basic": [5, 272, 505], "batch": [6, 15, 93, 154, 172, 173, 223, 256, 350, 352, 353, 354, 355, 356, 357, 359, 360, 365, 371, 401, 406, 423, 508], "batch_idx": 1, "batch_iter": [7, 477], "batch_siz": [7, 477], "batchnorm": 345, "becaus": [6, 174, 345, 502, 503, 504, 508], "becom": 129, "been": [0, 2, 6, 175, 508], "befor": [1, 2, 6, 9, 29, 151, 244, 325, 385, 422, 486, 503, 506, 508], "before_1": 243, "before_2": 243, "before_i": 243, "before_n": 243, "beforehand": 242, "beggin": 271, "begin": [84, 176, 198, 248, 365, 371, 420, 438, 449, 456, 462, 468, 469, 503], "behav": 118, "behavior": [203, 256, 452, 506, 508], "behaviour": [118, 197, 198], "behind": 505, "being": [298, 345], "bell": 2, "below": [2, 9, 205, 313, 315, 336, 423, 503, 508], "bench": 2, "benchmark": [2, 502], "benefici": [359, 360, 508], "benefit": 503, "best": 503, "beta": [0, 2, 15, 122, 248, 350, 366, 370, 372, 456, 477, 481, 482, 483, 484], "beta_": 2, "beta_1": [479, 481, 482, 483, 484], "beta_2": [481, 482, 483, 484], "better": [325, 505, 512], "between": [0, 2, 8, 98, 168, 422, 445, 448, 449, 452, 493, 503, 507, 508, 509, 512], "beyond": [271, 491, 494], "bfloat16": [2, 12, 180, 336, 509], "bfloat16_t": 2, "bia": [6, 122, 150, 173, 248, 249, 330, 345, 352, 353, 354, 355, 356, 357, 365, 371, 372, 374, 386, 388, 398, 401, 404, 406, 481, 482, 483, 486, 505], "bias": [0, 122, 173, 248, 249, 365, 371, 386, 398, 401], "bias_correct": [481, 482], "bicub": 423, "big": [1, 325, 502], "bigger": [6, 479], "bilinear": [1, 423], "binari": [213, 274, 275, 276, 277, 278, 319, 420, 444, 469, 502, 507], "binary_cross_entropi": [345, 502], "bind": 507, "bit": [0, 122, 173, 194, 248, 249, 270, 326, 336, 381, 403, 404, 405], "bitwis": [0, 89, 90, 91, 92, 194, 270], "bitwise_and": 0, "bitwise_invert": 0, "bitwise_or": 0, "bitwise_xor": 0, "block": [0, 2, 6, 93, 422], "block_masked_mm": 0, "block_siz": [0, 93], "bn": 350, "bodi": [1, 151], "bool": [0, 1, 2, 16, 17, 18, 27, 28, 34, 35, 36, 37, 42, 43, 44, 45, 57, 58, 59, 60, 64, 76, 77, 79, 81, 83, 99, 103, 107, 114, 115, 116, 117, 129, 130, 146, 148, 151, 153, 173, 185, 191, 197, 198, 205, 209, 210, 211, 213, 222, 224, 226, 227, 229, 232, 246, 249, 297, 301, 318, 326, 350, 352, 353, 354, 355, 356, 357, 365, 366, 370, 371, 372, 374, 381, 385, 386, 388, 393, 395, 398, 401, 404, 406, 409, 414, 422, 423, 444, 447, 479, 481, 482, 490], "bool_": [12, 336], "boolean": [0, 17, 83, 154, 185, 186, 187, 188, 189, 190, 191, 219, 220, 221, 336, 397, 506], "both": [1, 2, 14, 89, 91, 92, 134, 135, 139, 178, 179, 191, 194, 195, 196, 205, 218, 225, 233, 235, 239, 245, 252, 266, 270, 300, 326, 347, 348, 349, 370, 371, 377, 378, 379, 477, 502, 503, 504, 505, 510, 512], "bottom": 423, "bound": [0, 259, 262, 263, 363, 431, 502, 506, 512], "boundari": 493, "bracket": 6, "brain": 336, "break": 509, "bregler": 359, "bridg": 503, "broadcast": [0, 2, 14, 17, 89, 91, 92, 94, 95, 98, 134, 135, 139, 154, 171, 178, 179, 185, 194, 195, 196, 218, 223, 225, 233, 235, 239, 245, 247, 251, 252, 256, 259, 262, 263, 266, 270, 300, 305, 322, 401], "broadcast_arrai": [0, 2], "broadcast_to": 0, "broadcasted_input": 2, "brought": 8, "btl_tcp_if_includ": [503, 507], "btl_tcp_link": [503, 507], "buffer": [1, 2, 174, 509], "bui": 6, "build": [3, 4, 6, 8, 427, 475, 502, 504], "build_ext": [2, 9], "build_shared_lib": [2, 9], "built": [1, 2, 4, 9, 508], "bundl": 6, "byte": [52, 62, 174, 175, 176, 279, 282, 283, 325, 336, 507], "c": [0, 1, 2, 6, 15, 205, 350, 352, 353, 354, 355, 356, 357, 359, 360, 370, 371, 509, 510, 512], "c_": [371, 484], "c_in": [104, 105, 106, 107, 108, 109, 110], "c_out": [104, 105, 106, 107, 108, 109, 110], "c_pad": 1, "c_t": [371, 484], "cabl": 503, "cach": [6, 9, 97, 174, 175, 279, 502], "calcul": [205, 206, 444, 447, 453, 479], "call": [2, 3, 6, 7, 32, 97, 129, 132, 170, 176, 183, 325, 345, 362, 386, 398, 403, 411, 475, 477, 486, 502, 503, 504, 505, 507, 508], "callabl": [99, 118, 146, 148, 151, 177, 183, 192, 317, 320, 321, 326, 327, 329, 330, 331, 332, 381, 382, 385, 393, 406, 411, 422, 424, 425, 426, 427, 428, 429, 430, 431, 478, 479, 480, 481, 482, 483, 484, 489, 490, 491, 492, 493, 494, 495], "can": [1, 2, 3, 4, 6, 8, 9, 14, 19, 66, 80, 84, 85, 89, 91, 92, 99, 124, 125, 126, 134, 135, 139, 142, 146, 147, 154, 178, 179, 183, 194, 195, 196, 205, 218, 225, 233, 235, 239, 245, 251, 252, 259, 262, 263, 266, 270, 275, 283, 300, 311, 316, 317, 332, 345, 348, 349, 362, 363, 378, 379, 385, 398, 403, 411, 423, 446, 472, 475, 477, 485, 486, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "cannot": [6, 98, 506, 509], "captur": [2, 3, 99, 118, 230, 231, 345, 502], "care": [6, 503, 504, 507, 508], "carefulli": [502, 504], "carri": 2, "cartesian": 227, "case": [2, 6, 127, 128, 129, 131, 132, 133, 157, 160, 161, 163, 164, 165, 166, 168, 197, 198, 199, 200, 201, 202, 203, 204, 206, 207, 208, 209, 210, 211, 223, 269, 295, 316, 348, 349, 359, 378, 379, 420, 438, 456, 462, 468, 469, 485, 486, 502, 503, 504, 505, 507, 510, 511, 512, 513], "cast": [2, 38, 164, 165, 166, 213, 325, 381, 393, 509], "caster": 2, "categor": 6, "categori": [12, 191, 336], "caus": [345, 502, 508], "causal": [6, 154], "caution": 84, "cd": [3, 9], "cdf": [253, 363, 434], "cdot": [436, 445, 448, 464], "ceil": 0, "ceildiv": 1, "cell": 371, "celu": 345, "certain": [395, 502], "chang": [84, 85, 99, 146, 148, 183, 281, 319, 399, 404, 423, 449, 456, 502, 509], "channel": [1, 104, 105, 106, 107, 108, 109, 110, 350, 352, 353, 354, 355, 356, 357, 359, 360], "channel_idx": 1, "charact": 329, "check": [0, 2, 9, 83, 130, 191, 200, 201, 229, 388, 503, 504, 505, 506], "checklist": [503, 507], "checkout": [3, 502], "checkpoint": [422, 477], "chen": 484, "child": 400, "children": 345, "chip": 9, "choleski": 198, "choos": [6, 153, 409, 507], "chosen": 137, "clamp": 168, "clang": 9, "clarifi": 503, "clariti": 505, "class": [2, 6, 7, 10, 11, 12, 31, 118, 126, 167, 334, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 478, 479, 480, 481, 482, 483, 484, 489, 490, 497], "class_pred": 326, "classif": [427, 428], "classifi": 7, "classmethod": [403, 404], "clear": 97, "click": 9, "clip": [0, 328, 444, 479], "clip_threshold": 479, "clipped_grad": 328, "clone": 9, "close": [5, 8, 9, 17, 185], "closer": 330, "cmake": [3, 4, 9], "cmake_arg": 3, "cmake_build_parallel_level": 9, "cmake_build_typ": 9, "cmake_current_list_dir": 2, "cmake_cxx_standard": 4, "cmake_cxx_standard_requir": 4, "cmake_host_system_processor": 9, "cmake_library_output_directori": 2, "cmake_minimum_requir": 4, "cmakebuild": 2, "cmakeextens": 2, "cmakelist": [2, 4], "cmdclass": 2, "co": [0, 2, 118, 414, 505], "code": [1, 151, 502, 503, 504, 508], "coeffici": [2, 478, 479, 481, 482, 483, 484], "col": [103, 313], "cold": 9, "collect": [330, 331, 501], "column": [103, 149, 181, 200, 248], "com": 9, "combin": [6, 210, 332], "come": [2, 6, 503, 505], "command": [2, 3, 4, 9, 503, 507], "command_buff": 2, "common": [477, 502, 508], "commonli": [7, 399, 472, 502], "commun": [8, 126, 129, 130, 325, 507], "communication_typ": 325, "compact": 204, "compar": [2, 83, 502], "comparison": [17, 139, 178, 179, 195, 196, 239], "compat": [6, 146, 148, 154, 183, 252, 256, 363, 511], "compil": [0, 3, 4, 8, 9, 125, 138, 151, 503, 504, 505, 508], "compiled_fun": [502, 504], "compiled_grad_fn": 502, "complement": 90, "complet": [5, 6, 9, 399, 400, 504, 505, 512], "complex": [2, 101, 102, 162, 163, 164, 165, 166, 182, 200, 201, 264, 329, 336, 345, 400, 502, 504, 505], "complex64": [2, 12, 336], "complex64_t": 2, "complexflo": 12, "compon": [2, 4, 6, 210], "compos": [8, 345, 502, 505, 510], "composit": 510, "compress": 278, "compromis": 6, "comput": [0, 1, 2, 5, 6, 7, 8, 9, 114, 115, 116, 117, 118, 122, 137, 145, 153, 177, 192, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 208, 209, 211, 218, 226, 242, 248, 266, 290, 297, 298, 308, 317, 318, 320, 327, 345, 350, 365, 366, 370, 371, 372, 386, 399, 404, 405, 409, 422, 425, 426, 427, 428, 435, 436, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 477, 478, 479, 481, 482, 483, 484, 488, 502, 503, 504, 505, 510, 512], "computation": 508, "compute_encod": 2, "compute_uv": 210, "concaten": [0, 6, 127, 325], "concept": 475, "concis": 6, "concret": [2, 365, 371, 374, 406, 508, 512], "conda": [9, 503], "condit": [0, 322, 502, 512], "config": [2, 4, 503], "configu": 477, "configur": [122, 503], "confirm": [503, 507], "confus": 7, "conj": 102, "conjug": [0, 101], "connect": [503, 507], "consecut": [153, 248, 409], "consequ": 6, "consid": [6, 17, 83, 103, 185, 329, 330, 331, 366, 501, 503], "consider": 502, "const": [0, 1, 2, 447], "constant": [0, 2, 6, 9, 118, 150, 152, 243, 345, 350, 366, 372, 405, 447, 457, 489, 491, 502, 504, 509], "constant_valu": 243, "constitut": 330, "construct": [0, 2, 7, 46, 123, 171, 203, 240, 309, 323], "consult": 503, "consum": 508, "contain": [2, 6, 9, 29, 30, 69, 99, 124, 137, 161, 162, 163, 172, 173, 200, 205, 219, 220, 221, 248, 292, 322, 325, 328, 345, 385, 387, 388, 394, 422, 453, 472, 475, 502, 505], "content": [9, 385, 502], "context": [299, 504], "contigu": [0, 1, 2, 84, 151], "continu": [351, 432, 503, 505], "contract": [0, 137], "contribut": 2, "contriv": [505, 512], "control": [0, 373, 499, 508], "conv": 111, "conv1d": [0, 345], "conv2d": [0, 345], "conv3d": [0, 345], "conv_gener": 0, "conv_transpose1d": 0, "conv_transpose2d": 0, "conv_transpose3d": 0, "conveni": [1, 2, 7, 191], "convent": [19, 111, 136, 137, 423], "convers": 8, "convert": [0, 1, 2, 79, 86, 87, 88, 121, 168, 250, 403, 404, 508, 509, 510], "convolut": [0, 104, 105, 106, 107, 108, 109, 110, 111, 352, 353, 354, 355, 356, 357, 359, 360], "convolv": [104, 105, 106, 107, 108, 109, 110], "convtranspose1d": 345, "convtranspose2d": 345, "convtranspose3d": 345, "coordin": [0, 227], "copi": [0, 1, 2, 6, 8, 103, 244, 291, 509], "core": [1, 2, 3, 4, 5, 6, 7, 326, 345, 347, 348, 349, 350, 370, 377, 378, 379, 388, 391, 393, 396, 423, 424, 425, 426, 427, 428, 429, 430, 431, 444, 446, 453, 472, 475, 477, 502, 503, 509, 510], "corner": 423, "correct": [2, 9, 481, 482, 483, 506, 508], "correctli": [39, 503], "correl": [107, 359], "correspond": [0, 1, 2, 16, 18, 79, 98, 122, 124, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 200, 222, 224, 232, 246, 288, 289, 301, 308, 316, 321, 330, 503, 505, 507], "cos_first": 414, "cosh": [0, 452], "cosin": [0, 20, 21, 112, 113, 445, 491, 493, 505], "cosine_decai": [477, 493], "cosine_similarity_loss": 345, "cost": [9, 479, 503, 508], "costli": 508, "cot": 1, "cot_index": 1, "cotan": 118, "cotang": [1, 2, 118, 320], "could": [6, 345], "count": [345, 493], "counter": 499, "cours": 505, "coursera": 489, "cout": [4, 504], "cov": 256, "covari": [256, 350], "cover": 2, "cpp": [2, 4], "cpu": [8, 9, 200, 201, 207, 336, 512], "cpython": 2, "crash": [84, 502], "creat": [0, 2, 6, 9, 84, 129, 149, 181, 299, 345, 475, 477, 493, 502, 503, 504, 506, 507, 509], "create_additive_causal_mask": 6, "cross": [7, 107, 444, 446], "cross_entropi": [7, 345], "crowd": 6, "cry": 6, "cubic": 423, "cummax": 0, "cummin": 0, "cumprod": 0, "cumsum": 0, "cumul": [0, 84, 114, 115, 116, 117], "current": [6, 8, 9, 84, 93, 106, 109, 110, 133, 175, 228, 248, 332, 345, 479, 503, 508], "custom": [8, 118, 151, 422], "custom_decod": 422, "custom_encod": 422, "custom_funct": 1, "custom_kernel_myexp_float": 1, "custom_tim": 2, "cvpr": 359, "cxx": 4, "cycl": 501, "d": [0, 1, 2, 6, 106, 110, 123, 124, 154, 184, 205, 223, 227, 242, 304, 311, 313, 314, 315, 333, 354, 357, 360, 365, 371, 406, 478, 481, 483, 512], "d1": 512, "d2": 512, "d2fdx2": 505, "d_i": 374, "dampen": 490, "darwin": 2, "data": [0, 2, 7, 8, 11, 19, 131, 149, 164, 165, 171, 181, 212, 236, 240, 253, 262, 311, 313, 319, 323, 360, 424, 425, 426, 427, 428, 429, 430, 431, 502, 503, 504, 506, 509], "dataset": [5, 503, 508], "datatyp": 52, "dbuild_shared_lib": 9, "dcmake_build_typ": [4, 9], "ddof": [0, 76, 81, 297, 318], "deal": 502, "debug": [1, 3, 503, 507], "debugg": 8, "decai": [479, 482, 484, 490, 491, 492, 495], "decay_r": [479, 492, 495], "decay_step": 491, "decent": 7, "decid": [330, 385], "decim": [0, 67, 272], "declar": 2, "decltyp": 1, "decod": 422, "decomposit": [197, 198, 206, 210], "decor": [1, 118], "decoupl": 482, "dedic": 503, "deep": [350, 425, 426, 427, 428], "def": [1, 2, 5, 6, 7, 118, 146, 148, 151, 317, 345, 475, 502, 503, 504, 505, 506, 508, 509, 512], "default": [1, 2, 9, 15, 16, 17, 18, 19, 27, 28, 29, 30, 83, 84, 93, 99, 100, 104, 105, 106, 107, 108, 109, 110, 118, 119, 120, 122, 123, 124, 127, 128, 129, 131, 132, 133, 146, 148, 149, 151, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 172, 173, 177, 180, 181, 185, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 222, 224, 226, 227, 232, 236, 240, 243, 244, 246, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 267, 269, 272, 279, 280, 281, 282, 283, 291, 292, 295, 296, 297, 299, 301, 303, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 323, 325, 326, 336, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 361, 364, 365, 367, 370, 371, 373, 374, 377, 378, 379, 381, 386, 388, 393, 395, 398, 401, 402, 403, 404, 406, 409, 414, 418, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 475, 478, 479, 480, 481, 482, 483, 484, 489, 490, 491, 499, 501, 502, 503, 504, 505, 507, 509, 511, 513], "default_devic": 513, "default_stream": 513, "defin": [1, 2, 5, 6, 7, 9, 118, 132, 151, 173, 199, 205, 249, 326, 329, 507, 509], "definit": [118, 197, 198, 256], "degre": [0, 250, 457], "delta": [449, 478], "delv": [427, 428], "demonstr": 509, "denomin": [370, 445, 478, 480, 481, 482, 483, 489], "dens": [227, 512], "depend": [0, 2, 3, 4, 5, 9, 79, 205, 365, 371, 406, 502, 503, 506, 511, 512], "depth": [329, 349, 354, 357, 360, 379, 505], "dequant": [0, 248], "deriv": [2, 504, 505, 508], "descend": 383, "descent": [490, 502, 508], "describ": [2, 508], "descript": [2, 4, 6, 336], "design": [1, 5, 8, 499, 512], "destin": [0, 2, 61, 133, 234, 247], "destroi": 502, "detach": 505, "detail": [1, 2, 11, 279, 345, 359, 409, 414, 423, 425, 426, 427, 428, 478, 480, 481, 483, 484, 503, 506, 510], "detect": 502, "determin": [0, 2, 124, 256, 332, 336, 392, 511], "dev": [2, 9], "develop": [2, 4, 9], "developer_dir": 9, "deviat": [0, 257, 297, 425, 427, 430], "deviatoin": 0, "devic": [1, 2, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 127, 128, 131, 132, 133, 134, 135, 136, 139, 140, 141, 143, 144, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 322, 323, 324, 334, 512, 513], "device_info": 283, "devicetyp": 10, "df": 509, "dfdx": [504, 505, 506], "dft": [155, 156, 157, 158, 159, 160, 164, 165, 166], "dhwc": 360, "diag": [0, 210], "diagon": [0, 46, 123, 149, 311, 313, 314, 315], "dict": [85, 99, 142, 147, 213, 228, 275, 276, 277, 326, 328, 391, 396, 399, 400, 475, 477, 485, 486, 488, 501, 504, 505, 511], "dict_kei": [330, 486], "dictionari": [6, 99, 146, 183, 213, 228, 275, 276, 328, 329, 332, 345, 385, 394, 399, 400, 487, 501, 511], "did": 6, "diff": 2, "differ": [8, 191, 300, 319, 456, 502, 503, 504, 505, 507], "differenti": [1, 8, 351, 432], "difficult": 505, "difficulti": [425, 426], "dilat": [0, 104, 105, 106, 107, 108, 109, 110, 352, 353, 354, 355, 356, 357], "dim": [1, 6, 153, 154, 362, 366, 370, 372, 401, 403, 405, 409, 414, 422], "dimens": [0, 1, 2, 6, 16, 18, 27, 28, 63, 69, 79, 86, 87, 88, 99, 105, 106, 107, 109, 110, 124, 144, 153, 154, 162, 163, 165, 166, 168, 172, 173, 184, 197, 198, 200, 201, 202, 203, 205, 206, 207, 210, 211, 222, 223, 224, 226, 232, 246, 247, 248, 252, 261, 297, 301, 305, 308, 312, 318, 350, 352, 353, 354, 355, 356, 357, 359, 360, 364, 365, 366, 370, 371, 372, 401, 405, 406, 409, 422, 423, 437, 446, 502, 505], "dimension": [31, 150, 152, 155, 156, 157, 158, 159, 160, 164, 165, 166, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 362, 374, 377, 378, 379, 403, 404, 414, 506, 509], "dir": 4, "direct": [6, 383, 484, 512], "directli": [2, 6, 84], "directori": [2, 4, 6, 9], "disabl": [125, 279, 325, 502, 503], "disable_compil": 502, "disappoint": 6, "discard": [6, 329], "discov": [9, 503], "discoveri": 484, "discret": [111, 155, 156, 157, 158, 159, 160, 164, 165, 166, 362, 403], "discuss": 2, "disk": 6, "dispatch": 2, "dispatch_thread": 2, "dispatchthread": 1, "displai": 345, "distanc": [6, 457], "distribut": [8, 9, 251, 252, 253, 255, 256, 257, 262, 263, 325, 374, 425, 426, 427, 428, 430, 431, 447, 450, 455, 457, 472], "distributed_config": [503, 507], "diverg": 450, "divid": [0, 2, 39, 170, 248, 266, 503], "divis": [0, 134, 170, 248, 266], "divisor": [297, 318], "divmod": 0, "dloss_dw": 505, "dloss_dx": 505, "dlpack": 509, "dlvalu": 317, "dmlx_build_cpu": 9, "dmlx_build_gguf": 9, "dmlx_build_safetensor": 9, "dmlx_metal_debug": 3, "dmlx_metal_jit": 9, "do": [0, 2, 6, 9, 203, 319, 345, 387, 398, 472, 475, 502, 503, 504, 505, 508], "doc": [2, 7, 503, 507], "document": [2, 3, 4, 66, 80, 151, 275, 276, 336, 502, 503, 504, 505, 506], "doe": [0, 2, 3, 6, 9, 174, 319, 328, 345, 502, 503, 506, 507, 508, 509], "doesn": [2, 345, 504], "domain": 262, "don": [1, 9, 103, 502, 512], "done": [345, 358, 405, 502, 503, 508, 509], "dot": [147, 202, 211, 308, 329, 390, 401, 503], "doubl": [0, 6, 336], "doubt": 6, "down": [6, 328], "downsampl": [347, 348, 349, 377, 378, 379], "dparam": 317, "draw": 252, "drop": 385, "dropout": [345, 359, 360, 395, 422, 502], "dropout2d": 345, "dropout3d": 345, "dst": 133, "dt": 140, "dtype": [0, 1, 2, 6, 12, 19, 31, 38, 39, 79, 82, 131, 132, 149, 151, 167, 168, 171, 181, 191, 193, 200, 201, 205, 207, 212, 240, 253, 255, 256, 257, 259, 262, 263, 288, 289, 311, 313, 316, 319, 323, 325, 336, 393, 423, 424, 425, 426, 427, 428, 429, 430, 431, 444, 446, 453, 491, 492, 493, 494, 495, 502, 503, 504, 505, 506, 509, 510, 511], "dtypecategori": [191, 336], "dual": 452, "duchi": 480, "duplic": 504, "dure": [3, 99, 282, 358, 359, 360, 423, 509], "dx": 118, "dy": 118, "dyld": 503, "dyld_library_path": 503, "dylib": 2, "dynam": [0, 504, 508], "e": [2, 7, 9, 118, 140, 151, 172, 173, 192, 284, 350, 352, 353, 354, 355, 356, 357, 359, 360, 366, 370, 372, 386, 405, 442, 443, 465, 466, 471, 477, 480, 502, 504, 508, 513], "e5": 336, "e8": 336, "each": [0, 1, 2, 69, 85, 122, 142, 153, 173, 191, 197, 198, 200, 201, 202, 206, 210, 211, 223, 227, 243, 248, 249, 252, 267, 277, 278, 292, 309, 312, 319, 321, 322, 359, 360, 362, 365, 366, 371, 406, 409, 422, 444, 446, 499, 502, 503, 504, 507, 508], "eager": 508, "earli": 359, "eas": 6, "easi": [2, 345], "easier": [1, 147, 508], "easiest": 503, "edg": [98, 243, 423, 502], "edit": [9, 400], "effect": [359, 502, 508], "effici": [6, 8, 172, 359, 409, 503, 508, 510], "eigenvalu": [200, 201], "eigenvector": 200, "einstein": [136, 137], "einsum": 137, "either": [9, 14, 66, 79, 80, 89, 91, 92, 98, 134, 135, 139, 170, 178, 179, 183, 194, 195, 196, 205, 218, 223, 225, 233, 235, 239, 245, 266, 270, 300, 317, 348, 349, 378, 379, 411, 423, 427, 428, 503, 507, 509], "elem": [1, 151], "elem_to_loc": [1, 2], "element": [0, 1, 2, 13, 14, 20, 21, 22, 23, 24, 25, 26, 29, 71, 84, 89, 90, 91, 92, 96, 112, 113, 114, 115, 116, 117, 122, 134, 135, 139, 140, 141, 143, 145, 149, 169, 170, 173, 178, 179, 185, 186, 187, 188, 189, 190, 194, 195, 196, 214, 215, 216, 217, 218, 219, 220, 221, 225, 227, 233, 235, 237, 239, 244, 245, 248, 249, 265, 266, 267, 270, 271, 273, 284, 285, 286, 287, 293, 294, 300, 304, 306, 307, 310, 317, 319, 322, 351, 358, 359, 360, 365, 369, 371, 380, 402, 406, 409, 413, 432, 439, 440, 442, 443, 458, 459, 461, 464, 465, 466, 467, 502, 505], "elementwis": [1, 101, 102], "elif": 6, "ellipsi": 506, "elman": 406, "els": [0, 2, 6, 345, 386, 503, 508], "elsewher": [313, 506], "elu": [345, 462], "emb": [6, 362, 403, 414], "embed": [6, 326, 345, 403, 409, 414, 445], "empti": 256, "en0": 507, "en2": 503, "enabl": [3, 6, 9, 99, 138, 325, 490], "enclos": 504, "encod": [2, 153, 409, 414, 422, 446], "encount": [2, 505], "end": [124, 198, 229, 248, 271, 365, 371, 420, 438, 449, 456, 462, 468, 469, 491, 494, 504], "end_axi": [0, 50, 168], "end_encod": 2, "endif": 2, "endl": [4, 504], "endswith": 386, "enhanc": [6, 409, 508], "enough": [2, 508], "ensur": [0, 1, 2, 9, 151, 328, 452, 503, 504], "ensure_row_contigu": [1, 151], "enter": 6, "entir": [16, 18, 27, 28, 222, 224, 226, 232, 246, 297, 301, 318, 359, 360], "entri": [0, 258, 316, 359, 360], "entropi": [7, 444, 446], "enumer": 345, "environ": [9, 125, 138, 503], "ep": [5, 150, 152, 350, 366, 370, 372, 405, 445, 447, 457, 477, 478, 479, 480, 481, 482, 483, 489], "epoch": 7, "epsilon": [350, 366, 370, 372, 405, 445, 447, 478, 480, 481, 482, 483, 489], "epsilon_1": 479, "epsilon_2": 479, "equal": [0, 1, 17, 29, 83, 149, 179, 185, 196, 239, 244, 259, 292, 325, 370, 374], "equal_nan": [0, 17, 83, 185], "equat": [136, 137, 208, 209], "equival": [0, 2, 32, 66, 80, 132, 135, 170, 173, 180, 304, 351, 361, 363, 367, 368, 369, 375, 376, 400, 402, 404, 407, 408, 410, 412, 415, 416, 417, 418, 419, 421, 503], "erf": [0, 141, 502], "erfinv": 0, "error": [0, 2, 9, 129, 140, 141, 283, 292, 363, 434, 435, 436, 452, 454, 502, 505, 507, 509], "error_norm": 5, "estim": 483, "eta": 484, "etc": [2, 248, 345, 423, 503], "ethernet": [503, 507], "eval": [2, 3, 5, 6, 7, 345, 475, 477, 502, 503, 504, 505, 508, 510], "eval_cpu": 2, "eval_fn": 7, "eval_gpu": 2, "evalu": [2, 6, 7, 8, 85, 133, 142, 192, 282, 320, 345, 384, 395, 475, 477, 502, 504, 510], "even": [1, 2, 6, 99, 502, 503, 504, 508, 509], "evenli": [0, 212], "everi": [248, 330, 477, 495, 505, 507], "everyth": [6, 503], "everywher": 0, "exact": [435, 436], "exactli": [2, 6, 153, 388, 505], "exampl": [0, 3, 4, 5, 6, 7, 9, 19, 39, 85, 118, 129, 146, 147, 148, 151, 154, 168, 183, 191, 193, 200, 201, 205, 207, 288, 289, 299, 304, 316, 328, 331, 332, 345, 347, 348, 349, 350, 370, 377, 378, 379, 386, 388, 395, 398, 423, 424, 425, 426, 427, 428, 429, 430, 431, 444, 446, 453, 472, 477, 486, 491, 492, 493, 494, 495, 499, 505, 506, 507, 508, 509, 510, 511], "exce": [325, 328], "exceed": 282, "except": [8, 118, 149, 161, 162, 164, 165, 166, 282, 336, 366, 388, 504, 506, 509], "exclud": [247, 305], "exclus": [0, 84, 92], "execut": [2, 4, 9, 86, 87, 88, 176, 193, 503, 509, 512], "execute_process": 4, "exist": [2, 3, 6, 386, 398, 503], "exp": [0, 1, 85, 145, 151, 218, 222, 253, 290, 351, 361, 413, 432, 433, 450, 462, 463, 467, 502, 504, 512], "exp_elementwis": [1, 151], "expand_dim": 0, "expect": [6, 352, 353, 354, 355, 356, 357, 358, 359, 360, 414, 422, 447, 502, 503, 506], "expens": 422, "expensive_fun": 508, "experiment": [85, 146, 148, 183, 509], "explain": 2, "explicit": [2, 486, 499, 509], "explicitli": [172, 345, 499, 507], "explor": 9, "expm1": 0, "exponenti": [0, 143, 145, 351, 361, 410, 432, 433, 462, 492], "exponential_decai": 477, "export": [8, 9, 146, 147, 183], "export_funct": 504, "ext_modul": 2, "extend": [2, 243], "extens": [8, 213, 230, 392, 511], "extern": 509, "extra": [1, 330, 331, 504], "extract": [0, 6, 46, 123, 124, 288, 345, 385, 475], "extras_requir": 2, "extrem": [506, 508], "ey": [0, 6, 202, 211], "f": [0, 2, 5, 7, 118, 205, 345, 371, 482, 502, 509], "f_jvp": 118, "f_t": 371, "f_vjp": 118, "f_vmap": 118, "face": 6, "factor": [2, 15, 180, 197, 198, 203, 204, 207, 423, 446, 492, 495], "fail": [502, 503, 507], "fall": [2, 118], "fals": [0, 1, 2, 6, 16, 17, 18, 27, 28, 34, 35, 36, 37, 42, 43, 44, 45, 57, 58, 59, 60, 64, 76, 77, 81, 83, 99, 103, 107, 114, 115, 116, 117, 129, 146, 148, 151, 185, 191, 197, 198, 205, 209, 210, 211, 213, 222, 224, 226, 227, 232, 246, 297, 301, 318, 322, 326, 329, 330, 331, 332, 336, 366, 370, 372, 374, 386, 388, 398, 401, 404, 409, 414, 422, 423, 444, 447, 479, 481, 482, 490, 504, 509], "famili": 6, "fan": [425, 426, 427, 428], "fan_in": [425, 426, 427, 428], "fan_out": [425, 426, 427, 428], "far": 477, "fast": [1, 8, 363, 436, 503, 512], "faster": [1, 2, 9, 135, 434, 444, 502, 503, 505], "featur": [1, 8, 104, 105, 106, 107, 108, 109, 110, 153, 350, 365, 366, 370, 371, 372, 374, 404, 405, 406, 409, 422, 423, 502, 503, 508], "feed": 6, "feed_forward": 6, "feedforward": [425, 426], "feel": 6, "fetch": 1, "few": [1, 2, 6, 7, 8, 9, 504, 508, 510], "fewer": 503, "ffn": 6, "ffn_norm": 6, "fft": 8, "fi": 503, "figur": 503, "file": [4, 6, 9, 146, 147, 148, 183, 213, 274, 275, 276, 277, 278, 388, 392, 503, 504, 505, 511], "file_or_weight": 388, "fill": [0, 171, 241, 313, 324, 424, 425, 426, 427, 428, 430, 431], "filter": [0, 111, 352, 353, 354, 355, 356, 357, 381, 385], "filter_and_map": 345, "filter_fn": [381, 385], "final": [2, 4, 5, 6, 7, 180, 491, 494, 503, 507], "find": [2, 4, 5, 9, 503], "find_packag": [2, 4], "finder": 9, "fine": [499, 504, 508], "finetun": 345, "finit": [0, 186, 236], "first": [0, 1, 2, 3, 4, 5, 6, 7, 9, 124, 127, 129, 168, 177, 191, 193, 194, 210, 219, 221, 223, 244, 261, 270, 302, 308, 311, 317, 329, 331, 332, 345, 348, 349, 366, 378, 379, 423, 445, 453, 479, 483, 486, 502, 503, 504, 505, 507, 509, 512], "first_lay": 508, "firt": 502, "fit": [248, 512], "five": 502, "fix": [2, 6, 9, 502, 508], "flag": [4, 9, 502, 509], "flat": [172, 173, 329, 333], "flat_param": 277, "flatten": [0, 29, 30, 114, 115, 116, 117, 205, 242, 244, 247, 267, 271, 291, 304, 305, 310, 329, 502], "flexibl": 8, "flexibli": 400, "flip": [0, 107, 111], "float": [0, 1, 2, 12, 15, 17, 19, 79, 150, 151, 152, 153, 154, 167, 170, 171, 180, 185, 191, 205, 236, 249, 251, 255, 257, 325, 328, 336, 350, 358, 359, 360, 366, 370, 372, 381, 393, 405, 409, 414, 420, 422, 423, 424, 425, 426, 427, 428, 430, 431, 445, 446, 447, 449, 453, 456, 457, 468, 469, 478, 479, 480, 481, 482, 483, 484, 489, 490, 491, 492, 494, 495], "float16": [1, 2, 12, 151, 180, 213, 336, 381, 508, 509], "float16_t": [1, 2], "float32": [0, 1, 2, 12, 19, 149, 151, 154, 180, 181, 191, 200, 201, 205, 207, 212, 240, 253, 255, 256, 257, 262, 263, 289, 313, 323, 336, 423, 424, 425, 426, 427, 428, 429, 430, 431, 444, 446, 453, 491, 492, 493, 494, 495, 502, 503, 504, 505, 506, 508, 509, 510, 511], "float64": [12, 191, 336, 509], "floor": [0, 1, 170], "floor_divid": 0, "flow": [0, 298, 508], "flush": 2, "fn": [183, 327, 330, 331, 332, 510], "follow": [1, 2, 4, 6, 7, 8, 9, 19, 111, 122, 154, 172, 205, 243, 248, 331, 345, 435, 436, 450, 478, 479, 480, 483, 484, 490, 499, 502, 503, 504, 505, 507, 512], "food": 6, "forc": [6, 7, 103, 345, 503, 510], "forg": [9, 503], "formal": [122, 248], "format": [6, 147, 213, 274, 275, 276, 277, 278, 503, 509], "formul": [351, 361], "formula": 456, "forth": [423, 503], "forward": [1, 2, 317, 502, 507, 508], "found": [4, 385], "four": 350, "fourier": [155, 156, 157, 158, 159, 160, 164, 165, 166], "fourth": 504, "frac": [140, 248, 284, 350, 358, 359, 360, 366, 370, 372, 374, 405, 413, 425, 426, 427, 428, 445, 447, 449, 452, 463, 465, 466, 478, 480, 481, 482, 483, 489], "fraction": 19, "framework": 8, "free": 279, "freez": [345, 398, 475], "freq": 153, "frequenc": [153, 409, 414], "frequent": [502, 508], "friend": 6, "fro": 205, "frobeniu": 205, "from": [0, 1, 2, 4, 6, 7, 8, 84, 121, 122, 124, 127, 128, 131, 132, 133, 151, 162, 163, 165, 166, 171, 172, 176, 180, 183, 205, 213, 223, 227, 241, 248, 250, 251, 252, 253, 254, 255, 259, 262, 277, 279, 288, 295, 298, 300, 304, 305, 310, 311, 322, 324, 329, 330, 331, 332, 333, 345, 374, 386, 388, 401, 425, 426, 427, 428, 430, 431, 447, 456, 472, 477, 501, 502, 503, 504, 505, 508, 509, 510, 511, 512], "from_embed": 403, "from_linear": 404, "front": [2, 504], "frozen": [345, 386, 396, 398, 404, 475], "fuction": 135, "full": [0, 1, 2, 7, 66, 80, 111, 151, 203, 290, 399, 400, 447, 502, 503, 504, 508], "full_turn": 414, "fulli": [2, 8, 507, 509, 512], "fun": [99, 146, 148, 177, 192, 317, 320, 321, 502, 504, 506, 508, 512], "fun1": 508, "func": 406, "function": [0, 1, 2, 3, 5, 6, 7, 8, 17, 19, 84, 99, 118, 135, 140, 141, 146, 148, 151, 177, 183, 185, 192, 197, 198, 200, 201, 202, 205, 206, 207, 210, 211, 223, 283, 284, 317, 320, 321, 327, 328, 330, 331, 332, 345, 351, 361, 363, 364, 367, 368, 369, 375, 376, 380, 382, 386, 393, 398, 402, 406, 407, 408, 410, 411, 412, 413, 415, 416, 417, 418, 419, 420, 421, 422, 434, 435, 436, 437, 438, 439, 440, 442, 443, 444, 458, 463, 465, 466, 467, 468, 469, 470, 472, 477, 486, 499, 501, 503, 506, 508, 509, 511], "functionexport": 148, "functool": 502, "further": [2, 9, 505], "fuse": [1, 502], "fusibl": 502, "futur": [6, 85, 146, 148, 183, 404, 506, 508], "fx": 118, "g": [3, 9, 118, 151, 205, 248, 371, 471, 489, 490, 504, 508, 513], "g_t": [371, 478, 480, 481, 482, 483, 484, 489, 490], "gain": [425, 426, 427, 428], "gamma": [350, 366, 370, 372, 405, 425, 426, 427, 428], "gap": 1, "gate": [364, 365, 437], "gather": [0, 127, 172, 173], "gather_mm": [0, 173], "gather_qmm": 0, "gaurante": 319, "gaussian": [5, 363, 434, 435, 436, 447], "gaussian_nll_loss": 345, "gc_func": 422, "gelu": [345, 435, 436, 502], "gelu_approx": [345, 363, 434], "gelu_fast_approx": [345, 363, 434], "geluapprox": 363, "gelufast": 363, "gener": [0, 1, 3, 5, 12, 19, 107, 149, 151, 162, 163, 206, 212, 227, 251, 256, 257, 258, 259, 262, 263, 422, 499, 502, 506, 508, 513], "general_": 2, "generate_stub": 9, "geq": [420, 469], "get": [2, 5, 7, 9, 105, 106, 107, 109, 110, 119, 120, 167, 174, 175, 176, 228, 254, 345, 502, 504, 505, 508, 512], "get_cache_memori": 97, "get_command_encod": 2, "get_kernel": 2, "gguf": [9, 213, 275, 511], "gh": 1, "gii": 1, "git": 9, "github": [5, 7, 9, 502], "give": [2, 6, 7, 29, 502], "given": [0, 2, 9, 16, 18, 29, 39, 84, 85, 95, 98, 100, 114, 115, 116, 117, 122, 124, 137, 142, 144, 154, 155, 156, 157, 158, 159, 160, 164, 165, 166, 171, 172, 203, 205, 222, 224, 226, 232, 236, 238, 246, 256, 258, 259, 271, 272, 279, 281, 290, 292, 297, 301, 303, 309, 310, 311, 313, 314, 315, 318, 334, 358, 385, 401, 445, 447, 453], "gix": 1, "gix_mult": 1, "giy_mult": 1, "global": [125, 127, 128, 129, 131, 132, 133, 138, 260, 325, 328, 499, 502], "glorot": [425, 426], "glorot_norm": 345, "glorot_uniform": 345, "glu": [6, 345], "gm": 1, "gn": 1, "go": [2, 6, 503, 505], "golub": 205, "good": [2, 9, 477, 502, 503, 507, 512], "goroshin": 359, "gower": 6, "gpu": [1, 3, 8, 9, 228, 336, 506, 512], "gputrac": [3, 230], "grad": [2, 5, 7, 118, 317, 328, 477, 485, 502, 503, 504, 505, 506, 508, 510], "grad_fn": [5, 502, 505], "gradient": [0, 5, 7, 118, 177, 298, 317, 325, 327, 328, 345, 386, 399, 404, 422, 452, 475, 477, 478, 479, 481, 482, 483, 484, 485, 488, 490, 502, 503, 505, 506, 508, 509, 510], "grain": 499, "graph": [2, 6, 7, 8, 147, 282, 504, 505], "great": 3, "greater": [0, 6, 29, 145, 179, 244, 328, 420, 469], "greater_equ": 0, "grep": 9, "grid": [2, 151, 227], "grid_dim": 2, "grid_grad": 1, "grid_idx": 1, "grid_sampl": 1, "grid_sample_grad": 1, "grid_sample_ref": 1, "grid_sample_vjp": 1, "grid_shap": 1, "grid_siz": 1, "ground": [5, 6, 446, 456], "group": [0, 1, 104, 105, 106, 107, 108, 109, 110, 122, 127, 128, 129, 131, 132, 133, 154, 173, 248, 249, 319, 325, 326, 352, 353, 366, 403, 404, 503], "group_dim": 2, "group_siz": [0, 122, 173, 248, 249, 326, 403, 404], "groupnorm": 345, "grow": 508, "gru": 345, "guid": [2, 4, 8, 503, 504], "guidelin": 282, "gw": 1, "h": [1, 2, 4, 104, 105, 106, 108, 109, 110, 205, 350, 353, 354, 356, 357, 359, 360, 365, 371, 406, 505, 508], "h_": [365, 371, 406], "h_in": 1, "h_stride": 1, "h_t": [365, 371, 406], "ha": [2, 3, 6, 7, 8, 9, 79, 99, 124, 133, 161, 162, 164, 165, 166, 175, 177, 197, 198, 200, 201, 202, 206, 210, 211, 227, 252, 350, 365, 371, 374, 406, 475, 477, 502, 503, 504, 506, 507, 508, 510, 512], "had": 6, "hadamard": [0, 180], "hadamard_transform": 0, "half": [19, 259, 263, 409, 508], "halv": [364, 437], "hand": [6, 505, 508], "handi": 505, "handl": [2, 345, 502], "happen": [2, 6, 150, 152, 422, 477, 502, 508], "happi": 6, "hard": 6, "hard_shrink": [345, 367], "hard_tanh": [345, 368], "hardcod": 502, "hardshrink": [345, 438], "hardswish": 345, "hardtanh": [345, 439], "hat": [122, 248], "have": [0, 1, 2, 6, 9, 17, 83, 86, 87, 88, 93, 118, 127, 154, 162, 163, 165, 166, 173, 185, 223, 230, 252, 319, 325, 329, 371, 401, 411, 484, 486, 501, 502, 503, 504, 506, 507, 508, 512], "haven": 6, "hazan": 480, "he": [6, 427, 428], "he_norm": 345, "he_uniform": 345, "head": [154, 401, 422], "header": [2, 151], "heart": 6, "heavi": 6, "height": [348, 349, 350, 353, 354, 356, 357, 359, 360, 378, 379], "hello": [329, 333], "help": [2, 6, 502, 512], "helper": [6, 151, 325, 502, 503, 507], "henc": [0, 2, 248, 502], "hendryck": 436, "here": [2, 6, 477, 502, 504, 505, 508, 511, 512], "hermitian": [200, 201], "hf": 371, "hg": 371, "hh": 406, "hi": [6, 371], "hidden": [365, 371, 406, 422], "hidden_dim": [7, 475, 477], "hidden_s": [365, 371, 406], "hierarchi": 336, "high": [259, 263, 345, 362, 431, 472], "high_pad_s": 0, "higher": [2, 184, 283, 453, 503, 505], "highli": 9, "him": 6, "hing": 448, "hinge_loss": 345, "hinton": 489, "hit": 2, "hn": 365, "ho": 371, "hold": [2, 6, 11, 12, 205, 502], "homebrew": 503, "hopkin": 205, "host": 2, "host1": 503, "host2": 503, "host3": 503, "host4": 503, "host_nam": 1, "hostfil": [503, 507], "hostnam": [503, 507], "hostname1": [503, 507], "hostname2": [503, 507], "hostname3": 503, "hostname4": 503, "hot": 446, "hour": 6, "how": [2, 4, 6, 7, 345, 347, 348, 349, 352, 353, 354, 355, 356, 357, 362, 377, 378, 379, 403, 423, 485, 502, 506, 512], "howev": [2, 118, 345, 363, 366, 486, 499, 502, 503, 508, 509], "hr": 365, "http": [366, 370, 372, 380, 405, 436, 458], "huber": 449, "huber_loss": 345, "human": [427, 428], "hundr": 9, "hurri": 6, "hutter": 482, "hyperbol": [0, 21, 23, 26, 113, 287, 307, 421, 470], "hz": 365, "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 17, 19, 29, 38, 79, 84, 85, 98, 105, 106, 107, 109, 110, 111, 114, 115, 116, 117, 118, 123, 124, 127, 128, 130, 131, 132, 133, 135, 142, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 170, 171, 172, 173, 180, 183, 185, 186, 191, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 218, 222, 223, 227, 229, 243, 244, 247, 248, 249, 256, 257, 258, 269, 271, 274, 275, 276, 282, 283, 284, 290, 292, 297, 298, 303, 304, 305, 308, 311, 312, 316, 317, 318, 319, 320, 321, 322, 325, 326, 328, 329, 330, 331, 332, 336, 338, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 363, 365, 366, 370, 371, 372, 374, 377, 378, 379, 385, 386, 392, 394, 395, 397, 398, 400, 401, 402, 404, 405, 406, 409, 414, 420, 422, 423, 427, 428, 434, 436, 444, 445, 447, 452, 453, 456, 457, 459, 464, 469, 475, 477, 479, 481, 482, 484, 485, 486, 491, 493, 494, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513], "i386": 9, "i_n": 1, "i_nw": 1, "i_s": 1, "i_sw": 1, "i_t": 371, "iclr": [481, 482, 483], "id": [7, 9], "idea": [505, 508], "idempot": [386, 398], "ident": [0, 118, 133, 149, 298, 345, 395, 503], "identifi": [2, 329, 501], "idim": 7, "idiom": [7, 502], "idx": [39, 506], "ie": 398, "ieee": 336, "ifac": 503, "ignor": [6, 39, 85, 98, 99, 142, 479, 507], "ih": 406, "ii": 1, "ij": 227, "imag": [0, 353, 354, 356, 357, 359, 360, 423], "imagenet": [427, 428], "imaginari": 182, "immedi": [6, 381], "implement": [0, 1, 5, 7, 153, 154, 362, 385, 401, 409, 411, 414, 420, 422, 423, 469, 478, 479, 480, 483, 484, 485, 497, 502, 505], "impli": 319, "implicit": [499, 502, 505], "implicitli": 508, "import": [2, 3, 5, 6, 7, 9, 118, 129, 180, 183, 205, 277, 317, 329, 330, 331, 332, 333, 345, 347, 348, 349, 350, 370, 377, 378, 379, 388, 423, 444, 446, 453, 472, 475, 477, 502, 503, 505, 506, 508, 509, 510], "import_funct": 504, "imported_ab": 504, "imported_fun": 504, "imported_funct": 504, "improv": [1, 2, 3, 6, 444, 478, 479, 480, 481, 482, 483, 489, 502, 503], "in_ax": [321, 505], "in_channel": [352, 353, 354, 355, 356, 357], "in_dim": [345, 475], "in_proj": 475, "includ": [1, 2, 4, 114, 115, 116, 117, 147, 151, 174, 175, 282, 372, 382, 394, 404, 447, 477, 502, 504, 505, 506, 510, 511, 513], "include_dir": 2, "inclus": [0, 42, 43, 44, 45, 114, 115, 116, 117, 168], "incom": 2, "inconveni": 502, "incorpor": 509, "incorrect": 509, "increas": [283, 507], "increment": 19, "incur": [6, 9], "independ": [126, 359, 360], "index": [0, 1, 2, 8, 10, 29, 39, 144, 149, 177, 227, 244, 288, 289, 304, 305, 317], "indic": [0, 2, 17, 27, 28, 29, 30, 39, 172, 173, 177, 185, 186, 187, 188, 189, 190, 191, 203, 210, 247, 288, 289, 292, 304, 305, 317, 395, 397, 446, 453, 493, 506], "indices_or_sect": [72, 292], "indirectli": 509, "individu": [345, 359, 360], "ineffici": [506, 508], "inexact": [12, 191], "inf": [205, 236, 401], "infer": [8, 171, 213, 311, 316, 503, 504], "infin": [0, 187, 189, 190, 236, 377, 378, 379, 483], "infinit": [17, 185, 186], "info": [6, 9], "inform": [3, 4, 6, 7, 9, 137, 167, 228, 275, 276, 336, 345, 350, 363, 401, 503, 504, 505, 512], "inherit": [7, 501], "inifn": 187, "init": [345, 402, 472, 477, 491, 492, 494, 495, 503], "init_fn": [424, 425, 426, 427, 428, 429, 430, 431, 472], "init_valu": 1, "initi": [1, 3, 5, 6, 129, 332, 345, 350, 366, 370, 372, 374, 402, 405, 424, 425, 426, 427, 428, 429, 430, 431, 475, 486, 491, 492, 494, 495, 502, 503, 504, 508], "initializer_list": 0, "inject": 0, "inlin": 0, "inner": [0, 502], "inorm": 370, "inp": [1, 151], "inp_ndim": 1, "inp_shap": 1, "inp_strid": 1, "inplac": [2, 9], "input": [0, 1, 2, 5, 6, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 123, 124, 127, 128, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 172, 173, 177, 178, 179, 180, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 258, 261, 264, 265, 266, 267, 269, 270, 271, 272, 273, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 321, 322, 324, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 359, 360, 362, 364, 365, 366, 370, 371, 372, 374, 377, 378, 379, 401, 404, 405, 406, 409, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 444, 445, 447, 448, 449, 450, 452, 453, 455, 457, 469, 472, 502, 504, 505, 506, 507, 510, 511], "input_dil": [0, 107], "input_dim": [7, 345, 374, 404], "input_nam": [1, 151], "input_s": [365, 371, 406], "inputs1": 453, "inputs2": 453, "insert": [124, 144, 512], "insid": [502, 504], "inspect": [3, 502, 510], "inspir": 8, "instabl": 457, "instal": [2, 4, 507], "instanc": [6, 39, 118, 248, 333, 345, 370, 381, 382, 383, 386, 388, 389, 390, 395, 398, 399, 400, 411, 475, 503, 507, 509], "instancenorm": 345, "instanti": [1, 2, 7, 508], "instantiate_kernel": 2, "instead": [2, 9, 118, 345, 400, 414, 505, 508], "instruct": [4, 504], "int": [0, 1, 2, 4, 6, 7, 10, 16, 18, 19, 27, 28, 29, 30, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 50, 57, 58, 59, 60, 61, 64, 67, 69, 72, 75, 76, 77, 78, 79, 81, 84, 93, 95, 100, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 122, 123, 124, 131, 132, 133, 137, 144, 149, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 171, 173, 174, 175, 176, 177, 181, 191, 199, 205, 212, 222, 224, 226, 228, 232, 234, 240, 243, 244, 246, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 267, 269, 271, 272, 279, 282, 283, 288, 289, 290, 291, 292, 295, 296, 297, 301, 302, 304, 305, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 323, 325, 326, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 362, 364, 365, 366, 370, 371, 372, 374, 377, 378, 379, 401, 403, 404, 405, 406, 409, 414, 422, 437, 445, 446, 450, 455, 457, 475, 491, 493, 494, 495], "int16": 336, "int32": [0, 1, 12, 19, 39, 168, 191, 193, 205, 259, 288, 316, 336, 423, 506, 510], "int64": [12, 336], "int64_t": 2, "int8": [12, 336], "int_0": 140, "integ": [0, 12, 170, 172, 173, 191, 205, 228, 243, 248, 249, 251, 258, 259, 292, 304, 308, 321, 336, 362, 393, 493, 506], "integr": [19, 304, 508], "intend": [0, 502], "interact": 422, "interest": 512, "interfac": [2, 503, 507], "intermedi": 509, "intern": 350, "interpol": 423, "interpret": 4, "interv": [19, 212, 259, 263], "introduc": [0, 271], "intuit": 345, "invalid": [0, 84], "invers": [0, 20, 21, 22, 23, 24, 25, 26, 90, 141, 158, 159, 160, 161, 162, 163, 198, 202, 206, 211], "invert": 0, "involv": [477, 502], "iogpu": 283, "iostream": 4, "ip": [503, 507], "ip1": [503, 507], "ip2": [503, 507], "ip3": 503, "ip4": 503, "is_avail": 129, "is_equival": 2, "is_leaf": [329, 330, 331, 332], "is_leaf_fn": 385, "isclos": 0, "isfinit": 0, "ish": 6, "ishmael": 6, "isinf": 0, "isnan": 0, "isneginf": 0, "isposinf": 0, "issu": [503, 505, 509], "issubdtyp": [2, 12, 336], "item": [0, 2, 5, 6, 7, 330, 477, 504, 508, 509, 510], "iter": [5, 7, 210, 330, 331, 499, 502, 508], "iterm": 9, "itertool": [6, 330], "its": [0, 1, 2, 9, 154, 198, 206, 223, 244, 261, 313, 327, 333, 345, 404, 477, 481, 482, 483, 503, 508, 509, 512], "itself": [2, 326, 486], "ix": 1, "ix_n": 1, "ix_nw": 1, "ix_s": 1, "ix_sw": 1, "iy_n": 1, "iy_nw": 1, "iy_s": 1, "iy_sw": 1, "j": [6, 9, 205, 359, 480, 481, 483], "j8": 2, "jacobian": [2, 192, 320, 510], "jain": 359, "jax": [8, 499], "jit": 151, "jmlr": 480, "jnp": 509, "john": 205, "join": 493, "join_schedul": 477, "jointli": 256, "json": [503, 507], "just": [2, 4, 7, 372, 502, 504, 506], "jvp": [2, 118, 510], "k": [0, 6, 46, 93, 123, 149, 154, 172, 180, 310, 313, 314, 315, 374, 386], "kaim": 428, "keep": [2, 16, 18, 27, 28, 222, 224, 226, 232, 246, 297, 301, 318, 345, 385, 505, 508], "keepdim": [0, 16, 18, 27, 28, 34, 35, 36, 37, 57, 58, 59, 60, 64, 76, 77, 81, 205, 222, 224, 226, 232, 246, 290, 297, 301, 318], "kei": [1, 3, 6, 146, 154, 183, 228, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 329, 330, 385, 386, 398, 401, 486, 499, 501, 504, 505], "kept": 283, "kernel": [2, 8, 9, 104, 105, 106, 107, 108, 109, 110, 151, 347, 377, 502, 506], "kernel_dil": [0, 107], "kernel_s": [347, 348, 349, 352, 353, 354, 355, 356, 357, 377, 378, 379], "key_cach": 6, "key_input_dim": 401, "key_proj": 6, "keyword": [146, 177, 277, 278, 317, 330, 345, 499, 504, 511, 513], "kind": 6, "kingma": [481, 483], "kl_div_loss": 345, "kname": 2, "know": [2, 6], "known": [412, 464], "kron": 0, "kroneck": [0, 193], "kth": [0, 29, 244], "kullback": 450, "kw_onli": 2, "kwarg": [11, 126, 146, 147, 183, 277, 278, 334, 504, 513], "l": [6, 7, 197, 198, 200, 201, 203, 345, 350, 352, 355, 365, 371, 406, 456], "l1": [317, 449, 451, 452, 456], "l1_loss": 345, "l2": [449, 452, 490], "l2_loss": 345, "l_": 449, "la": 205, "label": [3, 5, 446, 453], "label_smooth": 446, "lack": 506, "lambd": [367, 418, 438, 468], "lambda": [330, 331, 332, 345, 367, 381, 386, 393, 418, 438, 462, 468, 478, 479, 480, 481, 482, 483, 484, 489, 490, 502, 503, 504, 505], "languag": [1, 2, 4], "larg": [6, 345, 401, 452, 502, 504, 508], "larger": [1, 153, 283, 409, 484], "largest": [205, 236, 310], "lasso": 317, "last": [0, 1, 6, 30, 79, 150, 152, 157, 160, 162, 163, 165, 166, 168, 172, 173, 176, 184, 197, 198, 200, 201, 202, 206, 207, 210, 211, 223, 252, 291, 308, 319, 352, 353, 354, 355, 356, 357, 359, 360, 366, 423, 509], "later": [3, 9, 477], "launch": [1, 2, 129, 503, 506], "layer": [8, 150, 326, 345, 347, 348, 349, 359, 360, 365, 366, 371, 372, 374, 377, 378, 379, 395, 400, 403, 404, 406, 411, 422, 471, 475, 504, 507], "layer_s": 7, "layernorm": 345, "layout": 1, "lazi": [8, 475, 510], "lazili": [6, 345], "lceil": 93, "ld": [365, 371, 406], "lead": [0, 19, 84, 502], "leaf": [99, 326, 329, 330, 331, 332, 385], "leaf_modul": 345, "leaki": [373, 441], "leaky_relu": 345, "leakyrelu": 345, "learn": [5, 7, 8, 350, 366, 370, 372, 402, 405, 477, 478, 479, 480, 481, 482, 483, 484, 489, 490], "learnabl": [352, 353, 354, 355, 356, 357, 411], "learning_r": [7, 477, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 491, 492, 493, 494, 495, 502], "least": [6, 86, 87, 88, 98, 197, 198, 200, 201, 202, 206, 207, 210, 211, 248], "leav": [2, 85, 142, 330, 331, 332], "lectur": 489, "lecun": 359, "left": [0, 6, 153, 194, 205, 248, 271, 363, 409, 423, 435, 436, 447, 449, 457], "left_shift": 0, "leibler": 450, "len": [6, 157, 160, 163, 166, 180, 493], "length": [6, 295, 350, 352, 355, 365, 371, 406, 493], "leq": [449, 462], "less": [0, 1, 6, 29, 196, 244, 283, 325, 409, 456, 503], "less_equ": 0, "let": [1, 2, 5, 6, 198, 502, 504, 505, 508, 509], "level": [0, 172, 173, 427, 428], "lh": [365, 371, 406], "lhs_indic": [0, 172, 173], "lhs_mask": 93, "lib": 503, "libmlx": 9, "libmlx_ext": 2, "libmpi": 503, "librari": [2, 4, 9, 338, 345, 503, 504], "like": [2, 6, 8, 132, 146, 148, 183, 191, 241, 324, 360, 452, 486, 488, 502, 503, 504, 505, 507, 508, 509, 510, 512], "likelihood": [447, 455], "limit": [0, 2, 98, 279, 282, 283, 506], "linalg": 180, "line": [6, 503, 504, 507, 508, 509], "linear": [0, 2, 6, 7, 8, 208, 209, 326, 330, 345, 351, 361, 363, 364, 373, 388, 404, 406, 407, 408, 410, 412, 423, 432, 433, 434, 435, 436, 437, 441, 460, 461, 462, 464, 472, 475, 486, 493, 494, 502, 504], "linear1": 6, "linear2": 6, "linear3": 6, "linear_schedul": [477, 493], "linearli": 401, "link": [2, 4, 9], "linspac": 0, "lion": 477, "list": [1, 6, 11, 16, 18, 31, 72, 79, 84, 85, 86, 87, 88, 95, 99, 100, 107, 137, 142, 151, 156, 157, 159, 160, 162, 163, 165, 166, 171, 177, 192, 205, 222, 224, 226, 227, 232, 240, 243, 246, 251, 252, 253, 255, 256, 257, 259, 262, 263, 275, 290, 292, 296, 297, 301, 308, 309, 312, 317, 318, 320, 323, 329, 332, 333, 345, 386, 388, 389, 390, 391, 396, 398, 399, 400, 475, 477, 481, 482, 483, 484, 493, 501, 502, 503, 504, 505, 507, 508], "listen": 503, "liter": [2, 243, 423, 427, 428, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], "littl": 6, "liu": 6, "live": [8, 151, 512], "ll": [1, 5, 7, 449, 502, 505], "llama": 6, "llamaattent": 6, "llamaencoderlay": 6, "llm": 8, "load": [7, 8, 338, 388, 503], "load_weight": [345, 508], "loader": 7, "loader_path": 2, "loan": 205, "loc": [1, 255, 257], "local": [345, 359, 503], "localhost": [503, 507], "locat": [0, 2, 4, 84, 288, 289, 399, 400, 503, 512], "log": [0, 216, 218, 222, 375, 376, 442, 443, 444, 447, 450, 452, 455, 467], "log10": 0, "log1p": 0, "log2": 0, "log_cosh_loss": 345, "log_sigmoid": [345, 375], "log_softmax": [345, 376], "logaddexp": 0, "logarithm": [0, 214, 215, 216, 217], "logcosh": 452, "logic": [0, 2, 219, 220, 221, 503], "logical_and": 0, "logical_not": 0, "logical_or": 0, "logist": [0, 5, 284, 436, 464], "logit": [6, 252, 444, 446, 502], "logsigmoid": 345, "logsoftmax": 345, "logsumexp": 0, "long": 6, "longer": [6, 111, 505], "look": [2, 6, 503], "lookup": 362, "loop": [6, 7, 502, 503, 505, 508], "loshchilov": 482, "loss": [5, 7, 317, 345, 477, 502, 503, 505, 508], "loss_and_grad": 345, "loss_and_grad_fn": [7, 477, 502, 505], "loss_fn": [5, 7, 477, 502, 505], "loss_grad_fn": 503, "lot": 505, "low": [259, 263, 431, 472], "low_pad_s": 0, "lower": [197, 198, 200, 201, 209, 211, 248, 259, 262, 263, 313, 431], "lr": [5, 484], "lr_schedul": [491, 492, 493, 494, 495], "lstm": 345, "lto": 2, "lu": [6, 204], "luckili": 508, "lvalu": 317, "m": [0, 2, 4, 6, 9, 93, 149, 172, 180, 205, 313, 478, 502], "m1": [1, 6, 502, 505, 512], "m10": 336, "m7": 336, "m_": [481, 482, 483, 484], "m_t": [481, 482, 483, 484], "mac": 503, "machin": [6, 8, 9, 489, 503], "maco": [9, 283], "macosx": 9, "made": [6, 338], "mai": [2, 4, 85, 146, 148, 183, 205, 326, 359, 503, 505, 506], "main": [4, 8, 124, 149, 151, 311, 330, 331, 345, 503], "maintain": [359, 360, 484], "major": [0, 2, 103], "make": [1, 2, 3, 4, 6, 7, 9, 103, 147, 148, 223, 238, 281, 345, 491, 492, 494, 495, 502, 508, 510, 512], "make_shar": 2, "malloc": 2, "man": 6, "manag": [8, 299, 499, 503, 504, 512], "mani": [2, 84, 292, 352, 353, 354, 355, 356, 357, 362, 403, 502, 503, 504, 508], "manual": [345, 503], "map": [2, 7, 39, 213, 330, 362, 381, 504], "map_fn": [381, 385], "map_torch_to_mlx": 6, "margin": [453, 457], "margin_ranking_loss": 345, "mask": [0, 6, 93, 154, 395, 401, 506], "mask_lh": [0, 93], "mask_n": 1, "mask_nw": 1, "mask_out": [0, 93], "mask_rh": [0, 93], "mask_s": 1, "mask_sw": 1, "matadata": 213, "match": [9, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 174, 388, 423, 446, 506, 509], "materi": [6, 8], "math": [6, 457, 502], "mathbf": 198, "mathcal": 374, "mathemat": 205, "mathrm": [140, 284, 370], "matmul": [0, 172, 512], "matric": [205, 207, 210], "matrix": [0, 5, 15, 46, 93, 122, 123, 149, 172, 173, 180, 181, 197, 198, 200, 201, 202, 203, 204, 205, 206, 207, 210, 211, 223, 227, 248, 249, 256, 403, 404, 429, 472], "matter": [6, 345, 504], "matur": 503, "max": [0, 1, 2, 205, 225, 351, 377, 378, 379, 402, 432, 439, 440, 445, 447, 448, 453, 457, 459, 461, 479, 483, 502, 505, 512], "max_buffer_s": 228, "max_freq": 414, "max_i": 248, "max_norm": 328, "max_recommended_working_set_s": [228, 283], "max_val": 439, "maximum": [0, 7, 27, 39, 98, 114, 176, 282, 328, 345, 373, 377, 378, 379, 407, 414, 435, 436, 441, 460, 475, 508], "maxpool1d": 345, "maxpool2d": 345, "maxpool3d": 345, "maxtotalthreadsperthreadgroup": 2, "mca": [503, 507], "md": 205, "me": 6, "mean": [0, 1, 5, 6, 7, 152, 255, 256, 257, 317, 345, 350, 366, 386, 405, 430, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 502, 503, 505, 509], "meant": 118, "measur": 512, "mechan": 422, "medic": 360, "meet": 9, "member": [345, 391, 396], "memori": [0, 1, 2, 8, 84, 97, 174, 175, 176, 268, 279, 282, 283, 422, 475, 479, 502, 508, 509], "memory_order_relax": 1, "memory_s": [228, 283], "memoryview": [508, 509], "merg": 502, "meshgrid": 0, "metadata": [5, 213, 275, 276], "metal": [2, 4, 8, 151, 282], "metal_captur": 3, "metal_kernel": 1, "metal_path": 9, "metallib": [2, 9], "method": [2, 6, 10, 11, 31, 118, 126, 167, 326, 334, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 392, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 475, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 497], "millisecond": [9, 502, 512], "min": [0, 2, 205, 233, 351, 402, 432, 439, 440, 459, 461], "min_freq": 414, "min_i": 248, "min_val": 439, "mind": 6, "mine": 6, "minibatch": 7, "minim": [503, 507], "minimum": [0, 28, 39, 98, 115, 414, 444, 445], "minsizerel": 9, "minu": 145, "minut": 6, "mish": 345, "mismatch": 504, "miss": [388, 504, 511], "mix": 506, "mkdir": [3, 9], "ml": 9, "mlp": [7, 345, 422, 477], "mlp_dim": [6, 422], "mlx": [1, 3, 5, 6, 7, 9, 338, 345, 472, 475, 477, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "mlx_build_acceler": 4, "mlx_build_benchmark": 9, "mlx_build_cpu": 9, "mlx_build_exampl": 9, "mlx_build_gguf": 9, "mlx_build_met": [2, 4, 9], "mlx_build_metallib": 2, "mlx_build_python_bind": 9, "mlx_build_safetensor": 9, "mlx_build_test": 9, "mlx_cxx_flag": 4, "mlx_disable_compil": [125, 138, 502], "mlx_ext": 2, "mlx_ext_metallib": 2, "mlx_found": 4, "mlx_include_dir": [2, 4], "mlx_librari": 4, "mlx_metal_debug": [3, 9], "mlx_metal_jit": 9, "mlx_root": 4, "mlx_sample_extens": 2, "mlx_trace": 3, "mlxfn": [146, 148, 183, 504], "mnist": 7, "mode": [0, 1, 2, 111, 243, 384, 395, 397, 423, 427, 428], "model": [5, 7, 8, 277, 326, 327, 330, 331, 345, 381, 384, 386, 388, 392, 395, 397, 398, 399, 401, 422, 472, 475, 477, 485, 486, 488, 502, 503, 504, 508], "modest": 2, "modif": 509, "modifi": 509, "modul": [2, 4, 6, 7, 326, 327, 411, 422, 472, 488, 501, 502, 508], "moment": [6, 479, 483, 503], "momentum": [350, 484, 486, 490, 502], "monei": 6, "monitor": 507, "monoton": 458, "moor": 206, "more": [1, 2, 3, 4, 7, 11, 79, 124, 146, 172, 197, 198, 200, 201, 202, 203, 206, 210, 211, 223, 275, 276, 279, 282, 336, 345, 350, 359, 409, 414, 422, 423, 425, 426, 427, 428, 444, 499, 502, 503, 505, 506, 510, 512], "moreov": 507, "most": [2, 154, 252, 316, 345, 488, 502, 503, 505, 506, 508], "move": [0, 2, 234, 512], "moveaxi": 0, "mpi": [129, 338], "mpirun": [503, 507], "mse": 317, "mse_loss": 345, "mtl": 2, "mtl_capture_en": 3, "mtlcommandbuff": 2, "mu": 490, "much": [1, 2, 6, 347, 348, 349, 377, 378, 379, 502, 508], "multi": [8, 154, 352, 353, 354, 355, 356, 357, 504, 506, 509], "multidimension": 227, "multiheadattent": [6, 345], "multipl": [0, 1, 9, 15, 93, 148, 150, 152, 172, 173, 223, 235, 248, 249, 401, 414, 492, 493, 495, 502, 508, 511], "multipli": [0, 2, 39, 173, 248, 249, 358, 414, 423], "murtadha": 6, "must": [0, 1, 2, 3, 9, 93, 98, 146, 153, 154, 171, 173, 200, 201, 205, 251, 252, 256, 259, 262, 263, 322, 423, 509], "mx": [1, 2, 3, 4, 5, 6, 7, 39, 85, 101, 102, 118, 129, 132, 146, 147, 148, 151, 168, 183, 191, 193, 200, 201, 203, 205, 207, 213, 258, 277, 288, 289, 316, 317, 328, 345, 347, 348, 349, 350, 361, 370, 373, 377, 378, 379, 381, 388, 392, 407, 423, 424, 425, 426, 427, 428, 429, 430, 431, 433, 441, 444, 445, 446, 450, 453, 460, 470, 472, 475, 477, 499, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513], "my": [6, 9], "my_devic": 513, "my_path": 277, "my_script": [503, 507], "myexp": [1, 151], "myexp_strid": 1, "mymlp": 475, "n": [0, 1, 2, 6, 31, 93, 104, 105, 106, 107, 108, 109, 110, 149, 154, 155, 157, 158, 160, 161, 164, 166, 180, 181, 256, 297, 313, 318, 350, 352, 353, 354, 355, 356, 357, 359, 360, 365, 371, 406, 423, 452, 457, 503, 507], "n_kv": 154, "n_q": 154, "n_t": 365, "naiv": [2, 505], "naive_add": 505, "name": [1, 2, 118, 147, 151, 173, 213, 248, 249, 275, 276, 277, 278, 345, 366, 385, 388, 390, 503, 506, 511], "named_modul": 345, "namespac": 4, "nan": [0, 17, 83, 185, 186, 188, 236], "nan_to_num": 0, "nanobind": 2, "nanobind_add_modul": 2, "nativ": [9, 503], "natur": [0, 214, 216, 508], "nb": 2, "nb_domain": 2, "nb_modul": 2, "nb_static": 2, "nbyte": 2, "nc": 350, "ndarrai": [31, 506, 508, 510], "ndhwc": [354, 357, 360], "ndim": [0, 1, 2, 168, 205, 210, 423], "ne": 1, "nearest": [1, 423], "necessari": [103, 345], "necessarili": 310, "need": [1, 2, 4, 6, 7, 8, 9, 83, 248, 345, 399, 400, 414, 422, 499, 503, 505, 507, 508, 509, 510, 512], "neg": [0, 124, 168, 189, 236, 271, 311, 373, 377, 378, 379, 401, 447, 455, 457, 506], "negat": [0, 237], "negative_slop": [373, 441], "neginf": [0, 236], "neighbor": [423, 507], "neither": [177, 317], "nelem": 2, "nervou": 6, "nest": [79, 99, 332, 345, 475, 501, 505], "nesterov": 490, "network": [6, 8, 325, 350, 359, 362, 425, 426, 472, 475, 489, 503], "neural": [6, 8, 362, 425, 426, 458, 472, 475, 489], "never": [6, 508], "new": [0, 2, 7, 95, 124, 234, 238, 269, 296, 312, 319, 330, 331, 393, 401, 475, 477, 488, 493, 502, 504, 506, 508, 509], "new_tre": 331, "next": [2, 4, 6, 7, 279, 504], "nh": [365, 371, 406], "nhwc": [350, 353, 356], "nice": [505, 508], "nlc": [350, 352, 355], "nld": [365, 371, 406], "nlh": [365, 371, 406], "nll": [447, 455], "nll_loss": 345, "nn": [2, 6, 7, 277, 330, 345, 472, 475, 477, 486, 488, 502, 504, 508], "nobodi": 6, "node": [85, 99, 142, 321, 331, 332, 503, 507], "nois": 5, "noisi": 5, "nomins": 2, "non": [0, 1, 2, 4, 9, 227, 396, 406, 458, 475], "none": [1, 2, 6, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 127, 128, 131, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 276, 277, 280, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 347, 348, 349, 363, 377, 378, 379, 381, 385, 386, 393, 398, 401, 406, 414, 422, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 479, 497, 504, 506], "nonlinear": [406, 502], "nonzero": 506, "noop": [398, 503], "nor": [2, 177, 317], "norm": [6, 152, 328, 366, 457, 483, 484], "norm1": 6, "norm2": 6, "norm_first": 422, "normal": [1, 2, 5, 6, 150, 151, 152, 200, 256, 262, 345, 347, 348, 349, 350, 366, 370, 372, 377, 378, 379, 405, 422, 425, 427, 509, 512], "not_equ": 0, "notabl": [6, 8], "notat": [122, 329, 390], "note": [0, 1, 2, 4, 6, 9, 17, 19, 84, 93, 99, 106, 109, 110, 118, 154, 162, 163, 173, 174, 185, 203, 205, 248, 252, 319, 326, 345, 405, 423, 477, 509, 511], "noth": [6, 118, 345, 508], "notic": [6, 504, 505, 511], "now": [1, 2, 6, 9, 404, 502, 509], "np": [1, 6, 7, 503, 509, 510], "npy": [213, 274, 511], "npz": [6, 213, 277, 278, 388, 392, 511], "nuc": 205, "nuclear": 205, "nuisanc": 503, "nullopt": 0, "num": [0, 6, 212, 261], "num_class": [7, 477], "num_decoder_lay": 422, "num_embed": [362, 403], "num_encoder_lay": 422, "num_epoch": [7, 477], "num_exampl": 5, "num_featur": [5, 350], "num_group": 366, "num_head": [6, 401, 422], "num_it": 5, "num_lay": [6, 7, 477], "num_param": 345, "num_paramet": 402, "num_sampl": 252, "num_split": 0, "number": [0, 2, 12, 19, 62, 71, 99, 105, 106, 107, 109, 110, 122, 147, 149, 154, 173, 177, 181, 192, 212, 236, 243, 248, 249, 252, 255, 257, 261, 263, 267, 271, 272, 308, 309, 313, 317, 320, 321, 325, 326, 345, 350, 352, 353, 354, 355, 356, 357, 359, 360, 366, 370, 401, 402, 422, 423, 425, 426, 427, 428, 491, 493, 494, 499, 502, 505, 507, 513], "number_of_el": 0, "numer": [6, 150, 152, 205, 218, 222, 290, 350, 366, 370, 372, 405, 444, 445, 447, 457, 478, 479, 480, 481, 482, 483, 489, 502, 508], "numpi": [2, 6, 7, 8, 14, 17, 19, 89, 91, 92, 94, 95, 134, 135, 139, 178, 179, 185, 194, 195, 196, 218, 223, 225, 233, 235, 239, 245, 266, 270, 300, 508, 510, 511], "nw": 1, "nwhc": 359, "o": [2, 9, 154, 371], "o_t": 371, "obj": 275, "object": [3, 11, 31, 51, 79, 99, 147, 148, 151, 191, 277, 321, 329, 330, 331, 332, 336, 359, 422, 501, 507], "observ": 6, "occupi": [122, 173, 248, 249], "occur": 509, "odim": 7, "odot": [365, 371], "off": [6, 9, 508], "offer": 452, "offset": [0, 1, 2, 6, 47, 84, 124, 150, 153, 311], "often": 360, "ok": [388, 502, 504, 505], "okai": [502, 508], "old": 6, "older": [146, 148, 183], "omit": [483, 503], "onc": [2, 9, 502, 504], "one": [0, 2, 4, 6, 9, 39, 79, 86, 94, 98, 105, 106, 107, 109, 110, 129, 144, 146, 149, 150, 152, 153, 205, 216, 223, 249, 252, 295, 300, 316, 325, 336, 398, 423, 446, 503, 504, 507, 512], "ones": [0, 2, 6, 241, 277, 289, 313, 399, 400, 477, 503, 506], "ones_lik": 0, "onli": [1, 2, 6, 8, 9, 83, 93, 105, 106, 107, 109, 110, 118, 200, 201, 205, 210, 248, 256, 283, 319, 336, 345, 385, 386, 388, 393, 395, 398, 399, 400, 475, 502, 503, 504, 505, 507, 511, 512], "onlin": 480, "op": [1, 2, 242, 319, 386, 508], "open": [3, 9, 19, 259, 263, 503], "openmpi": 503, "oper": [3, 6, 8, 10, 38, 86, 87, 88, 107, 154, 172, 173, 245, 247, 290, 298, 305, 334, 336, 345, 422, 484, 502, 503, 505, 506, 508, 509, 510, 512, 513], "operand": [136, 137, 172], "opportun": 502, "opt": [485, 503], "optim": [1, 3, 5, 7, 8, 399, 502, 503, 505, 508], "option": [0, 3, 6, 15, 16, 18, 19, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 86, 87, 88, 93, 99, 100, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 116, 117, 118, 122, 123, 124, 127, 128, 129, 131, 132, 133, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 171, 172, 173, 177, 181, 189, 190, 193, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 222, 224, 226, 227, 232, 236, 240, 243, 244, 246, 248, 249, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 267, 269, 271, 290, 291, 292, 295, 296, 297, 301, 303, 304, 308, 310, 311, 312, 313, 314, 315, 316, 317, 318, 321, 323, 325, 326, 329, 330, 331, 332, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 365, 371, 374, 377, 378, 379, 381, 385, 386, 388, 393, 398, 401, 403, 404, 406, 409, 414, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 478, 479, 480, 481, 482, 483, 484, 486, 489, 490, 491, 499, 502, 504, 511, 513], "ord": 205, "order": [0, 1, 29, 84, 107, 137, 200, 201, 205, 244, 248, 310, 345, 366, 399, 411, 486, 502, 505, 507], "ordinari": 184, "org": [366, 370, 372, 380, 405, 436, 458], "origin": [6, 124, 328, 350, 394, 425, 426, 427, 428, 478, 479, 480, 483, 484, 504, 509], "orthonorm": 180, "ostream": 2, "ostringstream": 2, "other": [0, 2, 6, 8, 191, 205, 345, 387, 475, 484, 502, 503, 504, 506, 507, 508, 510], "other_input": 345, "otherwis": [19, 107, 129, 258, 326, 329, 330, 331, 332, 386, 388, 398, 420, 422, 423, 438, 444, 449, 456, 468, 469, 508, 509], "our": [1, 2, 6, 7, 411, 478, 479, 480, 483, 484, 503], "out": [0, 1, 2, 9, 93, 151, 183, 359, 360, 395, 502, 503, 504, 505, 506], "out_ax": [321, 505], "out_channel": [352, 353, 354, 355, 356, 357], "out_dim": [345, 475], "out_dtyp": 2, "out_idx": 2, "out_mask": 93, "out_proj": [6, 475], "out_ptr": 2, "out_shap": [1, 2], "outer": [0, 502, 508], "outlier": 452, "output": [0, 1, 2, 6, 9, 16, 17, 18, 19, 29, 84, 93, 94, 95, 99, 101, 102, 103, 114, 115, 116, 117, 118, 136, 147, 149, 150, 151, 152, 153, 154, 161, 164, 165, 166, 171, 172, 177, 180, 181, 185, 205, 212, 222, 224, 226, 227, 232, 236, 240, 241, 244, 246, 247, 251, 252, 253, 255, 256, 257, 259, 262, 263, 277, 278, 288, 289, 290, 295, 297, 301, 305, 311, 313, 317, 318, 319, 320, 321, 322, 323, 324, 350, 352, 353, 354, 355, 356, 357, 370, 374, 401, 404, 420, 422, 423, 425, 426, 427, 428, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 469, 472, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512], "output_dim": [7, 345, 374, 404], "output_directori": 2, "output_dtyp": [1, 151], "output_fil": 6, "output_nam": [1, 151], "output_shap": [1, 151], "output_strip_trailing_whitespac": 4, "output_vari": 4, "outsid": [151, 168], "over": [0, 2, 6, 7, 16, 18, 27, 28, 29, 30, 104, 105, 106, 107, 108, 109, 110, 114, 115, 116, 117, 157, 160, 163, 166, 184, 205, 210, 212, 222, 224, 226, 232, 244, 246, 273, 290, 291, 297, 301, 308, 310, 318, 350, 352, 353, 354, 355, 356, 357, 366, 372, 405, 446, 491, 494, 503, 505, 507], "overal": 2, "overhead": [502, 508, 512], "overlap": 1, "overload": 19, "overrid": [2, 138], "overview": 3, "overwrit": 6, "own": [9, 503, 509], "owndata": 509, "p": [9, 203, 251, 345, 358, 359, 360, 457, 481, 483], "pack": [173, 248, 249], "packag": [2, 5, 7, 9, 338, 472, 503, 507], "package_data": 2, "pad": [0, 1, 104, 105, 106, 107, 108, 109, 110, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 347, 348, 349, 352, 353, 354, 355, 356, 357, 377, 378, 379], "pad_valu": 0, "pad_width": [0, 243], "padding_hi": 0, "padding_lo": 0, "page": [503, 510], "pain": 6, "pair": [0, 2, 243, 388, 409], "pairwis": 457, "pan": 6, "paper": [350, 414, 478, 479, 480, 483, 484], "parallel": [503, 512], "param": [317, 326, 345, 472, 504, 505], "paramet": [0, 1, 2, 5, 6, 7, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 230, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 370, 371, 372, 373, 374, 377, 378, 379, 381, 382, 385, 386, 388, 393, 394, 395, 398, 399, 400, 401, 402, 403, 404, 405, 406, 409, 411, 414, 418, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 437, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 469, 471, 472, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 497, 502, 503, 504, 505, 508], "parameter_scal": 479, "parametr": [402, 459], "pars": [6, 147], "parse_arg": 6, "parser": 6, "part": [1, 2, 146, 148, 182, 183, 264, 505, 506], "parti": 503, "partial": [399, 400, 502, 508], "particip": [127, 128, 131, 132, 133], "particular": [248, 366], "particularli": 502, "partit": [0, 29], "pass": [1, 2, 6, 7, 66, 80, 242, 243, 317, 325, 327, 329, 330, 331, 345, 386, 398, 399, 400, 411, 502, 503, 504, 507, 508], "password": [503, 507], "path": [3, 4, 9, 137, 146, 147, 148, 183, 230, 277, 278, 326, 331, 388, 503, 507], "pattern": [345, 508], "peak": [176, 268], "penalti": 490, "penros": 206, "pep": 509, "per": [6, 7, 122, 154, 173, 248, 249, 325, 326, 350, 366, 370, 372, 405, 497, 502, 503, 507, 508], "perceptron": [8, 504], "perf_count": 502, "perfectli": 508, "perform": [0, 1, 2, 3, 6, 8, 15, 93, 107, 114, 115, 116, 117, 133, 136, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 172, 173, 180, 200, 201, 223, 249, 272, 290, 304, 325, 345, 366, 422, 427, 428, 477, 502, 503, 506, 508, 512], "perhap": [2, 6], "perm": 7, "permtuat": 258, "permuat": 203, "permut": [0, 7], "persist": 9, "pg": 205, "phi": [363, 434], "physic": 503, "pi": [140, 363, 414, 435, 505], "pick": 2, "pip": [2, 4, 9], "pipelin": 2, "pivot": [203, 204], "pixel": 359, "place": [6, 39, 271, 272, 326, 503, 508, 509], "placehold": 502, "plai": [2, 6], "plain": 411, "plan": [2, 502], "platform": 9, "plot": 503, "plu": [0, 216], "png": 503, "point": [0, 2, 5, 6, 9, 84, 167, 170, 249, 336], "pool": [347, 348, 349, 377, 378, 379, 512], "popul": 2, "port": 507, "portion": 358, "posinf": [0, 236], "posit": [0, 6, 29, 124, 153, 168, 177, 190, 197, 198, 234, 236, 244, 256, 271, 311, 317, 330, 345, 352, 353, 354, 355, 356, 357, 401, 409, 414, 447, 457, 504], "possibl": [129, 292, 362, 403, 502, 503, 506, 512], "possibli": [6, 15, 93, 172, 223, 328], "postur": 6, "power": [0, 505, 509], "practic": [2, 502], "pre": [9, 154, 444], "preced": 366, "precis": [0, 6, 145, 154, 345, 363, 405, 444, 485, 502], "preclud": 345, "pred": [448, 452], "predic": [326, 393], "predict": [444, 447, 448, 449, 450, 451, 452, 454, 455, 456], "prefix": [321, 329, 331], "prelu": 345, "prepar": [2, 6, 503], "prepend": [3, 223], "preprint": [6, 478, 484], "preprocessor": 9, "present": 1, "preserv": [269, 505], "press": [6, 205], "pretti": [502, 508], "prevent": [298, 457, 509], "previou": [279, 282, 283], "primal": [1, 2, 118, 192, 320], "primit": 505, "print": [1, 2, 5, 6, 7, 9, 85, 118, 193, 328, 329, 330, 331, 333, 345, 499, 502, 503, 504, 505, 506, 507, 508, 509, 510], "prior": [247, 304, 305], "priorit": 505, "privat": [2, 4], "prng": [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 499], "prob": 444, "probabl": [9, 259, 358, 359, 360, 404, 444, 446, 450, 512], "problem": [5, 7, 345], "process": [6, 107, 111, 126, 127, 128, 129, 131, 132, 133, 325, 330, 331, 360, 362, 422, 501, 503, 507], "processor": 9, "prod": [0, 1], "produc": [0, 2, 9, 99, 401, 472, 504], "product": [0, 2, 15, 84, 116, 184, 192, 193, 199, 223, 242, 246, 308, 320, 401, 510], "profil": 3, "program": [4, 176], "programmat": 400, "project": [3, 4, 6, 401, 504], "project_source_dir": 2, "promot": [2, 154], "promote_typ": 2, "promoted_dtyp": 2, "prompt": 6, "propag": [505, 506], "properti": [32, 39, 48, 52, 62, 63, 69, 71, 394, 397, 487, 503, 505], "proportion": 328, "protocol": 509, "provid": [0, 2, 6, 84, 122, 146, 147, 177, 258, 271, 308, 317, 325, 330, 332, 338, 345, 381, 386, 388, 398, 399, 400, 403, 404, 422, 423, 471, 475, 503, 504, 511, 513], "pseudo": [206, 499], "pth": 6, "public": [2, 345], "pun": 0, "pure": [1, 118, 345, 477], "purpos": [1, 205, 503], "purs": 6, "push": 2, "push_back": 2, "put": [0, 1, 7, 247, 502, 503], "put_along_axi": [0, 203], "py": [2, 6, 9, 503, 507], "pypi": 9, "python": [1, 3, 4, 6, 51, 69, 79, 85, 142, 325, 329, 330, 331, 332, 333, 475, 485, 486, 488, 501, 503, 504, 505, 507, 509], "python_execut": 4, "python_requir": 2, "pytorch": [6, 8, 363, 366, 505], "pytorch_compat": 366, "q": [154, 207], "quantiz": [0, 122, 173, 213, 249, 403, 404], "quantized_matmul": 0, "quantizedembed": 345, "quantizedlinear": 345, "quarter": 6, "queri": [6, 154, 283, 401], "query_input_dim": 401, "query_proj": 6, "question": [6, 508], "queue": 3, "quick": [2, 8], "quit": [505, 509], "quotient": [0, 134, 135, 170], "r": [2, 6, 207, 317, 359, 365], "r_t": 365, "race": 512, "radian": [0, 121], "rag": 6, "rain": 6, "rais": [0, 6, 118, 205, 245, 292, 388, 504], "ram": [6, 282], "random": [1, 2, 3, 5, 6, 7, 8, 151, 347, 348, 349, 350, 370, 377, 378, 379, 388, 395, 502, 504, 505, 512, 513], "randomli": [5, 6, 258, 358, 359, 360], "rang": [0, 2, 3, 5, 6, 7, 9, 19, 168, 172, 212, 426, 428, 435, 436, 477, 491, 492, 493, 494, 495, 499, 502, 505, 508, 512], "rank": [0, 131, 132, 133, 453, 503, 507], "rate": [5, 477, 478, 479, 480, 481, 482, 483, 484, 489, 490], "rather": [2, 505, 512], "ratio": [0, 25], "rceil": 93, "re": [7, 9, 472], "reachabl": 503, "readabl": 3, "real": [0, 161, 162, 163, 164, 165, 166, 197, 198, 200, 201], "realli": 372, "reason": [1, 6, 506], "reboot": 9, "receiv": [131, 132, 326, 493, 503, 509], "reciproc": [0, 273], "reclaim": 279, "recommend": [9, 282, 484], "recompil": [99, 502], "reconstruct": 203, "record": [3, 176, 508], "recreat": [333, 477], "rectifi": [373, 407, 408, 427, 428, 441, 460, 461], "recurr": [365, 371, 406], "recurs": [147, 345, 385, 386, 391, 396, 398, 475], "recv": [132, 503], "reduc": [0, 1, 9, 16, 18, 27, 28, 128, 222, 224, 226, 232, 246, 297, 301, 318, 325, 332, 350, 422, 452], "reduct": [16, 18, 128, 222, 224, 232, 246, 332, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], "redund": 505, "refer": [205, 370, 380, 394, 425, 426, 427, 428, 436, 458, 506], "reflect": [394, 502, 506, 509], "regard": 363, "regardless": [84, 154, 503], "regist": [2, 7], "register_librari": 2, "regress": [8, 452], "regular": [39, 359, 458, 482, 502, 504, 506], "regularli": 2, "reimplement": 2, "rel": [17, 185, 479, 502, 503], "relative_step": 479, "releas": 4, "relev": 2, "reli": [1, 2], "relu": [345, 402, 422, 459, 472], "relu6": 345, "remain": [0, 6, 283, 317, 331, 358, 359, 360, 503], "remaind": [0, 135], "remov": [0, 124, 223, 252, 295, 446], "rep": [0, 309], "repeat": [0, 309], "repeatedli": 5, "repetit": 267, "replac": [0, 6, 236, 399, 400, 422, 456], "replai": 3, "repli": 6, "repo": [5, 7, 9, 502], "report": [174, 282], "repres": [2, 6, 126, 129, 173, 453, 457, 509], "represent": [6, 204, 248, 319, 329, 333], "requir": [1, 2, 4, 6, 345, 503, 507, 508, 509], "requires_grad": 505, "rerun": [502, 508], "rescal": 328, "research": 8, "reset": 268, "reset_peak_memori": 176, "reshap": [0, 6, 205, 423, 502, 506], "resid": 283, "resolv": 2, "resourc": 2, "resource_limit": 228, "respect": [2, 5, 7, 118, 150, 152, 172, 173, 177, 248, 317, 330, 345, 350, 363, 366, 370, 372, 475, 503, 505, 507, 510], "respons": 2, "rest": [6, 153, 330, 331, 409, 507], "restart": 9, "restor": 271, "result": [0, 6, 15, 19, 39, 79, 84, 99, 147, 150, 152, 173, 193, 205, 223, 249, 256, 267, 282, 296, 330, 331, 332, 336, 414, 444, 502, 503, 505, 509], "resum": 6, "return": [0, 1, 2, 4, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 51, 69, 79, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 273, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 345, 365, 371, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 395, 396, 398, 399, 400, 406, 424, 425, 426, 427, 428, 429, 430, 431, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 472, 475, 485, 501, 502, 503, 504, 505, 506, 508, 509, 511, 512], "return_metadata": 213, "revers": [0, 2, 42, 43, 44, 45, 84, 114, 115, 116, 117, 312, 414], "rf": 9, "rfft": 161, "rfft2": 162, "rfftn": 163, "rho": 478, "rhs_indic": [0, 172, 173], "rhs_mask": 93, "right": [0, 1, 2, 9, 248, 270, 271, 363, 423, 435, 436, 447, 449, 457], "right_shift": 0, "ring": 129, "rm": [6, 9, 152, 479], "rmsnorm": [6, 345], "rmsprop": 477, "rnn": [345, 365], "robust": 452, "roform": [6, 409], "roll": 0, "root": [0, 6, 152, 273, 293, 405], "rope": [6, 345], "rosetta": 9, "rotari": [6, 153, 409], "rotat": [153, 409], "round": [0, 248], "row": [0, 1, 2, 84, 103, 149, 151, 181, 248, 313], "rpath": 2, "rsqrt": 0, "rtol": [0, 17, 185], "rule": [2, 477], "run": [1, 2, 3, 4, 6, 7, 8, 9, 10, 151, 242, 334, 350, 381, 478, 479, 481, 482, 483, 502, 504, 507, 508, 512, 513], "runtim": [6, 129, 338, 502, 503], "runtime_error": 2, "safetensor": [9, 213, 276, 388, 392, 477, 508, 511], "sai": [2, 6, 472, 508], "said": 6, "sake": 505, "same": [0, 2, 6, 9, 17, 39, 83, 94, 95, 99, 105, 106, 107, 109, 110, 111, 127, 150, 152, 161, 164, 165, 166, 173, 177, 185, 192, 243, 252, 271, 272, 289, 319, 320, 322, 325, 331, 345, 348, 349, 350, 358, 366, 370, 378, 379, 403, 424, 425, 426, 427, 428, 429, 430, 431, 446, 457, 475, 485, 499, 502, 503, 504, 506, 507, 512], "sampl": [2, 5, 6, 212, 251, 252, 253, 255, 256, 259, 262, 263, 425, 426, 427, 428, 430, 431, 447, 453, 457, 499, 502, 504], "sat": 6, "save": [3, 6, 8, 213, 230, 248, 275, 276, 277, 278, 392, 504, 508], "save_gguf": 511, "save_safetensor": [392, 477, 511], "save_weight": 345, "savez": [6, 392, 511], "savez_compress": 511, "saw": [6, 505], "scalar": [0, 2, 14, 15, 17, 31, 51, 79, 83, 89, 90, 91, 92, 93, 95, 98, 134, 135, 139, 170, 171, 177, 178, 179, 180, 185, 194, 195, 196, 212, 218, 219, 220, 221, 223, 225, 233, 235, 236, 239, 243, 245, 251, 259, 262, 263, 266, 270, 275, 300, 317, 319, 322, 327, 457, 504, 505, 508, 510], "scale": [0, 2, 6, 15, 122, 150, 152, 153, 154, 173, 180, 248, 249, 255, 257, 328, 359, 360, 372, 401, 409, 410, 414, 423, 462, 479], "scale_arr": 2, "scale_factor": 423, "scale_paramet": 479, "scatter": 0, "scatter_add": 0, "scatter_add_axi": 0, "scatter_max": 0, "scatter_min": 0, "scatter_prod": 0, "schedul": [2, 477, 491, 492, 493, 494, 495, 497, 512], "schema": [3, 507], "scipi": [180, 203], "scope": 345, "score": [6, 154, 453], "script": [503, 507], "sdk": 9, "se": 1, "second": [6, 9, 124, 191, 193, 194, 219, 221, 223, 270, 302, 311, 317, 348, 349, 378, 379, 445, 453, 479, 483, 502, 504, 505, 512], "second_layer_a": 508, "second_layer_b": 508, "secret": 6, "section": [1, 6, 9, 292, 457, 502, 503, 505], "see": [1, 2, 4, 6, 7, 9, 11, 12, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 205, 275, 276, 279, 326, 336, 345, 350, 351, 359, 361, 363, 367, 368, 369, 375, 376, 384, 402, 403, 404, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 421, 423, 425, 426, 427, 428, 434, 435, 436, 462, 502, 503, 504, 505, 506, 507, 510, 512], "seed": 254, "seen": [503, 509], "select": [0, 3, 9, 200, 201, 310, 322, 381, 385, 393, 507], "self": [6, 7, 10, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 118, 167, 345, 458, 475], "selu": 345, "semant": [14, 89, 91, 92, 94, 95, 134, 135, 139, 178, 179, 194, 195, 196, 218, 223, 225, 233, 235, 239, 245, 266, 270, 300, 512], "semi": [197, 198, 256], "send": 503, "sender": 503, "sennrich": 6, "sensit": 452, "sentencepiec": 6, "separ": [6, 66, 80, 366, 453], "sequenc": [6, 16, 18, 34, 35, 57, 58, 59, 60, 64, 72, 75, 76, 77, 81, 84, 95, 107, 131, 144, 151, 156, 157, 159, 160, 162, 163, 165, 166, 171, 177, 222, 224, 226, 232, 240, 246, 251, 252, 253, 255, 256, 257, 259, 262, 263, 269, 288, 289, 290, 292, 295, 297, 301, 308, 309, 312, 316, 317, 318, 323, 350, 352, 355, 365, 371, 406, 422, 499, 512], "sequenti": [345, 472], "seri": 9, "serial": 477, "set": [2, 4, 6, 7, 9, 99, 118, 125, 127, 128, 129, 131, 132, 133, 138, 150, 152, 153, 228, 279, 280, 281, 282, 283, 299, 325, 363, 372, 374, 384, 386, 393, 394, 395, 398, 399, 404, 409, 420, 445, 457, 469, 475, 477, 479, 481, 482, 486, 499, 504, 505, 508], "set_byt": 2, "set_compute_pipeline_st": 2, "set_data": 2, "set_dtyp": 345, "set_input_arrai": 2, "set_memory_limit": 279, "set_output_arrai": 2, "set_vector_byt": 2, "setup": [2, 4, 5, 7, 9, 502, 503, 504], "sever": [6, 9, 104, 105, 106, 107, 108, 109, 110, 277, 278, 325, 502, 503, 507, 511], "sgd": [5, 7, 477, 484, 486, 491, 492, 495, 502], "shade": [1, 2], "shall": 6, "shape": [0, 2, 3, 6, 7, 66, 83, 84, 93, 94, 95, 99, 104, 105, 106, 107, 108, 109, 110, 124, 127, 131, 132, 146, 148, 151, 154, 155, 158, 161, 164, 165, 166, 171, 172, 180, 192, 202, 211, 223, 240, 241, 251, 252, 253, 255, 256, 257, 259, 262, 263, 269, 271, 289, 316, 319, 320, 322, 323, 324, 345, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 359, 360, 365, 370, 371, 374, 377, 378, 379, 388, 406, 424, 425, 426, 427, 428, 429, 430, 431, 446, 457, 477, 502, 504, 505, 506, 510, 512], "shapeless": [0, 99, 146, 148], "share": [8, 122, 173, 248, 249, 319, 503], "shazeer": 6, "shift": [0, 194, 270, 271, 350], "shop": 6, "should": [1, 2, 4, 5, 6, 7, 9, 84, 97, 124, 127, 150, 151, 152, 154, 192, 230, 247, 248, 283, 305, 311, 317, 320, 325, 326, 329, 345, 352, 353, 354, 355, 356, 357, 359, 360, 395, 401, 411, 446, 448, 453, 475, 501, 502, 503, 504, 505, 508, 509, 513], "show": [9, 336, 502], "shown": 2, "shuffl": 7, "side": [0, 243, 347, 348, 349, 377, 378, 379, 502], "sigma": [363, 364, 365, 371, 413, 425, 426, 427, 428, 436, 437, 442, 463, 464], "sigmoid": [0, 6, 345, 375, 412, 436, 442, 444, 464], "sign": [0, 17, 185, 336, 484], "signal": [111, 423], "signatur": [1, 151], "signedinteg": [12, 191], "signific": 248, "significantli": 503, "silent": [164, 165, 166], "silicon": [2, 6, 8, 9, 512], "silu": 345, "simd": 1, "simd_sum": 1, "simdgroup": 1, "simdgroup_s": 1, "similar": [6, 173, 191, 330, 399, 400, 401, 445, 503, 509, 511], "similarli": [2, 9, 223, 505, 508], "simpl": [2, 6, 7, 345, 362, 471, 477, 502, 503, 504, 505, 507, 508], "simple_axpbi": 2, "simple_tim": 2, "simplest": [2, 345, 503], "simpli": [2, 6, 9, 361, 373, 407, 433, 441, 460, 470, 475, 502, 503, 505, 507], "simplic": 0, "simplifi": 503, "simultan": 1, "sin": [0, 118, 414, 504, 505, 510], "sinc": [1, 2, 6, 7, 173, 176, 475, 484, 493, 502, 504, 509, 512], "sine": [0, 22, 23, 286, 287, 504, 505], "sing": 205, "singer": 480, "singl": [7, 85, 142, 192, 213, 227, 243, 320, 348, 349, 378, 379, 502, 504, 506, 511], "singleton": [0, 16, 18, 27, 28, 129, 222, 223, 224, 226, 232, 246, 297, 301, 318, 503], "singular": [205, 206, 210], "sinh": 0, "sinusoid": 414, "sinusoidalpositionalencod": 345, "size": [0, 1, 2, 6, 7, 52, 69, 93, 105, 106, 109, 110, 122, 144, 150, 151, 152, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 171, 173, 175, 180, 181, 191, 199, 205, 248, 249, 252, 269, 282, 283, 288, 292, 295, 316, 319, 325, 326, 345, 347, 348, 349, 352, 353, 354, 355, 356, 357, 362, 370, 377, 378, 379, 403, 404, 423, 479, 503, 508, 509], "size_in_megabyt": 283, "size_t": [0, 2], "skip": [3, 84], "slice": [0, 289, 506], "slice_s": [0, 288], "slice_upd": 0, "slide": [347, 348, 349, 377, 378, 379], "slight": [6, 508], "slightli": [409, 512], "slope": 373, "slow": 502, "slowli": 6, "small": [6, 145, 150, 152, 325, 350, 366, 372, 405, 447, 452, 457, 502, 512], "smaller": [0, 9, 244, 325, 484, 502], "smallest": 205, "smile": 6, "smooth": [446, 456, 489], "smooth_l1_loss": 345, "sned": 133, "snippet": 503, "so": [1, 2, 6, 9, 177, 180, 317, 358, 423, 477, 502, 503, 508, 512], "socket": 503, "softmax": [0, 6, 154, 345, 376, 443, 446], "softmin": 345, "softplu": [345, 380, 458], "softshrink": 345, "softsign": 345, "solut": [208, 209], "solv": 345, "some": [0, 2, 5, 6, 7, 147, 386, 398, 477, 486, 502, 503, 504, 505, 507, 508], "someon": 6, "someth": [5, 6, 506], "sometim": 502, "sonoma": 9, "soon": 6, "sort": [0, 29, 30, 244, 310], "sourc": [0, 1, 2, 3, 4, 61, 131, 132, 151, 234, 312, 503], "space": [0, 2, 212, 444, 455], "spars": [0, 227], "spatial": [105, 106, 107, 109, 110, 347, 348, 349, 366, 377, 378, 379, 423], "speak": [6, 205], "specif": [1, 2, 9, 503, 505], "specifi": [0, 2, 19, 38, 105, 106, 107, 109, 110, 124, 162, 163, 171, 177, 199, 205, 212, 234, 240, 247, 252, 267, 302, 304, 305, 308, 311, 312, 317, 321, 323, 350, 420, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 469, 502, 503, 504, 505, 512], "speed": 1, "spent": 6, "split": [0, 364, 366, 437], "splittabl": 499, "sqrt": [0, 6, 140, 154, 180, 350, 363, 366, 370, 372, 374, 405, 414, 425, 426, 427, 428, 435, 478, 480, 481, 482, 489, 502], "squar": [0, 5, 6, 152, 181, 202, 211, 273, 293, 317, 330, 345, 405, 454, 456, 478, 479, 481, 482, 483, 505, 509], "squeez": [0, 423, 502], "src": [0, 131, 132], "ssh": [503, 507], "stabil": [150, 152, 350, 366, 370, 372, 405, 444, 445, 447, 478, 479, 480, 481, 482, 483, 489], "stabl": [218, 222, 290, 452], "stable_abi": 2, "stack": [0, 502], "standard": [0, 1, 4, 7, 51, 79, 223, 253, 257, 297, 422, 425, 427, 430, 503, 510], "starmap": [6, 330], "start": [0, 1, 2, 5, 6, 8, 9, 19, 153, 212, 230, 288, 289, 292, 332, 502, 504, 506, 507, 512], "start_axi": [0, 50, 168], "start_captur": 3, "start_indic": [288, 289], "state": [6, 7, 345, 365, 371, 406, 477, 486, 499, 502], "static": [9, 502], "static_cast": 2, "std": [0, 2, 4, 430, 504], "stderr": 507, "stdout": 507, "step": [0, 3, 4, 6, 7, 19, 325, 345, 365, 371, 406, 479, 486, 491, 493, 494, 495, 502, 503], "step_decai": 477, "step_siz": 495, "still": [6, 9, 205, 502, 508], "stochast": [480, 481, 483, 490, 508], "stood": 6, "stop": [0, 2, 6, 19, 212, 231, 298, 505, 506], "stop_captur": 3, "stop_gradi": [0, 505], "storag": 84, "store": 6, "str": [2, 111, 129, 136, 137, 146, 147, 148, 151, 154, 177, 183, 200, 201, 205, 213, 227, 228, 230, 274, 275, 276, 277, 278, 317, 326, 329, 333, 381, 382, 385, 386, 388, 390, 392, 398, 423, 427, 428, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457], "straight": 6, "strang": 6, "stream": [2, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 121, 122, 123, 124, 127, 128, 131, 132, 133, 134, 135, 136, 139, 140, 141, 143, 144, 145, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 281, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 322, 323, 324, 503, 512], "streamcontext": 299, "streamordevic": [0, 2], "street": 6, "strength": [484, 490], "strict": [129, 178, 195, 386, 388, 398], "strictli": [205, 283], "stride": [0, 2, 84, 104, 105, 106, 107, 108, 109, 110, 347, 348, 349, 352, 353, 354, 355, 356, 357, 377, 378, 379, 409, 506], "string": [0, 2, 137, 146, 151, 183, 228, 243, 504, 509, 511], "stronger": 507, "structur": [2, 325, 485, 505], "stub": 9, "style": [2, 14, 17, 89, 91, 92, 134, 135, 139, 178, 179, 185, 194, 195, 196, 218, 223, 225, 233, 235, 239, 245, 266, 270, 300], "su": 6, "sub": [0, 7, 124, 261, 288, 289, 311, 326], "subarrai": [124, 292], "subclass": 475, "subdivid": 1, "subdtyp": 191, "subgradi": 480, "sublinear": 479, "submodul": [6, 7, 345, 382, 386, 387, 398, 400], "subnetwork": 503, "suboptim": 504, "subscript": [136, 137], "subsect": 6, "subsequ": [129, 477, 503, 507], "subset": [345, 385], "substanti": 9, "subtl": 502, "subtract": [0, 39], "subtyp": [191, 336], "succe": 129, "successfulli": 503, "sudo": [9, 283, 503], "suggest": 503, "sum": [0, 2, 5, 14, 117, 128, 148, 184, 205, 222, 290, 308, 311, 345, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 503, 506, 509], "sum_": [205, 452], "sum_i": 443, "sum_j": [465, 466], "summat": [136, 137], "super": [6, 7, 345, 475], "superset": [330, 485], "support": [1, 2, 6, 8, 9, 17, 93, 106, 109, 110, 154, 168, 180, 185, 197, 198, 200, 201, 202, 206, 207, 210, 211, 213, 223, 248, 256, 503, 505, 506, 509, 511], "suppos": [505, 512], "sure": [2, 3, 6, 9, 345, 502], "surpass": [427, 428], "surpris": 6, "sw": 1, "swap": [0, 111, 282, 302, 400], "swapax": [0, 118], "swiglu": 6, "swish": [412, 464], "switch": 9, "symbol": 484, "symmetr": [105, 106, 109, 110, 197, 198, 200, 201], "symmetri": [200, 201], "synchron": [2, 502], "syntax": [39, 506], "synthet": 5, "sysctl": 283, "system": [4, 6, 9, 174, 175, 208, 209, 228, 283], "t": [0, 1, 2, 4, 6, 9, 103, 140, 151, 154, 173, 197, 198, 249, 317, 345, 365, 371, 406, 478, 479, 480, 481, 482, 483, 484, 489, 490, 502, 504, 505, 512], "t_kv": 154, "t_q": 154, "tabl": [1, 205, 336, 362], "take": [0, 2, 6, 7, 89, 90, 91, 92, 99, 146, 172, 177, 192, 225, 233, 241, 249, 305, 317, 320, 321, 324, 331, 332, 347, 348, 349, 377, 378, 379, 401, 444, 499, 503, 504, 505, 506, 507, 511, 512, 513], "take_along_axi": [0, 203, 506], "taken": [124, 304, 311], "talk": 503, "tan": 0, "tangent": [0, 2, 24, 25, 26, 118, 192, 306, 307, 421, 470], "tangent_i": 2, "tangent_x": 2, "tanh": [0, 345, 363, 365, 371, 380, 406, 435, 458], "target": [2, 317, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 502], "target_include_directori": 2, "target_link_librari": [2, 4], "target_link_opt": 2, "target_sourc": 2, "task": 452, "tau": 490, "tcp": 503, "tediou": 503, "tell": [4, 6, 502, 509], "temp": 6, "templat": [0, 1, 2, 151], "ten": 508, "tend": 484, "tensor": [213, 308, 457, 509], "tensordot": 0, "term": [2, 447, 478, 479, 480, 481, 482, 483, 489], "termin": [9, 507], "test": [7, 9, 503, 507], "test_imag": 7, "test_label": 7, "text": [6, 363, 365, 371, 380, 406, 413, 420, 425, 426, 427, 428, 435, 438, 439, 440, 447, 448, 449, 452, 453, 456, 458, 459, 462, 463, 468, 469, 479, 484], "textrm": [248, 363, 364, 434, 437], "tf": 509, "tgp_size": 2, "th": [114, 115, 116, 117, 123, 149, 200, 493], "than": [1, 2, 6, 79, 111, 124, 135, 153, 172, 178, 179, 195, 196, 197, 198, 200, 201, 202, 203, 206, 210, 211, 223, 279, 283, 328, 330, 409, 420, 423, 453, 456, 469, 479, 484, 502, 504, 505, 512], "thank": 508, "thei": [1, 2, 5, 6, 9, 17, 111, 173, 185, 411, 448, 475, 484, 501, 502, 503, 504, 508, 510, 511, 512], "them": [0, 2, 6, 127, 345, 386, 398, 503, 504, 507, 512], "themselv": [2, 502], "thi": [0, 1, 2, 4, 6, 7, 9, 16, 17, 18, 19, 27, 28, 29, 30, 84, 85, 97, 118, 138, 146, 148, 151, 172, 173, 174, 180, 183, 185, 192, 197, 198, 200, 201, 202, 205, 206, 207, 210, 211, 218, 222, 223, 224, 226, 232, 244, 246, 252, 281, 283, 290, 291, 292, 297, 301, 304, 310, 318, 325, 328, 331, 332, 345, 358, 359, 360, 364, 365, 371, 382, 383, 385, 386, 389, 390, 391, 396, 398, 399, 400, 401, 404, 406, 420, 425, 426, 427, 428, 435, 436, 437, 444, 452, 469, 475, 486, 501, 502, 503, 504, 505, 507, 508, 509, 511], "thin": 507, "thing": [2, 6], "third": [199, 349, 379, 503, 504], "thompson": 359, "those": [2, 6, 345], "though": [2, 6, 502, 504, 508, 509], "thousand": 508, "thread": [1, 2], "thread_index_in_simdgroup": 1, "thread_position_in_grid": [1, 2, 151], "threadgroup": [1, 2, 151], "threads_per_simdgroup": 1, "three": [6, 88, 349, 379, 423], "threefri": 499, "threshold": [420, 449, 456, 469], "through": [1, 2, 298, 422, 484, 502, 503, 504, 505, 509], "throw": [2, 99, 129], "thu": [6, 345], "thumb": 477, "tic": 502, "tieleman": 489, "tile": [0, 154], "time": [2, 6, 9, 282, 309, 345, 365, 371, 406, 502, 503, 505, 508, 512], "timeit": [502, 505], "titl": 2, "tmp": [1, 151], "to_quant": 326, "to_stream": 2, "toc": 502, "togeth": [0, 1, 2, 7, 248, 330, 331, 503], "tok_embed": 6, "token": [6, 362, 403], "told": 6, "toler": [0, 17, 185], "too": [191, 502, 508], "took": 6, "tool": 9, "top": [2, 310, 374, 423], "topk": 0, "torch": [6, 509], "torch_weight": 6, "total": [283, 505], "total_norm": 328, "tpi": 502, "tpng": 503, "trace": [0, 3, 148, 502], "trace_fil": 3, "tracer": 399, "track": [2, 345, 350], "track_running_stat": 350, "trade": 508, "tradit": [6, 153, 359, 360, 409], "train": [6, 7, 345, 350, 358, 359, 360, 384, 386, 398, 425, 426, 504], "train_imag": [7, 477], "train_label": [7, 477], "trainabl": [7, 327, 345, 475], "trainable_paramet": [345, 385, 486], "transfer": 507, "transform": [1, 6, 8, 118, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 180, 327, 345, 350, 366, 372, 374, 385, 386, 398, 404, 409, 506], "transformerencod": 277, "transit": 493, "translat": [150, 372], "transpos": [0, 6, 32, 108, 109, 110, 173, 249, 355, 356, 357], "treat": [0, 2, 118, 162, 163, 165, 166, 304, 423, 502], "tree": [8, 85, 99, 142, 177, 317, 321, 325, 329, 330, 331, 332, 333, 485, 486, 488, 497, 505], "tree_flatten": [277, 330, 333, 345, 477, 504], "tree_map": [331, 345, 503], "tree_unflatten": [6, 477, 504], "trembl": 6, "tri": [0, 129], "triangl": [200, 201, 313], "triangular": [197, 198, 209, 211], "trigger": 502, "tril": 0, "trilinear": 423, "triplet": 457, "triplet_loss": 345, "triu": 0, "true": [0, 1, 2, 4, 5, 6, 17, 42, 43, 44, 45, 83, 99, 114, 115, 116, 117, 151, 153, 173, 185, 191, 197, 198, 205, 210, 213, 227, 249, 290, 322, 326, 329, 330, 331, 332, 336, 345, 350, 352, 353, 354, 355, 356, 357, 365, 366, 370, 371, 372, 374, 385, 386, 388, 395, 398, 404, 406, 409, 414, 422, 423, 444, 452, 479, 481, 482, 502, 504], "truncat": [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 262], "truth": [5, 446, 456], "try": [2, 9, 503], "tupl": [0, 31, 66, 69, 80, 85, 94, 100, 105, 106, 107, 109, 110, 131, 135, 137, 142, 144, 146, 183, 192, 200, 203, 204, 205, 207, 210, 243, 248, 269, 271, 288, 289, 295, 316, 317, 320, 329, 330, 331, 332, 333, 347, 348, 349, 353, 354, 356, 357, 377, 378, 379, 388, 390, 411, 423, 479, 481, 482, 483, 484, 501, 504, 505], "tutori": 2, "twice": 512, "two": [0, 2, 14, 15, 17, 25, 83, 87, 89, 91, 92, 93, 124, 134, 139, 156, 159, 165, 172, 173, 178, 179, 185, 193, 195, 196, 197, 198, 199, 200, 201, 202, 206, 207, 210, 211, 218, 223, 225, 233, 235, 239, 242, 302, 332, 348, 364, 371, 378, 437, 445, 502, 503, 504, 505, 506, 512], "txt": [2, 4], "type": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 69, 79, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 143, 144, 145, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 266, 267, 269, 270, 272, 273, 279, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 328, 329, 332, 345, 393, 422, 424, 425, 426, 427, 428, 429, 430, 431, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 502, 504, 506, 509], "type_to_nam": 2, "typenam": [0, 1, 2], "typic": [0, 154, 325, 362, 477, 502, 508], "u": [1, 2, 4, 197, 200, 201, 203, 210, 374, 400, 497, 503, 507, 508], "u_": 478, "u_t": 478, "uint": [1, 2, 151], "uint16": [12, 336], "uint3": 1, "uint32": [12, 27, 28, 29, 30, 252, 336], "uint64": [12, 336], "uint8": [12, 336], "ultra": 6, "unabl": 9, "unam": 9, "unari": 502, "unchang": [153, 298, 409], "uncheck": 9, "uncompress": 277, "undefin": [0, 29, 118, 197, 198, 244, 256, 506], "under": 205, "underli": [2, 319], "understand": [6, 425, 426], "unevalu": 147, "unexpect": [2, 19], "unexpectedli": 507, "unflatten": 0, "unfreez": [345, 386], "unfrozen": 398, "unifi": 8, "uniform": [3, 345, 374, 388, 426, 428, 472, 499, 502, 505, 512], "uniformli": 263, "unintend": 0, "union": [19, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 86, 87, 88, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 189, 190, 191, 193, 200, 201, 210, 228, 275, 299], "uniqu": [2, 208, 209, 499, 503], "unique_ptr": 2, "unit": [351, 361, 363, 364, 365, 373, 407, 408, 410, 412, 425, 426, 427, 428, 432, 433, 434, 435, 436, 437, 441, 460, 461, 462, 464], "unittest": 9, "univers": 205, "unless": [6, 17, 185, 205, 475], "unlik": [6, 17, 185, 203, 359, 360, 394], "unnecessari": [2, 6], "unnorm": [252, 444, 446], "unscal": 479, "unsign": [173, 248, 249, 336], "unsignedinteg": 12, "unspecifi": [16, 18, 19, 27, 28, 29, 30, 100, 114, 115, 116, 117, 171, 222, 224, 226, 232, 240, 244, 246, 267, 290, 291, 297, 301, 304, 310, 311, 318, 323, 513], "unsqueez": 6, "unsupport": 213, "until": [2, 325, 508, 510], "unus": 2, "up": [1, 2, 6, 118, 502], "upcast": 2, "updat": [0, 1, 2, 5, 6, 7, 39, 99, 289, 326, 330, 332, 350, 381, 382, 388, 393, 394, 395, 400, 477, 479, 482, 484, 485, 486, 490, 491, 492, 493, 494, 495, 502, 503, 504, 508], "update_modul": 345, "uplo": [200, 201], "upon": [6, 330, 331], "upper": [197, 198, 200, 201, 209, 211, 248, 259, 262, 263, 431], "upsampl": 345, "us": [0, 3, 5, 6, 7, 8, 9, 19, 39, 84, 118, 122, 125, 127, 128, 131, 132, 133, 135, 151, 153, 168, 173, 174, 175, 176, 194, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 223, 248, 249, 267, 269, 270, 271, 279, 282, 283, 303, 316, 325, 329, 332, 336, 338, 345, 348, 349, 359, 362, 363, 365, 371, 374, 378, 379, 381, 385, 392, 399, 401, 403, 404, 406, 409, 414, 422, 423, 427, 428, 435, 436, 445, 472, 475, 477, 478, 479, 481, 482, 483, 484, 485, 486, 499, 501, 502, 503, 504, 505, 506, 507, 510, 512], "usag": [422, 502, 503], "user": [2, 6, 345], "usual": [362, 403, 501, 508], "util": [1, 2, 6, 8, 9, 277, 345, 477, 507], "v": [6, 111, 154, 200, 345, 386, 509], "v_": [478, 480, 481, 482, 483, 489, 490], "v_t": [478, 480, 481, 482, 483, 489, 490], "val": [0, 31, 171], "valid": [7, 111, 168, 321, 329, 386, 398, 501, 503], "valid_parameter_filt": 381, "valu": [0, 1, 5, 6, 12, 13, 17, 19, 27, 28, 51, 79, 83, 98, 129, 146, 149, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 171, 183, 185, 199, 205, 206, 210, 212, 228, 236, 243, 247, 251, 252, 253, 255, 256, 257, 259, 262, 263, 271, 275, 283, 304, 305, 317, 321, 327, 329, 330, 331, 332, 336, 348, 349, 351, 358, 359, 360, 361, 367, 370, 374, 378, 379, 385, 401, 402, 418, 420, 422, 424, 444, 445, 446, 447, 448, 449, 451, 452, 453, 454, 455, 456, 469, 475, 479, 482, 491, 492, 494, 495, 505], "value_and_grad": [7, 118, 345, 399, 475, 477, 488, 502, 505, 509, 510], "value_and_grad_fn": 508, "value_cach": 6, "value_dim": 401, "value_input_dim": 401, "value_output_dim": 401, "value_proj": 6, "valueerror": [118, 205, 388, 505], "values_hat": 6, "van": 205, "var": [0, 350, 366, 370, 372, 447], "variabl": [9, 99, 118, 125, 138, 146, 147, 148, 177, 192, 317, 320, 321, 502, 503, 504], "varianc": [0, 297, 318, 350, 366, 447], "variant": [6, 456, 483], "variou": 205, "vector": [0, 2, 5, 8, 184, 192, 205, 304, 320, 321, 362, 446, 504, 510], "verbos": [1, 151, 503], "veri": [6, 401, 507, 508, 512], "verifi": [5, 9], "versa": 271, "version": [2, 4, 9, 85, 122, 146, 148, 183, 218, 222, 248, 290, 321, 499, 505, 506], "versu": 502, "via": [9, 118, 485, 488, 503, 507, 508, 509], "vice": 271, "video": 360, "view": [0, 3, 84, 509], "virtual": 2, "visual": 147, "vjp": [2, 118, 510], "vmap": [2, 118, 504, 505, 508, 510], "vmap_add": 505, "vocab_s": 6, "vocabulari": [362, 403], "void": [1, 2], "vt": 210, "w": [0, 1, 5, 105, 106, 109, 110, 122, 173, 200, 248, 249, 317, 331, 350, 353, 354, 356, 357, 359, 360, 374, 477, 490, 505], "w1": [6, 328], "w2": [6, 328], "w3": 6, "w_": [365, 371, 406, 478, 479, 480, 481, 482, 483, 484, 489, 490], "w_1": 248, "w_g": 248, "w_i": [122, 248], "w_in": 1, "w_q": 248, "w_star": 5, "w_stride": 1, "w_t": [478, 480, 481, 482, 483, 484, 489, 490], "wa": [4, 6, 84, 131, 132, 503, 504, 508], "wai": [2, 6, 9, 345, 423, 502, 503, 504, 505, 506, 507], "wait": 6, "walk": [6, 504], "walkthrough": 2, "walsh": 180, "want": [1, 2, 6, 503, 504, 505, 507, 512], "warm": [2, 502], "warmup_init": 479, "watch": [6, 502], "wd": 484, "we": [0, 1, 2, 5, 6, 7, 118, 122, 131, 132, 173, 248, 249, 345, 362, 403, 411, 482, 484, 499, 501, 502, 503, 504, 505, 507, 508, 512], "weight": [0, 5, 104, 105, 106, 107, 108, 109, 110, 150, 152, 330, 345, 388, 392, 403, 404, 444, 446, 475, 479, 482, 484, 486, 490, 505, 508], "weight_decai": [479, 482, 484, 490], "weight_fil": 6, "weights_fp16": 508, "well": [6, 345, 386, 398, 401, 503, 508], "wen": 6, "went": 6, "were": [6, 512], "wet": 6, "what": [2, 6, 330, 507], "whatsoev": 6, "whc": 359, "when": [0, 1, 2, 6, 8, 9, 99, 107, 118, 133, 197, 198, 200, 201, 202, 205, 206, 210, 211, 213, 282, 352, 353, 354, 355, 356, 357, 423, 427, 428, 444, 450, 456, 475, 477, 493, 499, 502, 503, 504, 512], "where": [0, 4, 7, 149, 185, 198, 248, 317, 321, 350, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 365, 366, 370, 371, 372, 374, 385, 402, 405, 406, 420, 427, 428, 433, 434, 436, 447, 453, 459, 462, 464, 469, 486, 503, 505, 506], "wherea": 505, "whether": [146, 148, 151, 173, 200, 201, 209, 211, 249, 365, 371, 385, 401, 406, 444, 447, 453], "which": [0, 1, 2, 6, 7, 8, 9, 19, 38, 84, 85, 99, 107, 124, 127, 128, 129, 131, 132, 133, 142, 146, 148, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 177, 183, 186, 187, 188, 189, 190, 192, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 227, 230, 248, 252, 253, 267, 269, 271, 274, 275, 276, 277, 278, 295, 296, 304, 311, 316, 317, 320, 321, 326, 348, 349, 359, 360, 363, 378, 379, 381, 385, 409, 444, 446, 449, 453, 456, 472, 485, 486, 499, 502, 503, 504, 505, 506, 507, 508, 512, 513], "while": [2, 3, 6, 9, 269, 409, 508, 509], "whistl": 2, "who": 6, "whose": [149, 326, 327], "why": 6, "wi": 503, "wide": 508, "width": [348, 349, 350, 353, 354, 356, 357, 359, 360, 378, 379, 403, 404], "window": [9, 347, 348, 349, 377, 378, 379], "wipe": 9, "wire": 283, "wired_limit_mb": 283, "wise": [0, 2, 13, 14, 20, 21, 22, 23, 24, 25, 26, 89, 90, 91, 92, 96, 112, 113, 134, 135, 139, 140, 141, 143, 145, 169, 170, 178, 179, 185, 194, 195, 196, 214, 215, 216, 217, 218, 219, 220, 221, 225, 233, 235, 237, 239, 245, 265, 266, 270, 273, 284, 285, 286, 287, 293, 294, 300, 306, 307, 351, 359, 360, 369, 380, 402, 413, 432, 439, 440, 442, 443, 458, 459, 461, 464, 465, 466, 467, 502], "wish": 9, "with_logit": 444, "within": [0, 3, 29, 185], "without": [1, 6, 8, 298, 401, 471, 501, 502, 503, 504, 507, 508, 509, 512], "wk": 6, "wl": 2, "wo": 6, "word": 0, "work": [2, 3, 6, 282, 336, 502, 503, 504, 505, 506, 507, 508], "workhors": 345, "world": [333, 503], "world2": 503, "world_ani": 503, "world_mpi": 503, "world_r": 503, "worri": [1, 508], "would": [2, 6, 423, 503, 504, 506, 508, 509, 512], "wq": 6, "wrap": [118, 345], "wrapper": [504, 507], "write": [0, 1, 6, 345, 509], "written": [2, 504], "wrong": 504, "wrt": 327, "wv": 6, "x": [0, 1, 2, 4, 5, 6, 7, 39, 85, 93, 118, 127, 128, 132, 133, 140, 145, 146, 147, 150, 151, 152, 173, 180, 181, 183, 205, 249, 253, 258, 272, 277, 284, 314, 315, 322, 330, 332, 345, 347, 348, 349, 350, 351, 361, 363, 364, 366, 370, 372, 373, 374, 377, 378, 379, 380, 381, 402, 405, 407, 413, 414, 420, 423, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 475, 477, 484, 502, 503, 504, 505, 506, 508, 509, 510, 512], "x1": 445, "x2": 445, "x86_64": 9, "x_1": [445, 453], "x_2": [445, 453], "x_cast": 2, "x_grad": 1, "x_i": [443, 465, 466], "x_j": [465, 466], "x_offset": 2, "x_ptr": 2, "x_shape": 1, "x_stride": 2, "x_t": [365, 371, 406], "x_view": 509, "xcode": 9, "xcodeproj": 3, "xcrun": 9, "xf": 371, "xg": 371, "xi": 371, "xn": 365, "xo": 371, "xor": 92, "xr": 365, "xy": [0, 227], "xz": 365, "x\u00b2": 509, "y": [0, 2, 4, 5, 6, 7, 39, 85, 118, 146, 147, 180, 183, 322, 345, 350, 359, 366, 370, 372, 374, 405, 448, 453, 456, 477, 480, 502, 503, 504, 505, 508, 509], "y_": [448, 452], "y_cast": 2, "y_hat": 345, "y_offset": 2, "y_ptr": 2, "y_stride": 2, "ye": 6, "year": 6, "yet": [6, 345, 475, 486, 505, 506, 508, 510], "yield": [6, 7, 499], "you": [2, 3, 4, 6, 7, 8, 9, 283, 345, 414, 422, 472, 499, 502, 503, 504, 505, 506, 507, 509, 511, 512], "your": [2, 6, 9, 475, 503, 505, 508], "z": [2, 85, 365, 502, 504, 508], "z_t": 365, "zeiler": 478, "zero": [0, 146, 149, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 199, 227, 268, 289, 313, 314, 315, 324, 345, 347, 348, 349, 358, 359, 360, 388, 424, 425, 426, 427, 428, 429, 430, 431, 472, 477, 479, 504, 506], "zero_grad": 505, "zeros_lik": [0, 203], "zhang": 6, "zip": [6, 7], "zip_saf": 2}, "titles": ["Operations", "Custom Metal Kernels", "Custom Extensions in MLX", "Metal Debugger", "Using MLX in C++", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.conj", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.std", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array.view", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.async_eval", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_invert", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.broadcast_arrays", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clear_cache", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.contiguous", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv3d", "mlx.core.conv_general", "mlx.core.conv_transpose1d", "mlx.core.conv_transpose2d", "mlx.core.conv_transpose3d", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.custom_function", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.distributed.Group", "mlx.core.distributed.all_gather", "mlx.core.distributed.all_sum", "mlx.core.distributed.init", "mlx.core.distributed.is_available", "mlx.core.distributed.recv", "mlx.core.distributed.recv_like", "mlx.core.distributed.send", "mlx.core.divide", "mlx.core.divmod", "mlx.core.einsum", "mlx.core.einsum_path", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.export_function", "mlx.core.export_to_dot", "mlx.core.exporter", "mlx.core.eye", "mlx.core.fast.layer_norm", "mlx.core.fast.metal_kernel", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.finfo", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.get_active_memory", "mlx.core.get_cache_memory", "mlx.core.get_peak_memory", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.hadamard_transform", "mlx.core.identity", "mlx.core.imag", "mlx.core.import_function", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isfinite", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.kron", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.cholesky_inv", "mlx.core.linalg.cross", "mlx.core.linalg.eigh", "mlx.core.linalg.eigvalsh", "mlx.core.linalg.inv", "mlx.core.linalg.lu", "mlx.core.linalg.lu_factor", "mlx.core.linalg.norm", "mlx.core.linalg.pinv", "mlx.core.linalg.qr", "mlx.core.linalg.solve", "mlx.core.linalg.solve_triangular", "mlx.core.linalg.svd", "mlx.core.linalg.tri_inv", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.device_info", "mlx.core.metal.is_available", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.nan_to_num", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.put_along_axis", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.laplace", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.permutation", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.real", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reset_peak_memory", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.roll", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_cache_limit", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.set_memory_limit", "mlx.core.set_wired_limit", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.slice", "mlx.core.slice_update", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.unflatten", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.view", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.average_gradients", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Distributed Communication", "Export Functions", "Fast", "FFT", "Linear Algebra", "Memory Management", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.AvgPool3d", "mlx.nn.BatchNorm", "mlx.nn.CELU", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.ConvTranspose1d", "mlx.nn.ConvTranspose2d", "mlx.nn.ConvTranspose3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.ELU", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GLU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.HardShrink", "mlx.nn.HardTanh", "mlx.nn.Hardswish", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.LeakyReLU", "mlx.nn.Linear", "mlx.nn.LogSigmoid", "mlx.nn.LogSoftmax", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.MaxPool3d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.ReLU6", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.Sigmoid", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softmax", "mlx.nn.Softmin", "mlx.nn.Softplus", "mlx.nn.Softshrink", "mlx.nn.Softsign", "mlx.nn.Step", "mlx.nn.Tanh", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.celu", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hard_shrink", "mlx.nn.hard_tanh", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softmin", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Distributed Communication", "Exporting Functions", "Function Transforms", "Indexing Arrays", "Launching Distributed Programs", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "titleterms": {"A": 512, "In": 506, "The": 345, "ab": [13, 33], "adadelta": 478, "adafactor": 479, "adagrad": 480, "adam": 481, "adamax": 483, "adamw": 482, "add": 14, "addmm": 15, "algebra": 342, "alibi": 346, "all": [6, 16, 34, 503], "all_gath": 127, "all_sum": 128, "allclos": 17, "ani": [18, 35], "api": [8, 9], "appli": 381, "apply_gradi": 485, "apply_to_modul": 382, "arang": 19, "arcco": 20, "arccosh": 21, "arcsin": 22, "arcsinh": 23, "arctan": 24, "arctan2": 25, "arctanh": 26, "argmax": [27, 36], "argmin": [28, 37], "argpartit": 29, "argsort": 30, "arrai": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 335, 506, 511], "array_equ": 83, "as_strid": 84, "astyp": 38, "async_ev": 85, "atleast_1d": 86, "atleast_2d": 87, "atleast_3d": 88, "attent": 6, "automat": 505, "average_gradi": [325, 503], "avgpool1d": 347, "avgpool2d": 348, "avgpool3d": 349, "back": 2, "backend": 503, "basic": [502, 504, 510], "batchnorm": 350, "benchmark": 6, "bernoulli": 251, "binari": 9, "binary_cross_entropi": 444, "bind": 2, "bitwise_and": 89, "bitwise_invert": 90, "bitwise_or": 91, "bitwise_xor": 92, "block_masked_mm": 93, "broadcast_arrai": 94, "broadcast_to": 95, "build": [2, 9], "c": [4, 8, 9, 504], "categor": 252, "ceil": 96, "celu": [351, 432], "children": 383, "choleski": 197, "cholesky_inv": 198, "class": 345, "clear_cach": 97, "clip": 98, "clip_grad_norm": 328, "cmake": 2, "co": [41, 112], "code": [2, 6], "common": 496, "commun": [338, 503], "compil": [99, 502], "complex": 1, "comput": 508, "concaten": 100, "conj": [40, 101], "conjug": 102, "constant": 424, "contigu": 103, "conv1d": [104, 352], "conv2d": [105, 353], "conv3d": [106, 354], "conv_gener": 107, "conv_transpose1d": 108, "conv_transpose2d": 109, "conv_transpose3d": 110, "convers": 509, "convert": 6, "convolv": 111, "convtranspose1d": 355, "convtranspose2d": 356, "convtranspose3d": 357, "core": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 334], "cosh": 113, "cosine_decai": 491, "cosine_similarity_loss": 445, "cpu": 2, "cross": 199, "cross_entropi": 446, "cummax": [42, 114], "cummin": [43, 115], "cumprod": [44, 116], "cumsum": [45, 117], "custom": [1, 2], "custom_funct": 118, "data": 336, "debug": 502, "debugg": 3, "default_devic": 119, "default_stream": 120, "defin": 503, "degre": 121, "dequant": 122, "devic": [10, 337], "device_info": 228, "diag": [46, 123], "diagon": [47, 124], "differ": 506, "differenti": 505, "disable_compil": 125, "distribut": [126, 127, 128, 129, 130, 131, 132, 133, 338, 503, 507], "divid": 134, "divmod": 135, "download": [2, 6], "dropout": 358, "dropout2d": 359, "dropout3d": 360, "dtype": [11, 48], "dtypecategori": 12, "eigh": 200, "eigvalsh": 201, "einsum": 136, "einsum_path": 137, "elu": [361, 433], "embed": 362, "enable_compil": 138, "encod": 6, "end": 2, "equal": 139, "erf": 140, "erfinv": 141, "eval": [142, 384], "evalu": 508, "exampl": [1, 2, 8, 502, 503, 504, 512], "exp": [49, 143], "expand_dim": 144, "expm1": 145, "exponential_decai": 492, "export": [148, 339, 504], "export_funct": 146, "export_to_dot": 147, "extens": 2, "ey": 149, "fast": [150, 151, 152, 153, 154, 340], "fft": [155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 341], "fft2": 156, "fftn": 157, "filter_and_map": 385, "finfo": 167, "flatten": [50, 168], "floor": 169, "floor_divid": 170, "format": 511, "found": 9, "framework": 509, "freez": 386, "from": [9, 506], "full": [6, 171], "function": [339, 471, 474, 502, 504, 505, 510], "further": 8, "gather_mm": 172, "gather_qmm": 173, "gaussian_nll_loss": 447, "gelu": [363, 434], "gelu_approx": 435, "gelu_fast_approx": 436, "gener": 6, "get": 503, "get_active_memori": 174, "get_cache_memori": 175, "get_peak_memori": 176, "glorot_norm": 425, "glorot_uniform": 426, "glu": [364, 437], "gpu": 2, "grad": [177, 345], "graph": [502, 508, 510], "greater": 178, "greater_equ": 179, "grid": 1, "group": 126, "groupnorm": 366, "gru": 365, "guid": 510, "gumbel": 253, "hadamard_transform": 180, "hard_shrink": 438, "hard_tanh": 439, "hardshrink": 367, "hardswish": [369, 440], "hardtanh": 368, "he_norm": 427, "he_uniform": 428, "hinge_loss": 448, "host": [503, 507], "huber_loss": 449, "ident": [181, 429], "ifft": 158, "ifft2": 159, "ifftn": 160, "imag": 182, "implement": [2, 6], "import": 504, "import_funct": 183, "index": 506, "infer": 6, "init": [129, 424, 425, 426, 427, 428, 429, 430, 431, 486], "initi": 472, "inner": 184, "inspect": 345, "instal": [8, 9, 503], "instancenorm": 370, "introduc": 2, "inv": 202, "irfft": 161, "irfft2": 162, "irfftn": 163, "is_avail": [130, 229], "isclos": 185, "isfinit": 186, "isinf": 187, "isnan": 188, "isneginf": 189, "isposinf": 190, "issubdtyp": 191, "item": 51, "items": 52, "jax": 509, "join_schedul": 493, "jvp": 192, "kei": 254, "kernel": 1, "kl_div_loss": 450, "kron": 193, "l1_loss": 451, "laplac": 255, "launch": 507, "layer": [6, 7, 473], "layer_norm": 150, "layernorm": 372, "lazi": 508, "leaf_modul": 387, "leaky_relu": 441, "leakyrelu": 373, "left_shift": 194, "less": 195, "less_equ": 196, "linalg": [197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211], "linear": [5, 342, 374], "linear_schedul": 494, "linspac": 212, "lion": 484, "llm": 6, "load": [6, 213, 477, 511], "load_weight": 388, "log": [53, 214], "log10": [54, 215], "log1p": [55, 216], "log2": [56, 217], "log_cosh_loss": 452, "log_sigmoid": 442, "log_softmax": 443, "logaddexp": 218, "logical_and": 219, "logical_not": 220, "logical_or": 221, "logsigmoid": 375, "logsoftmax": 376, "logsumexp": [57, 222], "loss": [444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 474], "lstm": 371, "lu": 203, "lu_factor": 204, "manag": 343, "margin_ranking_loss": 453, "matmul": 223, "max": [58, 224], "maximum": 225, "maxpool1d": 377, "maxpool2d": 378, "maxpool3d": 379, "mean": [59, 226], "memori": [343, 512], "meshgrid": 227, "metal": [1, 3, 9, 228, 229, 230, 231, 344], "metal_kernel": 151, "min": [60, 232], "minim": 9, "minimum": 233, "mish": [380, 458], "mlx": [2, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495], "model": 6, "modul": [345, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 475, 504], "more": 504, "moveaxi": [61, 234], "mpi": [503, 507], "mse_loss": 454, "multi": 7, "multiheadattent": 401, "multipl": 504, "multipli": 235, "multivariate_norm": 256, "named_modul": 390, "nan_to_num": 236, "nbyte": 62, "ndim": 63, "neg": 237, "network": 345, "neural": 345, "new_stream": 238, "nll_loss": 455, "nn": [325, 326, 327, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 503], "norm": 205, "normal": [257, 430], "not_equ": 239, "numpi": [506, 509], "ones": 240, "ones_lik": 241, "onli": 508, "oper": [0, 2, 476], "optim": [328, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497], "option": 9, "other": 509, "outer": 242, "packag": 4, "pad": 243, "paramet": [345, 391], "partit": 244, "perceptron": 7, "permut": 258, "pinv": 206, "place": 506, "power": 245, "prelu": [402, 459], "primit": 2, "prod": [64, 246], "program": [503, 507], "provid": 507, "pure": 502, "put": 6, "put_along_axi": 247, "python": [2, 8, 9], "pytorch": 509, "qr": 207, "quantiz": [248, 326], "quantized_matmul": 249, "quantizedembed": 403, "quantizedlinear": 404, "quick": [345, 510], "radian": 250, "randint": 259, "random": [251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 499], "read": 8, "real": 264, "reciproc": [65, 265], "recv": 131, "recv_lik": 132, "reduc": 503, "refer": 8, "regress": 5, "relu": [407, 460], "relu6": [408, 461], "remaind": 266, "remot": [503, 507], "repeat": 267, "requir": 9, "reset_peak_memori": 268, "reshap": [66, 269], "result": 2, "rfft": 164, "rfft2": 165, "rfftn": 166, "right_shift": 270, "ring": [503, 507], "rms_norm": 152, "rmsnorm": 405, "rmsprop": 489, "rnn": 406, "roll": 271, "rope": [153, 409], "round": [67, 272], "rsqrt": [68, 273], "run": 503, "sampl": 1, "save": [274, 477, 511], "save_gguf": 275, "save_safetensor": 276, "save_weight": 392, "savez": 277, "savez_compress": 278, "scaled_dot_product_attent": 154, "schedul": 498, "script": [2, 6], "seed": 260, "select": 503, "selu": [410, 462], "send": 133, "sequenti": 411, "serial": 511, "set": [503, 507], "set_cache_limit": 279, "set_default_devic": 280, "set_default_stream": 281, "set_dtyp": 393, "set_memory_limit": 282, "set_wired_limit": 283, "setuptool": 2, "sgd": 490, "shape": [1, 69], "shapeless": [502, 504], "shell": 9, "sigmoid": [284, 413, 463], "sign": 285, "silu": [412, 464], "simpl": [1, 512], "sin": [70, 286], "sinh": 287, "sinusoidalpositionalencod": 414, "size": [9, 71], "slice": 288, "slice_upd": 289, "smooth_l1_loss": 456, "softmax": [290, 415, 465], "softmin": [416, 466], "softplu": [417, 467], "softshrink": [418, 468], "softsign": 419, "solv": 208, "solve_triangular": 209, "sort": 291, "sourc": 9, "specif": 507, "specifi": 513, "speedup": 502, "split": [72, 261, 292], "sqrt": [73, 293], "squar": [74, 294], "squeez": [75, 295], "stack": 296, "start": [345, 503, 510], "start_captur": 230, "state": [394, 487], "std": [76, 297], "step": [420, 469], "step_decai": 495, "stop_captur": 231, "stop_gradi": 298, "stream": [299, 334, 337, 513], "stride": 1, "subtract": 300, "sum": [77, 301], "support": 336, "svd": 210, "swapax": [78, 302], "synchron": 303, "t": 32, "take": 304, "take_along_axi": 305, "tan": 306, "tanh": [307, 421, 470], "tensordot": 308, "tensorflow": 509, "thunderbolt": 503, "tile": 309, "togeth": 6, "tolist": 79, "topk": 310, "trace": [311, 504], "train": [395, 397, 502, 503], "trainable_paramet": 396, "transform": [2, 422, 500, 502, 504, 505, 508, 510], "transpos": [80, 312], "tree": 501, "tree_flatten": 329, "tree_map": 330, "tree_map_with_path": 331, "tree_reduc": 332, "tree_unflatten": 333, "tri": 313, "tri_inv": 211, "tril": 314, "triplet_loss": 457, "triu": 315, "troubleshoot": 9, "truncated_norm": 262, "tune": 503, "type": 336, "unflatten": 316, "unfreez": 398, "unifi": 512, "uniform": [263, 431], "up": [503, 507], "updat": [345, 399, 488, 506], "update_modul": 400, "upsampl": 423, "us": [1, 2, 4, 508, 513], "usag": [2, 8, 507], "util": [329, 330, 331, 332, 333, 501, 503], "valu": 345, "value_and_grad": [317, 327], "var": [81, 318], "variabl": 4, "vector": 505, "view": [82, 319], "vjp": [1, 320], "vmap": 321, "weight": 6, "what": 508, "when": 508, "where": 322, "why": 508, "workflow": 3, "x86": 9, "xcode": 3, "you": 508, "zero": 323, "zeros_lik": 324}})