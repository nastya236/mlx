Search.setIndex({"alltitles": {"A Simple Example": [[517, "a-simple-example"]], "Array": [[339, null]], "Attention layer": [[6, "attention-layer"]], "Automatic Differentiation": [[510, "automatic-differentiation"]], "Automatic Vectorization": [[510, "automatic-vectorization"]], "Basics": [[515, "basics"]], "Basics of Compile": [[507, "basics-of-compile"]], "Basics of Exporting": [[509, "basics-of-exporting"]], "Binary Size Minimization": [[9, "binary-size-minimization"]], "Binding to Python": [[2, "binding-to-python"]], "Build Options": [[9, "id4"]], "Build Requirements": [[9, "build-requirements"]], "Build and Install": [[9, null]], "Build from source": [[9, "build-from-source"]], "Building and Binding": [[2, "building-and-binding"]], "Building with CMake": [[2, "building-with-cmake"]], "Building with setuptools": [[2, "building-with-setuptools"]], "C++ API": [[9, "c-api"]], "C++ API Reference": [[8, null]], "Common Optimizers": [[501, null]], "Compilation": [[507, null]], "Compiling Training Graphs": [[507, "compiling-training-graphs"]], "Complex Example": [[1, "complex-example"]], "Conversion to NumPy and Other Frameworks": [[514, null]], "Converting the weights": [[6, "converting-the-weights"]], "Custom Extensions in MLX": [[2, null]], "Custom Metal Kernels": [[1, null]], "Data Types": [[340, null]], "Debugging": [[507, "debugging"]], "Defining a Ring": [[508, "defining-a-ring"]], "Devices and Streams": [[341, null]], "Differences from NumPy": [[511, "differences-from-numpy"]], "Distributed Communication": [[342, null], [508, null]], "Download the code": [[2, null], [6, null]], "Encoder layer": [[6, "encoder-layer"]], "Example Speedup": [[507, "example-speedup"]], "Examples": [[8, null]], "Export Functions": [[343, null]], "Exporting Functions": [[509, null]], "Exporting Modules": [[509, "exporting-modules"]], "Exporting Multiple Traces": [[509, "exporting-multiple-traces"]], "FFT": [[345, null]], "Fast": [[344, null]], "Full model": [[6, "full-model"]], "Function Transforms": [[510, null]], "Function and Graph Transformations": [[515, "function-and-graph-transformations"]], "Functions": [[475, null]], "Further Reading": [[8, null]], "Generation": [[6, "generation"]], "Getting Started": [[508, "getting-started"]], "Getting Started with MPI": [[508, "getting-started-with-mpi"]], "Getting Started with Ring": [[508, "getting-started-with-ring"]], "Grid Sample VJP": [[1, "grid-sample-vjp"]], "Implementing the CPU Back-end": [[2, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[2, "implementing-the-gpu-back-end"]], "Implementing the Primitive": [[2, "implementing-the-primitive"]], "Implementing the model": [[6, "implementing-the-model"]], "Importing Functions in C++": [[509, "importing-functions-in-c"]], "In Place Updates": [[511, "in-place-updates"]], "Indexing Arrays": [[511, null]], "Initializers": [[476, null]], "Inspecting Modules": [[349, "inspecting-modules"]], "Install": [[8, null]], "Installing MPI": [[508, "installing-mpi"]], "Introducing the Example": [[2, "introducing-the-example"]], "JAX": [[514, "jax"]], "LLM inference": [[6, null]], "Launching Distributed Programs": [[512, null]], "Layers": [[477, null]], "Lazy Evaluation": [[513, null]], "Linear Algebra": [[346, null]], "Linear Regression": [[5, null]], "Loss Functions": [[478, null]], "MLX": [[8, null]], "MPI Specifics": [[512, "mpi-specifics"]], "Memory Management": [[347, null]], "Metal": [[348, null]], "Metal Debugger": [[3, null]], "Metal not found": [[9, "metal-not-found"]], "Module": [[479, null]], "More Examples": [[509, "more-examples"]], "Multi-Layer Perceptron": [[7, null]], "Neural Networks": [[349, null]], "Only Compute What You Use": [[513, "only-compute-what-you-use"]], "Operations": [[0, null], [2, "operations"], [480, null]], "Operations and Primitives": [[2, "operations-and-primitives"]], "Optimizer": [[502, null]], "Optimizers": [[481, null]], "Package Variables": [[4, "id1"]], "Parameters": [[349, "parameters"]], "Primitive Transforms": [[2, "primitive-transforms"]], "Primitives": [[2, "primitives"]], "Providing Hosts": [[512, "providing-hosts"]], "Pure Functions": [[507, "pure-functions"]], "Putting it all together": [[6, "putting-it-all-together"]], "PyTorch": [[514, "pytorch"]], "Python API": [[9, "python-api"]], "Python API Reference": [[8, null]], "Python Installation": [[9, "python-installation"]], "Quick Start Guide": [[515, null]], "Quick Start with Neural Networks": [[349, "quick-start-with-neural-networks"]], "Random": [[504, null]], "Results": [[2, "results"]], "Ring Specifics": [[512, "ring-specifics"]], "Running Distributed Programs": [[508, "running-distributed-programs"]], "Saving and Loading": [[481, "saving-and-loading"]], "Saving and Loading Arrays": [[516, null]], "Schedulers": [[503, null]], "Scripts": [[2, "scripts"], [6, "scripts"]], "Selecting Backend": [[508, "selecting-backend"]], "Serialization Formats": [[516, "id1"]], "Setting up Remote Hosts": [[508, "setting-up-remote-hosts"], [512, "setting-up-remote-hosts"]], "Shapeless Compilation": [[507, "shapeless-compilation"]], "Shapeless Exports": [[509, "shapeless-exports"]], "Simple Example": [[1, "simple-example"]], "Specifying the Stream": [[518, "specifying-the-stream"]], "Supported Data Types": [[340, "id2"]], "TensorFlow": [[514, "tensorflow"]], "The Module Class": [[349, "the-module-class"]], "Thunderbolt Ring": [[508, "thunderbolt-ring"]], "Training Example": [[508, "training-example"]], "Transformations with Compile": [[507, "transformations-with-compile"]], "Transformations with Imported Functions": [[509, "transformations-with-imported-functions"]], "Transforming Compute Graphs": [[513, "transforming-compute-graphs"]], "Transforms": [[505, null]], "Tree Utils": [[506, null]], "Troubleshooting": [[9, "troubleshooting"], [9, "id3"]], "Tuning MPI All Reduce": [[508, "tuning-mpi-all-reduce"]], "Unified Memory": [[517, null]], "Updating the Parameters": [[349, "updating-the-parameters"]], "Usage": [[2, "usage"], [8, null], [512, "usage"]], "Using MLX in C++": [[4, null]], "Using Shape/Strides": [[1, "using-shape-strides"]], "Using Streams": [[518, null]], "Using the Primitive": [[2, "using-the-primitive"]], "Utilizing nn.average_gradients": [[508, "utilizing-nn-average-gradients"]], "Value and Grad": [[349, "value-and-grad"]], "Weight loading and benchmarking": [[6, "weight-loading-and-benchmarking"]], "When to Evaluate": [[513, "when-to-evaluate"]], "Why Lazy Evaluation": [[513, "why-lazy-evaluation"]], "Xcode Workflow": [[3, "xcode-workflow"]], "mlx.core.Device": [[10, null]], "mlx.core.Dtype": [[11, null]], "mlx.core.DtypeCategory": [[12, null]], "mlx.core.Stream": [[338, null]], "mlx.core.abs": [[13, null]], "mlx.core.add": [[14, null]], "mlx.core.addmm": [[15, null]], "mlx.core.all": [[16, null]], "mlx.core.allclose": [[17, null]], "mlx.core.any": [[18, null]], "mlx.core.arange": [[19, null]], "mlx.core.arccos": [[20, null]], "mlx.core.arccosh": [[21, null]], "mlx.core.arcsin": [[22, null]], "mlx.core.arcsinh": [[23, null]], "mlx.core.arctan": [[24, null]], "mlx.core.arctan2": [[25, null]], "mlx.core.arctanh": [[26, null]], "mlx.core.argmax": [[27, null]], "mlx.core.argmin": [[28, null]], "mlx.core.argpartition": [[29, null]], "mlx.core.argsort": [[30, null]], "mlx.core.array": [[31, null]], "mlx.core.array.T": [[32, null]], "mlx.core.array.abs": [[33, null]], "mlx.core.array.all": [[34, null]], "mlx.core.array.any": [[35, null]], "mlx.core.array.argmax": [[36, null]], "mlx.core.array.argmin": [[37, null]], "mlx.core.array.astype": [[38, null]], "mlx.core.array.at": [[39, null]], "mlx.core.array.conj": [[40, null]], "mlx.core.array.cos": [[41, null]], "mlx.core.array.cummax": [[42, null]], "mlx.core.array.cummin": [[43, null]], "mlx.core.array.cumprod": [[44, null]], "mlx.core.array.cumsum": [[45, null]], "mlx.core.array.diag": [[46, null]], "mlx.core.array.diagonal": [[47, null]], "mlx.core.array.dtype": [[48, null]], "mlx.core.array.exp": [[49, null]], "mlx.core.array.flatten": [[50, null]], "mlx.core.array.item": [[51, null]], "mlx.core.array.itemsize": [[52, null]], "mlx.core.array.log": [[53, null]], "mlx.core.array.log10": [[54, null]], "mlx.core.array.log1p": [[55, null]], "mlx.core.array.log2": [[56, null]], "mlx.core.array.logcumsumexp": [[57, null]], "mlx.core.array.logsumexp": [[58, null]], "mlx.core.array.max": [[59, null]], "mlx.core.array.mean": [[60, null]], "mlx.core.array.min": [[61, null]], "mlx.core.array.moveaxis": [[62, null]], "mlx.core.array.nbytes": [[63, null]], "mlx.core.array.ndim": [[64, null]], "mlx.core.array.prod": [[65, null]], "mlx.core.array.reciprocal": [[66, null]], "mlx.core.array.reshape": [[67, null]], "mlx.core.array.round": [[68, null]], "mlx.core.array.rsqrt": [[69, null]], "mlx.core.array.shape": [[70, null]], "mlx.core.array.sin": [[71, null]], "mlx.core.array.size": [[72, null]], "mlx.core.array.split": [[73, null]], "mlx.core.array.sqrt": [[74, null]], "mlx.core.array.square": [[75, null]], "mlx.core.array.squeeze": [[76, null]], "mlx.core.array.std": [[77, null]], "mlx.core.array.sum": [[78, null]], "mlx.core.array.swapaxes": [[79, null]], "mlx.core.array.tolist": [[80, null]], "mlx.core.array.transpose": [[81, null]], "mlx.core.array.var": [[82, null]], "mlx.core.array.view": [[83, null]], "mlx.core.array_equal": [[84, null]], "mlx.core.as_strided": [[85, null]], "mlx.core.async_eval": [[86, null]], "mlx.core.atleast_1d": [[87, null]], "mlx.core.atleast_2d": [[88, null]], "mlx.core.atleast_3d": [[89, null]], "mlx.core.bitwise_and": [[90, null]], "mlx.core.bitwise_invert": [[91, null]], "mlx.core.bitwise_or": [[92, null]], "mlx.core.bitwise_xor": [[93, null]], "mlx.core.block_masked_mm": [[94, null]], "mlx.core.broadcast_arrays": [[95, null]], "mlx.core.broadcast_to": [[96, null]], "mlx.core.ceil": [[97, null]], "mlx.core.clear_cache": [[98, null]], "mlx.core.clip": [[99, null]], "mlx.core.compile": [[100, null]], "mlx.core.concatenate": [[101, null]], "mlx.core.conj": [[102, null]], "mlx.core.conjugate": [[103, null]], "mlx.core.contiguous": [[104, null]], "mlx.core.conv1d": [[105, null]], "mlx.core.conv2d": [[106, null]], "mlx.core.conv3d": [[107, null]], "mlx.core.conv_general": [[108, null]], "mlx.core.conv_transpose1d": [[109, null]], "mlx.core.conv_transpose2d": [[110, null]], "mlx.core.conv_transpose3d": [[111, null]], "mlx.core.convolve": [[112, null]], "mlx.core.cos": [[113, null]], "mlx.core.cosh": [[114, null]], "mlx.core.cummax": [[115, null]], "mlx.core.cummin": [[116, null]], "mlx.core.cumprod": [[117, null]], "mlx.core.cumsum": [[118, null]], "mlx.core.custom_function": [[119, null]], "mlx.core.default_device": [[120, null]], "mlx.core.default_stream": [[121, null]], "mlx.core.degrees": [[122, null]], "mlx.core.dequantize": [[123, null]], "mlx.core.diag": [[124, null]], "mlx.core.diagonal": [[125, null]], "mlx.core.disable_compile": [[126, null]], "mlx.core.distributed.Group": [[127, null]], "mlx.core.distributed.all_gather": [[128, null]], "mlx.core.distributed.all_sum": [[129, null]], "mlx.core.distributed.init": [[130, null]], "mlx.core.distributed.is_available": [[131, null]], "mlx.core.distributed.recv": [[132, null]], "mlx.core.distributed.recv_like": [[133, null]], "mlx.core.distributed.send": [[134, null]], "mlx.core.divide": [[135, null]], "mlx.core.divmod": [[136, null]], "mlx.core.einsum": [[137, null]], "mlx.core.einsum_path": [[138, null]], "mlx.core.enable_compile": [[139, null]], "mlx.core.equal": [[140, null]], "mlx.core.erf": [[141, null]], "mlx.core.erfinv": [[142, null]], "mlx.core.eval": [[143, null]], "mlx.core.exp": [[144, null]], "mlx.core.expand_dims": [[145, null]], "mlx.core.expm1": [[146, null]], "mlx.core.export_function": [[147, null]], "mlx.core.export_to_dot": [[148, null]], "mlx.core.exporter": [[149, null]], "mlx.core.eye": [[150, null]], "mlx.core.fast.layer_norm": [[151, null]], "mlx.core.fast.metal_kernel": [[152, null]], "mlx.core.fast.rms_norm": [[153, null]], "mlx.core.fast.rope": [[154, null]], "mlx.core.fast.scaled_dot_product_attention": [[155, null]], "mlx.core.fft.fft": [[156, null]], "mlx.core.fft.fft2": [[157, null]], "mlx.core.fft.fftn": [[158, null]], "mlx.core.fft.fftshift": [[159, null]], "mlx.core.fft.ifft": [[160, null]], "mlx.core.fft.ifft2": [[161, null]], "mlx.core.fft.ifftn": [[162, null]], "mlx.core.fft.ifftshift": [[163, null]], "mlx.core.fft.irfft": [[164, null]], "mlx.core.fft.irfft2": [[165, null]], "mlx.core.fft.irfftn": [[166, null]], "mlx.core.fft.rfft": [[167, null]], "mlx.core.fft.rfft2": [[168, null]], "mlx.core.fft.rfftn": [[169, null]], "mlx.core.finfo": [[170, null]], "mlx.core.flatten": [[171, null]], "mlx.core.floor": [[172, null]], "mlx.core.floor_divide": [[173, null]], "mlx.core.full": [[174, null]], "mlx.core.gather_mm": [[175, null]], "mlx.core.gather_qmm": [[176, null]], "mlx.core.get_active_memory": [[177, null]], "mlx.core.get_cache_memory": [[178, null]], "mlx.core.get_peak_memory": [[179, null]], "mlx.core.grad": [[180, null]], "mlx.core.greater": [[181, null]], "mlx.core.greater_equal": [[182, null]], "mlx.core.hadamard_transform": [[183, null]], "mlx.core.identity": [[184, null]], "mlx.core.imag": [[185, null]], "mlx.core.import_function": [[186, null]], "mlx.core.inner": [[187, null]], "mlx.core.isclose": [[188, null]], "mlx.core.isfinite": [[189, null]], "mlx.core.isinf": [[190, null]], "mlx.core.isnan": [[191, null]], "mlx.core.isneginf": [[192, null]], "mlx.core.isposinf": [[193, null]], "mlx.core.issubdtype": [[194, null]], "mlx.core.jvp": [[195, null]], "mlx.core.kron": [[196, null]], "mlx.core.left_shift": [[197, null]], "mlx.core.less": [[198, null]], "mlx.core.less_equal": [[199, null]], "mlx.core.linalg.cholesky": [[200, null]], "mlx.core.linalg.cholesky_inv": [[201, null]], "mlx.core.linalg.cross": [[202, null]], "mlx.core.linalg.eigh": [[203, null]], "mlx.core.linalg.eigvalsh": [[204, null]], "mlx.core.linalg.inv": [[205, null]], "mlx.core.linalg.lu": [[206, null]], "mlx.core.linalg.lu_factor": [[207, null]], "mlx.core.linalg.norm": [[208, null]], "mlx.core.linalg.pinv": [[209, null]], "mlx.core.linalg.qr": [[210, null]], "mlx.core.linalg.solve": [[211, null]], "mlx.core.linalg.solve_triangular": [[212, null]], "mlx.core.linalg.svd": [[213, null]], "mlx.core.linalg.tri_inv": [[214, null]], "mlx.core.linspace": [[215, null]], "mlx.core.load": [[216, null]], "mlx.core.log": [[217, null]], "mlx.core.log10": [[218, null]], "mlx.core.log1p": [[219, null]], "mlx.core.log2": [[220, null]], "mlx.core.logaddexp": [[221, null]], "mlx.core.logcumsumexp": [[222, null]], "mlx.core.logical_and": [[223, null]], "mlx.core.logical_not": [[224, null]], "mlx.core.logical_or": [[225, null]], "mlx.core.logsumexp": [[226, null]], "mlx.core.matmul": [[227, null]], "mlx.core.max": [[228, null]], "mlx.core.maximum": [[229, null]], "mlx.core.mean": [[230, null]], "mlx.core.meshgrid": [[231, null]], "mlx.core.metal.device_info": [[232, null]], "mlx.core.metal.is_available": [[233, null]], "mlx.core.metal.start_capture": [[234, null]], "mlx.core.metal.stop_capture": [[235, null]], "mlx.core.min": [[236, null]], "mlx.core.minimum": [[237, null]], "mlx.core.moveaxis": [[238, null]], "mlx.core.multiply": [[239, null]], "mlx.core.nan_to_num": [[240, null]], "mlx.core.negative": [[241, null]], "mlx.core.new_stream": [[242, null]], "mlx.core.not_equal": [[243, null]], "mlx.core.ones": [[244, null]], "mlx.core.ones_like": [[245, null]], "mlx.core.outer": [[246, null]], "mlx.core.pad": [[247, null]], "mlx.core.partition": [[248, null]], "mlx.core.power": [[249, null]], "mlx.core.prod": [[250, null]], "mlx.core.put_along_axis": [[251, null]], "mlx.core.quantize": [[252, null]], "mlx.core.quantized_matmul": [[253, null]], "mlx.core.radians": [[254, null]], "mlx.core.random.bernoulli": [[255, null]], "mlx.core.random.categorical": [[256, null]], "mlx.core.random.gumbel": [[257, null]], "mlx.core.random.key": [[258, null]], "mlx.core.random.laplace": [[259, null]], "mlx.core.random.multivariate_normal": [[260, null]], "mlx.core.random.normal": [[261, null]], "mlx.core.random.permutation": [[262, null]], "mlx.core.random.randint": [[263, null]], "mlx.core.random.seed": [[264, null]], "mlx.core.random.split": [[265, null]], "mlx.core.random.truncated_normal": [[266, null]], "mlx.core.random.uniform": [[267, null]], "mlx.core.real": [[268, null]], "mlx.core.reciprocal": [[269, null]], "mlx.core.remainder": [[270, null]], "mlx.core.repeat": [[271, null]], "mlx.core.reset_peak_memory": [[272, null]], "mlx.core.reshape": [[273, null]], "mlx.core.right_shift": [[274, null]], "mlx.core.roll": [[275, null]], "mlx.core.round": [[276, null]], "mlx.core.rsqrt": [[277, null]], "mlx.core.save": [[278, null]], "mlx.core.save_gguf": [[279, null]], "mlx.core.save_safetensors": [[280, null]], "mlx.core.savez": [[281, null]], "mlx.core.savez_compressed": [[282, null]], "mlx.core.set_cache_limit": [[283, null]], "mlx.core.set_default_device": [[284, null]], "mlx.core.set_default_stream": [[285, null]], "mlx.core.set_memory_limit": [[286, null]], "mlx.core.set_wired_limit": [[287, null]], "mlx.core.sigmoid": [[288, null]], "mlx.core.sign": [[289, null]], "mlx.core.sin": [[290, null]], "mlx.core.sinh": [[291, null]], "mlx.core.slice": [[292, null]], "mlx.core.slice_update": [[293, null]], "mlx.core.softmax": [[294, null]], "mlx.core.sort": [[295, null]], "mlx.core.split": [[296, null]], "mlx.core.sqrt": [[297, null]], "mlx.core.square": [[298, null]], "mlx.core.squeeze": [[299, null]], "mlx.core.stack": [[300, null]], "mlx.core.std": [[301, null]], "mlx.core.stop_gradient": [[302, null]], "mlx.core.stream": [[303, null]], "mlx.core.subtract": [[304, null]], "mlx.core.sum": [[305, null]], "mlx.core.swapaxes": [[306, null]], "mlx.core.synchronize": [[307, null]], "mlx.core.take": [[308, null]], "mlx.core.take_along_axis": [[309, null]], "mlx.core.tan": [[310, null]], "mlx.core.tanh": [[311, null]], "mlx.core.tensordot": [[312, null]], "mlx.core.tile": [[313, null]], "mlx.core.topk": [[314, null]], "mlx.core.trace": [[315, null]], "mlx.core.transpose": [[316, null]], "mlx.core.tri": [[317, null]], "mlx.core.tril": [[318, null]], "mlx.core.triu": [[319, null]], "mlx.core.unflatten": [[320, null]], "mlx.core.value_and_grad": [[321, null]], "mlx.core.var": [[322, null]], "mlx.core.view": [[323, null]], "mlx.core.vjp": [[324, null]], "mlx.core.vmap": [[325, null]], "mlx.core.where": [[326, null]], "mlx.core.zeros": [[327, null]], "mlx.core.zeros_like": [[328, null]], "mlx.nn.ALiBi": [[350, null]], "mlx.nn.AvgPool1d": [[351, null]], "mlx.nn.AvgPool2d": [[352, null]], "mlx.nn.AvgPool3d": [[353, null]], "mlx.nn.BatchNorm": [[354, null]], "mlx.nn.CELU": [[355, null]], "mlx.nn.Conv1d": [[356, null]], "mlx.nn.Conv2d": [[357, null]], "mlx.nn.Conv3d": [[358, null]], "mlx.nn.ConvTranspose1d": [[359, null]], "mlx.nn.ConvTranspose2d": [[360, null]], "mlx.nn.ConvTranspose3d": [[361, null]], "mlx.nn.Dropout": [[362, null]], "mlx.nn.Dropout2d": [[363, null]], "mlx.nn.Dropout3d": [[364, null]], "mlx.nn.ELU": [[365, null]], "mlx.nn.Embedding": [[366, null]], "mlx.nn.GELU": [[367, null]], "mlx.nn.GLU": [[368, null]], "mlx.nn.GRU": [[369, null]], "mlx.nn.GroupNorm": [[370, null]], "mlx.nn.HardShrink": [[371, null]], "mlx.nn.HardTanh": [[372, null]], "mlx.nn.Hardswish": [[373, null]], "mlx.nn.InstanceNorm": [[374, null]], "mlx.nn.LSTM": [[375, null]], "mlx.nn.LayerNorm": [[376, null]], "mlx.nn.LeakyReLU": [[377, null]], "mlx.nn.Linear": [[378, null]], "mlx.nn.LogSigmoid": [[379, null]], "mlx.nn.LogSoftmax": [[380, null]], "mlx.nn.MaxPool1d": [[381, null]], "mlx.nn.MaxPool2d": [[382, null]], "mlx.nn.MaxPool3d": [[383, null]], "mlx.nn.Mish": [[384, null]], "mlx.nn.Module.apply": [[385, null]], "mlx.nn.Module.apply_to_modules": [[386, null]], "mlx.nn.Module.children": [[387, null]], "mlx.nn.Module.eval": [[388, null]], "mlx.nn.Module.filter_and_map": [[389, null]], "mlx.nn.Module.freeze": [[390, null]], "mlx.nn.Module.leaf_modules": [[391, null]], "mlx.nn.Module.load_weights": [[392, null]], "mlx.nn.Module.modules": [[393, null]], "mlx.nn.Module.named_modules": [[394, null]], "mlx.nn.Module.parameters": [[395, null]], "mlx.nn.Module.save_weights": [[396, null]], "mlx.nn.Module.set_dtype": [[397, null]], "mlx.nn.Module.state": [[398, null]], "mlx.nn.Module.train": [[399, null]], "mlx.nn.Module.trainable_parameters": [[400, null]], "mlx.nn.Module.training": [[401, null]], "mlx.nn.Module.unfreeze": [[402, null]], "mlx.nn.Module.update": [[403, null]], "mlx.nn.Module.update_modules": [[404, null]], "mlx.nn.MultiHeadAttention": [[405, null]], "mlx.nn.PReLU": [[406, null]], "mlx.nn.QuantizedEmbedding": [[407, null]], "mlx.nn.QuantizedLinear": [[408, null]], "mlx.nn.RMSNorm": [[409, null]], "mlx.nn.RNN": [[410, null]], "mlx.nn.ReLU": [[411, null]], "mlx.nn.ReLU6": [[412, null]], "mlx.nn.RoPE": [[413, null]], "mlx.nn.SELU": [[414, null]], "mlx.nn.Sequential": [[415, null]], "mlx.nn.SiLU": [[416, null]], "mlx.nn.Sigmoid": [[417, null]], "mlx.nn.SinusoidalPositionalEncoding": [[418, null]], "mlx.nn.Softmax": [[419, null]], "mlx.nn.Softmin": [[420, null]], "mlx.nn.Softplus": [[421, null]], "mlx.nn.Softshrink": [[422, null]], "mlx.nn.Softsign": [[423, null]], "mlx.nn.Step": [[424, null]], "mlx.nn.Tanh": [[425, null]], "mlx.nn.Transformer": [[426, null]], "mlx.nn.Upsample": [[427, null]], "mlx.nn.average_gradients": [[329, null]], "mlx.nn.celu": [[436, null]], "mlx.nn.elu": [[437, null]], "mlx.nn.gelu": [[438, null]], "mlx.nn.gelu_approx": [[439, null]], "mlx.nn.gelu_fast_approx": [[440, null]], "mlx.nn.glu": [[441, null]], "mlx.nn.hard_shrink": [[442, null]], "mlx.nn.hard_tanh": [[443, null]], "mlx.nn.hardswish": [[444, null]], "mlx.nn.init.constant": [[428, null]], "mlx.nn.init.glorot_normal": [[429, null]], "mlx.nn.init.glorot_uniform": [[430, null]], "mlx.nn.init.he_normal": [[431, null]], "mlx.nn.init.he_uniform": [[432, null]], "mlx.nn.init.identity": [[433, null]], "mlx.nn.init.normal": [[434, null]], "mlx.nn.init.uniform": [[435, null]], "mlx.nn.leaky_relu": [[445, null]], "mlx.nn.log_sigmoid": [[446, null]], "mlx.nn.log_softmax": [[447, null]], "mlx.nn.losses.binary_cross_entropy": [[448, null]], "mlx.nn.losses.cosine_similarity_loss": [[449, null]], "mlx.nn.losses.cross_entropy": [[450, null]], "mlx.nn.losses.gaussian_nll_loss": [[451, null]], "mlx.nn.losses.hinge_loss": [[452, null]], "mlx.nn.losses.huber_loss": [[453, null]], "mlx.nn.losses.kl_div_loss": [[454, null]], "mlx.nn.losses.l1_loss": [[455, null]], "mlx.nn.losses.log_cosh_loss": [[456, null]], "mlx.nn.losses.margin_ranking_loss": [[457, null]], "mlx.nn.losses.mse_loss": [[458, null]], "mlx.nn.losses.nll_loss": [[459, null]], "mlx.nn.losses.smooth_l1_loss": [[460, null]], "mlx.nn.losses.triplet_loss": [[461, null]], "mlx.nn.mish": [[462, null]], "mlx.nn.prelu": [[463, null]], "mlx.nn.quantize": [[330, null]], "mlx.nn.relu": [[464, null]], "mlx.nn.relu6": [[465, null]], "mlx.nn.selu": [[466, null]], "mlx.nn.sigmoid": [[467, null]], "mlx.nn.silu": [[468, null]], "mlx.nn.softmax": [[469, null]], "mlx.nn.softmin": [[470, null]], "mlx.nn.softplus": [[471, null]], "mlx.nn.softshrink": [[472, null]], "mlx.nn.step": [[473, null]], "mlx.nn.tanh": [[474, null]], "mlx.nn.value_and_grad": [[331, null]], "mlx.optimizers.AdaDelta": [[482, null]], "mlx.optimizers.Adafactor": [[483, null]], "mlx.optimizers.Adagrad": [[484, null]], "mlx.optimizers.Adam": [[485, null]], "mlx.optimizers.AdamW": [[486, null]], "mlx.optimizers.Adamax": [[487, null]], "mlx.optimizers.Lion": [[488, null]], "mlx.optimizers.MultiOptimizer": [[489, null]], "mlx.optimizers.Optimizer.apply_gradients": [[490, null]], "mlx.optimizers.Optimizer.init": [[491, null]], "mlx.optimizers.Optimizer.state": [[492, null]], "mlx.optimizers.Optimizer.update": [[493, null]], "mlx.optimizers.RMSprop": [[494, null]], "mlx.optimizers.SGD": [[495, null]], "mlx.optimizers.clip_grad_norm": [[332, null]], "mlx.optimizers.cosine_decay": [[496, null]], "mlx.optimizers.exponential_decay": [[497, null]], "mlx.optimizers.join_schedules": [[498, null]], "mlx.optimizers.linear_schedule": [[499, null]], "mlx.optimizers.step_decay": [[500, null]], "mlx.utils.tree_flatten": [[333, null]], "mlx.utils.tree_map": [[334, null]], "mlx.utils.tree_map_with_path": [[335, null]], "mlx.utils.tree_reduce": [[336, null]], "mlx.utils.tree_unflatten": [[337, null]], "x86 Shell": [[9, "x86-shell"]]}, "docnames": ["cpp/ops", "dev/custom_metal_kernels", "dev/extensions", "dev/metal_debugger", "dev/mlx_in_cpp", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.conj", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logcumsumexp", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.std", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array.view", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.async_eval", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_invert", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.broadcast_arrays", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clear_cache", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.contiguous", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv3d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.conv_transpose1d", "python/_autosummary/mlx.core.conv_transpose2d", "python/_autosummary/mlx.core.conv_transpose3d", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.custom_function", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.distributed.Group", "python/_autosummary/mlx.core.distributed.all_gather", "python/_autosummary/mlx.core.distributed.all_sum", "python/_autosummary/mlx.core.distributed.init", "python/_autosummary/mlx.core.distributed.is_available", "python/_autosummary/mlx.core.distributed.recv", "python/_autosummary/mlx.core.distributed.recv_like", "python/_autosummary/mlx.core.distributed.send", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.einsum", "python/_autosummary/mlx.core.einsum_path", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.export_function", "python/_autosummary/mlx.core.export_to_dot", "python/_autosummary/mlx.core.exporter", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.metal_kernel", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.fftshift", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.ifftshift", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.finfo", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.get_active_memory", "python/_autosummary/mlx.core.get_cache_memory", "python/_autosummary/mlx.core.get_peak_memory", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.hadamard_transform", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.imag", "python/_autosummary/mlx.core.import_function", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isfinite", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.kron", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.cholesky_inv", "python/_autosummary/mlx.core.linalg.cross", "python/_autosummary/mlx.core.linalg.eigh", "python/_autosummary/mlx.core.linalg.eigvalsh", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.lu", "python/_autosummary/mlx.core.linalg.lu_factor", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.pinv", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.solve", "python/_autosummary/mlx.core.linalg.solve_triangular", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linalg.tri_inv", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logcumsumexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.nan_to_num", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.put_along_axis", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.laplace", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.permutation", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.real", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reset_peak_memory", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.roll", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_cache_limit", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.set_memory_limit", "python/_autosummary/mlx.core.set_wired_limit", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.slice", "python/_autosummary/mlx.core.slice_update", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.unflatten", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.view", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.average_gradients", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/distributed", "python/export", "python/fast", "python/fft", "python/linalg", "python/memory_management", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.AvgPool3d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.CELU", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.ConvTranspose1d", "python/nn/_autosummary/mlx.nn.ConvTranspose2d", "python/nn/_autosummary/mlx.nn.ConvTranspose3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.ELU", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GLU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.HardShrink", "python/nn/_autosummary/mlx.nn.HardTanh", "python/nn/_autosummary/mlx.nn.Hardswish", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.LeakyReLU", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.LogSigmoid", "python/nn/_autosummary/mlx.nn.LogSoftmax", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.MaxPool3d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.ReLU6", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.Sigmoid", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softmax", "python/nn/_autosummary/mlx.nn.Softmin", "python/nn/_autosummary/mlx.nn.Softplus", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Softsign", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Tanh", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.celu", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hard_shrink", "python/nn/_autosummary_functions/mlx.nn.hard_tanh", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softmin", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.MultiOptimizer", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/distributed", "usage/export", "usage/function_transforms", "usage/indexing", "usage/launching_distributed", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["cpp/ops.rst", "dev/custom_metal_kernels.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "dev/mlx_in_cpp.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.conj.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logcumsumexp.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.std.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array.view.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.async_eval.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_invert.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.broadcast_arrays.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clear_cache.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.contiguous.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv3d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.conv_transpose1d.rst", "python/_autosummary/mlx.core.conv_transpose2d.rst", "python/_autosummary/mlx.core.conv_transpose3d.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.custom_function.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.distributed.Group.rst", "python/_autosummary/mlx.core.distributed.all_gather.rst", "python/_autosummary/mlx.core.distributed.all_sum.rst", "python/_autosummary/mlx.core.distributed.init.rst", "python/_autosummary/mlx.core.distributed.is_available.rst", "python/_autosummary/mlx.core.distributed.recv.rst", "python/_autosummary/mlx.core.distributed.recv_like.rst", "python/_autosummary/mlx.core.distributed.send.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.einsum.rst", "python/_autosummary/mlx.core.einsum_path.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.export_function.rst", "python/_autosummary/mlx.core.export_to_dot.rst", "python/_autosummary/mlx.core.exporter.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.metal_kernel.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.fftshift.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.ifftshift.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.finfo.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.get_active_memory.rst", "python/_autosummary/mlx.core.get_cache_memory.rst", "python/_autosummary/mlx.core.get_peak_memory.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.hadamard_transform.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.imag.rst", "python/_autosummary/mlx.core.import_function.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isfinite.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.kron.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.cholesky_inv.rst", "python/_autosummary/mlx.core.linalg.cross.rst", "python/_autosummary/mlx.core.linalg.eigh.rst", "python/_autosummary/mlx.core.linalg.eigvalsh.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.lu.rst", "python/_autosummary/mlx.core.linalg.lu_factor.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.pinv.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.solve.rst", "python/_autosummary/mlx.core.linalg.solve_triangular.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linalg.tri_inv.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logcumsumexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.nan_to_num.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.put_along_axis.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.laplace.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.permutation.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.real.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reset_peak_memory.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.roll.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_cache_limit.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.set_memory_limit.rst", "python/_autosummary/mlx.core.set_wired_limit.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.slice.rst", "python/_autosummary/mlx.core.slice_update.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.unflatten.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.view.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.average_gradients.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/distributed.rst", "python/export.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/memory_management.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.AvgPool3d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.CELU.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose1d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose2d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.ELU.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GLU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.HardShrink.rst", "python/nn/_autosummary/mlx.nn.HardTanh.rst", "python/nn/_autosummary/mlx.nn.Hardswish.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.LeakyReLU.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.LogSigmoid.rst", "python/nn/_autosummary/mlx.nn.LogSoftmax.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.MaxPool3d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.ReLU6.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.Sigmoid.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softmax.rst", "python/nn/_autosummary/mlx.nn.Softmin.rst", "python/nn/_autosummary/mlx.nn.Softplus.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Softsign.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Tanh.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.celu.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hard_shrink.rst", "python/nn/_autosummary_functions/mlx.nn.hard_tanh.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softmin.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.MultiOptimizer.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/distributed.rst", "usage/export.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/launching_distributed.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "indexentries": {"__init__() (array method)": [[31, "mlx.core.array.__init__", false]], "__init__() (custom_function method)": [[119, "mlx.core.custom_function.__init__", false]], "__init__() (device method)": [[10, "mlx.core.Device.__init__", false]], "__init__() (dtype method)": [[11, "mlx.core.Dtype.__init__", false]], "__init__() (dtypecategory method)": [[12, "mlx.core.DtypeCategory.__init__", false]], "__init__() (finfo method)": [[170, "mlx.core.finfo.__init__", false]], "__init__() (group method)": [[127, "mlx.core.distributed.Group.__init__", false]], "__init__() (stream method)": [[338, "mlx.core.Stream.__init__", false]], "abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice", false]], "abs() (array method)": [[33, "mlx.core.array.abs", false]], "abs() (in module mlx.core)": [[13, "mlx.core.abs", false]], "adadelta (class in mlx.optimizers)": [[482, "mlx.optimizers.AdaDelta", false]], "adafactor (class in mlx.optimizers)": [[483, "mlx.optimizers.Adafactor", false]], "adagrad (class in mlx.optimizers)": [[484, "mlx.optimizers.Adagrad", false]], "adam (class in mlx.optimizers)": [[485, "mlx.optimizers.Adam", false]], "adamax (class in mlx.optimizers)": [[487, "mlx.optimizers.Adamax", false]], "adamw (class in mlx.optimizers)": [[486, "mlx.optimizers.AdamW", false]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice", false]], "add() (in module mlx.core)": [[14, "mlx.core.add", false]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", false]], "addmm() (in module mlx.core)": [[15, "mlx.core.addmm", false]], "alibi (class in mlx.nn)": [[350, "mlx.nn.ALiBi", false]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice", false], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayib14StreamOrDevice", false]], "all() (array method)": [[34, "mlx.core.array.all", false]], "all() (in module mlx.core)": [[16, "mlx.core.all", false]], "all_gather() (in module mlx.core.distributed)": [[128, "mlx.core.distributed.all_gather", false]], "all_sum() (in module mlx.core.distributed)": [[129, "mlx.core.distributed.all_sum", false]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "allclose() (in module mlx.core)": [[17, "mlx.core.allclose", false]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayib14StreamOrDevice", false]], "any() (array method)": [[35, "mlx.core.array.any", false]], "any() (in module mlx.core)": [[18, "mlx.core.any", false]], "apply() (module method)": [[385, "mlx.nn.Module.apply", false]], "apply_gradients() (optimizer method)": [[490, "mlx.optimizers.Optimizer.apply_gradients", false]], "apply_to_modules() (module method)": [[386, "mlx.nn.Module.apply_to_modules", false]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice", false], [0, "_CPPv46aranged5Dtype14StreamOrDevice", false], [0, "_CPPv46arangedd14StreamOrDevice", false], [0, "_CPPv46arangedd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangeddd14StreamOrDevice", false], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangei14StreamOrDevice", false], [0, "_CPPv46arangeii14StreamOrDevice", false], [0, "_CPPv46arangeiii14StreamOrDevice", false]], "arange() (in module mlx.core)": [[19, "mlx.core.arange", false]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice", false]], "arccos() (in module mlx.core)": [[20, "mlx.core.arccos", false]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice", false]], "arccosh() (in module mlx.core)": [[21, "mlx.core.arccosh", false]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice", false]], "arcsin() (in module mlx.core)": [[22, "mlx.core.arcsin", false]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice", false]], "arcsinh() (in module mlx.core)": [[23, "mlx.core.arcsinh", false]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice", false]], "arctan() (in module mlx.core)": [[24, "mlx.core.arctan", false]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", false]], "arctan2() (in module mlx.core)": [[25, "mlx.core.arctan2", false]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice", false]], "arctanh() (in module mlx.core)": [[26, "mlx.core.arctanh", false]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice", false]], "argmax() (array method)": [[36, "mlx.core.array.argmax", false]], "argmax() (in module mlx.core)": [[27, "mlx.core.argmax", false]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayib14StreamOrDevice", false]], "argmin() (array method)": [[37, "mlx.core.array.argmin", false]], "argmin() (in module mlx.core)": [[28, "mlx.core.argmin", false]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", false]], "argpartition() (in module mlx.core)": [[29, "mlx.core.argpartition", false]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice", false], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice", false]], "argsort() (in module mlx.core)": [[30, "mlx.core.argsort", false]], "array (class in mlx.core)": [[31, "mlx.core.array", false]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", false]], "array_equal() (in module mlx.core)": [[84, "mlx.core.array_equal", false]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", false]], "as_strided() (in module mlx.core)": [[85, "mlx.core.as_strided", false]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice", false]], "astype() (array method)": [[38, "mlx.core.array.astype", false]], "async_eval() (in module mlx.core)": [[86, "mlx.core.async_eval", false]], "at (array property)": [[39, "mlx.core.array.at", false]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_1d() (in module mlx.core)": [[87, "mlx.core.atleast_1d", false]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_2d() (in module mlx.core)": [[88, "mlx.core.atleast_2d", false]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_3d() (in module mlx.core)": [[89, "mlx.core.atleast_3d", false]], "average_gradients() (in module mlx.nn)": [[329, "mlx.nn.average_gradients", false]], "avgpool1d (class in mlx.nn)": [[351, "mlx.nn.AvgPool1d", false]], "avgpool2d (class in mlx.nn)": [[352, "mlx.nn.AvgPool2d", false]], "avgpool3d (class in mlx.nn)": [[353, "mlx.nn.AvgPool3d", false]], "batchnorm (class in mlx.nn)": [[354, "mlx.nn.BatchNorm", false]], "bernoulli() (in module mlx.core.random)": [[255, "mlx.core.random.bernoulli", false]], "binary_cross_entropy (class in mlx.nn.losses)": [[448, "mlx.nn.losses.binary_cross_entropy", false]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", false]], "bitwise_and() (in module mlx.core)": [[90, "mlx.core.bitwise_and", false]], "bitwise_invert (c++ function)": [[0, "_CPPv414bitwise_invertRK5array14StreamOrDevice", false]], "bitwise_invert() (in module mlx.core)": [[91, "mlx.core.bitwise_invert", false]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", false]], "bitwise_or() (in module mlx.core)": [[92, "mlx.core.bitwise_or", false]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", false]], "bitwise_xor() (in module mlx.core)": [[93, "mlx.core.bitwise_xor", false]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", false]], "block_masked_mm() (in module mlx.core)": [[94, "mlx.core.block_masked_mm", false]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "broadcast_arrays() (in module mlx.core)": [[95, "mlx.core.broadcast_arrays", false]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", false]], "broadcast_to() (in module mlx.core)": [[96, "mlx.core.broadcast_to", false]], "categorical() (in module mlx.core.random)": [[256, "mlx.core.random.categorical", false]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice", false]], "ceil() (in module mlx.core)": [[97, "mlx.core.ceil", false]], "celu (class in mlx.nn)": [[355, "mlx.nn.CELU", false], [436, "mlx.nn.celu", false]], "children() (module method)": [[387, "mlx.nn.Module.children", false]], "cholesky() (in module mlx.core.linalg)": [[200, "mlx.core.linalg.cholesky", false]], "cholesky_inv() (in module mlx.core.linalg)": [[201, "mlx.core.linalg.cholesky_inv", false]], "clear_cache() (in module mlx.core)": [[98, "mlx.core.clear_cache", false]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", false]], "clip() (in module mlx.core)": [[99, "mlx.core.clip", false]], "clip_grad_norm() (in module mlx.optimizers)": [[332, "mlx.optimizers.clip_grad_norm", false]], "compile() (in module mlx.core)": [[100, "mlx.core.compile", false]], "concatenate (c++ function)": [[0, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", false]], "concatenate() (in module mlx.core)": [[101, "mlx.core.concatenate", false]], "conj() (array method)": [[40, "mlx.core.array.conj", false]], "conj() (in module mlx.core)": [[102, "mlx.core.conj", false]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice", false]], "conjugate() (in module mlx.core)": [[103, "mlx.core.conjugate", false]], "constant() (in module mlx.nn.init)": [[428, "mlx.nn.init.constant", false]], "contiguous (c++ function)": [[0, "_CPPv410contiguousRK5arrayb14StreamOrDevice", false]], "contiguous() (in module mlx.core)": [[104, "mlx.core.contiguous", false]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", false]], "conv1d (class in mlx.nn)": [[356, "mlx.nn.Conv1d", false]], "conv1d() (in module mlx.core)": [[105, "mlx.core.conv1d", false]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv2d (class in mlx.nn)": [[357, "mlx.nn.Conv2d", false]], "conv2d() (in module mlx.core)": [[106, "mlx.core.conv2d", false]], "conv3d (c++ function)": [[0, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "conv3d (class in mlx.nn)": [[358, "mlx.nn.Conv3d", false]], "conv3d() (in module mlx.core)": [[107, "mlx.core.conv3d", false]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false]], "conv_general() (in module mlx.core)": [[108, "mlx.core.conv_general", false]], "conv_transpose1d (c++ function)": [[0, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", false]], "conv_transpose1d() (in module mlx.core)": [[109, "mlx.core.conv_transpose1d", false]], "conv_transpose2d (c++ function)": [[0, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv_transpose2d() (in module mlx.core)": [[110, "mlx.core.conv_transpose2d", false]], "conv_transpose3d (c++ function)": [[0, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "conv_transpose3d() (in module mlx.core)": [[111, "mlx.core.conv_transpose3d", false]], "convolve() (in module mlx.core)": [[112, "mlx.core.convolve", false]], "convtranspose1d (class in mlx.nn)": [[359, "mlx.nn.ConvTranspose1d", false]], "convtranspose2d (class in mlx.nn)": [[360, "mlx.nn.ConvTranspose2d", false]], "convtranspose3d (class in mlx.nn)": [[361, "mlx.nn.ConvTranspose3d", false]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice", false]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice", false]], "cos() (array method)": [[41, "mlx.core.array.cos", false]], "cos() (in module mlx.core)": [[113, "mlx.core.cos", false]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice", false]], "cosh() (in module mlx.core)": [[114, "mlx.core.cosh", false]], "cosine_decay() (in module mlx.optimizers)": [[496, "mlx.optimizers.cosine_decay", false]], "cosine_similarity_loss (class in mlx.nn.losses)": [[449, "mlx.nn.losses.cosine_similarity_loss", false]], "cross() (in module mlx.core.linalg)": [[202, "mlx.core.linalg.cross", false]], "cross_entropy (class in mlx.nn.losses)": [[450, "mlx.nn.losses.cross_entropy", false]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", false]], "cummax() (array method)": [[42, "mlx.core.array.cummax", false]], "cummax() (in module mlx.core)": [[115, "mlx.core.cummax", false]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice", false]], "cummin() (array method)": [[43, "mlx.core.array.cummin", false]], "cummin() (in module mlx.core)": [[116, "mlx.core.cummin", false]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", false]], "cumprod() (array method)": [[44, "mlx.core.array.cumprod", false]], "cumprod() (in module mlx.core)": [[117, "mlx.core.cumprod", false]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", false]], "cumsum() (array method)": [[45, "mlx.core.array.cumsum", false]], "cumsum() (in module mlx.core)": [[118, "mlx.core.cumsum", false]], "custom_function (class in mlx.core)": [[119, "mlx.core.custom_function", false]], "default_device() (in module mlx.core)": [[120, "mlx.core.default_device", false]], "default_stream() (in module mlx.core)": [[121, "mlx.core.default_stream", false]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice", false]], "degrees() (in module mlx.core)": [[122, "mlx.core.degrees", false]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", false]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", false]], "dequantize() (in module mlx.core)": [[123, "mlx.core.dequantize", false]], "device (class in mlx.core)": [[10, "mlx.core.Device", false]], "device_info() (in module mlx.core.metal)": [[232, "mlx.core.metal.device_info", false]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice", false]], "diag() (array method)": [[46, "mlx.core.array.diag", false]], "diag() (in module mlx.core)": [[124, "mlx.core.diag", false]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", false]], "diagonal() (array method)": [[47, "mlx.core.array.diagonal", false]], "diagonal() (in module mlx.core)": [[125, "mlx.core.diagonal", false]], "disable_compile() (in module mlx.core)": [[126, "mlx.core.disable_compile", false]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", false]], "divide() (in module mlx.core)": [[135, "mlx.core.divide", false]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", false]], "divmod() (in module mlx.core)": [[136, "mlx.core.divmod", false]], "dropout (class in mlx.nn)": [[362, "mlx.nn.Dropout", false]], "dropout2d (class in mlx.nn)": [[363, "mlx.nn.Dropout2d", false]], "dropout3d (class in mlx.nn)": [[364, "mlx.nn.Dropout3d", false]], "dtype (array property)": [[48, "mlx.core.array.dtype", false]], "dtype (class in mlx.core)": [[11, "mlx.core.Dtype", false]], "dtypecategory (class in mlx.core)": [[12, "mlx.core.DtypeCategory", false]], "eigh() (in module mlx.core.linalg)": [[203, "mlx.core.linalg.eigh", false]], "eigvalsh() (in module mlx.core.linalg)": [[204, "mlx.core.linalg.eigvalsh", false]], "einsum() (in module mlx.core)": [[137, "mlx.core.einsum", false]], "einsum_path() (in module mlx.core)": [[138, "mlx.core.einsum_path", false]], "elu (class in mlx.nn)": [[365, "mlx.nn.ELU", false], [437, "mlx.nn.elu", false]], "embedding (class in mlx.nn)": [[366, "mlx.nn.Embedding", false]], "enable_compile() (in module mlx.core)": [[139, "mlx.core.enable_compile", false]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", false]], "equal() (in module mlx.core)": [[140, "mlx.core.equal", false]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice", false]], "erf() (in module mlx.core)": [[141, "mlx.core.erf", false]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice", false]], "erfinv() (in module mlx.core)": [[142, "mlx.core.erfinv", false]], "eval() (in module mlx.core)": [[143, "mlx.core.eval", false]], "eval() (module method)": [[388, "mlx.nn.Module.eval", false]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice", false]], "exp() (array method)": [[49, "mlx.core.array.exp", false]], "exp() (in module mlx.core)": [[144, "mlx.core.exp", false]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", false]], "expand_dims() (in module mlx.core)": [[145, "mlx.core.expand_dims", false]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice", false]], "expm1() (in module mlx.core)": [[146, "mlx.core.expm1", false]], "exponential_decay() (in module mlx.optimizers)": [[497, "mlx.optimizers.exponential_decay", false]], "export_function() (in module mlx.core)": [[147, "mlx.core.export_function", false]], "export_to_dot() (in module mlx.core)": [[148, "mlx.core.export_to_dot", false]], "exporter() (in module mlx.core)": [[149, "mlx.core.exporter", false]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice", false], [0, "_CPPv43eyei5Dtype14StreamOrDevice", false], [0, "_CPPv43eyeii14StreamOrDevice", false], [0, "_CPPv43eyeiii14StreamOrDevice", false], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice", false]], "eye() (in module mlx.core)": [[150, "mlx.core.eye", false]], "fft() (in module mlx.core.fft)": [[156, "mlx.core.fft.fft", false]], "fft2() (in module mlx.core.fft)": [[157, "mlx.core.fft.fft2", false]], "fftn() (in module mlx.core.fft)": [[158, "mlx.core.fft.fftn", false]], "fftshift() (in module mlx.core.fft)": [[159, "mlx.core.fft.fftshift", false]], "filter_and_map() (module method)": [[389, "mlx.nn.Module.filter_and_map", false]], "finfo (class in mlx.core)": [[170, "mlx.core.finfo", false]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice", false], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice", false]], "flatten() (array method)": [[50, "mlx.core.array.flatten", false]], "flatten() (in module mlx.core)": [[171, "mlx.core.flatten", false]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice", false]], "floor() (in module mlx.core)": [[172, "mlx.core.floor", false]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", false]], "floor_divide() (in module mlx.core)": [[173, "mlx.core.floor_divide", false]], "freeze() (module method)": [[390, "mlx.nn.Module.freeze", false]], "full (c++ function)": [[0, "_CPPv44full5Shape5array14StreamOrDevice", false], [0, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", false], [0, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", false], [0, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", false]], "full() (in module mlx.core)": [[174, "mlx.core.full", false]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", false], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", false]], "gather_mm (c++ function)": [[0, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", false]], "gather_mm() (in module mlx.core)": [[175, "mlx.core.gather_mm", false]], "gather_qmm (c++ function)": [[0, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", false]], "gather_qmm() (in module mlx.core)": [[176, "mlx.core.gather_qmm", false]], "gaussian_nll_loss (class in mlx.nn.losses)": [[451, "mlx.nn.losses.gaussian_nll_loss", false]], "gelu (class in mlx.nn)": [[367, "mlx.nn.GELU", false], [438, "mlx.nn.gelu", false]], "gelu_approx (class in mlx.nn)": [[439, "mlx.nn.gelu_approx", false]], "gelu_fast_approx (class in mlx.nn)": [[440, "mlx.nn.gelu_fast_approx", false]], "get_active_memory() (in module mlx.core)": [[177, "mlx.core.get_active_memory", false]], "get_cache_memory() (in module mlx.core)": [[178, "mlx.core.get_cache_memory", false]], "get_peak_memory() (in module mlx.core)": [[179, "mlx.core.get_peak_memory", false]], "glorot_normal() (in module mlx.nn.init)": [[429, "mlx.nn.init.glorot_normal", false]], "glorot_uniform() (in module mlx.nn.init)": [[430, "mlx.nn.init.glorot_uniform", false]], "glu (class in mlx.nn)": [[368, "mlx.nn.GLU", false], [441, "mlx.nn.glu", false]], "grad() (in module mlx.core)": [[180, "mlx.core.grad", false]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", false]], "greater() (in module mlx.core)": [[181, "mlx.core.greater", false]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", false]], "greater_equal() (in module mlx.core)": [[182, "mlx.core.greater_equal", false]], "group (class in mlx.core.distributed)": [[127, "mlx.core.distributed.Group", false]], "groupnorm (class in mlx.nn)": [[370, "mlx.nn.GroupNorm", false]], "gru (class in mlx.nn)": [[369, "mlx.nn.GRU", false]], "gumbel() (in module mlx.core.random)": [[257, "mlx.core.random.gumbel", false]], "hadamard_transform (c++ function)": [[0, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", false]], "hadamard_transform() (in module mlx.core)": [[183, "mlx.core.hadamard_transform", false]], "hard_shrink (class in mlx.nn)": [[442, "mlx.nn.hard_shrink", false]], "hard_tanh (class in mlx.nn)": [[443, "mlx.nn.hard_tanh", false]], "hardshrink (class in mlx.nn)": [[371, "mlx.nn.HardShrink", false]], "hardswish (class in mlx.nn)": [[373, "mlx.nn.Hardswish", false], [444, "mlx.nn.hardswish", false]], "hardtanh (class in mlx.nn)": [[372, "mlx.nn.HardTanh", false]], "he_normal() (in module mlx.nn.init)": [[431, "mlx.nn.init.he_normal", false]], "he_uniform() (in module mlx.nn.init)": [[432, "mlx.nn.init.he_uniform", false]], "hinge_loss (class in mlx.nn.losses)": [[452, "mlx.nn.losses.hinge_loss", false]], "huber_loss (class in mlx.nn.losses)": [[453, "mlx.nn.losses.huber_loss", false]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice", false], [0, "_CPPv48identityi5Dtype14StreamOrDevice", false]], "identity() (in module mlx.core)": [[184, "mlx.core.identity", false]], "identity() (in module mlx.nn.init)": [[433, "mlx.nn.init.identity", false]], "ifft() (in module mlx.core.fft)": [[160, "mlx.core.fft.ifft", false]], "ifft2() (in module mlx.core.fft)": [[161, "mlx.core.fft.ifft2", false]], "ifftn() (in module mlx.core.fft)": [[162, "mlx.core.fft.ifftn", false]], "ifftshift() (in module mlx.core.fft)": [[163, "mlx.core.fft.ifftshift", false]], "imag (c++ function)": [[0, "_CPPv44imagRK5array14StreamOrDevice", false]], "imag() (in module mlx.core)": [[185, "mlx.core.imag", false]], "import_function() (in module mlx.core)": [[186, "mlx.core.import_function", false]], "init() (in module mlx.core.distributed)": [[130, "mlx.core.distributed.init", false]], "init() (optimizer method)": [[491, "mlx.optimizers.Optimizer.init", false]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", false]], "inner() (in module mlx.core)": [[187, "mlx.core.inner", false]], "instancenorm (class in mlx.nn)": [[374, "mlx.nn.InstanceNorm", false]], "inv() (in module mlx.core.linalg)": [[205, "mlx.core.linalg.inv", false]], "irfft() (in module mlx.core.fft)": [[164, "mlx.core.fft.irfft", false]], "irfft2() (in module mlx.core.fft)": [[165, "mlx.core.fft.irfft2", false]], "irfftn() (in module mlx.core.fft)": [[166, "mlx.core.fft.irfftn", false]], "is_available() (in module mlx.core.distributed)": [[131, "mlx.core.distributed.is_available", false]], "is_available() (in module mlx.core.metal)": [[233, "mlx.core.metal.is_available", false]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "isclose() (in module mlx.core)": [[188, "mlx.core.isclose", false]], "isfinite (c++ function)": [[0, "_CPPv48isfiniteRK5array14StreamOrDevice", false]], "isfinite() (in module mlx.core)": [[189, "mlx.core.isfinite", false]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice", false]], "isinf() (in module mlx.core)": [[190, "mlx.core.isinf", false]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice", false]], "isnan() (in module mlx.core)": [[191, "mlx.core.isnan", false]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice", false]], "isneginf() (in module mlx.core)": [[192, "mlx.core.isneginf", false]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice", false]], "isposinf() (in module mlx.core)": [[193, "mlx.core.isposinf", false]], "issubdtype() (in module mlx.core)": [[194, "mlx.core.issubdtype", false]], "item() (array method)": [[51, "mlx.core.array.item", false]], "itemsize (array property)": [[52, "mlx.core.array.itemsize", false]], "join_schedules() (in module mlx.optimizers)": [[498, "mlx.optimizers.join_schedules", false]], "jvp() (in module mlx.core)": [[195, "mlx.core.jvp", false]], "key() (in module mlx.core.random)": [[258, "mlx.core.random.key", false]], "kl_div_loss (class in mlx.nn.losses)": [[454, "mlx.nn.losses.kl_div_loss", false]], "kron (c++ function)": [[0, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", false]], "kron() (in module mlx.core)": [[196, "mlx.core.kron", false]], "l1_loss (class in mlx.nn.losses)": [[455, "mlx.nn.losses.l1_loss", false]], "laplace() (in module mlx.core.random)": [[259, "mlx.core.random.laplace", false]], "layer_norm() (in module mlx.core.fast)": [[151, "mlx.core.fast.layer_norm", false]], "layernorm (class in mlx.nn)": [[376, "mlx.nn.LayerNorm", false]], "leaf_modules() (module method)": [[391, "mlx.nn.Module.leaf_modules", false]], "leaky_relu (class in mlx.nn)": [[445, "mlx.nn.leaky_relu", false]], "leakyrelu (class in mlx.nn)": [[377, "mlx.nn.LeakyReLU", false]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", false]], "left_shift() (in module mlx.core)": [[197, "mlx.core.left_shift", false]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", false]], "less() (in module mlx.core)": [[198, "mlx.core.less", false]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", false]], "less_equal() (in module mlx.core)": [[199, "mlx.core.less_equal", false]], "linear (class in mlx.nn)": [[378, "mlx.nn.Linear", false]], "linear_schedule() (in module mlx.optimizers)": [[499, "mlx.optimizers.linear_schedule", false]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice", false]], "linspace() (in module mlx.core)": [[215, "mlx.core.linspace", false]], "lion (class in mlx.optimizers)": [[488, "mlx.optimizers.Lion", false]], "load() (in module mlx.core)": [[216, "mlx.core.load", false]], "load_weights() (module method)": [[392, "mlx.nn.Module.load_weights", false]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice", false]], "log() (array method)": [[53, "mlx.core.array.log", false]], "log() (in module mlx.core)": [[217, "mlx.core.log", false]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice", false]], "log10() (array method)": [[54, "mlx.core.array.log10", false]], "log10() (in module mlx.core)": [[218, "mlx.core.log10", false]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice", false]], "log1p() (array method)": [[55, "mlx.core.array.log1p", false]], "log1p() (in module mlx.core)": [[219, "mlx.core.log1p", false]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice", false]], "log2() (array method)": [[56, "mlx.core.array.log2", false]], "log2() (in module mlx.core)": [[220, "mlx.core.log2", false]], "log_cosh_loss (class in mlx.nn.losses)": [[456, "mlx.nn.losses.log_cosh_loss", false]], "log_sigmoid (class in mlx.nn)": [[446, "mlx.nn.log_sigmoid", false]], "log_softmax (class in mlx.nn)": [[447, "mlx.nn.log_softmax", false]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", false]], "logaddexp() (in module mlx.core)": [[221, "mlx.core.logaddexp", false]], "logcumsumexp (c++ function)": [[0, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", false]], "logcumsumexp() (array method)": [[57, "mlx.core.array.logcumsumexp", false]], "logcumsumexp() (in module mlx.core)": [[222, "mlx.core.logcumsumexp", false]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", false]], "logical_and() (in module mlx.core)": [[223, "mlx.core.logical_and", false]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice", false]], "logical_not() (in module mlx.core)": [[224, "mlx.core.logical_not", false]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", false]], "logical_or() (in module mlx.core)": [[225, "mlx.core.logical_or", false]], "logsigmoid (class in mlx.nn)": [[379, "mlx.nn.LogSigmoid", false]], "logsoftmax (class in mlx.nn)": [[380, "mlx.nn.LogSoftmax", false]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", false]], "logsumexp() (array method)": [[58, "mlx.core.array.logsumexp", false]], "logsumexp() (in module mlx.core)": [[226, "mlx.core.logsumexp", false]], "lstm (class in mlx.nn)": [[375, "mlx.nn.LSTM", false]], "lu() (in module mlx.core.linalg)": [[206, "mlx.core.linalg.lu", false]], "lu_factor() (in module mlx.core.linalg)": [[207, "mlx.core.linalg.lu_factor", false]], "margin_ranking_loss (class in mlx.nn.losses)": [[457, "mlx.nn.losses.margin_ranking_loss", false]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", false]], "matmul() (in module mlx.core)": [[227, "mlx.core.matmul", false]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayib14StreamOrDevice", false]], "max() (array method)": [[59, "mlx.core.array.max", false]], "max() (in module mlx.core)": [[228, "mlx.core.max", false]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", false]], "maximum() (in module mlx.core)": [[229, "mlx.core.maximum", false]], "maxpool1d (class in mlx.nn)": [[381, "mlx.nn.MaxPool1d", false]], "maxpool2d (class in mlx.nn)": [[382, "mlx.nn.MaxPool2d", false]], "maxpool3d (class in mlx.nn)": [[383, "mlx.nn.MaxPool3d", false]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayib14StreamOrDevice", false]], "mean() (array method)": [[60, "mlx.core.array.mean", false]], "mean() (in module mlx.core)": [[230, "mlx.core.mean", false]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", false]], "meshgrid() (in module mlx.core)": [[231, "mlx.core.meshgrid", false]], "metal_kernel() (in module mlx.core.fast)": [[152, "mlx.core.fast.metal_kernel", false]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice", false], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayib14StreamOrDevice", false]], "min() (array method)": [[61, "mlx.core.array.min", false]], "min() (in module mlx.core)": [[236, "mlx.core.min", false]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", false]], "minimum() (in module mlx.core)": [[237, "mlx.core.minimum", false]], "mish (class in mlx.nn)": [[384, "mlx.nn.Mish", false], [462, "mlx.nn.mish", false]], "module (class in mlx.nn)": [[479, "mlx.nn.Module", false]], "modules() (module method)": [[393, "mlx.nn.Module.modules", false]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", false]], "moveaxis() (array method)": [[62, "mlx.core.array.moveaxis", false]], "moveaxis() (in module mlx.core)": [[238, "mlx.core.moveaxis", false]], "mse_loss (class in mlx.nn.losses)": [[458, "mlx.nn.losses.mse_loss", false]], "multiheadattention (class in mlx.nn)": [[405, "mlx.nn.MultiHeadAttention", false]], "multioptimizer (class in mlx.optimizers)": [[489, "mlx.optimizers.MultiOptimizer", false]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", false]], "multiply() (in module mlx.core)": [[239, "mlx.core.multiply", false]], "multivariate_normal() (in module mlx.core.random)": [[260, "mlx.core.random.multivariate_normal", false]], "named_modules() (module method)": [[394, "mlx.nn.Module.named_modules", false]], "nan_to_num (c++ function)": [[0, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", false]], "nan_to_num() (in module mlx.core)": [[240, "mlx.core.nan_to_num", false]], "nbytes (array property)": [[63, "mlx.core.array.nbytes", false]], "ndim (array property)": [[64, "mlx.core.array.ndim", false]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice", false]], "negative() (in module mlx.core)": [[241, "mlx.core.negative", false]], "new_stream() (in module mlx.core)": [[242, "mlx.core.new_stream", false]], "nll_loss (class in mlx.nn.losses)": [[459, "mlx.nn.losses.nll_loss", false]], "norm() (in module mlx.core.linalg)": [[208, "mlx.core.linalg.norm", false]], "normal() (in module mlx.core.random)": [[261, "mlx.core.random.normal", false]], "normal() (in module mlx.nn.init)": [[434, "mlx.nn.init.normal", false]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", false]], "not_equal() (in module mlx.core)": [[243, "mlx.core.not_equal", false]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", false]], "ones (c++ function)": [[0, "_CPPv44onesRK5Shape14StreamOrDevice", false], [0, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", false]], "ones() (in module mlx.core)": [[244, "mlx.core.ones", false]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice", false]], "ones_like() (in module mlx.core)": [[245, "mlx.core.ones_like", false]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array", false], [0, "_CPPv4I0Ene5arrayRK5array1T", false], [0, "_CPPv4neRK5arrayRK5array", false]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array", false], [0, "_CPPv4I0Erm5arrayRK5array1T", false], [0, "_CPPv4rmRK5arrayRK5array", false]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array", false]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array", false]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array", false], [0, "_CPPv4I0Eml5arrayRK5array1T", false], [0, "_CPPv4mlRK5arrayRK5array", false]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array", false], [0, "_CPPv4I0Epl5arrayRK5array1T", false], [0, "_CPPv4plRK5arrayRK5array", false]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array", false], [0, "_CPPv4I0Emi5arrayRK5array1T", false], [0, "_CPPv4miRK5array", false], [0, "_CPPv4miRK5arrayRK5array", false]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array", false], [0, "_CPPv4dvRK5arrayd", false], [0, "_CPPv4dvdRK5array", false]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array", false], [0, "_CPPv4I0Elt5arrayRK5array1T", false], [0, "_CPPv4ltRK5arrayRK5array", false]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array", false]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array", false], [0, "_CPPv4I0Ele5arrayRK5array1T", false], [0, "_CPPv4leRK5arrayRK5array", false]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array", false], [0, "_CPPv4I0Eeq5arrayRK5array1T", false], [0, "_CPPv4eqRK5arrayRK5array", false]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array", false], [0, "_CPPv4I0Egt5arrayRK5array1T", false], [0, "_CPPv4gtRK5arrayRK5array", false]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array", false], [0, "_CPPv4I0Ege5arrayRK5array1T", false], [0, "_CPPv4geRK5arrayRK5array", false]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array", false]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array", false]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array", false]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array", false]], "operator~ (c++ function)": [[0, "_CPPv4coRK5array", false]], "optimizer (class in mlx.optimizers)": [[502, "mlx.optimizers.Optimizer", false]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", false]], "outer() (in module mlx.core)": [[246, "mlx.core.outer", false]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", false]], "pad() (in module mlx.core)": [[247, "mlx.core.pad", false]], "parameters() (module method)": [[395, "mlx.nn.Module.parameters", false]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice", false]], "partition() (in module mlx.core)": [[248, "mlx.core.partition", false]], "permutation() (in module mlx.core.random)": [[262, "mlx.core.random.permutation", false]], "pinv() (in module mlx.core.linalg)": [[209, "mlx.core.linalg.pinv", false]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", false]], "power() (in module mlx.core)": [[249, "mlx.core.power", false]], "prelu (class in mlx.nn)": [[406, "mlx.nn.PReLU", false], [463, "mlx.nn.prelu", false]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayib14StreamOrDevice", false]], "prod() (array method)": [[65, "mlx.core.array.prod", false]], "prod() (in module mlx.core)": [[250, "mlx.core.prod", false]], "put_along_axis (c++ function)": [[0, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false]], "put_along_axis() (in module mlx.core)": [[251, "mlx.core.put_along_axis", false]], "qr() (in module mlx.core.linalg)": [[210, "mlx.core.linalg.qr", false]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice", false]], "quantize() (in module mlx.core)": [[252, "mlx.core.quantize", false]], "quantize() (in module mlx.nn)": [[330, "mlx.nn.quantize", false]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", false]], "quantized_matmul() (in module mlx.core)": [[253, "mlx.core.quantized_matmul", false]], "quantizedembedding (class in mlx.nn)": [[407, "mlx.nn.QuantizedEmbedding", false]], "quantizedlinear (class in mlx.nn)": [[408, "mlx.nn.QuantizedLinear", false]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice", false]], "radians() (in module mlx.core)": [[254, "mlx.core.radians", false]], "randint() (in module mlx.core.random)": [[263, "mlx.core.random.randint", false]], "real (c++ function)": [[0, "_CPPv44realRK5array14StreamOrDevice", false]], "real() (in module mlx.core)": [[268, "mlx.core.real", false]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice", false]], "reciprocal() (array method)": [[66, "mlx.core.array.reciprocal", false]], "reciprocal() (in module mlx.core)": [[269, "mlx.core.reciprocal", false]], "recv() (in module mlx.core.distributed)": [[132, "mlx.core.distributed.recv", false]], "recv_like() (in module mlx.core.distributed)": [[133, "mlx.core.distributed.recv_like", false]], "relu (class in mlx.nn)": [[411, "mlx.nn.ReLU", false], [464, "mlx.nn.relu", false]], "relu6 (class in mlx.nn)": [[412, "mlx.nn.ReLU6", false], [465, "mlx.nn.relu6", false]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", false]], "remainder() (in module mlx.core)": [[270, "mlx.core.remainder", false]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice", false], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice", false]], "repeat() (in module mlx.core)": [[271, "mlx.core.repeat", false]], "reset_peak_memory() (in module mlx.core)": [[272, "mlx.core.reset_peak_memory", false]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", false]], "reshape() (array method)": [[67, "mlx.core.array.reshape", false]], "reshape() (in module mlx.core)": [[273, "mlx.core.reshape", false]], "rfft() (in module mlx.core.fft)": [[167, "mlx.core.fft.rfft", false]], "rfft2() (in module mlx.core.fft)": [[168, "mlx.core.fft.rfft2", false]], "rfftn() (in module mlx.core.fft)": [[169, "mlx.core.fft.rfftn", false]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", false]], "right_shift() (in module mlx.core)": [[274, "mlx.core.right_shift", false]], "rms_norm() (in module mlx.core.fast)": [[153, "mlx.core.fast.rms_norm", false]], "rmsnorm (class in mlx.nn)": [[409, "mlx.nn.RMSNorm", false]], "rmsprop (class in mlx.optimizers)": [[494, "mlx.optimizers.RMSprop", false]], "rnn (class in mlx.nn)": [[410, "mlx.nn.RNN", false]], "roll (c++ function)": [[0, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayi14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayii14StreamOrDevice", false]], "roll() (in module mlx.core)": [[275, "mlx.core.roll", false]], "rope (class in mlx.nn)": [[413, "mlx.nn.RoPE", false]], "rope() (in module mlx.core.fast)": [[154, "mlx.core.fast.rope", false]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice", false], [0, "_CPPv45roundRK5arrayi14StreamOrDevice", false]], "round() (array method)": [[68, "mlx.core.array.round", false]], "round() (in module mlx.core)": [[276, "mlx.core.round", false]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice", false]], "rsqrt() (array method)": [[69, "mlx.core.array.rsqrt", false]], "rsqrt() (in module mlx.core)": [[277, "mlx.core.rsqrt", false]], "save() (in module mlx.core)": [[278, "mlx.core.save", false]], "save_gguf() (in module mlx.core)": [[279, "mlx.core.save_gguf", false]], "save_safetensors() (in module mlx.core)": [[280, "mlx.core.save_safetensors", false]], "save_weights() (module method)": [[396, "mlx.nn.Module.save_weights", false]], "savez() (in module mlx.core)": [[281, "mlx.core.savez", false]], "savez_compressed() (in module mlx.core)": [[282, "mlx.core.savez_compressed", false]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[155, "mlx.core.fast.scaled_dot_product_attention", false]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_add_axis (c++ function)": [[0, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "seed() (in module mlx.core.random)": [[264, "mlx.core.random.seed", false]], "selu (class in mlx.nn)": [[414, "mlx.nn.SELU", false], [466, "mlx.nn.selu", false]], "send() (in module mlx.core.distributed)": [[134, "mlx.core.distributed.send", false]], "sequential (class in mlx.nn)": [[415, "mlx.nn.Sequential", false]], "set_cache_limit() (in module mlx.core)": [[283, "mlx.core.set_cache_limit", false]], "set_default_device() (in module mlx.core)": [[284, "mlx.core.set_default_device", false]], "set_default_stream() (in module mlx.core)": [[285, "mlx.core.set_default_stream", false]], "set_dtype() (module method)": [[397, "mlx.nn.Module.set_dtype", false]], "set_memory_limit() (in module mlx.core)": [[286, "mlx.core.set_memory_limit", false]], "set_wired_limit() (in module mlx.core)": [[287, "mlx.core.set_wired_limit", false]], "sgd (class in mlx.optimizers)": [[495, "mlx.optimizers.SGD", false]], "shape (array property)": [[70, "mlx.core.array.shape", false]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice", false]], "sigmoid (class in mlx.nn)": [[417, "mlx.nn.Sigmoid", false], [467, "mlx.nn.sigmoid", false]], "sigmoid() (in module mlx.core)": [[288, "mlx.core.sigmoid", false]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice", false]], "sign() (in module mlx.core)": [[289, "mlx.core.sign", false]], "silu (class in mlx.nn)": [[416, "mlx.nn.SiLU", false], [468, "mlx.nn.silu", false]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice", false]], "sin() (array method)": [[71, "mlx.core.array.sin", false]], "sin() (in module mlx.core)": [[290, "mlx.core.sin", false]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice", false]], "sinh() (in module mlx.core)": [[291, "mlx.core.sinh", false]], "sinusoidalpositionalencoding (class in mlx.nn)": [[418, "mlx.nn.SinusoidalPositionalEncoding", false]], "size (array property)": [[72, "mlx.core.array.size", false]], "slice (c++ function)": [[0, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", false]], "slice() (in module mlx.core)": [[292, "mlx.core.slice", false]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", false], [0, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", false], [0, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "slice_update() (in module mlx.core)": [[293, "mlx.core.slice_update", false]], "smooth_l1_loss (class in mlx.nn.losses)": [[460, "mlx.nn.losses.smooth_l1_loss", false]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice", false]], "softmax (class in mlx.nn)": [[419, "mlx.nn.Softmax", false], [469, "mlx.nn.softmax", false]], "softmax() (in module mlx.core)": [[294, "mlx.core.softmax", false]], "softmin (class in mlx.nn)": [[420, "mlx.nn.Softmin", false], [470, "mlx.nn.softmin", false]], "softplus (class in mlx.nn)": [[421, "mlx.nn.Softplus", false], [471, "mlx.nn.softplus", false]], "softshrink (class in mlx.nn)": [[422, "mlx.nn.Softshrink", false], [472, "mlx.nn.softshrink", false]], "softsign (class in mlx.nn)": [[423, "mlx.nn.Softsign", false]], "solve() (in module mlx.core.linalg)": [[211, "mlx.core.linalg.solve", false]], "solve_triangular() (in module mlx.core.linalg)": [[212, "mlx.core.linalg.solve_triangular", false]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice", false], [0, "_CPPv44sortRK5arrayi14StreamOrDevice", false]], "sort() (in module mlx.core)": [[295, "mlx.core.sort", false]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayi14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayii14StreamOrDevice", false]], "split() (array method)": [[73, "mlx.core.array.split", false]], "split() (in module mlx.core)": [[296, "mlx.core.split", false]], "split() (in module mlx.core.random)": [[265, "mlx.core.random.split", false]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice", false]], "sqrt() (array method)": [[74, "mlx.core.array.sqrt", false]], "sqrt() (in module mlx.core)": [[297, "mlx.core.sqrt", false]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice", false]], "square() (array method)": [[75, "mlx.core.array.square", false]], "square() (in module mlx.core)": [[298, "mlx.core.square", false]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice", false]], "squeeze() (array method)": [[76, "mlx.core.array.squeeze", false]], "squeeze() (in module mlx.core)": [[299, "mlx.core.squeeze", false]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", false]], "stack() (in module mlx.core)": [[300, "mlx.core.stack", false]], "start_capture() (in module mlx.core.metal)": [[234, "mlx.core.metal.start_capture", false]], "state (module property)": [[398, "mlx.nn.Module.state", false]], "state (optimizer property)": [[492, "mlx.optimizers.Optimizer.state", false]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice", false], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv4StRK5arraybi14StreamOrDevice", false], [0, "_CPPv4StRK5arrayibi14StreamOrDevice", false]], "std() (array method)": [[77, "mlx.core.array.std", false]], "std() (in module mlx.core)": [[301, "mlx.core.std", false]], "step (class in mlx.nn)": [[424, "mlx.nn.Step", false], [473, "mlx.nn.step", false]], "step_decay() (in module mlx.optimizers)": [[500, "mlx.optimizers.step_decay", false]], "stop_capture() (in module mlx.core.metal)": [[235, "mlx.core.metal.stop_capture", false]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice", false]], "stop_gradient() (in module mlx.core)": [[302, "mlx.core.stop_gradient", false]], "stream (class in mlx.core)": [[338, "mlx.core.Stream", false]], "stream() (in module mlx.core)": [[303, "mlx.core.stream", false]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", false]], "subtract() (in module mlx.core)": [[304, "mlx.core.subtract", false]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayib14StreamOrDevice", false]], "sum() (array method)": [[78, "mlx.core.array.sum", false]], "sum() (in module mlx.core)": [[305, "mlx.core.sum", false]], "svd() (in module mlx.core.linalg)": [[213, "mlx.core.linalg.svd", false]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", false]], "swapaxes() (array method)": [[79, "mlx.core.array.swapaxes", false]], "swapaxes() (in module mlx.core)": [[306, "mlx.core.swapaxes", false]], "synchronize() (in module mlx.core)": [[307, "mlx.core.synchronize", false]], "t (array property)": [[32, "mlx.core.array.T", false]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayi14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayii14StreamOrDevice", false]], "take() (in module mlx.core)": [[308, "mlx.core.take", false]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", false]], "take_along_axis() (in module mlx.core)": [[309, "mlx.core.take_along_axis", false]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice", false]], "tan() (in module mlx.core)": [[310, "mlx.core.tan", false]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice", false]], "tanh (class in mlx.nn)": [[425, "mlx.nn.Tanh", false], [474, "mlx.nn.tanh", false]], "tanh() (in module mlx.core)": [[311, "mlx.core.tanh", false]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", false], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", false]], "tensordot() (in module mlx.core)": [[312, "mlx.core.tensordot", false]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "tile() (in module mlx.core)": [[313, "mlx.core.tile", false]], "tolist() (array method)": [[80, "mlx.core.array.tolist", false]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice", false], [0, "_CPPv44topkRK5arrayii14StreamOrDevice", false]], "topk() (in module mlx.core)": [[314, "mlx.core.topk", false]], "trace (c++ function)": [[0, "_CPPv45traceRK5array14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", false]], "trace() (in module mlx.core)": [[315, "mlx.core.trace", false]], "train() (module method)": [[399, "mlx.nn.Module.train", false]], "trainable_parameters() (module method)": [[400, "mlx.nn.Module.trainable_parameters", false]], "training (module property)": [[401, "mlx.nn.Module.training", false]], "transformer (class in mlx.nn)": [[426, "mlx.nn.Transformer", false]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "transpose() (array method)": [[81, "mlx.core.array.transpose", false]], "transpose() (in module mlx.core)": [[316, "mlx.core.transpose", false]], "tree_flatten() (in module mlx.utils)": [[333, "mlx.utils.tree_flatten", false]], "tree_map() (in module mlx.utils)": [[334, "mlx.utils.tree_map", false]], "tree_map_with_path() (in module mlx.utils)": [[335, "mlx.utils.tree_map_with_path", false]], "tree_reduce() (in module mlx.utils)": [[336, "mlx.utils.tree_reduce", false]], "tree_unflatten() (in module mlx.utils)": [[337, "mlx.utils.tree_unflatten", false]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice", false], [0, "_CPPv43triiii5Dtype14StreamOrDevice", false]], "tri() (in module mlx.core)": [[317, "mlx.core.tri", false]], "tri_inv() (in module mlx.core.linalg)": [[214, "mlx.core.linalg.tri_inv", false]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice", false]], "tril() (in module mlx.core)": [[318, "mlx.core.tril", false]], "triplet_loss (class in mlx.nn.losses)": [[461, "mlx.nn.losses.triplet_loss", false]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice", false]], "triu() (in module mlx.core)": [[319, "mlx.core.triu", false]], "truncated_normal() (in module mlx.core.random)": [[266, "mlx.core.random.truncated_normal", false]], "unflatten (c++ function)": [[0, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", false]], "unflatten() (in module mlx.core)": [[320, "mlx.core.unflatten", false]], "unfreeze() (module method)": [[402, "mlx.nn.Module.unfreeze", false]], "uniform() (in module mlx.core.random)": [[267, "mlx.core.random.uniform", false]], "uniform() (in module mlx.nn.init)": [[435, "mlx.nn.init.uniform", false]], "update() (module method)": [[403, "mlx.nn.Module.update", false]], "update() (optimizer method)": [[493, "mlx.optimizers.Optimizer.update", false]], "update_modules() (module method)": [[404, "mlx.nn.Module.update_modules", false]], "upsample (class in mlx.nn)": [[427, "mlx.nn.Upsample", false]], "value_and_grad() (in module mlx.core)": [[321, "mlx.core.value_and_grad", false]], "value_and_grad() (in module mlx.nn)": [[331, "mlx.nn.value_and_grad", false]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice", false], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv43varRK5arraybi14StreamOrDevice", false], [0, "_CPPv43varRK5arrayibi14StreamOrDevice", false]], "var() (array method)": [[82, "mlx.core.array.var", false]], "var() (in module mlx.core)": [[322, "mlx.core.var", false]], "view (c++ function)": [[0, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", false]], "view() (array method)": [[83, "mlx.core.array.view", false]], "view() (in module mlx.core)": [[323, "mlx.core.view", false]], "vjp() (in module mlx.core)": [[324, "mlx.core.vjp", false]], "vmap() (in module mlx.core)": [[325, "mlx.core.vmap", false]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", false]], "where() (in module mlx.core)": [[326, "mlx.core.where", false]], "zeros (c++ function)": [[0, "_CPPv45zerosRK5Shape14StreamOrDevice", false], [0, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", false]], "zeros() (in module mlx.core)": [[327, "mlx.core.zeros", false]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice", false]], "zeros_like() (in module mlx.core)": [[328, "mlx.core.zeros_like", false]]}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv414bitwise_invertRK5array14StreamOrDevice", "bitwise_invert"], [0, 1, 1, "_CPPv414bitwise_invertRK5array14StreamOrDevice", "bitwise_invert::a"], [0, 1, 1, "_CPPv414bitwise_invertRK5array14StreamOrDevice", "bitwise_invert::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::a"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::allow_col_major"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::dilation"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::groups"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::input"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::output_padding"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::padding"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::s"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::stride"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::weight"], [0, 0, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::dilation"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::groups"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::input"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::output_padding"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::padding"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::s"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::stride"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::weight"], [0, 0, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::dilation"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::groups"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::input"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::output_padding"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::padding"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::s"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::stride"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm::a"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm::b"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm::lhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm::rhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm::s"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm::sorted_indices"], [0, 0, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::biases"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::bits"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::group_size"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::lhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::rhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::s"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::scales"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::sorted_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::transpose"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::w"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::x"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::a"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::s"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::scale"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag"], [0, 1, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag::a"], [0, 1, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::a"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::a"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::b"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", "logcumsumexp"], [0, 1, 1, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", "logcumsumexp::a"], [0, 1, 1, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", "logcumsumexp::axis"], [0, 1, 1, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", "logcumsumexp::inclusive"], [0, 1, 1, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", "logcumsumexp::reverse"], [0, 1, 1, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", "logcumsumexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::a"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::nan"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::neginf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::posinf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv4coRK5array", "operator~"], [0, 1, 1, "_CPPv4coRK5array", "operator~::a"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::a"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::axis"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::indices"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::s"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::values"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv44realRK5array14StreamOrDevice", "real"], [0, 1, 1, "_CPPv44realRK5array14StreamOrDevice", "real::a"], [0, 1, 1, "_CPPv44realRK5array14StreamOrDevice", "real::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::axes"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::axes"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::axis"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::axis"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::shift"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::a"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::axis"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::indices"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::s"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::values"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::axes"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::slice_size"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::strides"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::axes"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::index"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::index"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::dtype"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::a"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::axis"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::s"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::shape"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::a"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::dtype"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[10, 3, 1, "", "Device"], [11, 3, 1, "", "Dtype"], [12, 3, 1, "", "DtypeCategory"], [338, 3, 1, "", "Stream"], [13, 5, 1, "", "abs"], [14, 5, 1, "", "add"], [15, 5, 1, "", "addmm"], [16, 5, 1, "", "all"], [17, 5, 1, "", "allclose"], [18, 5, 1, "", "any"], [19, 5, 1, "", "arange"], [20, 5, 1, "", "arccos"], [21, 5, 1, "", "arccosh"], [22, 5, 1, "", "arcsin"], [23, 5, 1, "", "arcsinh"], [24, 5, 1, "", "arctan"], [25, 5, 1, "", "arctan2"], [26, 5, 1, "", "arctanh"], [27, 5, 1, "", "argmax"], [28, 5, 1, "", "argmin"], [29, 5, 1, "", "argpartition"], [30, 5, 1, "", "argsort"], [31, 3, 1, "", "array"], [84, 5, 1, "", "array_equal"], [85, 5, 1, "", "as_strided"], [86, 5, 1, "", "async_eval"], [87, 5, 1, "", "atleast_1d"], [88, 5, 1, "", "atleast_2d"], [89, 5, 1, "", "atleast_3d"], [90, 5, 1, "", "bitwise_and"], [91, 5, 1, "", "bitwise_invert"], [92, 5, 1, "", "bitwise_or"], [93, 5, 1, "", "bitwise_xor"], [94, 5, 1, "", "block_masked_mm"], [95, 5, 1, "", "broadcast_arrays"], [96, 5, 1, "", "broadcast_to"], [97, 5, 1, "", "ceil"], [98, 5, 1, "", "clear_cache"], [99, 5, 1, "", "clip"], [100, 5, 1, "", "compile"], [101, 5, 1, "", "concatenate"], [102, 5, 1, "", "conj"], [103, 5, 1, "", "conjugate"], [104, 5, 1, "", "contiguous"], [105, 5, 1, "", "conv1d"], [106, 5, 1, "", "conv2d"], [107, 5, 1, "", "conv3d"], [108, 5, 1, "", "conv_general"], [109, 5, 1, "", "conv_transpose1d"], [110, 5, 1, "", "conv_transpose2d"], [111, 5, 1, "", "conv_transpose3d"], [112, 5, 1, "", "convolve"], [113, 5, 1, "", "cos"], [114, 5, 1, "", "cosh"], [115, 5, 1, "", "cummax"], [116, 5, 1, "", "cummin"], [117, 5, 1, "", "cumprod"], [118, 5, 1, "", "cumsum"], [119, 3, 1, "", "custom_function"], [120, 5, 1, "", "default_device"], [121, 5, 1, "", "default_stream"], [122, 5, 1, "", "degrees"], [123, 5, 1, "", "dequantize"], [124, 5, 1, "", "diag"], [125, 5, 1, "", "diagonal"], [126, 5, 1, "", "disable_compile"], [135, 5, 1, "", "divide"], [136, 5, 1, "", "divmod"], [137, 5, 1, "", "einsum"], [138, 5, 1, "", "einsum_path"], [139, 5, 1, "", "enable_compile"], [140, 5, 1, "", "equal"], [141, 5, 1, "", "erf"], [142, 5, 1, "", "erfinv"], [143, 5, 1, "", "eval"], [144, 5, 1, "", "exp"], [145, 5, 1, "", "expand_dims"], [146, 5, 1, "", "expm1"], [147, 5, 1, "", "export_function"], [148, 5, 1, "", "export_to_dot"], [149, 5, 1, "", "exporter"], [150, 5, 1, "", "eye"], [170, 3, 1, "", "finfo"], [171, 5, 1, "", "flatten"], [172, 5, 1, "", "floor"], [173, 5, 1, "", "floor_divide"], [174, 5, 1, "", "full"], [175, 5, 1, "", "gather_mm"], [176, 5, 1, "", "gather_qmm"], [177, 5, 1, "", "get_active_memory"], [178, 5, 1, "", "get_cache_memory"], [179, 5, 1, "", "get_peak_memory"], [180, 5, 1, "", "grad"], [181, 5, 1, "", "greater"], [182, 5, 1, "", "greater_equal"], [183, 5, 1, "", "hadamard_transform"], [184, 5, 1, "", "identity"], [185, 5, 1, "", "imag"], [186, 5, 1, "", "import_function"], [187, 5, 1, "", "inner"], [188, 5, 1, "", "isclose"], [189, 5, 1, "", "isfinite"], [190, 5, 1, "", "isinf"], [191, 5, 1, "", "isnan"], [192, 5, 1, "", "isneginf"], [193, 5, 1, "", "isposinf"], [194, 5, 1, "", "issubdtype"], [195, 5, 1, "", "jvp"], [196, 5, 1, "", "kron"], [197, 5, 1, "", "left_shift"], [198, 5, 1, "", "less"], [199, 5, 1, "", "less_equal"], [215, 5, 1, "", "linspace"], [216, 5, 1, "", "load"], [217, 5, 1, "", "log"], [218, 5, 1, "", "log10"], [219, 5, 1, "", "log1p"], [220, 5, 1, "", "log2"], [221, 5, 1, "", "logaddexp"], [222, 5, 1, "", "logcumsumexp"], [223, 5, 1, "", "logical_and"], [224, 5, 1, "", "logical_not"], [225, 5, 1, "", "logical_or"], [226, 5, 1, "", "logsumexp"], [227, 5, 1, "", "matmul"], [228, 5, 1, "", "max"], [229, 5, 1, "", "maximum"], [230, 5, 1, "", "mean"], [231, 5, 1, "", "meshgrid"], [236, 5, 1, "", "min"], [237, 5, 1, "", "minimum"], [238, 5, 1, "", "moveaxis"], [239, 5, 1, "", "multiply"], [240, 5, 1, "", "nan_to_num"], [241, 5, 1, "", "negative"], [242, 5, 1, "", "new_stream"], [243, 5, 1, "", "not_equal"], [244, 5, 1, "", "ones"], [245, 5, 1, "", "ones_like"], [246, 5, 1, "", "outer"], [247, 5, 1, "", "pad"], [248, 5, 1, "", "partition"], [249, 5, 1, "", "power"], [250, 5, 1, "", "prod"], [251, 5, 1, "", "put_along_axis"], [252, 5, 1, "", "quantize"], [253, 5, 1, "", "quantized_matmul"], [254, 5, 1, "", "radians"], [268, 5, 1, "", "real"], [269, 5, 1, "", "reciprocal"], [270, 5, 1, "", "remainder"], [271, 5, 1, "", "repeat"], [272, 5, 1, "", "reset_peak_memory"], [273, 5, 1, "", "reshape"], [274, 5, 1, "", "right_shift"], [275, 5, 1, "", "roll"], [276, 5, 1, "", "round"], [277, 5, 1, "", "rsqrt"], [278, 5, 1, "", "save"], [279, 5, 1, "", "save_gguf"], [280, 5, 1, "", "save_safetensors"], [281, 5, 1, "", "savez"], [282, 5, 1, "", "savez_compressed"], [283, 5, 1, "", "set_cache_limit"], [284, 5, 1, "", "set_default_device"], [285, 5, 1, "", "set_default_stream"], [286, 5, 1, "", "set_memory_limit"], [287, 5, 1, "", "set_wired_limit"], [288, 5, 1, "", "sigmoid"], [289, 5, 1, "", "sign"], [290, 5, 1, "", "sin"], [291, 5, 1, "", "sinh"], [292, 5, 1, "", "slice"], [293, 5, 1, "", "slice_update"], [294, 5, 1, "", "softmax"], [295, 5, 1, "", "sort"], [296, 5, 1, "", "split"], [297, 5, 1, "", "sqrt"], [298, 5, 1, "", "square"], [299, 5, 1, "", "squeeze"], [300, 5, 1, "", "stack"], [301, 5, 1, "", "std"], [302, 5, 1, "", "stop_gradient"], [303, 5, 1, "", "stream"], [304, 5, 1, "", "subtract"], [305, 5, 1, "", "sum"], [306, 5, 1, "", "swapaxes"], [307, 5, 1, "", "synchronize"], [308, 5, 1, "", "take"], [309, 5, 1, "", "take_along_axis"], [310, 5, 1, "", "tan"], [311, 5, 1, "", "tanh"], [312, 5, 1, "", "tensordot"], [313, 5, 1, "", "tile"], [314, 5, 1, "", "topk"], [315, 5, 1, "", "trace"], [316, 5, 1, "", "transpose"], [317, 5, 1, "", "tri"], [318, 5, 1, "", "tril"], [319, 5, 1, "", "triu"], [320, 5, 1, "", "unflatten"], [321, 5, 1, "", "value_and_grad"], [322, 5, 1, "", "var"], [323, 5, 1, "", "view"], [324, 5, 1, "", "vjp"], [325, 5, 1, "", "vmap"], [326, 5, 1, "", "where"], [327, 5, 1, "", "zeros"], [328, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[10, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[11, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[12, 4, 1, "", "__init__"]], "mlx.core.Stream": [[338, 4, 1, "", "__init__"]], "mlx.core.array": [[32, 6, 1, "", "T"], [31, 4, 1, "", "__init__"], [33, 4, 1, "", "abs"], [34, 4, 1, "", "all"], [35, 4, 1, "", "any"], [36, 4, 1, "", "argmax"], [37, 4, 1, "", "argmin"], [38, 4, 1, "", "astype"], [39, 6, 1, "", "at"], [40, 4, 1, "", "conj"], [41, 4, 1, "", "cos"], [42, 4, 1, "", "cummax"], [43, 4, 1, "", "cummin"], [44, 4, 1, "", "cumprod"], [45, 4, 1, "", "cumsum"], [46, 4, 1, "", "diag"], [47, 4, 1, "", "diagonal"], [48, 6, 1, "", "dtype"], [49, 4, 1, "", "exp"], [50, 4, 1, "", "flatten"], [51, 4, 1, "", "item"], [52, 6, 1, "", "itemsize"], [53, 4, 1, "", "log"], [54, 4, 1, "", "log10"], [55, 4, 1, "", "log1p"], [56, 4, 1, "", "log2"], [57, 4, 1, "", "logcumsumexp"], [58, 4, 1, "", "logsumexp"], [59, 4, 1, "", "max"], [60, 4, 1, "", "mean"], [61, 4, 1, "", "min"], [62, 4, 1, "", "moveaxis"], [63, 6, 1, "", "nbytes"], [64, 6, 1, "", "ndim"], [65, 4, 1, "", "prod"], [66, 4, 1, "", "reciprocal"], [67, 4, 1, "", "reshape"], [68, 4, 1, "", "round"], [69, 4, 1, "", "rsqrt"], [70, 6, 1, "", "shape"], [71, 4, 1, "", "sin"], [72, 6, 1, "", "size"], [73, 4, 1, "", "split"], [74, 4, 1, "", "sqrt"], [75, 4, 1, "", "square"], [76, 4, 1, "", "squeeze"], [77, 4, 1, "", "std"], [78, 4, 1, "", "sum"], [79, 4, 1, "", "swapaxes"], [80, 4, 1, "", "tolist"], [81, 4, 1, "", "transpose"], [82, 4, 1, "", "var"], [83, 4, 1, "", "view"]], "mlx.core.custom_function": [[119, 4, 1, "", "__init__"]], "mlx.core.distributed": [[127, 3, 1, "", "Group"], [128, 5, 1, "", "all_gather"], [129, 5, 1, "", "all_sum"], [130, 5, 1, "", "init"], [131, 5, 1, "", "is_available"], [132, 5, 1, "", "recv"], [133, 5, 1, "", "recv_like"], [134, 5, 1, "", "send"]], "mlx.core.distributed.Group": [[127, 4, 1, "", "__init__"]], "mlx.core.fast": [[151, 5, 1, "", "layer_norm"], [152, 5, 1, "", "metal_kernel"], [153, 5, 1, "", "rms_norm"], [154, 5, 1, "", "rope"], [155, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[156, 5, 1, "", "fft"], [157, 5, 1, "", "fft2"], [158, 5, 1, "", "fftn"], [159, 5, 1, "", "fftshift"], [160, 5, 1, "", "ifft"], [161, 5, 1, "", "ifft2"], [162, 5, 1, "", "ifftn"], [163, 5, 1, "", "ifftshift"], [164, 5, 1, "", "irfft"], [165, 5, 1, "", "irfft2"], [166, 5, 1, "", "irfftn"], [167, 5, 1, "", "rfft"], [168, 5, 1, "", "rfft2"], [169, 5, 1, "", "rfftn"]], "mlx.core.finfo": [[170, 4, 1, "", "__init__"]], "mlx.core.linalg": [[200, 5, 1, "", "cholesky"], [201, 5, 1, "", "cholesky_inv"], [202, 5, 1, "", "cross"], [203, 5, 1, "", "eigh"], [204, 5, 1, "", "eigvalsh"], [205, 5, 1, "", "inv"], [206, 5, 1, "", "lu"], [207, 5, 1, "", "lu_factor"], [208, 5, 1, "", "norm"], [209, 5, 1, "", "pinv"], [210, 5, 1, "", "qr"], [211, 5, 1, "", "solve"], [212, 5, 1, "", "solve_triangular"], [213, 5, 1, "", "svd"], [214, 5, 1, "", "tri_inv"]], "mlx.core.metal": [[232, 5, 1, "", "device_info"], [233, 5, 1, "", "is_available"], [234, 5, 1, "", "start_capture"], [235, 5, 1, "", "stop_capture"]], "mlx.core.random": [[255, 5, 1, "", "bernoulli"], [256, 5, 1, "", "categorical"], [257, 5, 1, "", "gumbel"], [258, 5, 1, "", "key"], [259, 5, 1, "", "laplace"], [260, 5, 1, "", "multivariate_normal"], [261, 5, 1, "", "normal"], [262, 5, 1, "", "permutation"], [263, 5, 1, "", "randint"], [264, 5, 1, "", "seed"], [265, 5, 1, "", "split"], [266, 5, 1, "", "truncated_normal"], [267, 5, 1, "", "uniform"]], "mlx.nn": [[350, 3, 1, "", "ALiBi"], [351, 3, 1, "", "AvgPool1d"], [352, 3, 1, "", "AvgPool2d"], [353, 3, 1, "", "AvgPool3d"], [354, 3, 1, "", "BatchNorm"], [355, 3, 1, "", "CELU"], [356, 3, 1, "", "Conv1d"], [357, 3, 1, "", "Conv2d"], [358, 3, 1, "", "Conv3d"], [359, 3, 1, "", "ConvTranspose1d"], [360, 3, 1, "", "ConvTranspose2d"], [361, 3, 1, "", "ConvTranspose3d"], [362, 3, 1, "", "Dropout"], [363, 3, 1, "", "Dropout2d"], [364, 3, 1, "", "Dropout3d"], [365, 3, 1, "", "ELU"], [366, 3, 1, "", "Embedding"], [367, 3, 1, "", "GELU"], [368, 3, 1, "", "GLU"], [369, 3, 1, "", "GRU"], [370, 3, 1, "", "GroupNorm"], [371, 3, 1, "", "HardShrink"], [372, 3, 1, "", "HardTanh"], [373, 3, 1, "", "Hardswish"], [374, 3, 1, "", "InstanceNorm"], [375, 3, 1, "", "LSTM"], [376, 3, 1, "", "LayerNorm"], [377, 3, 1, "", "LeakyReLU"], [378, 3, 1, "", "Linear"], [379, 3, 1, "", "LogSigmoid"], [380, 3, 1, "", "LogSoftmax"], [381, 3, 1, "", "MaxPool1d"], [382, 3, 1, "", "MaxPool2d"], [383, 3, 1, "", "MaxPool3d"], [384, 3, 1, "", "Mish"], [479, 3, 1, "", "Module"], [405, 3, 1, "", "MultiHeadAttention"], [406, 3, 1, "", "PReLU"], [407, 3, 1, "", "QuantizedEmbedding"], [408, 3, 1, "", "QuantizedLinear"], [409, 3, 1, "", "RMSNorm"], [410, 3, 1, "", "RNN"], [411, 3, 1, "", "ReLU"], [412, 3, 1, "", "ReLU6"], [413, 3, 1, "", "RoPE"], [414, 3, 1, "", "SELU"], [415, 3, 1, "", "Sequential"], [416, 3, 1, "", "SiLU"], [417, 3, 1, "", "Sigmoid"], [418, 3, 1, "", "SinusoidalPositionalEncoding"], [419, 3, 1, "", "Softmax"], [420, 3, 1, "", "Softmin"], [421, 3, 1, "", "Softplus"], [422, 3, 1, "", "Softshrink"], [423, 3, 1, "", "Softsign"], [424, 3, 1, "", "Step"], [425, 3, 1, "", "Tanh"], [426, 3, 1, "", "Transformer"], [427, 3, 1, "", "Upsample"], [329, 5, 1, "", "average_gradients"], [436, 3, 1, "", "celu"], [437, 3, 1, "", "elu"], [438, 3, 1, "", "gelu"], [439, 3, 1, "", "gelu_approx"], [440, 3, 1, "", "gelu_fast_approx"], [441, 3, 1, "", "glu"], [442, 3, 1, "", "hard_shrink"], [443, 3, 1, "", "hard_tanh"], [444, 3, 1, "", "hardswish"], [445, 3, 1, "", "leaky_relu"], [446, 3, 1, "", "log_sigmoid"], [447, 3, 1, "", "log_softmax"], [462, 3, 1, "", "mish"], [463, 3, 1, "", "prelu"], [330, 5, 1, "", "quantize"], [464, 3, 1, "", "relu"], [465, 3, 1, "", "relu6"], [466, 3, 1, "", "selu"], [467, 3, 1, "", "sigmoid"], [468, 3, 1, "", "silu"], [469, 3, 1, "", "softmax"], [470, 3, 1, "", "softmin"], [471, 3, 1, "", "softplus"], [472, 3, 1, "", "softshrink"], [473, 3, 1, "", "step"], [474, 3, 1, "", "tanh"], [331, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[385, 4, 1, "", "apply"], [386, 4, 1, "", "apply_to_modules"], [387, 4, 1, "", "children"], [388, 4, 1, "", "eval"], [389, 4, 1, "", "filter_and_map"], [390, 4, 1, "", "freeze"], [391, 4, 1, "", "leaf_modules"], [392, 4, 1, "", "load_weights"], [393, 4, 1, "", "modules"], [394, 4, 1, "", "named_modules"], [395, 4, 1, "", "parameters"], [396, 4, 1, "", "save_weights"], [397, 4, 1, "", "set_dtype"], [398, 6, 1, "", "state"], [399, 4, 1, "", "train"], [400, 4, 1, "", "trainable_parameters"], [401, 6, 1, "", "training"], [402, 4, 1, "", "unfreeze"], [403, 4, 1, "", "update"], [404, 4, 1, "", "update_modules"]], "mlx.nn.init": [[428, 5, 1, "", "constant"], [429, 5, 1, "", "glorot_normal"], [430, 5, 1, "", "glorot_uniform"], [431, 5, 1, "", "he_normal"], [432, 5, 1, "", "he_uniform"], [433, 5, 1, "", "identity"], [434, 5, 1, "", "normal"], [435, 5, 1, "", "uniform"]], "mlx.nn.losses": [[448, 3, 1, "", "binary_cross_entropy"], [449, 3, 1, "", "cosine_similarity_loss"], [450, 3, 1, "", "cross_entropy"], [451, 3, 1, "", "gaussian_nll_loss"], [452, 3, 1, "", "hinge_loss"], [453, 3, 1, "", "huber_loss"], [454, 3, 1, "", "kl_div_loss"], [455, 3, 1, "", "l1_loss"], [456, 3, 1, "", "log_cosh_loss"], [457, 3, 1, "", "margin_ranking_loss"], [458, 3, 1, "", "mse_loss"], [459, 3, 1, "", "nll_loss"], [460, 3, 1, "", "smooth_l1_loss"], [461, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[482, 3, 1, "", "AdaDelta"], [483, 3, 1, "", "Adafactor"], [484, 3, 1, "", "Adagrad"], [485, 3, 1, "", "Adam"], [486, 3, 1, "", "AdamW"], [487, 3, 1, "", "Adamax"], [488, 3, 1, "", "Lion"], [489, 3, 1, "", "MultiOptimizer"], [502, 3, 1, "", "Optimizer"], [494, 3, 1, "", "RMSprop"], [495, 3, 1, "", "SGD"], [332, 5, 1, "", "clip_grad_norm"], [496, 5, 1, "", "cosine_decay"], [497, 5, 1, "", "exponential_decay"], [498, 5, 1, "", "join_schedules"], [499, 5, 1, "", "linear_schedule"], [500, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[490, 4, 1, "", "apply_gradients"], [491, 4, 1, "", "init"], [492, 6, 1, "", "state"], [493, 4, 1, "", "update"]], "mlx.utils": [[333, 5, 1, "", "tree_flatten"], [334, 5, 1, "", "tree_map"], [335, 5, 1, "", "tree_map_with_path"], [336, 5, 1, "", "tree_reduce"], [337, 5, 1, "", "tree_unflatten"]]}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "terms": {"": [0, 1, 2, 5, 6, 7, 48, 52, 64, 100, 121, 123, 157, 158, 161, 162, 165, 166, 168, 169, 180, 201, 208, 213, 216, 230, 246, 252, 256, 276, 279, 280, 301, 303, 321, 322, 323, 325, 331, 349, 352, 353, 369, 375, 382, 383, 389, 390, 392, 396, 397, 398, 402, 410, 481, 491, 492, 504, 507, 509, 510, 514, 515, 516, 517], "0": [0, 1, 2, 4, 5, 6, 7, 9, 10, 15, 19, 39, 46, 47, 50, 68, 73, 77, 82, 85, 86, 98, 101, 105, 106, 107, 108, 109, 110, 111, 119, 124, 125, 150, 152, 155, 171, 175, 180, 186, 196, 203, 205, 206, 208, 210, 214, 240, 247, 255, 259, 261, 262, 267, 271, 276, 283, 287, 292, 293, 296, 300, 301, 315, 317, 318, 319, 320, 321, 322, 325, 329, 332, 333, 335, 336, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 370, 371, 374, 376, 377, 381, 382, 383, 406, 411, 413, 418, 422, 424, 426, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 442, 443, 444, 445, 448, 450, 452, 453, 457, 460, 461, 463, 464, 465, 466, 472, 473, 476, 479, 482, 483, 485, 486, 487, 488, 491, 494, 495, 496, 497, 498, 499, 500, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516], "00005": 5, "0001": 418, "0005": 439, "001": 483, "00364": 5, "01": [5, 377, 445, 486], "0137595": 431, "015": 440, "0184009": 432, "02264": 430, "024": 510, "02765": 431, "0300242": 432, "044715": [367, 439], "0485873": 450, "05": [17, 188, 354, 370, 374, 376, 409], "0507": 466, "05202": 6, "06": [451, 461, 482], "0638": 457, "06450": 376, "0645099": 434, "06561": 497, "06675": 488, "07467": 409, "08": [17, 188, 449, 484, 485, 486, 487, 494], "08022": 374, "081": 500, "08415": 440, "08494": 370, "08619": 432, "08681": [384, 462], "09864": 6, "0999938": 498, "0999961": 496, "0f": 0, "1": [0, 1, 2, 3, 4, 6, 7, 15, 19, 29, 30, 39, 47, 50, 86, 105, 106, 107, 108, 109, 110, 111, 119, 124, 125, 146, 147, 148, 149, 152, 155, 156, 157, 160, 161, 164, 165, 166, 167, 168, 169, 171, 183, 187, 194, 196, 201, 202, 203, 204, 206, 208, 210, 227, 231, 246, 248, 252, 256, 259, 260, 261, 267, 286, 288, 292, 293, 295, 308, 314, 315, 320, 321, 332, 335, 336, 340, 349, 351, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 370, 374, 375, 376, 378, 381, 406, 409, 410, 413, 417, 418, 424, 427, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 440, 441, 443, 446, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 459, 460, 461, 466, 467, 469, 470, 471, 473, 476, 479, 481, 482, 483, 484, 485, 486, 487, 488, 491, 494, 495, 496, 497, 498, 499, 500, 507, 508, 509, 510, 511, 512, 514, 515, 516, 517], "10": [0, 3, 6, 7, 196, 218, 276, 281, 334, 349, 392, 476, 498, 500, 507, 508, 511], "100": [2, 5, 6, 448, 499, 507, 510, 513, 517], "1000": [2, 496, 507], "10000": 413, "101": 499, "1024": [1, 6], "105361": 448, "10_000": 5, "10x": 488, "11": 208, "12": [6, 183, 196, 498], "1212": 482, "123": [508, 512], "12451": 430, "128": [281, 349], "13": 9, "14": [9, 196], "15": [1, 9, 196, 208, 287, 336, 507], "150594": 429, "15268": 431, "16": [1, 152, 340, 351, 353, 374, 381, 383, 385, 479], "1606": 440, "1607": [374, 376], "16384": 183, "16506": 432, "168": 508, "17": [4, 9], "177208": 431, "18": 196, "1803": 370, "1908": [384, 462], "1910": 409, "191107": 429, "192": 508, "1985": 208, "1_000": 5, "1d": [0, 105, 109, 112, 279, 309], "1e": [0, 5, 7, 17, 188, 354, 370, 374, 376, 377, 409, 449, 451, 461, 481, 482, 483, 484, 485, 486, 487, 491, 494, 496, 497, 498, 499, 500], "1e3": 507, "1st": 252, "2": [0, 1, 2, 4, 5, 6, 7, 39, 106, 110, 119, 124, 125, 141, 147, 148, 149, 157, 161, 164, 165, 166, 167, 168, 169, 171, 183, 194, 196, 200, 201, 202, 203, 204, 205, 206, 208, 209, 210, 213, 214, 220, 227, 252, 260, 265, 292, 293, 312, 315, 317, 318, 319, 320, 332, 336, 340, 349, 351, 352, 353, 357, 360, 367, 377, 381, 382, 383, 409, 418, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 450, 451, 453, 460, 461, 476, 479, 481, 482, 484, 485, 486, 491, 494, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517], "20": [183, 196, 208], "200": [6, 498, 510], "2002": 6, "2011": 484, "2012": [482, 494], "2015": [363, 485, 487], "2019": [6, 486], "2020": 6, "2021": 6, "20397": 448, "20_000": 6, "21": [6, 196, 500], "2104": 6, "223144": 448, "223404": 430, "225": 208, "225763": 457, "2302": 488, "23607": [208, 210], "24": 196, "24264": 208, "247": 6, "25": [9, 406, 427], "25211": 431, "256": [1, 7, 152], "256995": 457, "27": 4, "28": [183, 196], "2d": [0, 106, 110, 125, 252, 354, 363], "2nd": 252, "2x": 514, "3": [0, 1, 2, 4, 6, 9, 86, 107, 111, 119, 147, 149, 171, 194, 196, 202, 203, 204, 208, 210, 292, 293, 320, 332, 336, 353, 358, 361, 367, 383, 427, 430, 432, 439, 444, 483, 488, 504, 507, 508, 509, 511, 514, 515], "30": 483, "3118": 514, "32": [1, 6, 7, 94, 252, 253, 340, 352, 353, 382, 383, 409, 507], "32mib": 329, "330": 6, "33333": 427, "33554432": 329, "348587": 450, "363207": 429, "36788": 507, "379159": 430, "380709": 434, "39": 6, "3d": [0, 2, 107, 111, 354, 364, 427], "3f": [2, 7, 507], "3x": 2, "4": [0, 1, 2, 6, 123, 152, 155, 171, 176, 196, 208, 252, 253, 281, 292, 320, 330, 336, 340, 351, 352, 353, 354, 374, 381, 382, 383, 407, 408, 426, 427, 429, 430, 431, 448, 507, 508, 509, 511, 515, 517], "4096": [2, 507, 510, 517], "40x": 1, "41421": 208, "417497": 435, "42": 337, "437": 6, "44": 6, "447214": 210, "458835": 431, "475": 6, "48095": 429, "4d": [1, 427], "4m": 1, "5": [0, 1, 2, 5, 6, 9, 196, 208, 255, 286, 292, 336, 351, 354, 362, 363, 364, 367, 371, 374, 381, 422, 427, 428, 431, 432, 439, 442, 460, 472, 476, 481, 494, 496, 497, 507, 510, 511], "50": [0, 215], "500": [6, 517], "510826": 448, "512": [3, 6, 426, 517], "534422": 434, "539245": 448, "53947": 429, "55": 1, "559": 2, "5701": 482, "573409": 457, "57771": 210, "579": 6, "5f": 5, "6": [1, 2, 6, 119, 196, 208, 281, 292, 412, 426, 430, 439, 440, 444, 451, 461, 465, 494, 507, 511, 515], "61278": 429, "617261": 435, "628": 6, "633": 6, "639": 510, "64": [0, 1, 94, 123, 176, 252, 253, 330, 340, 407, 408], "64331": 432, "666329": 432, "66667": 427, "67326": 466, "676": 1, "690": 6, "6967": 431, "7": [2, 6, 196, 208, 252, 511], "702": [367, 440], "707107": 203, "71828": 507, "74166": 208, "74597": 208, "75": 427, "75596": 457, "75787": 431, "765166": 457, "773433": 457, "774": 2, "776856": 430, "793615": 432, "79854": 432, "7b": 6, "7m": 1, "8": [0, 1, 2, 6, 9, 208, 252, 340, 352, 353, 374, 382, 383, 426, 449, 482, 483, 484, 485, 486, 487, 494, 507, 511, 515, 517], "8192": [6, 183], "84804": 208, "863726": 435, "883935": 435, "890597": 430, "894427": 210, "89613": 429, "8gb": 6, "8x": 1, "9": [4, 9, 208, 450, 482, 485, 486, 487, 488, 491, 497, 500, 514], "90041": 430, "912766": 430, "916291": 448, "95": 7, "982273": 434, "99": [488, 494], "995016": 429, "999": [485, 486, 487], "A": [0, 2, 6, 8, 9, 10, 70, 84, 100, 147, 148, 151, 152, 153, 155, 180, 194, 195, 201, 203, 204, 206, 208, 210, 213, 216, 226, 227, 228, 232, 236, 252, 255, 256, 257, 259, 260, 261, 262, 263, 266, 267, 296, 300, 303, 321, 324, 325, 330, 331, 332, 333, 334, 335, 336, 337, 338, 349, 354, 363, 369, 370, 374, 376, 389, 393, 394, 397, 403, 404, 409, 415, 418, 426, 429, 430, 432, 440, 461, 462, 479, 481, 485, 487, 489, 490, 491, 493, 498, 507, 508, 509, 510, 512, 513, 514], "AS": 175, "And": [4, 6, 427], "As": [7, 39, 308, 349, 508], "At": [99, 320, 508], "But": [509, 517], "By": [6, 330, 397, 448, 508, 510, 514], "For": [0, 1, 2, 4, 6, 9, 39, 119, 155, 175, 194, 208, 252, 337, 349, 354, 363, 367, 385, 390, 399, 402, 408, 413, 418, 427, 429, 430, 431, 432, 448, 476, 481, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517], "If": [0, 1, 2, 4, 6, 9, 16, 17, 18, 19, 27, 28, 29, 30, 80, 84, 85, 86, 99, 101, 112, 115, 116, 117, 118, 124, 125, 128, 129, 130, 132, 133, 134, 143, 151, 153, 154, 155, 159, 163, 167, 168, 169, 173, 174, 175, 180, 188, 200, 201, 202, 208, 213, 216, 222, 226, 227, 228, 230, 231, 236, 240, 244, 247, 248, 250, 251, 256, 260, 262, 271, 275, 283, 286, 294, 295, 296, 301, 305, 307, 308, 309, 312, 314, 315, 321, 322, 325, 327, 329, 330, 334, 336, 354, 356, 357, 358, 359, 360, 361, 370, 376, 378, 390, 392, 402, 408, 410, 413, 415, 418, 427, 448, 450, 461, 483, 485, 486, 507, 508, 509, 510, 512, 513, 516, 517, 518], "In": [0, 1, 2, 6, 7, 39, 155, 227, 252, 334, 349, 363, 370, 479, 482, 484, 485, 487, 488, 490, 506, 507, 508, 509, 510, 512, 513, 516, 517], "It": [2, 6, 9, 133, 180, 285, 321, 332, 336, 349, 404, 408, 490, 502, 508, 512, 514, 516], "Its": [349, 509], "No": [2, 6, 203, 204, 508], "Not": [100, 243, 507], "ON": [3, 4, 9], "Of": 510, "On": [1, 507, 510, 513], "One": [156, 160, 167, 247, 277, 507, 509, 510, 512], "THE": 9, "That": 6, "The": [0, 1, 2, 3, 4, 6, 7, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 48, 52, 63, 64, 70, 80, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 179, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 197, 198, 199, 202, 203, 204, 206, 207, 208, 210, 211, 212, 213, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 238, 239, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 279, 280, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 340, 342, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 366, 368, 369, 370, 374, 375, 376, 378, 381, 382, 383, 385, 386, 390, 392, 396, 397, 398, 399, 402, 403, 404, 405, 407, 408, 409, 410, 413, 415, 418, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 441, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 473, 476, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 494, 495, 496, 499, 502, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518], "Then": [5, 9], "There": [1, 349, 427, 507], "These": [1, 2, 100, 251, 309, 450, 517], "To": [0, 2, 3, 5, 6, 7, 9, 206, 283, 349, 476, 481, 507, 508, 509, 510, 515], "With": 509, "_": [1, 3, 5, 6, 335, 349, 496, 497, 498, 499, 500, 504, 507, 513, 517], "__call__": [1, 6, 7, 349, 479, 509], "__init__": [2, 6, 7, 10, 11, 12, 31, 119, 127, 170, 338, 349, 479], "__main__": [2, 6], "__name__": [2, 6], "_a": 2, "_ext": 2, "_f": 208, "_in": [429, 430], "_out": [429, 430], "_p": 461, "_val": 443, "a1": 175, "a2": 175, "a_": 208, "a_max": [0, 99], "a_min": [0, 99], "a_ndim": 1, "a_shap": 1, "a_strid": 1, "a_view": 514, "ab": [0, 17, 188, 208, 321, 370, 374, 376, 384, 409, 440, 462, 507, 509], "abil": 508, "abl": [2, 4, 252, 512], "abort": 119, "about": [1, 2, 6, 7, 138, 232, 513, 517], "abov": [1, 2, 6, 252, 318, 349, 427, 508, 509, 510, 511, 512, 513, 517], "absolut": [0, 13, 17, 188, 439, 440, 460, 508], "acc": 336, "acceler": [4, 354], "accept": [508, 512], "access": [0, 6, 51, 349, 479, 491, 508, 513, 517], "accord": [0, 257, 326, 330, 405, 429, 430, 431, 432], "accordingli": 2, "accumul": [336, 409], "accuraci": 7, "accustom": 6, "achiev": [349, 508], "across": [1, 2, 9, 329, 370, 508], "act": [2, 456], "action": 349, "activ": [2, 9, 177, 363, 424, 426, 442, 462, 472, 473, 475, 507], "actual": [6, 19, 392, 479, 513], "ad": [0, 1, 2, 5, 9, 151, 335, 359, 360, 361, 374, 479, 482, 483, 484, 485, 486, 487, 494, 508, 513, 516], "adadelta": 481, "adafactor": 481, "adagrad": 481, "adam": [481, 487, 488, 498, 499], "adamax": 481, "adamw": [481, 488], "adapt": [482, 483, 484, 508], "add": [0, 1, 2, 3, 4, 6, 15, 39, 145, 221, 247, 252, 356, 357, 358, 359, 360, 361, 509, 510, 512, 517], "add_argu": 6, "add_depend": 2, "add_execut": 4, "add_fun": 509, "add_librari": 2, "addit": [0, 2, 4, 6, 9, 14, 15, 147, 151, 153, 155, 216, 354, 359, 360, 361, 370, 376, 405, 409, 479, 510], "addmm": 0, "address": 2, "adjac": 363, "advanc": [6, 507], "advantag": 517, "advis": 514, "affin": [354, 370, 374, 376, 378, 408], "after": [2, 6, 7, 29, 98, 171, 173, 176, 248, 252, 354, 370, 376, 385, 386, 390, 392, 399, 402, 403, 404, 405, 426, 460, 507, 508, 517], "after_1": 247, "after_2": 247, "after_i": 247, "after_n": 247, "afternoon": 6, "again": [6, 9, 349, 507], "against": [0, 4, 95], "aggreg": [405, 508], "ago": 6, "ai": 119, "aim": 508, "ainv": [205, 214], "albeit": 517, "algebra": 8, "algorithm": [427, 488], "alia": [102, 103, 367], "alibi": 349, "align": [201, 252, 369, 375], "align_corn": 427, "all": [0, 1, 2, 3, 7, 9, 17, 29, 39, 87, 88, 89, 100, 106, 107, 108, 110, 111, 119, 128, 129, 130, 148, 150, 158, 159, 162, 163, 166, 169, 175, 176, 213, 227, 247, 248, 275, 299, 329, 330, 349, 385, 386, 390, 393, 394, 395, 400, 402, 405, 418, 426, 427, 476, 479, 502, 504, 507, 511, 512, 513, 515, 518], "all_avg": 508, "all_reduce_grad": 508, "all_reduce_s": 329, "all_sum": 508, "allclos": [0, 1, 152], "alloc": [2, 178, 283, 286, 479], "allow": [0, 1, 2, 147, 149, 175, 176, 194, 332, 349, 404, 479, 502, 508, 511, 512, 515], "allow_col_major": [0, 104], "almost": [6, 508], "alon": [2, 514], "along": [0, 2, 27, 28, 100, 101, 115, 116, 117, 118, 128, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 175, 176, 183, 202, 208, 222, 251, 262, 271, 275, 294, 296, 300, 308, 309, 312, 313, 314, 315, 323, 349, 368, 410, 441], "alpha": [0, 2, 15, 252, 355, 365, 436, 437, 461, 463, 466, 486, 494], "alpha_": 2, "alreadi": [2, 3, 6, 508], "also": [0, 1, 2, 4, 6, 7, 8, 9, 12, 14, 90, 92, 93, 126, 135, 136, 140, 158, 162, 166, 169, 181, 182, 197, 198, 199, 221, 229, 237, 239, 243, 249, 252, 270, 274, 304, 330, 331, 342, 349, 389, 403, 405, 407, 408, 416, 438, 466, 468, 475, 481, 507, 508, 509, 510, 511, 512, 513, 514, 515, 518], "altern": 504, "although": 508, "alwai": [1, 85, 177, 186, 333, 508, 509, 510], "am": 6, "among": 2, "amount": [6, 179, 286, 351, 381, 509], "amus": 6, "an": [0, 1, 2, 3, 4, 6, 7, 9, 11, 16, 18, 31, 86, 87, 88, 89, 96, 104, 105, 106, 107, 108, 109, 110, 111, 127, 132, 133, 134, 143, 147, 149, 150, 151, 155, 171, 174, 184, 186, 189, 200, 208, 216, 238, 244, 245, 247, 250, 251, 252, 253, 262, 271, 273, 275, 276, 286, 287, 296, 299, 306, 308, 309, 312, 313, 317, 320, 325, 327, 328, 333, 334, 335, 336, 340, 349, 362, 367, 370, 375, 376, 378, 385, 405, 406, 408, 410, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 439, 463, 476, 481, 482, 493, 497, 502, 504, 506, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518], "anaconda": 508, "anchor": 461, "angl": [122, 254, 377], "angular": [154, 413], "ani": [0, 1, 2, 6, 8, 19, 100, 119, 130, 329, 333, 334, 335, 336, 337, 349, 367, 385, 386, 389, 398, 408, 426, 427, 476, 499, 506, 507, 508, 510, 513, 515, 516, 517], "anonym": 507, "anoth": [0, 95, 99, 194, 227, 304, 326, 340, 349, 385, 507, 509, 510, 511, 517], "anwywher": 9, "anyhow": 6, "anymor": 6, "anyth": [6, 321, 508, 513], "anytim": 513, "api": [1, 2, 86, 147, 149, 186, 367, 508, 509, 510], "aplu": 209, "app": 9, "append": [6, 227, 507, 513], "appl": [2, 6, 8, 9, 517], "appli": [0, 39, 154, 155, 175, 213, 334, 335, 336, 349, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 363, 364, 365, 367, 368, 370, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 386, 399, 406, 408, 409, 410, 411, 412, 414, 416, 417, 419, 420, 421, 422, 423, 424, 425, 427, 436, 437, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 476, 485, 486, 490, 493, 499, 502, 507, 508], "applic": [3, 9], "apply_fn": 386, "apply_gradi": 481, "apply_to_modul": [349, 390], "approach": [456, 510], "appropri": 507, "approx": 367, "approxim": [17, 367, 438, 439, 440], "ar": [0, 1, 2, 5, 6, 7, 8, 9, 17, 19, 84, 86, 94, 95, 96, 99, 100, 108, 112, 119, 125, 130, 132, 133, 143, 150, 152, 155, 157, 158, 161, 162, 165, 166, 168, 169, 171, 175, 176, 180, 188, 189, 190, 191, 192, 193, 194, 195, 203, 204, 206, 208, 210, 216, 227, 246, 247, 248, 252, 253, 255, 256, 257, 262, 263, 266, 267, 275, 281, 282, 299, 300, 308, 321, 324, 325, 330, 333, 334, 340, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 370, 374, 376, 378, 392, 405, 408, 427, 448, 450, 451, 475, 479, 481, 488, 491, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517], "arang": [0, 1, 208, 262, 340, 427, 511, 514], "arbitrari": [333, 479, 508], "arbitrarili": [1, 100, 349, 506, 510, 515], "arc": 0, "arcco": 0, "arccosh": 0, "architectur": [6, 9, 232, 349, 404, 517], "archiv": 516, "arcsin": 0, "arcsinh": 0, "arctan": 0, "arctan2": 0, "arctanh": 0, "arg": [2, 6, 11, 19, 86, 127, 143, 147, 148, 149, 170, 186, 281, 282, 338, 512], "arg1": 194, "arg2": 194, "argmax": [0, 7], "argmin": 0, "argnam": [180, 321], "argnum": [2, 119, 180, 321, 510], "argpars": 6, "argpartit": 0, "argsort": 0, "argument": [1, 32, 67, 81, 86, 100, 143, 180, 321, 334, 335, 336, 349, 427, 504, 508, 509, 510, 512, 516, 517, 518], "argumentpars": 6, "ari": [87, 88, 89], "aris": 514, "arm": 9, "arm64": 9, "around": 6, "arr": [0, 278, 511], "arr_0": 516, "arrai": [0, 1, 2, 4, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 128, 129, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 340, 349, 354, 375, 385, 392, 395, 400, 406, 427, 428, 429, 430, 431, 432, 433, 434, 435, 441, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 473, 476, 479, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500, 507, 508, 509, 510, 513, 514, 515, 517], "array_equ": [0, 17, 188], "arrayfir": 8, "arxiv": [6, 370, 374, 376, 384, 409, 440, 462, 482, 488], "as_strid": 0, "ascend": [203, 204], "ask": [6, 508, 512], "assert": [1, 2, 152], "assign": [0, 2, 39, 479, 508], "associ": [2, 281, 282, 513], "assum": [0, 6, 94, 202, 203, 204, 210, 334, 349, 370, 508], "astyp": [0, 1, 2, 6, 152, 385, 514], "asynchron": 86, "atleast": 0, "atleast_1d": 0, "atleast_2d": 0, "atleast_3d": 0, "atol": [0, 17, 188], "atom": [1, 152], "atomic_fetch_add_explicit": 1, "atomic_output": [1, 152], "attach": 2, "attempt": [100, 508], "attend": 405, "attent": [155, 390, 405, 418, 426], "attention_norm": 6, "attribut": [1, 10, 11, 12, 31, 170, 338, 398, 479, 502], "audio": 427, "auto": [0, 2, 4, 9, 508, 509], "autom": 510, "automat": [1, 2, 8, 152, 216, 508, 515, 516, 517], "autoregress": 6, "avail": [2, 5, 6, 7, 9, 11, 130, 131, 233, 286, 342, 508, 512, 517], "averag": [329, 351, 352, 353, 482, 483, 485, 486, 487, 508], "avgpool1d": 349, "avgpool2d": 349, "avgpool3d": 349, "avoid": [1, 2, 397, 507, 508], "awai": [2, 6], "awar": [507, 513], "ax": [0, 2, 16, 18, 27, 28, 81, 119, 145, 157, 158, 159, 161, 162, 163, 165, 166, 168, 169, 171, 187, 208, 211, 212, 226, 228, 230, 236, 247, 250, 275, 292, 293, 294, 299, 301, 305, 306, 312, 316, 322, 510], "axes_a": 0, "axes_b": 0, "axi": [0, 2, 6, 7, 16, 18, 27, 28, 29, 30, 34, 35, 36, 37, 42, 43, 44, 45, 57, 58, 59, 60, 61, 65, 73, 76, 77, 78, 82, 101, 115, 116, 117, 118, 125, 128, 145, 151, 153, 156, 160, 164, 165, 166, 167, 168, 169, 171, 183, 202, 206, 208, 222, 226, 228, 230, 236, 238, 247, 248, 250, 251, 256, 262, 271, 275, 294, 295, 296, 299, 300, 301, 305, 306, 308, 309, 313, 314, 315, 316, 320, 322, 323, 325, 351, 352, 353, 368, 381, 382, 383, 410, 441, 447, 449, 450, 454, 459, 461, 469, 470, 511], "axis1": [0, 47, 79, 125, 306, 315], "axis2": [0, 47, 79, 125, 306, 315], "axpbi": 2, "axpby_": 2, "axpby_gener": 2, "axpby_general_bfloat16": 2, "axpby_general_complex64": 2, "axpby_general_float16": 2, "axpby_general_float32": 2, "axpby_impl": 2, "b": [0, 1, 2, 3, 4, 6, 14, 15, 17, 25, 84, 90, 92, 93, 94, 135, 136, 140, 152, 155, 173, 175, 181, 182, 186, 187, 188, 196, 197, 198, 199, 202, 208, 211, 212, 221, 223, 225, 227, 229, 237, 239, 243, 246, 249, 252, 259, 270, 274, 304, 312, 321, 335, 336, 368, 378, 410, 427, 441, 510, 511, 513, 514, 515, 516, 517], "b1": 175, "b2": 175, "b_": [369, 375], "b_stride": 1, "ba": [485, 487], "back": [6, 119, 233, 514], "backend": [1, 9, 130, 131, 512], "backward": [1, 507, 510], "bad": 513, "balanc": 456, "baltimor": 208, "bandwidth": [507, 508], "base": [0, 2, 4, 154, 218, 220, 249, 413, 426, 479, 481, 487, 502, 504, 507, 511], "base_idx": 1, "basi": 502, "basic": [5, 276, 510], "batch": [6, 15, 94, 155, 175, 176, 227, 260, 354, 356, 357, 358, 359, 360, 361, 363, 364, 369, 375, 405, 410, 427, 513], "batch_idx": 1, "batch_iter": [7, 481], "batch_siz": [7, 481], "batchnorm": 349, "becaus": [6, 177, 349, 507, 508, 509, 513], "becom": 130, "been": [0, 2, 6, 178, 513], "befor": [1, 2, 6, 9, 29, 152, 248, 329, 389, 426, 491, 508, 511, 513], "before_1": 247, "before_2": 247, "before_i": 247, "before_n": 247, "beforehand": 246, "beggin": 275, "begin": [85, 179, 201, 252, 369, 375, 424, 442, 453, 460, 466, 472, 473, 508], "behav": 119, "behavior": [163, 206, 260, 456, 511, 513], "behaviour": [119, 200, 201], "behind": 510, "being": [302, 349], "bell": 2, "below": [2, 9, 208, 317, 319, 340, 427, 508, 513], "bench": 2, "benchmark": [2, 507], "benefici": [363, 364, 513], "benefit": 508, "best": 508, "beta": [0, 2, 15, 123, 252, 354, 370, 374, 376, 460, 481, 485, 486, 487, 488], "beta_": 2, "beta_1": [483, 485, 486, 487, 488], "beta_2": [485, 486, 487, 488], "better": [329, 510, 517], "between": [0, 2, 8, 99, 171, 426, 449, 452, 453, 456, 498, 508, 512, 513, 514, 517], "beyond": [275, 496, 499], "bfloat16": [2, 12, 183, 340, 514], "bfloat16_t": 2, "bia": [6, 123, 151, 176, 252, 253, 334, 349, 356, 357, 358, 359, 360, 361, 369, 375, 376, 378, 390, 392, 402, 405, 408, 410, 485, 486, 487, 491, 510], "bias": [0, 123, 176, 252, 253, 369, 375, 390, 402, 405], "bias_correct": [485, 486], "bicub": 427, "big": [1, 329, 507], "bigger": [6, 483], "bilinear": [1, 427], "binari": [216, 278, 279, 280, 281, 282, 323, 424, 448, 473, 507, 512], "binary_cross_entropi": [349, 507], "bind": 512, "bit": [0, 123, 176, 197, 252, 253, 274, 330, 340, 385, 407, 408, 409], "bitwis": [0, 90, 91, 92, 93, 197, 274], "bitwise_and": 0, "bitwise_invert": 0, "bitwise_or": 0, "bitwise_xor": 0, "block": [0, 2, 6, 94, 426], "block_masked_mm": 0, "block_siz": [0, 94], "bn": 354, "bodi": [1, 152], "bool": [0, 1, 2, 16, 17, 18, 27, 28, 34, 35, 36, 37, 42, 43, 44, 45, 57, 58, 59, 60, 61, 65, 77, 78, 80, 82, 84, 100, 104, 108, 115, 116, 117, 118, 130, 131, 147, 149, 152, 154, 175, 176, 188, 194, 200, 201, 208, 212, 213, 214, 216, 222, 226, 228, 230, 231, 233, 236, 250, 253, 301, 305, 322, 330, 354, 356, 357, 358, 359, 360, 361, 369, 370, 374, 375, 376, 378, 385, 389, 390, 392, 397, 399, 402, 405, 408, 410, 413, 418, 426, 427, 448, 451, 483, 485, 486, 489, 495], "bool_": [12, 340], "boolean": [0, 17, 84, 155, 188, 189, 190, 191, 192, 193, 194, 223, 224, 225, 340, 401, 511], "both": [1, 2, 14, 90, 92, 93, 135, 136, 140, 181, 182, 194, 197, 198, 199, 208, 221, 229, 237, 239, 243, 249, 256, 270, 274, 304, 330, 351, 352, 353, 374, 375, 381, 382, 383, 481, 507, 508, 509, 510, 515, 517], "bottom": 427, "bound": [0, 263, 266, 267, 367, 435, 507, 511, 517], "boundari": 498, "bracket": 6, "brain": 340, "break": 514, "bregler": 363, "bridg": 508, "broadcast": [0, 2, 14, 17, 90, 92, 93, 95, 96, 99, 135, 136, 140, 155, 174, 181, 182, 188, 197, 198, 199, 221, 227, 229, 237, 239, 243, 249, 251, 255, 256, 260, 263, 266, 267, 270, 274, 304, 309, 326, 405], "broadcast_arrai": [0, 2], "broadcast_to": 0, "broadcasted_input": 2, "brought": 8, "btl_tcp_if_includ": [508, 512], "btl_tcp_link": [508, 512], "buffer": [1, 2, 177, 514], "bui": 6, "build": [3, 4, 6, 8, 431, 479, 507, 509], "build_ext": [2, 9], "build_shared_lib": [2, 9], "built": [1, 2, 4, 9, 513], "bundl": 6, "byte": [52, 63, 177, 178, 179, 283, 286, 287, 329, 340, 512], "c": [0, 1, 2, 6, 15, 208, 354, 356, 357, 358, 359, 360, 361, 363, 364, 374, 375, 514, 515, 517], "c_": [375, 488], "c_in": [105, 106, 107, 108, 109, 110, 111], "c_out": [105, 106, 107, 108, 109, 110, 111], "c_pad": 1, "c_t": [375, 488], "cabl": 508, "cach": [6, 9, 98, 177, 178, 283, 507], "calcul": [208, 209, 448, 451, 457, 483], "call": [2, 3, 6, 7, 32, 98, 130, 133, 173, 179, 186, 329, 349, 366, 390, 402, 407, 415, 479, 481, 491, 507, 508, 509, 510, 512, 513], "callabl": [100, 119, 147, 149, 152, 180, 186, 195, 321, 324, 325, 330, 331, 333, 334, 335, 336, 385, 386, 389, 397, 410, 415, 426, 428, 429, 430, 431, 432, 433, 434, 435, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 496, 497, 498, 499, 500], "can": [1, 2, 3, 4, 6, 8, 9, 14, 19, 67, 81, 85, 86, 90, 92, 93, 100, 125, 126, 127, 135, 136, 140, 143, 147, 148, 155, 175, 181, 182, 186, 197, 198, 199, 208, 221, 229, 237, 239, 243, 249, 255, 256, 263, 266, 267, 270, 274, 279, 287, 304, 315, 320, 321, 336, 349, 352, 353, 366, 367, 382, 383, 389, 402, 407, 415, 427, 450, 476, 479, 481, 490, 491, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518], "cannot": [6, 99, 511, 514], "captur": [2, 3, 100, 119, 234, 235, 349, 507], "care": [6, 508, 509, 512, 513], "carefulli": [507, 509], "carri": 2, "cartesian": 231, "case": [2, 6, 128, 129, 130, 132, 133, 134, 158, 162, 164, 166, 167, 168, 169, 171, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 227, 273, 299, 320, 352, 353, 363, 382, 383, 424, 442, 460, 466, 472, 473, 490, 491, 507, 508, 509, 510, 512, 515, 516, 517, 518], "cast": [2, 38, 167, 168, 169, 216, 329, 385, 397, 514], "caster": 2, "categor": 6, "categori": [12, 194, 340], "caus": [349, 507, 513], "causal": [6, 155], "caution": 85, "cd": [3, 9], "cdf": [257, 367, 438], "cdot": [440, 449, 452, 468], "ceil": 0, "ceildiv": 1, "cell": 375, "celu": 349, "center": 159, "certain": [399, 507], "chang": [85, 86, 100, 147, 149, 186, 285, 323, 403, 408, 427, 453, 460, 507, 514], "channel": [1, 105, 106, 107, 108, 109, 110, 111, 354, 356, 357, 358, 359, 360, 361, 363, 364], "channel_idx": 1, "charact": 333, "check": [0, 2, 9, 84, 131, 194, 203, 204, 233, 392, 508, 509, 510, 511], "checklist": [508, 512], "checkout": [3, 507], "checkpoint": [426, 481], "chen": 488, "child": 404, "children": 349, "chip": 9, "choleski": 201, "choos": [6, 154, 413, 512], "chosen": 138, "clamp": 171, "clang": 9, "clarifi": 508, "clariti": 510, "class": [2, 6, 7, 10, 11, 12, 31, 119, 127, 170, 338, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 482, 483, 484, 485, 486, 487, 488, 489, 494, 495, 502], "class_pred": 330, "classif": [431, 432], "classifi": 7, "classmethod": [407, 408], "clear": 98, "click": 9, "clip": [0, 332, 448, 483], "clip_threshold": 483, "clipped_grad": 332, "clone": 9, "close": [5, 8, 9, 17, 188], "closer": 334, "cmake": [3, 4, 9], "cmake_arg": 3, "cmake_build_parallel_level": 9, "cmake_build_typ": 9, "cmake_current_list_dir": 2, "cmake_cxx_standard": 4, "cmake_cxx_standard_requir": 4, "cmake_host_system_processor": 9, "cmake_library_output_directori": 2, "cmake_minimum_requir": 4, "cmakebuild": 2, "cmakeextens": 2, "cmakelist": [2, 4], "cmdclass": 2, "co": [0, 2, 119, 418, 510], "code": [1, 152, 507, 508, 509, 513], "coeffici": [2, 482, 483, 485, 486, 487, 488], "col": [104, 317], "cold": 9, "collect": [334, 335, 506], "column": [104, 150, 184, 203, 252], "com": 9, "combin": [6, 213, 336], "come": [2, 6, 508, 510], "command": [2, 3, 4, 9, 508, 512], "command_buff": 2, "common": [481, 507, 513], "commonli": [7, 403, 476, 507], "commun": [8, 127, 130, 131, 329, 512], "communication_typ": 329, "compact": 207, "compar": [2, 84, 507], "comparison": [17, 140, 181, 182, 198, 199, 243], "compat": [6, 147, 149, 155, 186, 256, 260, 367, 516], "compil": [0, 3, 4, 8, 9, 126, 139, 152, 508, 509, 510, 513], "compiled_fun": [507, 509], "compiled_grad_fn": 507, "complement": 91, "complet": [5, 6, 9, 403, 404, 509, 510, 517], "complex": [2, 102, 103, 165, 166, 167, 168, 169, 185, 203, 204, 268, 333, 340, 349, 404, 507, 509, 510], "complex64": [2, 12, 340], "complex64_t": 2, "complexflo": 12, "compon": [2, 4, 6, 159, 213], "compos": [8, 349, 507, 510, 515], "composit": 515, "compress": 282, "compromis": 6, "comput": [0, 1, 2, 5, 6, 7, 8, 9, 115, 116, 117, 118, 119, 123, 138, 146, 154, 180, 195, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 214, 221, 222, 230, 246, 252, 270, 294, 301, 302, 312, 321, 322, 324, 331, 349, 354, 369, 370, 374, 375, 376, 390, 403, 408, 409, 413, 426, 429, 430, 431, 432, 439, 440, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 481, 482, 483, 485, 486, 487, 488, 493, 507, 508, 509, 510, 515, 517], "computation": 513, "compute_encod": 2, "compute_uv": 213, "concaten": [0, 6, 128, 329], "concept": 479, "concis": 6, "concret": [2, 369, 375, 378, 410, 513, 517], "conda": [9, 508], "condit": [0, 326, 507, 517], "config": [2, 4, 508], "configu": 481, "configur": [123, 508], "confirm": [508, 512], "confus": 7, "conj": 103, "conjug": [0, 102], "connect": [508, 512], "consecut": [154, 252, 413], "consequ": 6, "consid": [6, 17, 84, 104, 188, 333, 334, 335, 370, 489, 506, 508], "consider": 507, "const": [0, 1, 2, 451], "constant": [0, 2, 6, 9, 119, 151, 153, 247, 349, 354, 370, 376, 409, 451, 461, 494, 496, 507, 509, 514], "constant_valu": 247, "constitut": 334, "construct": [0, 2, 7, 46, 124, 174, 206, 244, 313, 327], "consult": 508, "consum": 513, "contain": [2, 6, 9, 29, 30, 70, 100, 125, 138, 164, 165, 166, 175, 176, 203, 208, 223, 224, 225, 252, 296, 326, 329, 332, 349, 389, 391, 392, 398, 426, 457, 476, 479, 507, 510], "content": [9, 389, 507], "context": [303, 509], "contigu": [0, 1, 2, 85, 152], "continu": [355, 436, 508, 510], "contract": [0, 138], "contribut": 2, "contriv": [510, 517], "control": [0, 377, 504, 513], "conv": 112, "conv1d": [0, 349], "conv2d": [0, 349], "conv3d": [0, 349], "conv_gener": 0, "conv_transpose1d": 0, "conv_transpose2d": 0, "conv_transpose3d": 0, "conveni": [1, 2, 7, 194], "convent": [19, 112, 137, 138, 427], "convers": 8, "convert": [0, 1, 2, 80, 87, 88, 89, 122, 171, 254, 407, 408, 513, 514, 515], "convolut": [0, 105, 106, 107, 108, 109, 110, 111, 112, 356, 357, 358, 359, 360, 361, 363, 364], "convolv": [105, 106, 107, 108, 109, 110, 111], "convtranspose1d": 349, "convtranspose2d": 349, "convtranspose3d": 349, "coordin": [0, 231], "copi": [0, 1, 2, 6, 8, 104, 248, 295, 514], "core": [1, 2, 3, 4, 5, 6, 7, 330, 349, 351, 352, 353, 354, 374, 381, 382, 383, 392, 395, 397, 400, 427, 428, 429, 430, 431, 432, 433, 434, 435, 448, 450, 457, 476, 479, 481, 507, 508, 514, 515], "corner": 427, "correct": [2, 9, 485, 486, 487, 511, 513], "correctli": [39, 508], "correl": [108, 363], "correspond": [0, 1, 2, 16, 18, 80, 99, 123, 125, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 203, 226, 228, 236, 250, 292, 293, 305, 312, 320, 325, 334, 489, 508, 510, 512], "cos_first": 418, "cosh": [0, 456], "cosin": [0, 20, 21, 113, 114, 449, 496, 498, 510], "cosine_decai": [481, 498], "cosine_similarity_loss": 349, "cost": [9, 483, 508, 513], "costli": 513, "cot": 1, "cot_index": 1, "cotan": 119, "cotang": [1, 2, 119, 324], "could": [6, 349], "count": [349, 498], "counter": 504, "cours": 510, "coursera": 494, "cout": [4, 509], "cov": 260, "covari": [260, 354], "cover": 2, "cpp": [2, 4], "cpu": [8, 9, 203, 204, 210, 340, 517], "cpython": 2, "crash": [85, 507], "creat": [0, 2, 6, 9, 85, 130, 150, 184, 303, 349, 479, 481, 498, 507, 508, 509, 511, 512, 514], "create_additive_causal_mask": 6, "cross": [7, 108, 448, 450], "cross_entropi": [7, 349], "crowd": 6, "cry": 6, "cubic": 427, "cummax": 0, "cummin": 0, "cumprod": 0, "cumsum": 0, "cumul": [0, 85, 115, 116, 117, 118, 222], "current": [6, 8, 9, 85, 94, 107, 110, 111, 134, 178, 232, 252, 336, 349, 483, 508, 513], "custom": [8, 119, 152, 426], "custom_decod": 426, "custom_encod": 426, "custom_funct": 1, "custom_kernel_myexp_float": 1, "custom_tim": 2, "cvpr": 363, "cxx": 4, "cycl": 506, "d": [0, 1, 2, 6, 107, 111, 124, 125, 155, 187, 208, 227, 231, 246, 308, 315, 317, 318, 319, 337, 358, 361, 364, 369, 375, 410, 482, 485, 487, 517], "d1": 517, "d2": 517, "d2fdx2": 510, "d_i": 378, "dampen": 495, "darwin": 2, "data": [0, 2, 7, 8, 11, 19, 132, 150, 167, 168, 174, 184, 215, 240, 244, 257, 266, 315, 317, 323, 327, 364, 428, 429, 430, 431, 432, 433, 434, 435, 507, 508, 509, 511, 514], "dataset": [5, 508, 513], "datatyp": 52, "dbuild_shared_lib": 9, "dcmake_build_typ": [4, 9], "ddof": [0, 77, 82, 301, 322], "deal": 507, "debug": [1, 3, 508, 512], "debugg": 8, "decai": [483, 486, 488, 495, 496, 497, 500], "decay_r": [483, 497, 500], "decay_step": 496, "decent": 7, "decid": [334, 389], "decim": [0, 68, 276], "declar": 2, "decltyp": 1, "decod": 426, "decomposit": [200, 201, 209, 213], "decor": [1, 119], "decoupl": 486, "dedic": 508, "deep": [354, 429, 430, 431, 432], "def": [1, 2, 5, 6, 7, 119, 147, 149, 152, 321, 349, 479, 507, 508, 509, 510, 511, 513, 514, 517], "default": [1, 2, 9, 15, 16, 17, 18, 19, 27, 28, 29, 30, 84, 85, 94, 100, 101, 105, 106, 107, 108, 109, 110, 111, 119, 120, 121, 123, 124, 125, 128, 129, 130, 132, 133, 134, 147, 149, 150, 152, 154, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 175, 176, 180, 183, 184, 188, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 226, 228, 230, 231, 236, 240, 244, 247, 248, 250, 252, 253, 255, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 271, 273, 276, 283, 284, 285, 286, 287, 295, 296, 299, 300, 301, 303, 305, 307, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 327, 329, 330, 340, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 365, 368, 369, 371, 374, 375, 377, 378, 381, 382, 383, 385, 390, 392, 397, 399, 402, 405, 406, 407, 408, 410, 413, 418, 422, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 441, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 479, 482, 483, 484, 485, 486, 487, 488, 494, 495, 496, 504, 506, 507, 508, 509, 510, 512, 514, 516, 518], "default_devic": 518, "default_stream": 518, "defin": [1, 2, 5, 6, 7, 9, 119, 133, 152, 176, 202, 208, 253, 330, 333, 512, 514], "definit": [119, 200, 201, 260], "degre": [0, 254, 461], "deleg": 489, "delta": [453, 482], "delv": [431, 432], "demonstr": 514, "denomin": [374, 449, 482, 484, 485, 486, 487, 494], "dens": [231, 517], "depend": [0, 2, 3, 4, 5, 9, 80, 208, 369, 375, 410, 507, 508, 511, 516, 517], "depth": [333, 353, 358, 361, 364, 383, 510], "dequant": [0, 252], "deriv": [2, 509, 510, 513], "descend": 387, "descent": [495, 507, 513], "describ": [2, 513], "descript": [2, 4, 6, 340], "design": [1, 5, 8, 504, 517], "destin": [0, 2, 62, 134, 238, 251], "destroi": 507, "detach": 510, "detail": [1, 2, 11, 283, 349, 363, 413, 418, 427, 429, 430, 431, 432, 482, 484, 485, 487, 488, 508, 511, 515], "detect": 507, "determin": [0, 2, 125, 260, 336, 340, 396, 516], "dev": [2, 9], "develop": [2, 4, 9], "developer_dir": 9, "deviat": [0, 261, 301, 429, 431, 434], "devic": [1, 2, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 128, 129, 132, 133, 134, 135, 136, 137, 140, 141, 142, 144, 145, 146, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 326, 327, 328, 338, 517, 518], "device_info": 287, "devicetyp": 10, "df": 514, "dfdx": [509, 510, 511], "dft": [156, 157, 158, 160, 161, 162, 167, 168, 169], "dhwc": 364, "diag": [0, 213], "diagon": [0, 46, 124, 150, 315, 317, 318, 319], "dict": [86, 100, 143, 148, 216, 232, 279, 280, 281, 330, 332, 395, 400, 403, 404, 479, 481, 490, 491, 493, 506, 509, 510, 516], "dict_kei": [334, 491], "dictionari": [6, 100, 147, 186, 216, 232, 279, 280, 332, 333, 336, 349, 389, 398, 403, 404, 492, 506, 516], "did": 6, "diff": 2, "differ": [8, 163, 194, 304, 323, 460, 489, 507, 508, 509, 510, 512], "differenti": [1, 8, 355, 436], "difficult": 510, "difficulti": [429, 430], "dilat": [0, 105, 106, 107, 108, 109, 110, 111, 356, 357, 358, 359, 360, 361], "dim": [1, 6, 154, 155, 366, 370, 374, 376, 405, 407, 409, 413, 418, 426], "dimens": [0, 1, 2, 6, 16, 18, 27, 28, 64, 70, 80, 87, 88, 89, 100, 106, 107, 108, 110, 111, 125, 145, 154, 155, 165, 166, 168, 169, 171, 175, 176, 187, 200, 201, 203, 204, 205, 206, 208, 209, 210, 213, 214, 226, 227, 228, 230, 236, 250, 251, 252, 256, 265, 301, 305, 309, 312, 316, 322, 354, 356, 357, 358, 359, 360, 361, 363, 364, 368, 369, 370, 374, 375, 376, 405, 409, 410, 413, 426, 427, 441, 450, 507, 510], "dimension": [31, 151, 153, 156, 157, 158, 160, 161, 162, 167, 168, 169, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 366, 378, 381, 382, 383, 407, 408, 418, 511, 514], "dir": 4, "direct": [6, 387, 488, 517], "directli": [2, 6, 85], "directori": [2, 4, 6, 9], "disabl": [126, 283, 329, 507, 508], "disable_compil": 507, "disappoint": 6, "discard": [6, 333], "discov": [9, 508], "discoveri": 488, "discret": [112, 156, 157, 158, 160, 161, 162, 167, 168, 169, 366, 407], "discuss": 2, "disk": 6, "dispatch": 2, "dispatch_thread": 2, "dispatchthread": 1, "displai": 349, "distanc": [6, 461], "distribut": [8, 9, 255, 256, 257, 259, 260, 261, 266, 267, 329, 378, 429, 430, 431, 432, 434, 435, 451, 454, 459, 461, 476], "distributed_config": [508, 512], "diverg": 454, "divid": [0, 2, 39, 173, 252, 270, 508], "divis": [0, 135, 173, 252, 270], "divisor": [301, 322], "divmod": 0, "dloss_dw": 510, "dloss_dx": 510, "dlpack": 514, "dlvalu": 321, "dmlx_build_cpu": 9, "dmlx_build_gguf": 9, "dmlx_build_safetensor": 9, "dmlx_metal_debug": 3, "dmlx_metal_jit": 9, "do": [0, 2, 6, 9, 206, 323, 349, 391, 402, 476, 479, 507, 508, 509, 510, 513], "doc": [2, 7, 508, 512], "document": [2, 3, 4, 67, 81, 152, 279, 280, 340, 507, 508, 509, 510, 511], "doe": [0, 2, 3, 6, 9, 177, 323, 332, 349, 507, 508, 511, 512, 513, 514], "doesn": [2, 349, 509], "domain": 266, "don": [1, 9, 104, 507, 517], "done": [349, 362, 409, 507, 508, 513, 514], "dot": [148, 205, 214, 312, 333, 394, 405, 508], "doubl": [0, 6, 340], "doubt": 6, "down": [6, 332], "downsampl": [351, 352, 353, 381, 382, 383], "dparam": 321, "draw": 256, "drop": 389, "dropout": [349, 363, 364, 399, 426, 507], "dropout2d": 349, "dropout3d": 349, "dst": 134, "dt": 141, "dtype": [0, 1, 2, 6, 12, 19, 31, 38, 39, 80, 83, 132, 133, 150, 152, 170, 171, 174, 184, 194, 196, 203, 204, 208, 210, 215, 244, 257, 259, 260, 261, 263, 266, 267, 292, 293, 315, 317, 320, 323, 327, 329, 340, 397, 427, 428, 429, 430, 431, 432, 433, 434, 435, 448, 450, 457, 496, 497, 498, 499, 500, 507, 508, 509, 510, 511, 514, 515, 516], "dtypecategori": [194, 340], "dual": 456, "duchi": 484, "duplic": 509, "dure": [3, 100, 286, 362, 363, 364, 427, 514], "dx": 119, "dy": 119, "dyld": 508, "dyld_library_path": 508, "dylib": 2, "dynam": [0, 509, 513], "e": [2, 7, 9, 119, 141, 152, 175, 176, 195, 288, 354, 356, 357, 358, 359, 360, 361, 363, 364, 370, 374, 376, 390, 409, 446, 447, 469, 470, 475, 481, 484, 507, 509, 513, 518], "e5": 340, "e8": 340, "each": [0, 1, 2, 70, 86, 123, 143, 154, 176, 194, 200, 201, 203, 204, 205, 209, 213, 214, 227, 231, 247, 252, 253, 256, 271, 281, 282, 296, 313, 316, 323, 325, 326, 363, 364, 366, 369, 370, 375, 410, 413, 426, 448, 450, 504, 507, 508, 509, 512, 513], "eager": 513, "earli": 363, "eas": 6, "easi": [2, 349, 489], "easier": [1, 148, 513], "easiest": 508, "edg": [99, 247, 427, 507], "edit": [9, 404], "effect": [363, 507, 513], "effici": [6, 8, 175, 363, 413, 508, 513, 515], "eigenvalu": [203, 204], "eigenvector": 203, "einstein": [137, 138], "einsum": 138, "either": [9, 14, 67, 80, 81, 90, 92, 93, 99, 135, 136, 140, 173, 181, 182, 186, 197, 198, 199, 208, 221, 227, 229, 237, 239, 243, 249, 270, 274, 304, 321, 352, 353, 382, 383, 415, 427, 431, 432, 508, 512, 514], "elem": [1, 152], "elem_to_loc": [1, 2], "element": [0, 1, 2, 13, 14, 20, 21, 22, 23, 24, 25, 26, 29, 72, 85, 90, 91, 92, 93, 97, 113, 114, 115, 116, 117, 118, 123, 135, 136, 140, 141, 142, 144, 146, 150, 172, 173, 176, 181, 182, 188, 189, 190, 191, 192, 193, 197, 198, 199, 217, 218, 219, 220, 221, 222, 223, 224, 225, 229, 231, 237, 239, 241, 243, 248, 249, 252, 253, 269, 270, 271, 274, 275, 277, 288, 289, 290, 291, 297, 298, 304, 308, 310, 311, 314, 321, 323, 326, 355, 362, 363, 364, 369, 373, 375, 384, 406, 410, 413, 417, 436, 443, 444, 446, 447, 462, 463, 465, 468, 469, 470, 471, 507, 510], "elementwis": [1, 102, 103], "elif": 6, "ellipsi": 511, "elman": 410, "els": [0, 2, 6, 349, 390, 508, 513], "elsewher": [317, 511], "elu": [349, 466], "emb": [6, 366, 407, 418], "embed": [6, 330, 349, 407, 413, 418, 449], "empti": 260, "en0": 512, "en2": 508, "enabl": [3, 6, 9, 100, 139, 329, 495], "enclos": 509, "encod": [2, 154, 413, 418, 426, 450], "encount": [2, 510], "end": [125, 201, 233, 252, 275, 369, 375, 424, 442, 453, 460, 466, 472, 473, 496, 499, 509], "end_axi": [0, 50, 171], "end_encod": 2, "endif": 2, "endl": [4, 509], "endswith": 390, "enhanc": [6, 413, 513], "enough": [2, 513], "ensur": [0, 1, 2, 9, 152, 332, 456, 508, 509], "ensure_row_contigu": [1, 152], "enter": 6, "entir": [16, 18, 27, 28, 226, 228, 230, 236, 250, 301, 305, 322, 363, 364], "entri": [0, 262, 320, 363, 364], "entropi": [7, 448, 450], "enumer": 349, "environ": [9, 126, 139, 508], "ep": [5, 151, 153, 354, 370, 374, 376, 409, 449, 451, 461, 481, 482, 483, 484, 485, 486, 487, 494], "epoch": 7, "epsilon": [354, 370, 374, 376, 409, 449, 451, 482, 484, 485, 486, 487, 494], "epsilon_1": 483, "epsilon_2": 483, "equal": [0, 1, 17, 29, 84, 150, 182, 188, 199, 243, 248, 263, 296, 329, 374, 378], "equal_nan": [0, 17, 84, 188], "equat": [137, 138, 211, 212], "equival": [0, 2, 32, 67, 81, 133, 136, 173, 176, 183, 308, 355, 365, 367, 371, 372, 373, 379, 380, 404, 406, 408, 411, 412, 414, 416, 419, 420, 421, 422, 423, 425, 508], "erf": [0, 142, 507], "erfinv": 0, "error": [0, 2, 9, 130, 141, 142, 287, 296, 367, 438, 439, 440, 456, 458, 507, 510, 512, 514], "error_norm": 5, "estim": 487, "eta": 488, "etc": [2, 252, 349, 427, 508], "ethernet": [508, 512], "eval": [2, 3, 5, 6, 7, 349, 479, 481, 507, 508, 509, 510, 513, 515], "eval_cpu": 2, "eval_fn": 7, "eval_gpu": 2, "evalu": [2, 6, 7, 8, 86, 134, 143, 195, 286, 324, 349, 388, 399, 479, 481, 507, 509, 515], "even": [1, 2, 6, 100, 163, 507, 508, 509, 513, 514], "evenli": [0, 215], "everi": [252, 334, 481, 500, 510, 512], "everyth": [6, 508], "everywher": 0, "exact": [439, 440], "exactli": [2, 6, 154, 392, 510], "exampl": [0, 3, 4, 5, 6, 7, 9, 19, 39, 86, 119, 130, 147, 148, 149, 152, 155, 171, 186, 194, 196, 203, 204, 208, 210, 292, 293, 303, 308, 320, 332, 335, 336, 349, 351, 352, 353, 354, 374, 381, 382, 383, 390, 392, 399, 402, 427, 428, 429, 430, 431, 432, 433, 434, 435, 448, 450, 457, 476, 481, 491, 496, 497, 498, 499, 500, 504, 510, 511, 512, 513, 514, 515, 516], "exce": [329, 332], "exceed": 286, "except": [8, 119, 150, 164, 165, 167, 168, 169, 286, 340, 370, 392, 509, 511, 514], "exclud": [251, 309], "exclus": [0, 85, 93], "execut": [2, 4, 9, 87, 88, 89, 179, 196, 508, 514, 517], "execute_process": 4, "exist": [2, 3, 6, 390, 402, 508], "exp": [0, 1, 86, 146, 152, 221, 226, 257, 294, 355, 365, 417, 436, 437, 454, 466, 467, 471, 507, 509, 517], "exp_elementwis": [1, 152], "expand_dim": 0, "expect": [6, 356, 357, 358, 359, 360, 361, 362, 363, 364, 418, 426, 451, 507, 508, 511], "expens": 426, "expensive_fun": 513, "experiment": [86, 147, 149, 186, 514], "explain": 2, "explicit": [2, 491, 504, 514], "explicitli": [175, 349, 504, 512], "explor": 9, "expm1": 0, "exponenti": [0, 144, 146, 355, 365, 414, 436, 437, 466, 497], "exponential_decai": 481, "export": [8, 9, 147, 148, 186], "export_funct": 509, "ext_modul": 2, "extend": [2, 247], "extens": [8, 216, 234, 396, 516], "extern": 514, "extra": [1, 334, 335, 509], "extract": [0, 6, 46, 124, 125, 292, 349, 389, 479], "extras_requir": 2, "extrem": [511, 513], "ey": [0, 6, 205, 214], "f": [0, 2, 5, 7, 119, 208, 349, 375, 486, 507, 514], "f_jvp": 119, "f_t": 375, "f_vjp": 119, "f_vmap": 119, "face": 6, "factor": [2, 15, 183, 200, 201, 206, 207, 210, 427, 450, 497, 500], "fail": [507, 508, 512], "fall": [2, 119], "fallback": 489, "fals": [0, 1, 2, 6, 16, 17, 18, 27, 28, 34, 35, 36, 37, 42, 43, 44, 45, 57, 58, 59, 60, 61, 65, 77, 78, 82, 84, 100, 104, 108, 115, 116, 117, 118, 130, 147, 149, 152, 175, 176, 188, 194, 200, 201, 208, 212, 213, 214, 216, 222, 226, 228, 230, 231, 236, 250, 301, 305, 322, 326, 330, 333, 334, 335, 336, 340, 370, 374, 376, 378, 390, 392, 402, 405, 408, 413, 418, 426, 427, 448, 451, 483, 485, 486, 495, 509, 514], "famili": 6, "fan": [429, 430, 431, 432], "fan_in": [429, 430, 431, 432], "fan_out": [429, 430, 431, 432], "far": 481, "fast": [1, 8, 367, 440, 508, 517], "faster": [1, 2, 9, 136, 175, 176, 438, 448, 507, 508, 510], "featur": [1, 8, 105, 106, 107, 108, 109, 110, 111, 154, 354, 369, 370, 374, 375, 376, 378, 408, 409, 410, 413, 426, 427, 507, 508, 513], "feed": 6, "feed_forward": 6, "feedforward": [429, 430], "feel": 6, "fetch": 1, "few": [1, 2, 6, 7, 8, 9, 509, 513, 515], "fewer": 508, "ffn": 6, "ffn_norm": 6, "fft": 8, "fftshift": 163, "fi": 508, "figur": 508, "file": [4, 6, 9, 147, 148, 149, 186, 216, 278, 279, 280, 281, 282, 392, 396, 508, 509, 510, 516], "file_or_weight": 392, "fill": [0, 174, 245, 317, 328, 428, 429, 430, 431, 432, 434, 435], "filter": [0, 112, 356, 357, 358, 359, 360, 361, 385, 389, 489], "filter_and_map": 349, "filter_fn": [385, 389], "final": [2, 4, 5, 6, 7, 183, 496, 499, 508, 512], "find": [2, 4, 5, 9, 508], "find_packag": [2, 4], "finder": 9, "fine": [504, 509, 513], "finetun": 349, "finit": [0, 189, 240], "first": [0, 1, 2, 3, 4, 5, 6, 7, 9, 125, 128, 130, 171, 180, 194, 196, 197, 213, 223, 225, 227, 248, 265, 274, 306, 312, 315, 321, 333, 335, 336, 349, 352, 353, 370, 382, 383, 427, 449, 457, 483, 487, 491, 507, 508, 509, 510, 512, 514, 517], "first_lay": 513, "firt": 507, "fit": [252, 517], "five": 507, "fix": [2, 6, 9, 507, 513], "flag": [4, 9, 175, 507, 514], "flat": [175, 176, 333, 337], "flat_param": 281, "flatten": [0, 29, 30, 115, 116, 117, 118, 208, 222, 246, 248, 251, 271, 275, 295, 308, 309, 314, 333, 507], "flexibl": 8, "flexibli": 404, "flip": [0, 108, 112], "float": [0, 1, 2, 12, 15, 17, 19, 80, 151, 152, 153, 154, 155, 170, 173, 174, 183, 188, 194, 208, 240, 253, 255, 259, 261, 329, 332, 340, 354, 362, 363, 364, 370, 374, 376, 385, 397, 409, 413, 418, 424, 426, 427, 428, 429, 430, 431, 432, 434, 435, 449, 450, 451, 453, 457, 460, 461, 472, 473, 482, 483, 484, 485, 486, 487, 488, 494, 495, 496, 497, 499, 500], "float16": [1, 2, 12, 152, 183, 216, 340, 385, 513, 514], "float16_t": [1, 2], "float32": [0, 1, 2, 12, 19, 150, 152, 155, 183, 184, 194, 203, 204, 208, 210, 215, 244, 257, 259, 260, 261, 266, 267, 293, 317, 327, 340, 427, 428, 429, 430, 431, 432, 433, 434, 435, 448, 450, 457, 496, 497, 498, 499, 500, 507, 508, 509, 510, 511, 513, 514, 515, 516], "float64": [12, 194, 340, 514], "floor": [0, 1, 173], "floor_divid": 0, "flow": [0, 302, 513], "flush": 2, "fn": [186, 331, 334, 335, 336, 515], "follow": [1, 2, 4, 6, 7, 8, 9, 19, 112, 123, 155, 175, 208, 247, 252, 335, 349, 439, 440, 454, 482, 483, 484, 487, 488, 495, 504, 507, 508, 509, 510, 512, 517], "food": 6, "forc": [6, 7, 104, 349, 508, 515], "forg": [9, 508], "formal": [123, 252], "format": [6, 148, 216, 278, 279, 280, 281, 282, 508, 514], "formul": [355, 365], "formula": 460, "forth": [427, 508], "forward": [1, 2, 321, 507, 512, 513], "found": [4, 389], "four": 354, "fourier": [156, 157, 158, 160, 161, 162, 167, 168, 169], "fourth": 509, "frac": [141, 252, 288, 354, 362, 363, 364, 370, 374, 376, 378, 409, 417, 429, 430, 431, 432, 449, 451, 453, 456, 467, 469, 470, 482, 484, 485, 486, 487, 494], "fraction": 19, "framework": 8, "free": 283, "freez": [349, 402, 479], "freq": 154, "frequenc": [154, 159, 413, 418], "frequent": [507, 513], "friend": 6, "fro": 208, "frobeniu": 208, "from": [0, 1, 2, 4, 6, 7, 8, 85, 122, 123, 125, 128, 129, 132, 133, 134, 152, 165, 166, 168, 169, 174, 175, 179, 183, 186, 208, 216, 227, 231, 245, 252, 254, 255, 256, 257, 258, 259, 263, 266, 281, 283, 292, 299, 302, 304, 308, 309, 314, 315, 326, 328, 333, 334, 335, 336, 337, 349, 378, 390, 392, 405, 429, 430, 431, 432, 434, 435, 451, 460, 476, 481, 506, 507, 508, 509, 510, 513, 514, 515, 516, 517], "from_embed": 407, "from_linear": 408, "front": [2, 509], "frozen": [349, 390, 400, 402, 408, 479], "fuction": 136, "full": [0, 1, 2, 7, 67, 81, 112, 152, 206, 294, 403, 404, 451, 489, 507, 508, 509, 513], "full_turn": 418, "fulli": [2, 8, 512, 514, 517], "fun": [100, 147, 149, 180, 195, 321, 324, 325, 507, 509, 511, 513, 517], "fun1": 513, "func": 410, "function": [0, 1, 2, 3, 5, 6, 7, 8, 17, 19, 85, 100, 119, 136, 141, 142, 147, 149, 152, 180, 186, 188, 195, 200, 201, 203, 204, 205, 208, 209, 210, 213, 214, 227, 287, 288, 321, 324, 325, 331, 332, 334, 335, 336, 349, 355, 365, 367, 368, 371, 372, 373, 379, 380, 384, 386, 390, 397, 402, 406, 410, 411, 412, 414, 415, 416, 417, 419, 420, 421, 422, 423, 424, 425, 426, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 462, 467, 469, 470, 471, 472, 473, 474, 476, 481, 491, 504, 506, 508, 511, 513, 514, 516], "functionexport": 149, "functool": 507, "further": [2, 9, 510], "fuse": [1, 507], "fusibl": 507, "futur": [6, 86, 147, 149, 186, 408, 511, 513], "fx": 119, "g": [3, 9, 119, 152, 208, 252, 375, 475, 494, 495, 509, 513, 518], "g_t": [375, 482, 484, 485, 486, 487, 488, 494, 495], "gain": [429, 430, 431, 432], "gamma": [354, 370, 374, 376, 409, 429, 430, 431, 432], "gap": 1, "gate": [368, 369, 441], "gather": [0, 128, 175, 176], "gather_mm": [0, 176], "gather_qmm": 0, "gaurante": 323, "gaussian": [5, 367, 438, 439, 440, 451], "gaussian_nll_loss": 349, "gc_func": 426, "gelu": [349, 439, 440, 507], "gelu_approx": [349, 367, 438], "gelu_fast_approx": [349, 367, 438], "geluapprox": 367, "gelufast": 367, "gener": [0, 1, 3, 5, 12, 19, 108, 150, 152, 165, 166, 209, 215, 231, 255, 260, 261, 262, 263, 266, 267, 426, 504, 507, 511, 513, 518], "general_": 2, "generate_stub": 9, "geq": [424, 473], "get": [2, 5, 7, 9, 106, 107, 108, 110, 111, 120, 121, 170, 177, 178, 179, 232, 258, 349, 507, 509, 510, 513, 517], "get_cache_memori": 98, "get_command_encod": 2, "get_kernel": 2, "gguf": [9, 216, 279, 516], "gh": 1, "gii": 1, "git": 9, "github": [5, 7, 9, 507], "give": [2, 6, 7, 29, 507], "given": [0, 2, 9, 16, 18, 29, 39, 85, 86, 96, 99, 101, 115, 116, 117, 118, 123, 125, 138, 143, 145, 155, 156, 157, 158, 160, 161, 162, 167, 168, 169, 174, 175, 206, 208, 222, 226, 228, 230, 236, 240, 242, 250, 260, 262, 263, 275, 276, 283, 285, 294, 296, 301, 305, 307, 313, 314, 315, 317, 318, 319, 322, 338, 362, 389, 405, 449, 451, 457, 489], "gix": 1, "gix_mult": 1, "giy_mult": 1, "global": [126, 128, 129, 130, 132, 133, 134, 139, 264, 329, 332, 504, 507], "glorot": [429, 430], "glorot_norm": 349, "glorot_uniform": 349, "glu": [6, 349], "gm": 1, "gn": 1, "go": [2, 6, 508, 510], "golub": 208, "good": [2, 9, 481, 507, 508, 512, 517], "goroshin": 363, "gower": 6, "gpu": [1, 3, 8, 9, 232, 340, 511, 517], "gputrac": [3, 234], "grad": [2, 5, 7, 119, 321, 332, 481, 490, 507, 508, 509, 510, 511, 513, 515], "grad_fn": [5, 507, 510], "gradient": [0, 5, 7, 119, 180, 302, 321, 329, 331, 332, 349, 390, 403, 408, 426, 456, 479, 481, 482, 483, 485, 486, 487, 488, 490, 493, 495, 507, 508, 510, 511, 513, 514, 515], "grain": 504, "graph": [2, 6, 7, 8, 148, 286, 509, 510], "great": 3, "greater": [0, 6, 29, 146, 182, 248, 332, 424, 473], "greater_equ": 0, "grep": 9, "grid": [2, 152, 231], "grid_dim": 2, "grid_grad": 1, "grid_idx": 1, "grid_sampl": 1, "grid_sample_grad": 1, "grid_sample_ref": 1, "grid_sample_vjp": 1, "grid_shap": 1, "grid_siz": 1, "ground": [5, 6, 450, 460], "group": [0, 1, 105, 106, 107, 108, 109, 110, 111, 123, 128, 129, 130, 132, 133, 134, 155, 176, 252, 253, 323, 329, 330, 356, 357, 370, 407, 408, 508], "group_dim": 2, "group_siz": [0, 123, 176, 252, 253, 330, 407, 408], "groupnorm": 349, "grow": 513, "gru": 349, "guid": [2, 4, 8, 508, 509], "guidelin": 286, "gw": 1, "h": [1, 2, 4, 106, 107, 110, 111, 208, 354, 357, 358, 360, 361, 363, 364, 369, 375, 410, 510, 513], "h_": [369, 375, 410], "h_in": 1, "h_stride": 1, "h_t": [369, 375, 410], "ha": [2, 3, 6, 7, 8, 9, 80, 100, 125, 134, 164, 165, 167, 168, 169, 178, 180, 200, 201, 203, 204, 205, 209, 213, 214, 231, 256, 354, 369, 375, 378, 410, 479, 481, 507, 508, 509, 511, 512, 513, 515, 517], "had": 6, "hadamard": [0, 183], "hadamard_transform": 0, "half": [19, 263, 267, 413, 513], "halv": [368, 441], "hand": [6, 510, 513], "handi": 510, "handl": [2, 349, 507], "happen": [2, 6, 151, 153, 426, 481, 507, 513], "happi": 6, "hard": 6, "hard_shrink": [349, 371], "hard_tanh": [349, 372], "hardcod": 507, "hardshrink": [349, 442], "hardswish": 349, "hardtanh": [349, 443], "hat": [123, 252], "have": [0, 1, 2, 6, 9, 17, 84, 87, 88, 89, 94, 119, 128, 155, 165, 166, 168, 169, 176, 188, 227, 234, 256, 323, 329, 333, 375, 405, 415, 488, 491, 506, 507, 508, 509, 511, 512, 513, 517], "haven": 6, "hazan": 484, "he": [6, 431, 432], "he_norm": 349, "he_uniform": 349, "head": [155, 405, 426], "header": [2, 152], "heart": 6, "heavi": 6, "height": [352, 353, 354, 357, 358, 360, 361, 363, 364, 382, 383], "hello": [333, 337], "help": [2, 6, 507, 517], "helper": [6, 152, 329, 507, 508, 512], "henc": [0, 2, 252, 507], "hendryck": 440, "here": [2, 6, 481, 507, 509, 510, 513, 516, 517], "hermitian": [203, 204], "hf": 375, "hg": 375, "hh": 410, "hi": [6, 375], "hidden": [369, 375, 410, 426], "hidden_dim": [7, 479, 481], "hidden_s": [369, 375, 410], "hierarchi": 340, "high": [263, 267, 349, 366, 435, 476], "high_pad_s": 0, "higher": [2, 187, 287, 457, 508, 510], "highli": 9, "him": 6, "hing": 452, "hinge_loss": 349, "hinton": 494, "hit": 2, "hn": 369, "ho": 375, "hold": [2, 6, 11, 12, 208, 507], "homebrew": 508, "hopkin": 208, "host": 2, "host1": 508, "host2": 508, "host3": 508, "host4": 508, "host_nam": 1, "hostfil": [508, 512], "hostnam": [508, 512], "hostname1": [508, 512], "hostname2": [508, 512], "hostname3": 508, "hostname4": 508, "hot": 450, "hour": 6, "how": [2, 4, 6, 7, 349, 351, 352, 353, 356, 357, 358, 359, 360, 361, 366, 381, 382, 383, 407, 427, 490, 507, 511, 517], "howev": [2, 119, 349, 367, 370, 491, 504, 507, 508, 513, 514], "hr": 369, "http": [370, 374, 376, 384, 409, 440, 462], "huber": 453, "huber_loss": 349, "human": [431, 432], "hundr": 9, "hurri": 6, "hutter": 486, "hyperbol": [0, 21, 23, 26, 114, 291, 311, 425, 474], "hz": 369, "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 17, 19, 29, 38, 80, 85, 86, 99, 106, 107, 108, 110, 111, 112, 115, 116, 117, 118, 119, 124, 125, 128, 129, 131, 132, 133, 134, 136, 143, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 173, 174, 175, 176, 183, 186, 188, 189, 194, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 221, 222, 226, 227, 231, 233, 247, 248, 251, 252, 253, 260, 261, 262, 273, 275, 278, 279, 280, 286, 287, 288, 294, 296, 301, 302, 307, 308, 309, 312, 315, 316, 320, 321, 322, 323, 324, 325, 326, 329, 330, 332, 333, 334, 335, 336, 340, 342, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 367, 369, 370, 374, 375, 376, 378, 381, 382, 383, 389, 390, 396, 398, 399, 401, 402, 404, 405, 406, 408, 409, 410, 413, 418, 424, 426, 427, 431, 432, 438, 440, 448, 449, 451, 456, 457, 460, 461, 463, 468, 473, 479, 481, 483, 485, 486, 488, 489, 490, 491, 496, 498, 499, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518], "i386": 9, "i_n": 1, "i_nw": 1, "i_s": 1, "i_sw": 1, "i_t": 375, "iclr": [485, 486, 487], "id": [7, 9], "idea": [510, 513], "idempot": [390, 402], "ident": [0, 119, 134, 150, 163, 302, 349, 399, 508], "identifi": [2, 333, 506], "idim": 7, "idiom": [7, 507], "idx": [39, 511], "ie": 402, "ieee": 340, "ifac": 508, "ignor": [6, 39, 86, 99, 100, 143, 483, 512], "ih": 410, "ii": 1, "ij": 231, "imag": [0, 357, 358, 360, 361, 363, 364, 427], "imagenet": [431, 432], "imaginari": 185, "immedi": [6, 385], "implement": [0, 1, 5, 7, 154, 155, 175, 176, 366, 389, 405, 413, 415, 418, 424, 426, 427, 473, 482, 483, 484, 487, 488, 490, 502, 507, 510], "impli": 323, "implicit": [504, 507, 510], "implicitli": 513, "import": [2, 3, 5, 6, 7, 9, 119, 130, 183, 186, 208, 281, 321, 333, 334, 335, 336, 337, 349, 351, 352, 353, 354, 374, 381, 382, 383, 392, 427, 448, 450, 457, 476, 479, 481, 507, 508, 510, 511, 513, 514, 515], "import_funct": 509, "imported_ab": 509, "imported_fun": 509, "imported_funct": 509, "improv": [1, 2, 3, 6, 448, 482, 483, 484, 485, 486, 487, 494, 507, 508], "in_ax": [325, 510], "in_channel": [356, 357, 358, 359, 360, 361], "in_dim": [349, 479], "in_proj": 479, "includ": [1, 2, 4, 115, 116, 117, 118, 148, 152, 177, 178, 222, 286, 376, 386, 398, 408, 451, 481, 507, 509, 510, 511, 515, 516, 518], "include_dir": 2, "inclus": [0, 42, 43, 44, 45, 57, 115, 116, 117, 118, 171, 222], "incom": 2, "inconveni": 507, "incorpor": 514, "incorrect": 514, "increas": [287, 512], "increment": 19, "incur": [6, 9], "independ": [127, 363, 364], "index": [0, 1, 2, 8, 10, 29, 39, 145, 150, 175, 180, 231, 248, 292, 293, 308, 309, 321], "indic": [0, 2, 17, 27, 28, 29, 30, 39, 175, 176, 180, 188, 189, 190, 191, 192, 193, 194, 206, 213, 251, 292, 293, 296, 308, 309, 321, 399, 401, 450, 457, 498, 511], "indices_or_sect": [73, 296], "indirectli": 514, "individu": [349, 363, 364], "ineffici": [511, 513], "inexact": [12, 194], "inf": [208, 240, 405], "infer": [8, 174, 216, 315, 320, 508, 509], "infin": [0, 190, 192, 193, 240, 381, 382, 383, 487], "infinit": [17, 188, 189], "info": [6, 9], "inform": [3, 4, 6, 7, 9, 138, 170, 232, 279, 280, 340, 349, 354, 367, 405, 508, 509, 510, 517], "inherit": [7, 506], "inifn": 190, "init": [349, 406, 476, 481, 496, 497, 499, 500, 508], "init_fn": [428, 429, 430, 431, 432, 433, 434, 435, 476], "init_valu": 1, "initi": [1, 3, 5, 6, 130, 336, 349, 354, 370, 374, 376, 378, 406, 409, 428, 429, 430, 431, 432, 433, 434, 435, 479, 491, 496, 497, 499, 500, 507, 508, 509, 513], "initializer_list": 0, "inject": 0, "inlin": 0, "inner": [0, 507], "inorm": 374, "inp": [1, 152], "inp_ndim": 1, "inp_shap": 1, "inp_strid": 1, "inplac": [2, 9], "input": [0, 1, 2, 5, 6, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 124, 125, 128, 129, 134, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 175, 176, 180, 181, 182, 183, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 241, 243, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 262, 265, 268, 269, 270, 271, 273, 274, 275, 276, 277, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 318, 319, 320, 321, 322, 323, 325, 326, 328, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 363, 364, 366, 368, 369, 370, 374, 375, 376, 378, 381, 382, 383, 405, 408, 409, 410, 413, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 441, 448, 449, 451, 452, 453, 454, 456, 457, 459, 461, 473, 476, 507, 509, 510, 511, 512, 515, 516], "input_dil": [0, 108], "input_dim": [7, 349, 378, 408], "input_nam": [1, 152], "input_s": [369, 375, 410], "inputs1": 457, "inputs2": 457, "insert": [125, 145, 517], "insid": [507, 509], "inspect": [3, 507, 515], "inspir": 8, "instabl": 461, "instal": [2, 4, 512], "instanc": [6, 39, 119, 252, 337, 349, 374, 385, 386, 387, 390, 392, 393, 394, 399, 402, 403, 404, 415, 479, 508, 512, 514], "instancenorm": 349, "instanti": [1, 2, 7, 513], "instantiate_kernel": 2, "instead": [2, 9, 119, 349, 404, 418, 510, 513], "instruct": [4, 509], "int": [0, 1, 2, 4, 6, 7, 10, 16, 18, 19, 27, 28, 29, 30, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 50, 57, 58, 59, 60, 61, 62, 65, 68, 70, 73, 76, 77, 78, 79, 80, 82, 85, 94, 96, 101, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 123, 124, 125, 132, 133, 134, 138, 145, 150, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 176, 177, 178, 179, 180, 184, 194, 202, 208, 215, 222, 226, 228, 230, 232, 236, 238, 244, 247, 248, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 271, 273, 275, 276, 283, 286, 287, 292, 293, 294, 295, 296, 299, 300, 301, 305, 306, 308, 309, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 327, 329, 330, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 366, 368, 369, 370, 374, 375, 376, 378, 381, 382, 383, 405, 407, 408, 409, 410, 413, 418, 426, 441, 449, 450, 454, 459, 461, 479, 496, 498, 499, 500], "int16": 340, "int32": [0, 1, 12, 19, 39, 171, 194, 196, 208, 263, 292, 320, 340, 427, 511, 515], "int64": [12, 340], "int64_t": 2, "int8": [12, 340], "int_0": 141, "integ": [0, 12, 173, 175, 176, 194, 208, 232, 247, 252, 253, 255, 262, 263, 296, 308, 312, 325, 340, 366, 397, 498, 511], "integr": [19, 308, 513], "intend": [0, 507], "interact": 426, "interest": 517, "interfac": [2, 508, 512], "intermedi": 514, "intern": 354, "interpol": 427, "interpret": 4, "interv": [19, 215, 263, 267], "introduc": [0, 275], "intuit": 349, "invalid": [0, 85], "invers": [0, 20, 21, 22, 23, 24, 25, 26, 91, 142, 160, 161, 162, 163, 164, 165, 166, 201, 205, 209, 214], "invert": 0, "involv": [481, 507], "iogpu": 287, "iostream": 4, "ip": [508, 512], "ip1": [508, 512], "ip2": [508, 512], "ip3": 508, "ip4": 508, "is_avail": 130, "is_equival": 2, "is_leaf": [333, 334, 335, 336], "is_leaf_fn": 389, "isclos": 0, "isfinit": 0, "ish": 6, "ishmael": 6, "isinf": 0, "isnan": 0, "isneginf": 0, "isposinf": 0, "issu": [508, 510, 514], "issubdtyp": [2, 12, 340], "item": [0, 2, 5, 6, 7, 334, 481, 509, 513, 514, 515], "iter": [5, 7, 213, 334, 335, 504, 507, 513], "iterm": 9, "itertool": [6, 334], "its": [0, 1, 2, 9, 155, 201, 209, 227, 248, 265, 317, 331, 337, 349, 408, 481, 485, 486, 487, 508, 513, 514, 517], "itself": [2, 330, 489, 491], "ix": 1, "ix_n": 1, "ix_nw": 1, "ix_s": 1, "ix_sw": 1, "iy_n": 1, "iy_nw": 1, "iy_s": 1, "iy_sw": 1, "j": [6, 9, 208, 363, 484, 485, 487], "j8": 2, "jacobian": [2, 195, 324, 515], "jain": 363, "jax": [8, 504], "jit": 152, "jmlr": 484, "jnp": 514, "john": 208, "join": 498, "join_schedul": 481, "jointli": 260, "json": [508, 512], "just": [2, 4, 7, 376, 507, 509, 511], "jvp": [2, 119, 515], "k": [0, 6, 46, 94, 105, 109, 124, 150, 155, 175, 183, 314, 317, 318, 319, 378, 390], "kaim": 432, "kd": [107, 111], "keep": [2, 16, 18, 27, 28, 226, 228, 230, 236, 250, 301, 305, 322, 349, 389, 510, 513], "keepdim": [0, 16, 18, 27, 28, 34, 35, 36, 37, 58, 59, 60, 61, 65, 77, 78, 82, 208, 226, 228, 230, 236, 250, 294, 301, 305, 322], "kei": [1, 3, 6, 147, 155, 186, 232, 255, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 333, 334, 389, 390, 402, 405, 491, 504, 506, 509, 510], "kept": 287, "kernel": [2, 8, 9, 105, 106, 107, 108, 109, 110, 111, 152, 351, 381, 507, 511], "kernel_dil": [0, 108], "kernel_s": [351, 352, 353, 356, 357, 358, 359, 360, 361, 381, 382, 383], "key_cach": 6, "key_input_dim": 405, "key_proj": 6, "keyword": [147, 180, 281, 282, 321, 334, 349, 504, 509, 516, 518], "kh": [106, 107, 110, 111], "kind": 6, "kingma": [485, 487], "kl_div_loss": 349, "kname": 2, "know": [2, 6], "known": [416, 468], "kron": 0, "kroneck": [0, 196], "kth": [0, 29, 248], "kullback": 454, "kw": [106, 107, 110, 111], "kw_onli": 2, "kwarg": [11, 127, 147, 148, 186, 281, 282, 338, 509, 518], "l": [6, 7, 105, 109, 200, 201, 203, 204, 206, 349, 354, 356, 359, 369, 375, 410, 460], "l1": [321, 453, 455, 456, 460], "l1_loss": 349, "l2": [453, 456, 495], "l2_loss": 349, "l_": 453, "la": 208, "label": [3, 5, 450, 457], "label_smooth": 450, "lack": 511, "lambd": [371, 422, 442, 472], "lambda": [334, 335, 336, 349, 371, 385, 390, 397, 422, 442, 466, 472, 482, 483, 484, 485, 486, 487, 488, 494, 495, 507, 508, 509, 510], "languag": [1, 2, 4], "larg": [6, 349, 405, 456, 507, 509, 513], "larger": [1, 154, 287, 413, 488], "largest": [208, 240, 314], "lasso": 321, "last": [0, 1, 6, 30, 80, 151, 153, 158, 162, 165, 166, 168, 169, 171, 175, 176, 179, 187, 200, 201, 203, 204, 205, 209, 210, 213, 214, 227, 256, 295, 312, 323, 356, 357, 358, 359, 360, 361, 363, 364, 370, 427, 489, 514], "later": [3, 9, 481], "launch": [1, 2, 130, 508, 511], "layer": [8, 151, 330, 349, 351, 352, 353, 363, 364, 369, 370, 375, 376, 378, 381, 382, 383, 399, 404, 407, 408, 410, 415, 426, 475, 479, 509, 512], "layer_s": 7, "layernorm": 349, "layout": 1, "lazi": [8, 479, 515], "lazili": [6, 349], "lceil": 94, "ld": [369, 375, 410], "lead": [0, 19, 85, 507], "leaf": [100, 330, 333, 334, 335, 336, 389], "leaf_modul": 349, "leaki": [377, 445], "leaky_relu": 349, "leakyrelu": 349, "learn": [5, 7, 8, 354, 370, 374, 376, 406, 409, 481, 482, 483, 484, 485, 486, 487, 488, 494, 495], "learnabl": [356, 357, 358, 359, 360, 361, 415], "learning_r": [7, 481, 482, 483, 484, 485, 486, 487, 488, 491, 494, 495, 496, 497, 498, 499, 500, 507], "least": [6, 87, 88, 89, 99, 200, 201, 203, 204, 205, 209, 210, 213, 214, 252], "leav": [2, 86, 143, 334, 335, 336], "lectur": 494, "lecun": 363, "left": [0, 6, 154, 197, 208, 252, 275, 367, 413, 427, 439, 440, 451, 453, 461], "left_shift": 0, "leibler": 454, "len": [6, 158, 162, 166, 169, 183, 498], "length": [6, 163, 299, 354, 356, 359, 369, 375, 410, 498], "leq": [453, 466], "less": [0, 1, 6, 29, 199, 248, 287, 329, 413, 460, 489, 508], "less_equ": 0, "let": [1, 2, 5, 6, 201, 507, 509, 510, 513, 514], "level": [0, 175, 176, 431, 432], "lh": [369, 375, 410], "lhs_indic": [0, 175, 176], "lhs_mask": 94, "lib": 508, "libmlx": 9, "libmlx_ext": 2, "libmpi": 508, "librari": [2, 4, 9, 342, 349, 508, 509], "like": [2, 6, 8, 133, 147, 149, 186, 194, 245, 328, 364, 456, 491, 493, 507, 508, 509, 510, 512, 513, 514, 515, 517], "likelihood": [451, 459], "limit": [0, 2, 99, 283, 286, 287, 511], "linalg": 183, "line": [6, 508, 509, 512, 513, 514], "linear": [0, 2, 6, 7, 8, 211, 212, 330, 334, 349, 355, 365, 367, 368, 377, 392, 408, 410, 411, 412, 414, 416, 427, 436, 437, 438, 439, 440, 441, 445, 464, 465, 466, 468, 476, 479, 491, 498, 499, 507, 509], "linear1": 6, "linear2": 6, "linear3": 6, "linear_schedul": [481, 498], "linearli": 405, "link": [2, 4, 9], "linspac": 0, "lion": 481, "list": [1, 6, 11, 16, 18, 31, 73, 80, 85, 86, 87, 88, 89, 96, 100, 101, 108, 138, 143, 152, 157, 158, 159, 161, 162, 163, 165, 166, 168, 169, 174, 180, 195, 208, 226, 228, 230, 231, 236, 244, 247, 250, 255, 256, 257, 259, 260, 261, 263, 266, 267, 279, 294, 296, 300, 301, 305, 312, 313, 316, 321, 322, 324, 327, 333, 336, 337, 349, 390, 392, 393, 394, 395, 400, 402, 403, 404, 479, 481, 485, 486, 487, 488, 489, 498, 506, 507, 508, 509, 510, 512, 513], "listen": 508, "liter": [2, 247, 427, 431, 432, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461], "littl": 6, "liu": 6, "live": [8, 152, 517], "ll": [1, 5, 7, 453, 507, 510], "llama": 6, "llamaattent": 6, "llamaencoderlay": 6, "llm": 8, "load": [7, 8, 342, 392, 508], "load_weight": [349, 513], "loader": 7, "loader_path": 2, "loan": 208, "loc": [1, 259, 261], "local": [349, 363, 508], "localhost": [508, 512], "locat": [0, 2, 4, 85, 292, 293, 403, 404, 508, 517], "log": [0, 219, 221, 226, 379, 380, 446, 447, 448, 451, 454, 456, 459, 471], "log10": 0, "log1p": 0, "log2": 0, "log_cosh_loss": 349, "log_sigmoid": [349, 379], "log_softmax": [349, 380], "logaddexp": 0, "logarithm": [0, 217, 218, 219, 220], "logcosh": 456, "logcumsumexp": 0, "logic": [0, 2, 223, 224, 225, 508], "logical_and": 0, "logical_not": 0, "logical_or": 0, "logist": [0, 5, 288, 440, 468], "logit": [6, 256, 448, 450, 507], "logsigmoid": 349, "logsoftmax": 349, "logsumexp": [0, 222], "long": 6, "longer": [6, 112, 510], "look": [2, 6, 508], "lookup": 366, "loop": [6, 7, 507, 508, 510, 513], "loshchilov": 486, "loss": [5, 7, 321, 349, 481, 507, 508, 510, 513], "loss_and_grad": 349, "loss_and_grad_fn": [7, 481, 507, 510], "loss_fn": [5, 7, 481, 507, 510], "loss_grad_fn": 508, "lot": 510, "low": [263, 267, 435, 476], "low_pad_s": 0, "lower": [200, 201, 203, 204, 212, 214, 252, 263, 266, 267, 317, 435], "lr": [5, 488], "lr_schedul": [496, 497, 498, 499, 500], "lstm": 349, "lto": 2, "lu": [6, 207], "luckili": 513, "lvalu": 321, "m": [0, 2, 4, 6, 9, 94, 150, 175, 183, 208, 317, 482, 507], "m1": [1, 6, 507, 510, 517], "m10": 340, "m7": 340, "m_": [485, 486, 487, 488], "m_t": [485, 486, 487, 488], "mac": 508, "machin": [6, 8, 9, 494, 508], "maco": [9, 287], "macosx": 9, "made": [6, 342], "mai": [2, 4, 86, 147, 149, 175, 176, 186, 208, 330, 363, 508, 510, 511], "main": [4, 8, 125, 150, 152, 315, 334, 335, 349, 508], "maintain": [363, 364, 488], "major": [0, 2, 104], "make": [1, 2, 3, 4, 6, 7, 9, 104, 148, 149, 227, 242, 285, 349, 489, 496, 497, 499, 500, 507, 513, 515, 517], "make_shar": 2, "malloc": 2, "man": 6, "manag": [8, 303, 504, 508, 509, 517], "mani": [2, 85, 296, 356, 357, 358, 359, 360, 361, 366, 407, 507, 508, 509, 513], "manual": [349, 508], "map": [2, 7, 39, 216, 334, 366, 385, 509], "map_fn": [385, 389], "map_torch_to_mlx": 6, "margin": [457, 461], "margin_ranking_loss": 349, "mask": [0, 6, 94, 155, 399, 405, 511], "mask_lh": [0, 94], "mask_n": 1, "mask_nw": 1, "mask_out": [0, 94], "mask_rh": [0, 94], "mask_s": 1, "mask_sw": 1, "matadata": 216, "match": [9, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 177, 392, 427, 450, 511, 514], "materi": [6, 8], "math": [6, 461, 507], "mathbf": 201, "mathcal": 378, "mathemat": 208, "mathrm": [141, 288, 374], "matmul": [0, 175, 517], "matric": [208, 210, 213], "matrix": [0, 5, 15, 46, 94, 123, 124, 150, 175, 176, 183, 184, 200, 201, 203, 204, 205, 206, 207, 208, 209, 210, 213, 214, 227, 231, 252, 253, 260, 407, 408, 433, 476], "matter": [6, 349, 509], "matur": 508, "max": [0, 1, 2, 208, 229, 355, 381, 382, 383, 406, 436, 443, 444, 449, 451, 452, 457, 461, 463, 465, 483, 487, 507, 510, 517], "max_buffer_s": 232, "max_freq": 418, "max_i": 252, "max_norm": 332, "max_recommended_working_set_s": [232, 287], "max_val": 443, "maximum": [0, 7, 27, 39, 99, 115, 179, 286, 332, 349, 377, 381, 382, 383, 411, 418, 439, 440, 445, 464, 479, 513], "maxpool1d": 349, "maxpool2d": 349, "maxpool3d": 349, "maxtotalthreadsperthreadgroup": 2, "mca": [508, 512], "md": 208, "me": 6, "mean": [0, 1, 5, 6, 7, 153, 259, 260, 261, 321, 349, 354, 370, 390, 409, 434, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 507, 508, 510, 514], "meant": 119, "measur": 517, "mechan": 426, "medic": 364, "meet": 9, "member": [349, 395, 400], "memori": [0, 1, 2, 8, 85, 98, 177, 178, 179, 272, 283, 286, 287, 426, 479, 483, 507, 513, 514], "memory_order_relax": 1, "memory_s": [232, 287], "memoryview": [513, 514], "merg": 507, "meshgrid": 0, "metadata": [5, 216, 279, 280], "metal": [2, 4, 8, 152, 286], "metal_captur": 3, "metal_kernel": 1, "metal_path": 9, "metallib": [2, 9], "method": [2, 6, 10, 11, 31, 119, 127, 170, 330, 338, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 396, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 479, 482, 483, 484, 485, 486, 487, 488, 489, 491, 494, 495, 502], "millisecond": [9, 507, 517], "min": [0, 2, 208, 237, 355, 406, 436, 443, 444, 463, 465], "min_freq": 418, "min_i": 252, "min_val": 443, "mind": 6, "mine": 6, "minibatch": 7, "minim": [508, 512], "minimum": [0, 28, 39, 99, 116, 418, 448, 449], "minsizerel": 9, "minu": 146, "minut": 6, "mish": 349, "mismatch": 509, "miss": [392, 509, 516], "mix": 511, "mkdir": [3, 9], "ml": 9, "mlp": [7, 349, 426, 481], "mlp_dim": [6, 426], "mlx": [1, 3, 5, 6, 7, 9, 342, 349, 476, 479, 481, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517], "mlx_build_acceler": 4, "mlx_build_benchmark": 9, "mlx_build_cpu": 9, "mlx_build_exampl": 9, "mlx_build_gguf": 9, "mlx_build_met": [2, 4, 9], "mlx_build_metallib": 2, "mlx_build_python_bind": 9, "mlx_build_safetensor": 9, "mlx_build_test": 9, "mlx_cxx_flag": 4, "mlx_disable_compil": [126, 139, 507], "mlx_ext": 2, "mlx_ext_metallib": 2, "mlx_found": 4, "mlx_include_dir": [2, 4], "mlx_librari": 4, "mlx_metal_debug": [3, 9], "mlx_metal_jit": 9, "mlx_root": 4, "mlx_sample_extens": 2, "mlx_trace": 3, "mlxfn": [147, 149, 186, 509], "mnist": 7, "mode": [0, 1, 2, 112, 247, 388, 399, 401, 427, 431, 432], "model": [5, 7, 8, 281, 330, 331, 334, 335, 349, 385, 388, 390, 392, 396, 399, 401, 402, 403, 405, 426, 476, 479, 481, 490, 491, 493, 507, 508, 509, 513], "modest": 2, "modif": 514, "modifi": 514, "modul": [2, 4, 6, 7, 330, 331, 415, 426, 476, 493, 506, 507, 513], "moment": [6, 483, 487, 508], "momentum": [354, 488, 491, 495, 507], "monei": 6, "monitor": 512, "monoton": 462, "moor": 209, "more": [1, 2, 3, 4, 7, 11, 80, 125, 147, 175, 200, 201, 203, 204, 205, 206, 209, 213, 214, 227, 279, 280, 283, 286, 340, 349, 354, 363, 413, 418, 426, 427, 429, 430, 431, 432, 448, 504, 507, 508, 510, 511, 515, 517], "moreov": 512, "most": [2, 155, 256, 320, 349, 493, 507, 508, 510, 511, 513], "move": [0, 2, 238, 517], "moveaxi": 0, "mpi": [130, 342], "mpirun": [508, 512], "mse": 321, "mse_loss": 349, "mtl": 2, "mtl_capture_en": 3, "mtlcommandbuff": 2, "mu": 495, "much": [1, 2, 6, 351, 352, 353, 381, 382, 383, 507, 513], "multi": [8, 155, 356, 357, 358, 359, 360, 361, 509, 511, 514], "multidimension": 231, "multiheadattent": [6, 349], "multioptim": 481, "multipl": [0, 1, 9, 15, 94, 149, 151, 153, 175, 176, 227, 239, 252, 253, 405, 418, 497, 498, 500, 507, 513, 516], "multipli": [0, 2, 39, 176, 252, 253, 362, 418, 427], "murtadha": 6, "must": [0, 1, 2, 3, 9, 94, 99, 147, 154, 155, 174, 176, 203, 204, 208, 255, 256, 260, 263, 266, 267, 326, 427, 514], "mx": [1, 2, 3, 4, 5, 6, 7, 39, 86, 102, 103, 119, 130, 133, 147, 148, 149, 152, 171, 186, 194, 196, 203, 204, 206, 208, 210, 216, 262, 281, 292, 293, 320, 321, 332, 349, 351, 352, 353, 354, 365, 374, 377, 381, 382, 383, 385, 392, 396, 411, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 445, 448, 449, 450, 454, 457, 464, 474, 476, 479, 481, 504, 507, 508, 509, 510, 511, 513, 514, 515, 516, 517, 518], "my": [6, 9], "my_devic": 518, "my_path": 281, "my_script": [508, 512], "myexp": [1, 152], "myexp_strid": 1, "mymlp": 479, "n": [0, 1, 2, 6, 31, 94, 105, 106, 107, 108, 109, 110, 111, 150, 155, 156, 158, 160, 162, 164, 167, 169, 183, 184, 260, 301, 317, 322, 354, 356, 357, 358, 359, 360, 361, 363, 364, 369, 375, 410, 427, 456, 461, 508, 512], "n_kv": 155, "n_q": 155, "n_t": 369, "naiv": [2, 510], "naive_add": 510, "name": [1, 2, 119, 148, 152, 176, 216, 252, 253, 279, 280, 281, 282, 349, 370, 389, 392, 394, 508, 511, 516], "named_modul": 349, "namespac": 4, "nan": [0, 17, 84, 188, 189, 191, 240], "nan_to_num": 0, "nanobind": 2, "nanobind_add_modul": 2, "nativ": [9, 508], "natur": [0, 217, 219, 513], "nb": 2, "nb_domain": 2, "nb_modul": 2, "nb_static": 2, "nbyte": 2, "nc": 354, "ndarrai": [31, 511, 513, 515], "ndhwc": [358, 361, 364], "ndim": [0, 1, 2, 171, 208, 213, 427], "ne": 1, "nearest": [1, 427], "necessari": [104, 349], "necessarili": 314, "need": [1, 2, 4, 6, 7, 8, 9, 84, 252, 349, 403, 404, 418, 426, 504, 508, 510, 512, 513, 514, 515, 517], "neg": [0, 125, 171, 192, 240, 275, 315, 377, 381, 382, 383, 405, 451, 459, 461, 511], "negat": [0, 241], "negative_slop": [377, 445], "neginf": [0, 240], "neighbor": [427, 512], "neither": [180, 321], "nelem": 2, "nervou": 6, "nest": [80, 100, 336, 349, 479, 506, 510], "nesterov": 495, "network": [6, 8, 329, 354, 363, 366, 429, 430, 476, 479, 494, 508], "neural": [6, 8, 366, 429, 430, 462, 476, 479, 494], "never": [6, 513], "new": [0, 2, 7, 96, 125, 238, 242, 273, 300, 316, 323, 334, 335, 397, 405, 479, 481, 493, 498, 507, 509, 511, 513, 514], "new_tre": 335, "next": [2, 4, 6, 7, 283, 509], "nh": [369, 375, 410], "nhwc": [354, 357, 360], "nice": [510, 513], "nlc": [354, 356, 359], "nld": [369, 375, 410], "nlh": [369, 375, 410], "nll": [451, 459], "nll_loss": 349, "nn": [2, 6, 7, 281, 334, 349, 476, 479, 481, 491, 493, 507, 509, 513], "nobodi": 6, "node": [86, 100, 143, 325, 335, 336, 508, 512], "nois": 5, "noisi": 5, "nomins": 2, "non": [0, 1, 2, 4, 9, 231, 400, 410, 462, 479], "none": [1, 2, 6, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 126, 128, 129, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 284, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 333, 334, 335, 336, 351, 352, 353, 367, 381, 382, 383, 385, 389, 390, 397, 402, 405, 410, 418, 426, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 483, 502, 509, 511], "nonlinear": [410, 507], "nonzero": 511, "noop": [402, 508], "nor": [2, 180, 321], "norm": [6, 153, 332, 370, 461, 487, 488], "norm1": 6, "norm2": 6, "norm_first": 426, "normal": [1, 2, 5, 6, 151, 152, 153, 203, 260, 266, 349, 351, 352, 353, 354, 370, 374, 376, 381, 382, 383, 409, 426, 429, 431, 514, 517], "not_equ": 0, "notabl": [6, 8], "notat": [123, 333, 394], "note": [0, 1, 2, 4, 6, 9, 17, 19, 85, 94, 100, 107, 110, 111, 119, 155, 165, 166, 176, 177, 188, 206, 208, 252, 256, 323, 330, 349, 409, 427, 481, 514, 516], "noth": [6, 119, 349, 513], "notic": [6, 509, 510, 516], "now": [1, 2, 6, 9, 408, 507, 514], "np": [1, 6, 7, 508, 514, 515], "npy": [216, 278, 516], "npz": [6, 216, 281, 282, 392, 396, 516], "nuc": 208, "nuclear": 208, "nuisanc": 508, "nullopt": 0, "num": [0, 6, 215, 265], "num_class": [7, 481], "num_decoder_lay": 426, "num_embed": [366, 407], "num_encoder_lay": 426, "num_epoch": [7, 481], "num_exampl": 5, "num_featur": [5, 354], "num_group": 370, "num_head": [6, 405, 426], "num_it": 5, "num_lay": [6, 7, 481], "num_param": 349, "num_paramet": 406, "num_sampl": 256, "num_split": 0, "number": [0, 2, 12, 19, 63, 72, 100, 106, 107, 108, 110, 111, 123, 148, 150, 155, 176, 180, 184, 195, 215, 240, 247, 252, 253, 256, 259, 261, 265, 267, 271, 275, 276, 312, 313, 317, 321, 324, 325, 329, 330, 349, 354, 356, 357, 358, 359, 360, 361, 363, 364, 370, 374, 405, 406, 426, 427, 429, 430, 431, 432, 496, 498, 499, 504, 507, 510, 512, 518], "number_of_el": 0, "numer": [6, 151, 153, 208, 221, 226, 294, 354, 370, 374, 376, 409, 448, 449, 451, 461, 482, 483, 484, 485, 486, 487, 494, 507, 513], "numpi": [2, 6, 7, 8, 14, 17, 19, 90, 92, 93, 95, 96, 135, 136, 140, 181, 182, 188, 197, 198, 199, 221, 227, 229, 237, 239, 243, 249, 270, 274, 304, 513, 515, 516], "nw": 1, "nwhc": 363, "o": [2, 9, 155, 375], "o_t": 375, "obj": 279, "object": [3, 11, 31, 51, 80, 100, 148, 149, 152, 194, 281, 325, 333, 334, 335, 336, 340, 363, 426, 506, 512], "observ": 6, "occupi": [123, 176, 252, 253], "occur": 514, "odd": 163, "odim": 7, "odot": [369, 375], "off": [6, 9, 513], "offer": 456, "offset": [0, 1, 2, 6, 47, 85, 125, 151, 154, 315], "often": 364, "ok": [392, 507, 509, 510], "okai": [507, 513], "old": 6, "older": [147, 149, 186], "omit": [487, 508], "onc": [2, 9, 507, 509], "one": [0, 2, 4, 6, 9, 39, 80, 87, 95, 99, 106, 107, 108, 110, 111, 130, 145, 147, 150, 151, 153, 154, 175, 208, 219, 227, 253, 256, 299, 304, 320, 329, 340, 359, 360, 361, 402, 427, 450, 489, 508, 509, 512, 517], "ones": [0, 2, 6, 245, 281, 293, 317, 403, 404, 481, 508, 511], "ones_lik": 0, "onli": [1, 2, 6, 8, 9, 84, 94, 106, 107, 108, 110, 111, 119, 175, 203, 204, 208, 213, 252, 260, 287, 323, 340, 349, 389, 390, 392, 397, 399, 402, 403, 404, 479, 507, 508, 509, 510, 512, 516, 517], "onlin": 484, "op": [1, 2, 246, 323, 390, 513], "open": [3, 9, 19, 263, 267, 508], "openmpi": 508, "oper": [3, 6, 8, 10, 38, 87, 88, 89, 108, 155, 175, 176, 249, 251, 294, 302, 309, 338, 340, 349, 426, 488, 507, 508, 510, 511, 513, 514, 515, 517, 518], "operand": [137, 138, 175], "opportun": 507, "opt": [490, 508], "optim": [1, 3, 5, 7, 8, 403, 507, 508, 510, 513], "option": [0, 3, 6, 15, 16, 18, 19, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 85, 87, 88, 89, 94, 100, 101, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 123, 124, 125, 128, 129, 130, 132, 133, 134, 147, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 174, 175, 176, 180, 184, 192, 193, 196, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 222, 226, 228, 230, 231, 236, 240, 244, 247, 248, 250, 252, 253, 255, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 271, 273, 275, 294, 295, 296, 299, 300, 301, 305, 307, 308, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 327, 329, 330, 333, 334, 335, 336, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 369, 375, 378, 381, 382, 383, 385, 389, 390, 392, 397, 402, 405, 407, 408, 410, 413, 418, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 482, 483, 484, 485, 486, 487, 488, 491, 494, 495, 496, 504, 507, 509, 516, 518], "ord": 208, "order": [0, 1, 29, 85, 108, 138, 203, 204, 208, 248, 252, 314, 349, 370, 403, 415, 491, 507, 510, 512], "ordinari": 187, "org": [370, 374, 376, 384, 409, 440, 462], "origin": [6, 125, 332, 354, 398, 429, 430, 431, 432, 482, 483, 484, 487, 488, 509, 514], "orthonorm": 183, "ostream": 2, "ostringstream": 2, "other": [0, 2, 6, 8, 194, 208, 349, 391, 479, 488, 507, 508, 509, 511, 512, 513, 515], "other_input": 349, "otherwis": [19, 108, 130, 262, 330, 333, 334, 335, 336, 390, 392, 402, 424, 426, 427, 442, 448, 453, 460, 472, 473, 513, 514], "our": [1, 2, 6, 7, 415, 482, 483, 484, 487, 488, 508], "out": [0, 1, 2, 9, 94, 152, 186, 363, 364, 399, 507, 508, 509, 510, 511], "out_ax": [325, 510], "out_channel": [356, 357, 358, 359, 360, 361], "out_dim": [349, 479], "out_dtyp": 2, "out_idx": 2, "out_mask": 94, "out_proj": [6, 479], "out_ptr": 2, "out_shap": [1, 2], "outer": [0, 507, 513], "outlier": 456, "output": [0, 1, 2, 6, 9, 16, 17, 18, 19, 29, 85, 94, 95, 96, 100, 102, 103, 104, 109, 110, 111, 115, 116, 117, 118, 119, 137, 148, 150, 151, 152, 153, 154, 155, 164, 167, 168, 169, 174, 175, 180, 183, 184, 188, 208, 215, 222, 226, 228, 230, 231, 236, 240, 244, 245, 248, 250, 251, 255, 256, 257, 259, 260, 261, 263, 266, 267, 281, 282, 292, 293, 294, 299, 301, 305, 309, 315, 317, 321, 322, 323, 324, 325, 326, 327, 328, 354, 356, 357, 358, 359, 360, 361, 374, 378, 405, 408, 424, 426, 427, 429, 430, 431, 432, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 473, 476, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517], "output_dim": [7, 349, 378, 408], "output_directori": 2, "output_dtyp": [1, 152], "output_fil": 6, "output_nam": [1, 152], "output_pad": [0, 109, 110, 111, 359, 360, 361], "output_shap": [1, 152], "output_strip_trailing_whitespac": 4, "output_vari": 4, "outsid": [152, 171], "over": [0, 2, 6, 7, 16, 18, 27, 28, 29, 30, 105, 106, 107, 108, 109, 110, 111, 115, 116, 117, 118, 158, 159, 162, 163, 166, 169, 187, 208, 213, 215, 222, 226, 228, 230, 236, 248, 250, 277, 294, 295, 301, 305, 312, 314, 322, 354, 356, 357, 358, 359, 360, 361, 370, 376, 409, 450, 496, 499, 508, 510, 512], "overal": 2, "overhead": [507, 513, 517], "overlap": 1, "overload": 19, "overrid": [2, 139], "overview": 3, "overwrit": 6, "own": [9, 508, 514], "owndata": 514, "p": [9, 206, 255, 349, 362, 363, 364, 461, 485, 487], "pack": [176, 252, 253], "packag": [2, 5, 7, 9, 342, 476, 508, 512], "package_data": 2, "pad": [0, 1, 105, 106, 107, 108, 109, 110, 111, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 351, 352, 353, 356, 357, 358, 359, 360, 361, 381, 382, 383], "pad_valu": 0, "pad_width": [0, 247], "padding_hi": 0, "padding_lo": 0, "page": [508, 515], "pain": 6, "pair": [0, 2, 247, 392, 413], "pairwis": 461, "pan": 6, "paper": [354, 418, 482, 483, 484, 487, 488], "parallel": [508, 517], "param": [321, 330, 349, 476, 509, 510], "paramet": [0, 1, 2, 5, 6, 7, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 377, 378, 381, 382, 383, 385, 386, 389, 390, 392, 397, 398, 399, 402, 403, 404, 405, 406, 407, 408, 409, 410, 413, 415, 418, 422, 424, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 441, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 473, 475, 476, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 499, 500, 502, 507, 508, 509, 510, 513], "parameter_scal": 483, "parametr": [406, 463], "pars": [6, 148], "parse_arg": 6, "parser": 6, "part": [1, 2, 147, 149, 185, 186, 268, 510, 511], "parti": 508, "partial": [403, 404, 507, 513], "particip": [128, 129, 132, 133, 134], "particular": [252, 370], "particularli": 507, "partit": [0, 29], "pass": [1, 2, 6, 7, 67, 81, 175, 176, 246, 247, 321, 329, 331, 333, 334, 335, 349, 390, 402, 403, 404, 415, 507, 508, 509, 512, 513], "password": [508, 512], "path": [3, 4, 9, 138, 147, 148, 149, 186, 234, 281, 282, 330, 335, 392, 489, 508, 512], "pattern": [349, 513], "peak": [179, 272], "penalti": 495, "penros": 209, "pep": 514, "per": [6, 7, 123, 155, 176, 252, 253, 329, 330, 354, 370, 374, 376, 409, 502, 507, 508, 512, 513], "perceptron": [8, 509], "perf_count": 507, "perfectli": 513, "perform": [0, 1, 2, 3, 6, 8, 15, 94, 108, 115, 116, 117, 118, 134, 137, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 175, 176, 183, 203, 204, 222, 227, 253, 276, 294, 308, 329, 349, 370, 426, 431, 432, 481, 507, 508, 511, 513, 517], "perhap": [2, 6], "perm": 7, "permtuat": 262, "permuat": 206, "permut": [0, 7], "persist": 9, "pg": 208, "phi": [367, 438], "physic": 508, "pi": [141, 367, 418, 439, 510], "pick": 2, "pip": [2, 4, 9], "pipelin": 2, "pivot": [206, 207], "pixel": 363, "place": [6, 39, 275, 276, 330, 508, 513, 514], "placehold": 507, "plai": [2, 6], "plain": 415, "plan": [2, 507], "platform": 9, "plot": 508, "plu": [0, 219], "png": 508, "point": [0, 2, 5, 6, 9, 85, 170, 173, 253, 340], "pool": [351, 352, 353, 381, 382, 383, 517], "popul": 2, "port": 512, "portion": 362, "posinf": [0, 240], "posit": [0, 6, 29, 125, 154, 171, 180, 193, 200, 201, 238, 240, 248, 260, 275, 315, 321, 334, 349, 356, 357, 358, 359, 360, 361, 405, 413, 418, 451, 461, 509], "possibl": [130, 175, 296, 366, 407, 507, 508, 511, 517], "possibli": [6, 15, 94, 175, 227, 332], "postur": 6, "power": [0, 510, 514], "practic": [2, 507], "pre": [9, 155, 448], "preced": 370, "precis": [0, 6, 146, 155, 349, 367, 409, 448, 490, 507], "preclud": 349, "pred": [452, 456], "predic": [330, 397, 489], "predict": [448, 451, 452, 453, 454, 455, 456, 458, 459, 460], "prefix": [325, 333, 335], "prelu": 349, "prepar": [2, 6, 508], "prepend": [3, 227], "preprint": [6, 482, 488], "preprocessor": 9, "present": 1, "preserv": [273, 510], "press": [6, 208], "pretti": [507, 513], "prevent": [302, 461, 514], "previou": [283, 286, 287], "primal": [1, 2, 119, 195, 324], "primit": 510, "print": [1, 2, 5, 6, 7, 9, 86, 119, 196, 332, 333, 334, 335, 337, 349, 504, 507, 508, 509, 510, 511, 512, 513, 514, 515], "prior": [251, 308, 309], "priorit": 510, "privat": [2, 4], "prng": [255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 504], "prob": 448, "probabl": [9, 263, 362, 363, 364, 408, 448, 450, 454, 517], "problem": [5, 7, 349], "process": [6, 108, 112, 127, 128, 129, 130, 132, 133, 134, 329, 334, 335, 364, 366, 426, 506, 508, 512], "processor": 9, "prod": [0, 1], "produc": [0, 2, 9, 100, 405, 476, 509], "product": [0, 2, 15, 85, 117, 187, 195, 196, 202, 227, 246, 250, 312, 324, 405, 515], "profil": 3, "program": [4, 179], "programmat": 404, "project": [3, 4, 6, 405, 509], "project_source_dir": 2, "promot": [2, 155], "promote_typ": 2, "promoted_dtyp": 2, "prompt": 6, "propag": [510, 511], "properti": [32, 39, 48, 52, 63, 64, 70, 72, 398, 401, 492, 508, 510], "proportion": 332, "protocol": 514, "provid": [0, 2, 6, 85, 123, 147, 148, 180, 262, 275, 312, 321, 329, 334, 336, 342, 349, 385, 390, 392, 402, 403, 404, 407, 408, 426, 427, 475, 479, 489, 508, 509, 516, 518], "pseudo": [209, 504], "pth": 6, "public": [2, 349], "pun": 0, "pure": [1, 119, 349, 481], "purpos": [1, 208, 508], "purs": 6, "push": 2, "push_back": 2, "put": [0, 1, 7, 251, 507, 508], "put_along_axi": [0, 206], "py": [2, 6, 9, 508, 512], "pypi": 9, "python": [1, 3, 4, 6, 51, 70, 80, 86, 143, 329, 333, 334, 335, 336, 337, 479, 490, 491, 493, 506, 508, 509, 510, 512, 514], "python_execut": 4, "python_requir": 2, "pytorch": [6, 8, 367, 370, 510], "pytorch_compat": 370, "q": [155, 210], "quantiz": [0, 123, 176, 216, 253, 407, 408], "quantized_matmul": 0, "quantizedembed": 349, "quantizedlinear": 349, "quarter": 6, "queri": [6, 155, 287, 405], "query_input_dim": 405, "query_proj": 6, "question": [6, 513], "queue": 3, "quick": [2, 8], "quit": [510, 514], "quotient": [0, 135, 136, 173], "r": [2, 6, 210, 321, 363, 369], "r_t": 369, "race": 517, "radian": [0, 122], "rag": 6, "rain": 6, "rais": [0, 6, 119, 208, 249, 296, 392, 509], "ram": [6, 286], "random": [1, 2, 3, 5, 6, 7, 8, 152, 351, 352, 353, 354, 374, 381, 382, 383, 392, 399, 507, 509, 510, 517, 518], "randomli": [5, 6, 262, 362, 363, 364], "rang": [0, 2, 3, 5, 6, 7, 9, 19, 171, 175, 215, 430, 432, 439, 440, 481, 496, 497, 498, 499, 500, 504, 507, 510, 513, 517], "rank": [0, 132, 133, 134, 457, 508, 512], "rate": [5, 481, 482, 483, 484, 485, 486, 487, 488, 494, 495], "rather": [2, 510, 517], "ratio": [0, 25], "rceil": 94, "re": [7, 9, 476], "reachabl": 508, "readabl": 3, "real": [0, 164, 165, 166, 167, 168, 169, 200, 201, 203, 204], "realli": 376, "reason": [1, 6, 511], "reboot": 9, "receiv": [132, 133, 330, 498, 508, 514], "reciproc": [0, 277], "reclaim": 283, "recommend": [9, 286, 488], "recompil": [100, 507], "reconstruct": 206, "record": [3, 179, 513], "recreat": [337, 481], "rectifi": [377, 411, 412, 431, 432, 445, 464, 465], "recurr": [369, 375, 410], "recurs": [148, 349, 389, 390, 395, 400, 402, 479], "recv": [133, 508], "reduc": [0, 1, 9, 16, 18, 27, 28, 129, 226, 228, 230, 236, 250, 301, 305, 322, 329, 336, 354, 426, 456], "reduct": [16, 18, 129, 226, 228, 236, 250, 336, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461], "redund": 510, "refer": [208, 374, 384, 398, 429, 430, 431, 432, 440, 462, 511], "reflect": [398, 507, 511, 514], "regard": 367, "regardless": [85, 155, 508], "regist": [2, 7], "register_librari": 2, "regress": [8, 456], "regular": [39, 363, 462, 486, 507, 509, 511], "regularli": 2, "reimplement": 2, "rel": [17, 188, 483, 507, 508], "relative_step": 483, "releas": 4, "relev": 2, "reli": [1, 2], "relu": [349, 406, 426, 463, 476], "relu6": 349, "remain": [0, 6, 287, 321, 335, 362, 363, 364, 508], "remaind": [0, 136], "remov": [0, 125, 227, 256, 299, 450], "rep": [0, 313], "repeat": [0, 313], "repeatedli": 5, "repetit": 271, "replac": [0, 6, 240, 403, 404, 426, 460], "replai": 3, "repli": 6, "repo": [5, 7, 9, 507], "report": [177, 286], "repres": [2, 6, 127, 130, 176, 457, 461, 514], "represent": [6, 207, 252, 323, 333, 337], "requir": [1, 2, 4, 6, 349, 508, 512, 513, 514], "requires_grad": 510, "rerun": [507, 513], "rescal": 332, "research": 8, "reset": 272, "reset_peak_memori": 179, "reshap": [0, 6, 208, 427, 507, 511], "resid": 287, "resolv": 2, "resourc": 2, "resource_limit": 232, "respect": [2, 5, 7, 119, 151, 153, 175, 176, 180, 252, 321, 334, 349, 354, 367, 370, 374, 376, 479, 508, 510, 512, 515], "respons": 2, "rest": [6, 154, 334, 335, 413, 512], "restart": 9, "restor": 275, "result": [0, 6, 15, 19, 39, 80, 85, 100, 148, 151, 153, 176, 196, 208, 227, 253, 260, 271, 286, 300, 334, 335, 336, 340, 418, 448, 507, 508, 510, 514], "resum": 6, "return": [0, 1, 2, 4, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 51, 70, 80, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 122, 123, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 335, 336, 337, 349, 369, 375, 385, 386, 387, 389, 390, 391, 392, 393, 394, 395, 399, 400, 402, 403, 404, 410, 428, 429, 430, 431, 432, 433, 434, 435, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 476, 479, 489, 490, 506, 507, 508, 509, 510, 511, 513, 514, 516, 517], "return_metadata": 216, "revers": [0, 2, 42, 43, 44, 45, 57, 85, 115, 116, 117, 118, 222, 316, 418], "rf": 9, "rfft": 164, "rfft2": 165, "rfftn": 166, "rho": 482, "rhs_indic": [0, 175, 176], "rhs_mask": 94, "right": [0, 1, 2, 9, 252, 274, 275, 367, 427, 439, 440, 451, 453, 461], "right_shift": 0, "ring": 130, "rm": [6, 9, 153, 483], "rmsnorm": [6, 349], "rmsprop": 481, "rnn": [349, 369], "robust": 456, "roform": [6, 413], "roll": 0, "root": [0, 6, 153, 277, 297, 409], "rope": [6, 349], "rosetta": 9, "rotari": [6, 154, 413], "rotat": [154, 413], "round": [0, 252], "row": [0, 1, 2, 85, 104, 150, 152, 184, 252, 317], "rpath": 2, "rsqrt": 0, "rtol": [0, 17, 188], "rule": [2, 481], "run": [1, 2, 3, 4, 6, 7, 8, 9, 10, 152, 246, 338, 354, 385, 482, 483, 485, 486, 487, 507, 509, 512, 513, 517, 518], "runtim": [6, 130, 342, 507, 508], "runtime_error": 2, "safetensor": [9, 216, 280, 392, 396, 481, 513, 516], "sai": [2, 6, 476, 513], "said": 6, "sake": 510, "same": [0, 2, 6, 9, 17, 39, 84, 95, 96, 100, 106, 107, 108, 110, 111, 112, 128, 151, 153, 159, 163, 164, 167, 168, 169, 176, 180, 188, 195, 247, 256, 275, 276, 293, 323, 324, 326, 329, 335, 349, 352, 353, 354, 362, 370, 374, 382, 383, 407, 428, 429, 430, 431, 432, 433, 434, 435, 450, 461, 479, 490, 504, 507, 508, 509, 511, 512, 517], "sampl": [2, 5, 6, 215, 255, 256, 257, 259, 260, 263, 266, 267, 429, 430, 431, 432, 434, 435, 451, 457, 461, 504, 507, 509], "sat": 6, "save": [3, 6, 8, 216, 234, 252, 279, 280, 281, 282, 396, 509, 513], "save_gguf": 516, "save_safetensor": [396, 481, 516], "save_weight": 349, "savez": [6, 396, 516], "savez_compress": 516, "saw": [6, 510], "scalar": [0, 2, 14, 15, 17, 31, 51, 80, 84, 90, 91, 92, 93, 94, 96, 99, 135, 136, 140, 173, 174, 180, 181, 182, 183, 188, 197, 198, 199, 215, 221, 223, 224, 225, 227, 229, 237, 239, 240, 243, 247, 249, 255, 263, 266, 267, 270, 274, 279, 304, 321, 323, 326, 331, 461, 509, 510, 513, 515], "scale": [0, 2, 6, 15, 123, 151, 153, 154, 155, 176, 183, 252, 253, 259, 261, 332, 363, 364, 376, 405, 413, 414, 418, 427, 466, 483], "scale_arr": 2, "scale_factor": 427, "scale_paramet": 483, "scatter": 0, "scatter_add": 0, "scatter_add_axi": 0, "scatter_max": 0, "scatter_min": 0, "scatter_prod": 0, "schedul": [2, 481, 496, 497, 498, 499, 500, 502, 517], "schema": [3, 512], "scipi": [183, 206], "scope": 349, "score": [6, 155, 457], "script": [508, 512], "sdk": 9, "se": 1, "second": [6, 9, 125, 194, 196, 197, 223, 225, 227, 274, 306, 315, 321, 352, 353, 382, 383, 449, 457, 483, 487, 507, 509, 510, 517], "second_layer_a": 513, "second_layer_b": 513, "secret": 6, "section": [1, 6, 9, 296, 461, 507, 508, 510], "see": [1, 2, 4, 6, 7, 9, 11, 12, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 208, 279, 280, 283, 330, 340, 349, 354, 355, 363, 365, 367, 371, 372, 373, 379, 380, 388, 406, 407, 408, 411, 412, 413, 414, 416, 418, 419, 420, 421, 422, 423, 425, 427, 429, 430, 431, 432, 438, 439, 440, 466, 507, 508, 509, 510, 511, 512, 515, 517], "seed": 258, "seen": [508, 514], "select": [0, 3, 9, 203, 204, 314, 326, 385, 389, 397, 512], "self": [6, 7, 10, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 119, 170, 349, 462, 479], "selu": 349, "semant": [14, 90, 92, 93, 95, 96, 135, 136, 140, 181, 182, 197, 198, 199, 221, 227, 229, 237, 239, 243, 249, 270, 274, 304, 517], "semi": [200, 201, 260], "send": 508, "sender": 508, "sennrich": 6, "sensit": 456, "sentencepiec": 6, "separ": [6, 67, 81, 370, 457], "sequenc": [6, 16, 18, 34, 35, 58, 59, 60, 61, 65, 73, 76, 77, 78, 82, 85, 96, 108, 132, 145, 152, 157, 158, 159, 161, 162, 163, 165, 166, 168, 169, 174, 180, 226, 228, 230, 236, 244, 250, 255, 256, 257, 259, 260, 261, 263, 266, 267, 273, 292, 293, 294, 296, 299, 301, 305, 312, 313, 316, 320, 321, 322, 327, 354, 356, 359, 369, 375, 410, 426, 504, 517], "sequenti": [349, 476], "seri": 9, "serial": 481, "set": [2, 4, 6, 7, 9, 100, 119, 126, 128, 129, 130, 132, 133, 134, 139, 151, 153, 154, 232, 283, 284, 285, 286, 287, 303, 329, 367, 376, 378, 388, 390, 397, 398, 399, 402, 403, 408, 413, 424, 449, 461, 473, 479, 481, 483, 485, 486, 491, 504, 509, 510, 513], "set_byt": 2, "set_compute_pipeline_st": 2, "set_data": 2, "set_dtyp": 349, "set_input_arrai": 2, "set_memory_limit": 283, "set_output_arrai": 2, "set_vector_byt": 2, "setup": [2, 4, 5, 7, 9, 507, 508, 509], "sever": [6, 9, 105, 106, 107, 108, 109, 110, 111, 281, 282, 329, 507, 508, 512, 516], "sgd": [5, 7, 481, 488, 491, 496, 497, 500, 507], "shade": [1, 2], "shall": 6, "shape": [0, 2, 3, 6, 7, 67, 84, 85, 94, 95, 96, 100, 105, 106, 107, 108, 109, 110, 111, 125, 128, 132, 133, 147, 149, 152, 155, 156, 159, 160, 163, 164, 167, 168, 169, 174, 175, 183, 195, 205, 214, 227, 244, 245, 255, 256, 257, 259, 260, 261, 263, 266, 267, 273, 275, 293, 320, 323, 324, 326, 327, 328, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 363, 364, 369, 374, 375, 378, 381, 382, 383, 392, 410, 428, 429, 430, 431, 432, 433, 434, 435, 450, 461, 481, 507, 509, 510, 511, 515, 517], "shapeless": [0, 100, 147, 149], "share": [8, 123, 176, 252, 253, 323, 508], "shazeer": 6, "shift": [0, 159, 163, 197, 274, 275, 354], "shop": 6, "should": [1, 2, 4, 5, 6, 7, 9, 85, 98, 125, 128, 151, 152, 153, 155, 195, 234, 251, 252, 287, 309, 315, 321, 324, 329, 330, 333, 349, 356, 357, 358, 359, 360, 361, 363, 364, 399, 405, 415, 450, 452, 457, 479, 489, 506, 507, 508, 509, 510, 513, 514, 518], "show": [9, 340, 507], "shown": 2, "shuffl": 7, "side": [0, 247, 351, 352, 353, 359, 360, 361, 381, 382, 383, 507], "sigma": [367, 368, 369, 375, 417, 429, 430, 431, 432, 440, 441, 446, 467, 468], "sigmoid": [0, 6, 349, 379, 416, 440, 446, 448, 468], "sign": [0, 17, 188, 340, 488], "signal": [112, 427], "signatur": [1, 152], "signedinteg": [12, 194], "signific": 252, "significantli": 508, "silent": [167, 168, 169], "silicon": [2, 6, 8, 9, 517], "silu": 349, "simd": 1, "simd_sum": 1, "simdgroup": 1, "simdgroup_s": 1, "similar": [6, 176, 194, 334, 403, 404, 405, 449, 508, 514, 516], "similarli": [2, 9, 227, 510, 513], "simpl": [2, 6, 7, 349, 366, 475, 481, 507, 508, 509, 510, 512, 513], "simple_axpbi": 2, "simple_tim": 2, "simplest": [2, 349, 508], "simpli": [2, 6, 9, 365, 377, 411, 437, 445, 464, 474, 479, 507, 508, 510, 512], "simplic": 0, "simplifi": 508, "simultan": 1, "sin": [0, 119, 418, 509, 510, 515], "sinc": [1, 2, 6, 7, 176, 179, 479, 488, 498, 507, 509, 514, 517], "sine": [0, 22, 23, 290, 291, 509, 510], "sing": 208, "singer": 484, "singl": [7, 86, 143, 195, 216, 231, 247, 324, 352, 353, 382, 383, 507, 509, 511, 516], "singleton": [0, 16, 18, 27, 28, 130, 226, 227, 228, 230, 236, 250, 301, 305, 322, 508], "singular": [208, 209, 213], "sinh": 0, "sinusoid": 418, "sinusoidalpositionalencod": 349, "size": [0, 1, 2, 6, 7, 52, 70, 94, 106, 107, 110, 111, 123, 145, 151, 152, 153, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 174, 176, 178, 183, 184, 194, 202, 208, 252, 253, 256, 273, 286, 287, 292, 296, 299, 320, 323, 329, 330, 349, 351, 352, 353, 356, 357, 358, 359, 360, 361, 366, 374, 381, 382, 383, 407, 408, 427, 483, 508, 513, 514], "size_in_megabyt": 287, "size_t": [0, 2], "skip": [3, 85], "slice": [0, 293, 511], "slice_s": [0, 292], "slice_upd": 0, "slide": [351, 352, 353, 381, 382, 383], "slight": [6, 513], "slightli": [413, 517], "slope": 377, "slow": 507, "slowli": 6, "small": [6, 146, 151, 153, 329, 354, 370, 376, 409, 451, 456, 461, 507, 517], "smaller": [0, 9, 248, 329, 488, 507], "smallest": 208, "smile": 6, "smooth": [450, 460, 494], "smooth_l1_loss": 349, "sned": 134, "snippet": 508, "so": [1, 2, 6, 9, 180, 183, 321, 362, 427, 481, 507, 508, 513, 517], "socket": 508, "softmax": [0, 6, 155, 349, 380, 447, 450], "softmin": 349, "softplu": [349, 384, 462], "softshrink": 349, "softsign": 349, "solut": [211, 212], "solv": 349, "some": [0, 2, 5, 6, 7, 148, 390, 402, 481, 491, 507, 508, 509, 510, 512, 513], "someon": 6, "someth": [5, 6, 511], "sometim": 507, "sonoma": 9, "soon": 6, "sort": [0, 29, 30, 175, 176, 248, 314], "sorted_indic": [0, 175, 176], "sourc": [0, 1, 2, 3, 4, 62, 132, 133, 152, 238, 316, 508], "space": [0, 2, 215, 448, 459], "spars": [0, 231], "spatial": [106, 107, 108, 110, 111, 351, 352, 353, 370, 381, 382, 383, 427], "speak": [6, 208], "specif": [1, 2, 9, 508, 510], "specifi": [0, 2, 19, 38, 106, 107, 108, 110, 111, 125, 165, 166, 174, 180, 202, 208, 215, 238, 244, 251, 256, 271, 306, 308, 309, 312, 315, 316, 321, 325, 327, 354, 424, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 473, 507, 508, 509, 510, 517], "spectrum": 159, "speed": 1, "spent": 6, "split": [0, 368, 370, 441], "splittabl": 504, "sqrt": [0, 6, 141, 155, 183, 354, 367, 370, 374, 376, 378, 409, 418, 429, 430, 431, 432, 439, 482, 484, 485, 486, 494, 507], "squar": [0, 5, 6, 153, 184, 205, 214, 277, 297, 321, 334, 349, 409, 458, 460, 482, 483, 485, 486, 487, 510, 514], "squeez": [0, 427, 507], "src": [0, 132, 133], "ssh": [508, 512], "stabil": [151, 153, 354, 370, 374, 376, 409, 448, 449, 451, 482, 483, 484, 485, 486, 487, 494], "stabl": [221, 226, 294, 456], "stable_abi": 2, "stack": [0, 507], "standard": [0, 1, 4, 7, 51, 80, 227, 257, 261, 301, 426, 429, 431, 434, 508, 515], "starmap": [6, 334], "start": [0, 1, 2, 5, 6, 8, 9, 19, 154, 215, 234, 292, 293, 296, 336, 507, 509, 511, 512, 517], "start_axi": [0, 50, 171], "start_captur": 3, "start_indic": [292, 293], "state": [6, 7, 349, 369, 375, 410, 481, 491, 504, 507], "static": [9, 507], "static_cast": 2, "std": [0, 2, 4, 434, 509], "stderr": 512, "stdout": 512, "step": [0, 3, 4, 6, 7, 19, 329, 349, 369, 375, 410, 483, 491, 496, 498, 499, 500, 507, 508], "step_decai": 481, "step_siz": 500, "still": [6, 9, 208, 507, 513], "stochast": [484, 485, 487, 495, 513], "stood": 6, "stop": [0, 2, 6, 19, 215, 235, 302, 510, 511], "stop_captur": 3, "stop_gradi": [0, 510], "storag": 85, "store": 6, "str": [2, 112, 130, 137, 138, 147, 148, 149, 152, 155, 180, 186, 203, 204, 208, 216, 231, 232, 234, 278, 279, 280, 281, 282, 321, 330, 333, 337, 385, 386, 389, 390, 392, 394, 396, 402, 427, 431, 432, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 489], "straight": 6, "strang": 6, "stream": [2, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 121, 122, 123, 124, 125, 128, 129, 132, 133, 134, 135, 136, 137, 140, 141, 142, 144, 145, 146, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 174, 175, 176, 181, 182, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 285, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 326, 327, 328, 508, 517], "streamcontext": 303, "streamordevic": [0, 2], "street": 6, "strength": [488, 495], "strict": [130, 181, 198, 390, 392, 402], "strictli": [208, 287], "stride": [0, 2, 85, 105, 106, 107, 108, 109, 110, 111, 351, 352, 353, 356, 357, 358, 359, 360, 361, 381, 382, 383, 413, 511], "string": [0, 2, 138, 147, 152, 186, 232, 247, 509, 514, 516], "stronger": 512, "structur": [2, 329, 490, 510], "stub": 9, "style": [2, 14, 17, 90, 92, 93, 135, 136, 140, 181, 182, 188, 197, 198, 199, 221, 227, 229, 237, 239, 243, 249, 270, 274, 304], "su": 6, "sub": [0, 7, 125, 265, 292, 293, 315, 330], "subarrai": [125, 296], "subclass": 479, "subdivid": 1, "subdtyp": 194, "subgradi": 484, "sublinear": 483, "submodul": [6, 7, 349, 386, 390, 391, 402, 404], "subnetwork": 508, "suboptim": 509, "subscript": [137, 138], "subsect": 6, "subsequ": [130, 481, 508, 512], "subset": [349, 389], "substanti": 9, "subtl": 507, "subtract": [0, 39], "subtyp": [194, 340], "succe": 130, "successfulli": 508, "sudo": [9, 287, 508], "suggest": 508, "sum": [0, 2, 5, 14, 118, 129, 149, 187, 208, 226, 294, 312, 315, 349, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 508, 511, 514], "sum_": [208, 456], "sum_i": 447, "sum_j": [469, 470], "summat": [137, 138], "super": [6, 7, 349, 479], "superset": [334, 490], "support": [1, 2, 6, 8, 9, 17, 94, 107, 110, 111, 155, 171, 183, 188, 200, 201, 203, 204, 205, 209, 210, 213, 214, 216, 227, 252, 260, 508, 510, 511, 514, 516], "suppos": [510, 517], "sure": [2, 3, 6, 9, 349, 507], "surpass": [431, 432], "surpris": 6, "sw": 1, "swap": [0, 112, 286, 306, 404], "swapax": [0, 119], "swiglu": 6, "swish": [416, 468], "switch": 9, "symbol": 488, "symmetr": [106, 107, 110, 111, 200, 201, 203, 204], "symmetri": [203, 204], "synchron": [2, 507], "syntax": [39, 511], "synthet": 5, "sysctl": 287, "system": [4, 6, 9, 177, 178, 211, 212, 232, 287], "t": [0, 1, 2, 4, 6, 9, 104, 141, 152, 155, 176, 200, 201, 253, 321, 349, 369, 375, 410, 482, 483, 484, 485, 486, 487, 488, 494, 495, 507, 509, 510, 517], "t_kv": 155, "t_q": 155, "tabl": [1, 208, 340, 366], "take": [0, 2, 6, 7, 90, 91, 92, 93, 100, 147, 175, 180, 195, 229, 237, 245, 253, 309, 321, 324, 325, 328, 335, 336, 351, 352, 353, 381, 382, 383, 405, 448, 489, 504, 508, 509, 510, 511, 512, 516, 517, 518], "take_along_axi": [0, 206, 511], "taken": [125, 308, 315], "talk": 508, "tan": 0, "tangent": [0, 2, 24, 25, 26, 119, 195, 310, 311, 425, 474], "tangent_i": 2, "tangent_x": 2, "tanh": [0, 349, 367, 369, 375, 384, 410, 439, 462], "target": [2, 321, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 507], "target_include_directori": 2, "target_link_librari": [2, 4], "target_link_opt": 2, "target_sourc": 2, "task": 456, "tau": 495, "tcp": 508, "tediou": 508, "tell": [4, 6, 507, 514], "temp": 6, "templat": [0, 1, 2, 152], "ten": 513, "tend": 488, "tensor": [216, 312, 461, 514], "tensordot": 0, "term": [2, 451, 482, 483, 484, 485, 486, 487, 494], "termin": [9, 512], "test": [7, 9, 508, 512], "test_imag": 7, "test_label": 7, "text": [6, 367, 369, 375, 384, 410, 417, 424, 429, 430, 431, 432, 439, 442, 443, 444, 451, 452, 453, 456, 457, 460, 462, 463, 466, 467, 472, 473, 483, 488], "textrm": [252, 367, 368, 438, 441], "tf": 514, "tgp_size": 2, "th": [115, 116, 117, 118, 124, 150, 203, 222, 498], "than": [1, 2, 6, 80, 112, 125, 136, 154, 175, 181, 182, 198, 199, 200, 201, 203, 204, 205, 206, 209, 213, 214, 227, 283, 287, 332, 334, 413, 424, 427, 457, 460, 473, 483, 488, 489, 507, 509, 510, 517], "thank": 513, "thei": [1, 2, 5, 6, 9, 17, 112, 176, 188, 415, 452, 479, 488, 506, 507, 508, 509, 513, 515, 516, 517], "them": [0, 2, 6, 128, 349, 390, 402, 508, 509, 512, 517], "themselv": [2, 507], "thi": [0, 1, 2, 4, 6, 7, 9, 16, 17, 18, 19, 27, 28, 29, 30, 85, 86, 98, 119, 139, 147, 149, 152, 175, 176, 177, 183, 186, 188, 195, 200, 201, 203, 204, 205, 208, 209, 210, 213, 214, 221, 226, 227, 228, 230, 236, 248, 250, 256, 285, 287, 294, 295, 296, 301, 305, 308, 314, 322, 329, 332, 335, 336, 349, 362, 363, 364, 368, 369, 375, 386, 387, 389, 390, 393, 394, 395, 400, 402, 403, 404, 405, 408, 410, 424, 429, 430, 431, 432, 439, 440, 441, 448, 456, 473, 479, 489, 491, 506, 507, 508, 509, 510, 512, 513, 514, 516], "thin": 512, "thing": [2, 6], "third": [202, 353, 383, 508, 509], "thompson": 363, "those": [2, 6, 349], "though": [2, 6, 507, 509, 513, 514], "thousand": 513, "thread": [1, 2], "thread_index_in_simdgroup": 1, "thread_position_in_grid": [1, 2, 152], "threadgroup": [1, 2, 152], "threads_per_simdgroup": 1, "three": [6, 89, 353, 383, 427], "threefri": 504, "threshold": [424, 453, 460, 473], "through": [1, 2, 302, 426, 488, 507, 508, 509, 510, 514], "throw": [2, 100, 130], "thu": [6, 349], "thumb": 481, "tic": 507, "tieleman": 494, "tile": [0, 155], "time": [2, 6, 9, 286, 313, 349, 369, 375, 410, 507, 508, 510, 513, 517], "timeit": [507, 510], "titl": 2, "tmp": [1, 152], "to_quant": 330, "to_stream": 2, "toc": 507, "togeth": [0, 1, 2, 7, 252, 334, 335, 508], "tok_embed": 6, "token": [6, 366, 407], "told": 6, "toler": [0, 17, 188], "too": [194, 507, 513], "took": 6, "tool": 9, "top": [2, 314, 378, 427], "topk": 0, "torch": [6, 514], "torch_weight": 6, "total": [287, 510], "total_norm": 332, "tpi": 507, "tpng": 508, "trace": [0, 3, 149, 507], "trace_fil": 3, "tracer": 403, "track": [2, 349, 354], "track_running_stat": 354, "trade": 513, "tradit": [6, 154, 363, 364, 413], "train": [6, 7, 349, 354, 362, 363, 364, 388, 390, 402, 429, 430, 509], "train_imag": [7, 481], "train_label": [7, 481], "trainabl": [7, 331, 349, 479], "trainable_paramet": [349, 389, 491], "transfer": 512, "transform": [1, 6, 8, 119, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 183, 331, 349, 354, 370, 376, 378, 389, 390, 402, 408, 413, 511], "transformerencod": 281, "transit": 498, "translat": [151, 376], "transpos": [0, 6, 32, 109, 110, 111, 176, 253, 359, 360, 361], "treat": [0, 2, 119, 165, 166, 168, 169, 308, 427, 507], "tree": [8, 86, 100, 143, 180, 321, 325, 329, 333, 334, 335, 336, 337, 490, 491, 493, 502, 510], "tree_flatten": [281, 334, 337, 349, 481, 509], "tree_map": [335, 349, 508], "tree_unflatten": [6, 481, 509], "trembl": 6, "tri": [0, 130], "triangl": [203, 204, 317], "triangular": [200, 201, 212, 214], "trigger": 507, "tril": 0, "trilinear": 427, "triplet": 461, "triplet_loss": 349, "triu": 0, "true": [0, 1, 2, 4, 5, 6, 17, 42, 43, 44, 45, 57, 84, 100, 115, 116, 117, 118, 152, 154, 176, 188, 194, 200, 201, 208, 213, 216, 222, 231, 253, 294, 326, 330, 333, 334, 335, 336, 340, 349, 354, 356, 357, 358, 359, 360, 361, 369, 370, 374, 375, 376, 378, 389, 390, 392, 399, 402, 408, 410, 413, 418, 426, 427, 448, 456, 483, 485, 486, 489, 507, 509], "truncat": [156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 266], "truth": [5, 450, 460], "try": [2, 9, 508], "tupl": [0, 31, 67, 70, 81, 86, 95, 101, 106, 107, 108, 110, 111, 132, 136, 138, 143, 145, 147, 186, 195, 203, 206, 207, 208, 210, 213, 247, 252, 273, 275, 292, 293, 299, 320, 321, 324, 333, 334, 335, 336, 337, 351, 352, 353, 357, 358, 360, 361, 381, 382, 383, 392, 394, 415, 427, 483, 485, 486, 487, 488, 506, 509, 510], "tutori": 2, "twice": 517, "two": [0, 2, 14, 15, 17, 25, 84, 88, 90, 92, 93, 94, 125, 135, 140, 157, 161, 168, 175, 176, 181, 182, 188, 196, 198, 199, 200, 201, 202, 203, 204, 205, 209, 210, 213, 214, 221, 227, 229, 237, 239, 243, 246, 306, 336, 352, 368, 375, 382, 441, 449, 507, 508, 509, 510, 511, 517], "txt": [2, 4], "type": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 70, 80, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 123, 124, 125, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 270, 271, 273, 274, 276, 277, 283, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 332, 333, 336, 349, 397, 426, 428, 429, 430, 431, 432, 433, 434, 435, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 507, 509, 511, 514], "type_to_nam": 2, "typenam": [0, 1, 2], "typic": [0, 155, 329, 366, 481, 507, 513], "u": [1, 2, 4, 200, 203, 204, 206, 213, 378, 404, 502, 508, 512, 513], "u_": 482, "u_t": 482, "uint": [1, 2, 152], "uint16": [12, 340], "uint3": 1, "uint32": [12, 27, 28, 29, 30, 256, 340], "uint64": [12, 340], "uint8": [12, 340], "ultra": 6, "unabl": 9, "unam": 9, "unari": 507, "unchang": [154, 302, 413], "uncheck": 9, "uncompress": 281, "undefin": [0, 29, 119, 200, 201, 248, 260, 511], "under": 208, "underli": [2, 323], "understand": [6, 429, 430], "unevalu": 148, "unexpect": [2, 19], "unexpectedli": 512, "unflatten": 0, "unfreez": [349, 390], "unfrozen": 402, "unifi": 8, "uniform": [3, 349, 378, 392, 430, 432, 476, 504, 507, 510, 517], "uniformli": 267, "unintend": 0, "union": [19, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 65, 66, 67, 68, 69, 71, 73, 74, 75, 76, 77, 78, 79, 81, 82, 83, 87, 88, 89, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 192, 193, 194, 196, 203, 204, 213, 232, 279, 303], "uniqu": [2, 211, 212, 504, 508], "unique_ptr": 2, "unit": [355, 365, 367, 368, 369, 377, 411, 412, 414, 416, 429, 430, 431, 432, 436, 437, 438, 439, 440, 441, 445, 464, 465, 466, 468], "unittest": 9, "univers": 208, "unless": [6, 17, 188, 208, 479], "unlik": [6, 17, 188, 206, 363, 364, 398], "unnecessari": [2, 6], "unnorm": [256, 448, 450], "unscal": 483, "unsign": [176, 252, 253, 340], "unsignedinteg": 12, "unspecifi": [16, 18, 19, 27, 28, 29, 30, 101, 115, 116, 117, 118, 174, 222, 226, 228, 230, 236, 244, 248, 250, 271, 294, 295, 301, 305, 308, 314, 315, 322, 327, 518], "unsqueez": 6, "unsupport": 216, "until": [2, 329, 513, 515], "unus": 2, "up": [1, 2, 6, 119, 507], "upcast": 2, "updat": [0, 1, 2, 5, 6, 7, 39, 100, 293, 330, 334, 336, 354, 385, 386, 392, 397, 398, 399, 404, 481, 483, 486, 488, 490, 491, 495, 496, 497, 498, 499, 500, 507, 508, 509, 513], "update_modul": 349, "uplo": [203, 204], "upon": [6, 334, 335], "upper": [200, 201, 203, 204, 212, 214, 252, 263, 266, 267, 435], "upsampl": 349, "us": [0, 3, 5, 6, 7, 8, 9, 19, 39, 85, 119, 123, 126, 128, 129, 132, 133, 134, 136, 152, 154, 171, 176, 177, 178, 179, 197, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 227, 252, 253, 271, 273, 274, 275, 283, 286, 287, 307, 320, 329, 333, 336, 340, 342, 349, 352, 353, 363, 366, 367, 369, 375, 378, 382, 383, 385, 389, 396, 403, 405, 407, 408, 410, 413, 418, 426, 427, 431, 432, 439, 440, 449, 476, 479, 481, 482, 483, 485, 486, 487, 488, 489, 490, 491, 504, 506, 507, 508, 509, 510, 511, 512, 515, 517], "usag": [426, 507, 508], "user": [2, 6, 349], "usual": [366, 407, 506, 513], "util": [1, 2, 6, 8, 9, 281, 349, 481, 512], "v": [6, 112, 155, 203, 349, 390, 514], "v_": [482, 484, 485, 486, 487, 494, 495], "v_t": [482, 484, 485, 486, 487, 494, 495], "val": [0, 31, 174], "valid": [7, 112, 171, 325, 333, 390, 402, 506, 508], "valid_parameter_filt": 385, "valu": [0, 1, 5, 6, 12, 13, 17, 19, 27, 28, 51, 80, 84, 99, 130, 147, 150, 155, 156, 157, 158, 160, 161, 162, 164, 165, 166, 167, 168, 169, 171, 174, 186, 188, 202, 208, 209, 213, 215, 232, 240, 247, 251, 255, 256, 257, 259, 260, 261, 263, 266, 267, 275, 279, 287, 308, 309, 321, 325, 331, 333, 334, 335, 336, 340, 352, 353, 355, 362, 363, 364, 365, 371, 374, 378, 382, 383, 389, 405, 406, 422, 424, 426, 428, 448, 449, 450, 451, 452, 453, 455, 456, 457, 458, 459, 460, 473, 479, 483, 486, 496, 497, 499, 500, 510], "value_and_grad": [7, 119, 349, 403, 479, 481, 493, 507, 510, 514, 515], "value_and_grad_fn": 513, "value_cach": 6, "value_dim": 405, "value_input_dim": 405, "value_output_dim": 405, "value_proj": 6, "valueerror": [119, 208, 392, 510], "values_hat": 6, "van": 208, "var": [0, 354, 370, 374, 376, 451], "variabl": [9, 100, 119, 126, 139, 147, 148, 149, 180, 195, 321, 324, 325, 507, 508, 509], "varianc": [0, 301, 322, 354, 370, 451], "variant": [6, 460, 487], "variou": 208, "vector": [0, 2, 5, 8, 187, 195, 208, 308, 324, 325, 366, 450, 509, 515], "verbos": [1, 152, 508], "veri": [6, 405, 512, 513, 517], "verifi": [5, 9], "versa": 275, "version": [2, 4, 9, 86, 123, 147, 149, 186, 221, 226, 252, 294, 325, 504, 510, 511], "versu": 507, "via": [9, 119, 490, 493, 508, 512, 513, 514], "vice": 275, "video": 364, "view": [0, 3, 85, 514], "virtual": 2, "visual": 148, "vjp": [2, 119, 515], "vmap": [2, 119, 509, 510, 513, 515], "vmap_add": 510, "vocab_s": 6, "vocabulari": [366, 407], "void": [1, 2], "vt": 213, "w": [0, 1, 5, 106, 107, 110, 111, 123, 176, 203, 252, 253, 321, 335, 354, 357, 358, 360, 361, 363, 364, 378, 481, 495, 510], "w1": [6, 332], "w2": [6, 332], "w3": 6, "w_": [369, 375, 410, 482, 483, 484, 485, 486, 487, 488, 494, 495], "w_1": 252, "w_g": 252, "w_i": [123, 252], "w_in": 1, "w_q": 252, "w_star": 5, "w_stride": 1, "w_t": [482, 484, 485, 486, 487, 488, 494, 495], "wa": [4, 6, 85, 132, 133, 508, 509, 513], "wai": [2, 6, 9, 349, 427, 507, 508, 509, 510, 511, 512], "wait": 6, "walk": [6, 509], "walkthrough": 2, "walsh": 183, "want": [1, 2, 6, 508, 509, 510, 512, 517], "warm": [2, 507], "warmup_init": 483, "watch": [6, 507], "wd": 488, "we": [0, 1, 2, 5, 6, 7, 119, 123, 132, 133, 176, 252, 253, 349, 366, 407, 415, 486, 488, 504, 506, 507, 508, 509, 510, 512, 513, 517], "weight": [0, 5, 105, 106, 107, 108, 109, 110, 111, 151, 153, 334, 349, 392, 396, 407, 408, 448, 450, 479, 483, 486, 488, 489, 491, 495, 510, 513], "weight_decai": [483, 486, 488, 495], "weight_fil": 6, "weights_fp16": 513, "well": [6, 349, 390, 402, 405, 508, 513], "wen": 6, "went": 6, "were": [6, 517], "wet": 6, "what": [2, 6, 334, 512], "whatsoev": 6, "whc": 363, "when": [0, 1, 2, 6, 8, 9, 100, 108, 119, 134, 200, 201, 203, 204, 205, 208, 209, 213, 214, 216, 286, 356, 357, 358, 359, 360, 361, 427, 431, 432, 448, 454, 460, 479, 481, 498, 504, 507, 508, 509, 517], "where": [0, 4, 7, 150, 188, 201, 252, 321, 325, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 369, 370, 374, 375, 376, 378, 389, 406, 409, 410, 424, 431, 432, 437, 438, 440, 451, 457, 463, 466, 468, 473, 491, 508, 510, 511], "wherea": 510, "whether": [147, 149, 152, 176, 203, 204, 212, 214, 253, 369, 375, 389, 405, 410, 448, 451, 457], "which": [0, 1, 2, 6, 7, 8, 9, 19, 38, 85, 86, 100, 108, 125, 128, 129, 130, 132, 133, 134, 143, 147, 149, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 180, 186, 189, 190, 191, 192, 193, 195, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 231, 234, 252, 256, 257, 271, 273, 275, 278, 279, 280, 281, 282, 299, 300, 308, 315, 320, 321, 324, 325, 330, 352, 353, 363, 364, 367, 382, 383, 385, 389, 413, 448, 450, 453, 457, 460, 476, 490, 491, 504, 507, 508, 509, 510, 511, 512, 513, 517, 518], "while": [2, 3, 6, 9, 163, 273, 413, 513, 514], "whistl": 2, "who": 6, "whose": [150, 330, 331], "why": 6, "wi": 508, "wide": 513, "width": [352, 353, 354, 357, 358, 360, 361, 363, 364, 382, 383, 407, 408], "window": [9, 351, 352, 353, 381, 382, 383], "wipe": 9, "wire": 287, "wired_limit_mb": 287, "wise": [0, 2, 13, 14, 20, 21, 22, 23, 24, 25, 26, 90, 91, 92, 93, 97, 113, 114, 135, 136, 140, 141, 142, 144, 146, 172, 173, 181, 182, 188, 197, 198, 199, 217, 218, 219, 220, 221, 223, 224, 225, 229, 237, 239, 241, 243, 249, 269, 270, 274, 277, 288, 289, 290, 291, 297, 298, 304, 310, 311, 355, 363, 364, 373, 384, 406, 417, 436, 443, 444, 446, 447, 462, 463, 465, 468, 469, 470, 471, 507], "wish": 9, "with_logit": 448, "within": [0, 3, 29, 188], "without": [1, 6, 8, 302, 405, 475, 506, 507, 508, 509, 512, 513, 514, 517], "wk": 6, "wl": 2, "wo": 6, "word": 0, "work": [2, 3, 6, 286, 340, 507, 508, 509, 510, 511, 512, 513], "workhors": 349, "world": [337, 508], "world2": 508, "world_ani": 508, "world_mpi": 508, "world_r": 508, "worri": [1, 513], "would": [2, 6, 427, 508, 509, 511, 513, 514, 517], "wq": 6, "wrap": [119, 349, 489], "wrapper": [509, 512], "write": [0, 1, 6, 349, 514], "written": [2, 509], "wrong": 509, "wrt": 331, "wv": 6, "x": [0, 1, 2, 4, 5, 6, 7, 39, 86, 94, 119, 128, 129, 133, 134, 141, 146, 147, 148, 151, 152, 153, 176, 183, 184, 186, 208, 253, 257, 262, 276, 281, 288, 318, 319, 326, 334, 336, 349, 351, 352, 353, 354, 355, 365, 367, 368, 370, 374, 376, 377, 378, 381, 382, 383, 384, 385, 406, 409, 411, 417, 418, 424, 427, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 479, 481, 488, 507, 508, 509, 510, 511, 513, 514, 515, 517], "x1": 449, "x2": 449, "x86_64": 9, "x_1": [449, 457], "x_2": [449, 457], "x_cast": 2, "x_grad": 1, "x_i": [447, 469, 470], "x_j": [469, 470], "x_offset": 2, "x_ptr": 2, "x_shape": 1, "x_stride": 2, "x_t": [369, 375, 410], "x_view": 514, "xcode": 9, "xcodeproj": 3, "xcrun": 9, "xf": 375, "xg": 375, "xi": 375, "xn": 369, "xo": 375, "xor": 93, "xr": 369, "xy": [0, 231], "xz": 369, "x\u00b2": 514, "y": [0, 2, 4, 5, 6, 7, 39, 86, 119, 147, 148, 183, 186, 326, 349, 354, 363, 370, 374, 376, 378, 409, 452, 457, 460, 481, 484, 507, 508, 509, 510, 513, 514], "y_": [452, 456], "y_cast": 2, "y_hat": 349, "y_offset": 2, "y_ptr": 2, "y_stride": 2, "ye": 6, "year": 6, "yet": [6, 349, 479, 491, 510, 511, 513, 515], "yield": [6, 7, 504], "you": [2, 3, 4, 6, 7, 8, 9, 287, 349, 418, 426, 476, 504, 507, 508, 509, 510, 511, 512, 514, 516, 517], "your": [2, 6, 9, 479, 508, 510, 513], "z": [2, 86, 369, 507, 509, 513], "z_t": 369, "zeiler": 482, "zero": [0, 147, 150, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 202, 231, 272, 293, 317, 318, 319, 328, 349, 351, 352, 353, 362, 363, 364, 392, 428, 429, 430, 431, 432, 433, 434, 435, 476, 481, 483, 509, 511], "zero_grad": 510, "zeros_lik": [0, 206], "zhang": 6, "zip": [6, 7], "zip_saf": 2}, "titles": ["Operations", "Custom Metal Kernels", "Custom Extensions in MLX", "Metal Debugger", "Using MLX in C++", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.conj", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logcumsumexp", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.std", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array.view", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.async_eval", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_invert", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.broadcast_arrays", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clear_cache", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.contiguous", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv3d", "mlx.core.conv_general", "mlx.core.conv_transpose1d", "mlx.core.conv_transpose2d", "mlx.core.conv_transpose3d", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.custom_function", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.distributed.Group", "mlx.core.distributed.all_gather", "mlx.core.distributed.all_sum", "mlx.core.distributed.init", "mlx.core.distributed.is_available", "mlx.core.distributed.recv", "mlx.core.distributed.recv_like", "mlx.core.distributed.send", "mlx.core.divide", "mlx.core.divmod", "mlx.core.einsum", "mlx.core.einsum_path", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.export_function", "mlx.core.export_to_dot", "mlx.core.exporter", "mlx.core.eye", "mlx.core.fast.layer_norm", "mlx.core.fast.metal_kernel", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.fftshift", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.ifftshift", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.finfo", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.get_active_memory", "mlx.core.get_cache_memory", "mlx.core.get_peak_memory", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.hadamard_transform", "mlx.core.identity", "mlx.core.imag", "mlx.core.import_function", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isfinite", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.kron", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.cholesky_inv", "mlx.core.linalg.cross", "mlx.core.linalg.eigh", "mlx.core.linalg.eigvalsh", "mlx.core.linalg.inv", "mlx.core.linalg.lu", "mlx.core.linalg.lu_factor", "mlx.core.linalg.norm", "mlx.core.linalg.pinv", "mlx.core.linalg.qr", "mlx.core.linalg.solve", "mlx.core.linalg.solve_triangular", "mlx.core.linalg.svd", "mlx.core.linalg.tri_inv", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logcumsumexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.device_info", "mlx.core.metal.is_available", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.nan_to_num", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.put_along_axis", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.laplace", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.permutation", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.real", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reset_peak_memory", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.roll", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_cache_limit", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.set_memory_limit", "mlx.core.set_wired_limit", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.slice", "mlx.core.slice_update", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.unflatten", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.view", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.average_gradients", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Distributed Communication", "Export Functions", "Fast", "FFT", "Linear Algebra", "Memory Management", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.AvgPool3d", "mlx.nn.BatchNorm", "mlx.nn.CELU", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.ConvTranspose1d", "mlx.nn.ConvTranspose2d", "mlx.nn.ConvTranspose3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.ELU", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GLU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.HardShrink", "mlx.nn.HardTanh", "mlx.nn.Hardswish", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.LeakyReLU", "mlx.nn.Linear", "mlx.nn.LogSigmoid", "mlx.nn.LogSoftmax", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.MaxPool3d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.ReLU6", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.Sigmoid", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softmax", "mlx.nn.Softmin", "mlx.nn.Softplus", "mlx.nn.Softshrink", "mlx.nn.Softsign", "mlx.nn.Step", "mlx.nn.Tanh", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.celu", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hard_shrink", "mlx.nn.hard_tanh", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softmin", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.MultiOptimizer", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Distributed Communication", "Exporting Functions", "Function Transforms", "Indexing Arrays", "Launching Distributed Programs", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "titleterms": {"A": 517, "In": 511, "The": 349, "ab": [13, 33], "adadelta": 482, "adafactor": 483, "adagrad": 484, "adam": 485, "adamax": 487, "adamw": 486, "add": 14, "addmm": 15, "algebra": 346, "alibi": 350, "all": [6, 16, 34, 508], "all_gath": 128, "all_sum": 129, "allclos": 17, "ani": [18, 35], "api": [8, 9], "appli": 385, "apply_gradi": 490, "apply_to_modul": 386, "arang": 19, "arcco": 20, "arccosh": 21, "arcsin": 22, "arcsinh": 23, "arctan": 24, "arctan2": 25, "arctanh": 26, "argmax": [27, 36], "argmin": [28, 37], "argpartit": 29, "argsort": 30, "arrai": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 339, 511, 516], "array_equ": 84, "as_strid": 85, "astyp": 38, "async_ev": 86, "atleast_1d": 87, "atleast_2d": 88, "atleast_3d": 89, "attent": 6, "automat": 510, "average_gradi": [329, 508], "avgpool1d": 351, "avgpool2d": 352, "avgpool3d": 353, "back": 2, "backend": 508, "basic": [507, 509, 515], "batchnorm": 354, "benchmark": 6, "bernoulli": 255, "binari": 9, "binary_cross_entropi": 448, "bind": 2, "bitwise_and": 90, "bitwise_invert": 91, "bitwise_or": 92, "bitwise_xor": 93, "block_masked_mm": 94, "broadcast_arrai": 95, "broadcast_to": 96, "build": [2, 9], "c": [4, 8, 9, 509], "categor": 256, "ceil": 97, "celu": [355, 436], "children": 387, "choleski": 200, "cholesky_inv": 201, "class": 349, "clear_cach": 98, "clip": 99, "clip_grad_norm": 332, "cmake": 2, "co": [41, 113], "code": [2, 6], "common": 501, "commun": [342, 508], "compil": [100, 507], "complex": 1, "comput": 513, "concaten": 101, "conj": [40, 102], "conjug": 103, "constant": 428, "contigu": 104, "conv1d": [105, 356], "conv2d": [106, 357], "conv3d": [107, 358], "conv_gener": 108, "conv_transpose1d": 109, "conv_transpose2d": 110, "conv_transpose3d": 111, "convers": 514, "convert": 6, "convolv": 112, "convtranspose1d": 359, "convtranspose2d": 360, "convtranspose3d": 361, "core": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 338], "cosh": 114, "cosine_decai": 496, "cosine_similarity_loss": 449, "cpu": 2, "cross": 202, "cross_entropi": 450, "cummax": [42, 115], "cummin": [43, 116], "cumprod": [44, 117], "cumsum": [45, 118], "custom": [1, 2], "custom_funct": 119, "data": 340, "debug": 507, "debugg": 3, "default_devic": 120, "default_stream": 121, "defin": 508, "degre": 122, "dequant": 123, "devic": [10, 341], "device_info": 232, "diag": [46, 124], "diagon": [47, 125], "differ": 511, "differenti": 510, "disable_compil": 126, "distribut": [127, 128, 129, 130, 131, 132, 133, 134, 342, 508, 512], "divid": 135, "divmod": 136, "download": [2, 6], "dropout": 362, "dropout2d": 363, "dropout3d": 364, "dtype": [11, 48], "dtypecategori": 12, "eigh": 203, "eigvalsh": 204, "einsum": 137, "einsum_path": 138, "elu": [365, 437], "embed": 366, "enable_compil": 139, "encod": 6, "end": 2, "equal": 140, "erf": 141, "erfinv": 142, "eval": [143, 388], "evalu": 513, "exampl": [1, 2, 8, 507, 508, 509, 517], "exp": [49, 144], "expand_dim": 145, "expm1": 146, "exponential_decai": 497, "export": [149, 343, 509], "export_funct": 147, "export_to_dot": 148, "extens": 2, "ey": 150, "fast": [151, 152, 153, 154, 155, 344], "fft": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 345], "fft2": 157, "fftn": 158, "fftshift": 159, "filter_and_map": 389, "finfo": 170, "flatten": [50, 171], "floor": 172, "floor_divid": 173, "format": 516, "found": 9, "framework": 514, "freez": 390, "from": [9, 511], "full": [6, 174], "function": [343, 475, 478, 507, 509, 510, 515], "further": 8, "gather_mm": 175, "gather_qmm": 176, "gaussian_nll_loss": 451, "gelu": [367, 438], "gelu_approx": 439, "gelu_fast_approx": 440, "gener": 6, "get": 508, "get_active_memori": 177, "get_cache_memori": 178, "get_peak_memori": 179, "glorot_norm": 429, "glorot_uniform": 430, "glu": [368, 441], "gpu": 2, "grad": [180, 349], "graph": [507, 513, 515], "greater": 181, "greater_equ": 182, "grid": 1, "group": 127, "groupnorm": 370, "gru": 369, "guid": 515, "gumbel": 257, "hadamard_transform": 183, "hard_shrink": 442, "hard_tanh": 443, "hardshrink": 371, "hardswish": [373, 444], "hardtanh": 372, "he_norm": 431, "he_uniform": 432, "hinge_loss": 452, "host": [508, 512], "huber_loss": 453, "ident": [184, 433], "ifft": 160, "ifft2": 161, "ifftn": 162, "ifftshift": 163, "imag": 185, "implement": [2, 6], "import": 509, "import_funct": 186, "index": 511, "infer": 6, "init": [130, 428, 429, 430, 431, 432, 433, 434, 435, 491], "initi": 476, "inner": 187, "inspect": 349, "instal": [8, 9, 508], "instancenorm": 374, "introduc": 2, "inv": 205, "irfft": 164, "irfft2": 165, "irfftn": 166, "is_avail": [131, 233], "isclos": 188, "isfinit": 189, "isinf": 190, "isnan": 191, "isneginf": 192, "isposinf": 193, "issubdtyp": 194, "item": 51, "items": 52, "jax": 514, "join_schedul": 498, "jvp": 195, "kei": 258, "kernel": 1, "kl_div_loss": 454, "kron": 196, "l1_loss": 455, "laplac": 259, "launch": 512, "layer": [6, 7, 477], "layer_norm": 151, "layernorm": 376, "lazi": 513, "leaf_modul": 391, "leaky_relu": 445, "leakyrelu": 377, "left_shift": 197, "less": 198, "less_equ": 199, "linalg": [200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214], "linear": [5, 346, 378], "linear_schedul": 499, "linspac": 215, "lion": 488, "llm": 6, "load": [6, 216, 481, 516], "load_weight": 392, "log": [53, 217], "log10": [54, 218], "log1p": [55, 219], "log2": [56, 220], "log_cosh_loss": 456, "log_sigmoid": 446, "log_softmax": 447, "logaddexp": 221, "logcumsumexp": [57, 222], "logical_and": 223, "logical_not": 224, "logical_or": 225, "logsigmoid": 379, "logsoftmax": 380, "logsumexp": [58, 226], "loss": [448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 478], "lstm": 375, "lu": 206, "lu_factor": 207, "manag": 347, "margin_ranking_loss": 457, "matmul": 227, "max": [59, 228], "maximum": 229, "maxpool1d": 381, "maxpool2d": 382, "maxpool3d": 383, "mean": [60, 230], "memori": [347, 517], "meshgrid": 231, "metal": [1, 3, 9, 232, 233, 234, 235, 348], "metal_kernel": 152, "min": [61, 236], "minim": 9, "minimum": 237, "mish": [384, 462], "mlx": [2, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], "model": 6, "modul": [349, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 479, 509], "more": 509, "moveaxi": [62, 238], "mpi": [508, 512], "mse_loss": 458, "multi": 7, "multiheadattent": 405, "multioptim": 489, "multipl": 509, "multipli": 239, "multivariate_norm": 260, "named_modul": 394, "nan_to_num": 240, "nbyte": 63, "ndim": 64, "neg": 241, "network": 349, "neural": 349, "new_stream": 242, "nll_loss": 459, "nn": [329, 330, 331, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 508], "norm": 208, "normal": [261, 434], "not_equ": 243, "numpi": [511, 514], "ones": 244, "ones_lik": 245, "onli": 513, "oper": [0, 2, 480], "optim": [332, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502], "option": 9, "other": 514, "outer": 246, "packag": 4, "pad": 247, "paramet": [349, 395], "partit": 248, "perceptron": 7, "permut": 262, "pinv": 209, "place": 511, "power": 249, "prelu": [406, 463], "primit": 2, "prod": [65, 250], "program": [508, 512], "provid": 512, "pure": 507, "put": 6, "put_along_axi": 251, "python": [2, 8, 9], "pytorch": 514, "qr": 210, "quantiz": [252, 330], "quantized_matmul": 253, "quantizedembed": 407, "quantizedlinear": 408, "quick": [349, 515], "radian": 254, "randint": 263, "random": [255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 504], "read": 8, "real": 268, "reciproc": [66, 269], "recv": 132, "recv_lik": 133, "reduc": 508, "refer": 8, "regress": 5, "relu": [411, 464], "relu6": [412, 465], "remaind": 270, "remot": [508, 512], "repeat": 271, "requir": 9, "reset_peak_memori": 272, "reshap": [67, 273], "result": 2, "rfft": 167, "rfft2": 168, "rfftn": 169, "right_shift": 274, "ring": [508, 512], "rms_norm": 153, "rmsnorm": 409, "rmsprop": 494, "rnn": 410, "roll": 275, "rope": [154, 413], "round": [68, 276], "rsqrt": [69, 277], "run": 508, "sampl": 1, "save": [278, 481, 516], "save_gguf": 279, "save_safetensor": 280, "save_weight": 396, "savez": 281, "savez_compress": 282, "scaled_dot_product_attent": 155, "schedul": 503, "script": [2, 6], "seed": 264, "select": 508, "selu": [414, 466], "send": 134, "sequenti": 415, "serial": 516, "set": [508, 512], "set_cache_limit": 283, "set_default_devic": 284, "set_default_stream": 285, "set_dtyp": 397, "set_memory_limit": 286, "set_wired_limit": 287, "setuptool": 2, "sgd": 495, "shape": [1, 70], "shapeless": [507, 509], "shell": 9, "sigmoid": [288, 417, 467], "sign": 289, "silu": [416, 468], "simpl": [1, 517], "sin": [71, 290], "sinh": 291, "sinusoidalpositionalencod": 418, "size": [9, 72], "slice": 292, "slice_upd": 293, "smooth_l1_loss": 460, "softmax": [294, 419, 469], "softmin": [420, 470], "softplu": [421, 471], "softshrink": [422, 472], "softsign": 423, "solv": 211, "solve_triangular": 212, "sort": 295, "sourc": 9, "specif": 512, "specifi": 518, "speedup": 507, "split": [73, 265, 296], "sqrt": [74, 297], "squar": [75, 298], "squeez": [76, 299], "stack": 300, "start": [349, 508, 515], "start_captur": 234, "state": [398, 492], "std": [77, 301], "step": [424, 473], "step_decai": 500, "stop_captur": 235, "stop_gradi": 302, "stream": [303, 338, 341, 518], "stride": 1, "subtract": 304, "sum": [78, 305], "support": 340, "svd": 213, "swapax": [79, 306], "synchron": 307, "t": 32, "take": 308, "take_along_axi": 309, "tan": 310, "tanh": [311, 425, 474], "tensordot": 312, "tensorflow": 514, "thunderbolt": 508, "tile": 313, "togeth": 6, "tolist": 80, "topk": 314, "trace": [315, 509], "train": [399, 401, 507, 508], "trainable_paramet": 400, "transform": [2, 426, 505, 507, 509, 510, 513, 515], "transpos": [81, 316], "tree": 506, "tree_flatten": 333, "tree_map": 334, "tree_map_with_path": 335, "tree_reduc": 336, "tree_unflatten": 337, "tri": 317, "tri_inv": 214, "tril": 318, "triplet_loss": 461, "triu": 319, "troubleshoot": 9, "truncated_norm": 266, "tune": 508, "type": 340, "unflatten": 320, "unfreez": 402, "unifi": 517, "uniform": [267, 435], "up": [508, 512], "updat": [349, 403, 493, 511], "update_modul": 404, "upsampl": 427, "us": [1, 2, 4, 513, 518], "usag": [2, 8, 512], "util": [333, 334, 335, 336, 337, 506, 508], "valu": 349, "value_and_grad": [321, 331], "var": [82, 322], "variabl": 4, "vector": 510, "view": [83, 323], "vjp": [1, 324], "vmap": 325, "weight": 6, "what": 513, "when": 513, "where": 326, "why": 513, "workflow": 3, "x86": 9, "xcode": 3, "you": 513, "zero": 327, "zeros_lik": 328}})