Search.setIndex({"alltitles": {"A Simple Example": [[500, "a-simple-example"]], "Array": [[325, null]], "Attention layer": [[6, "attention-layer"]], "Automatic Differentiation": [[494, "automatic-differentiation"]], "Automatic Vectorization": [[494, "automatic-vectorization"]], "Basics": [[498, "basics"]], "Basics of Compile": [[491, "basics-of-compile"]], "Basics of Exporting": [[493, "basics-of-exporting"]], "Binary Size Minimization": [[9, "binary-size-minimization"]], "Binding to Python": [[2, "binding-to-python"]], "Build Options": [[9, "id4"]], "Build Requirements": [[9, "build-requirements"]], "Build and Install": [[9, null]], "Build from source": [[9, "build-from-source"]], "Building and Binding": [[2, "building-and-binding"]], "Building with CMake": [[2, "building-with-cmake"]], "Building with setuptools": [[2, "building-with-setuptools"]], "C++ API": [[9, "c-api"]], "C++ API Reference": [[8, null]], "Common Optimizers": [[485, null]], "Compilation": [[491, null]], "Compiling Training Graphs": [[491, "compiling-training-graphs"]], "Complex Example": [[1, "complex-example"]], "Conversion to NumPy and Other Frameworks": [[497, null]], "Converting the weights": [[6, "converting-the-weights"]], "Custom Extensions in MLX": [[2, null]], "Custom Metal Kernels": [[1, null]], "Data Types": [[326, null]], "Debugging": [[491, "debugging"]], "Devices and Streams": [[327, null]], "Differences from NumPy": [[495, "differences-from-numpy"]], "Distributed Communication": [[328, null], [492, null]], "Download the code": [[2, null], [6, null]], "Encoder layer": [[6, "encoder-layer"]], "Example Speedup": [[491, "example-speedup"]], "Examples": [[8, null]], "Export Functions": [[329, null]], "Exporting Functions": [[493, null]], "Exporting Modules": [[493, "exporting-modules"]], "Exporting Multiple Traces": [[493, "exporting-multiple-traces"]], "FFT": [[331, null]], "Fast": [[330, null]], "Full model": [[6, "full-model"]], "Function Transforms": [[494, null]], "Function and Graph Transformations": [[498, "function-and-graph-transformations"]], "Functions": [[460, null]], "Further Reading": [[8, null]], "Generation": [[6, "generation"]], "Getting Started": [[492, "getting-started"]], "Grid Sample VJP": [[1, "grid-sample-vjp"]], "Implementing the CPU Back-end": [[2, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[2, "implementing-the-gpu-back-end"]], "Implementing the Primitive": [[2, "implementing-the-primitive"]], "Implementing the model": [[6, "implementing-the-model"]], "Importing Functions in C++": [[493, "importing-functions-in-c"]], "In Place Updates": [[495, "in-place-updates"]], "Indexing Arrays": [[495, null]], "Initializers": [[461, null]], "Inspecting Modules": [[334, "inspecting-modules"]], "Install": [[8, null]], "Installing MPI": [[492, "installing-mpi"]], "Introducing the Example": [[2, "introducing-the-example"]], "JAX": [[497, "jax"]], "LLM inference": [[6, null]], "Layers": [[462, null]], "Lazy Evaluation": [[496, null]], "Linear Algebra": [[332, null]], "Linear Regression": [[5, null]], "Loss Functions": [[463, null]], "MLX": [[8, null]], "Metal": [[333, null]], "Metal Debugger": [[3, null]], "Metal not found": [[9, "metal-not-found"]], "Module": [[464, null]], "More Examples": [[493, "more-examples"]], "Multi-Layer Perceptron": [[7, null]], "Neural Networks": [[334, null]], "Only Compute What You Use": [[496, "only-compute-what-you-use"]], "Operations": [[0, null], [2, "operations"], [465, null]], "Operations and Primitives": [[2, "operations-and-primitives"]], "Optimizer": [[486, null]], "Optimizers": [[466, null]], "Package Variables": [[4, "id1"]], "Parameters": [[334, "parameters"]], "Primitive Transforms": [[2, "primitive-transforms"]], "Primitives": [[2, "primitives"]], "Pure Functions": [[491, "pure-functions"]], "Putting it all together": [[6, "putting-it-all-together"]], "PyTorch": [[497, "pytorch"]], "Python API": [[9, "python-api"]], "Python API Reference": [[8, null]], "Python Installation": [[9, "python-installation"]], "Quick Start Guide": [[498, null]], "Quick Start with Neural Networks": [[334, "quick-start-with-neural-networks"]], "Random": [[488, null]], "Results": [[2, "results"]], "Saving and Loading": [[466, "saving-and-loading"]], "Saving and Loading Arrays": [[499, null]], "Schedulers": [[487, null]], "Scripts": [[2, "scripts"], [6, "scripts"]], "Serialization Formats": [[499, "id1"]], "Setting up Remote Hosts": [[492, "setting-up-remote-hosts"]], "Shapeless Compilation": [[491, "shapeless-compilation"]], "Shapeless Exports": [[493, "shapeless-exports"]], "Simple Example": [[1, "simple-example"]], "Specifying the Stream": [[501, "specifying-the-stream"]], "Supported Data Types": [[326, "id2"]], "TensorFlow": [[497, "tensorflow"]], "The Module Class": [[334, "the-module-class"]], "Training Example": [[492, "training-example"]], "Transformations with Compile": [[491, "transformations-with-compile"]], "Transformations with Imported Functions": [[493, "transformations-with-imported-functions"]], "Transforming Compute Graphs": [[496, "transforming-compute-graphs"]], "Transforms": [[489, null]], "Tree Utils": [[490, null]], "Troubleshooting": [[9, "troubleshooting"], [9, "id3"]], "Tuning All Reduce": [[492, "tuning-all-reduce"]], "Unified Memory": [[500, null]], "Updating the Parameters": [[334, "updating-the-parameters"]], "Usage": [[2, "usage"], [8, null]], "Using MLX in C++": [[4, null]], "Using Shape/Strides": [[1, "using-shape-strides"]], "Using Streams": [[501, null]], "Using the Primitive": [[2, "using-the-primitive"]], "Value and Grad": [[334, "value-and-grad"]], "Weight loading and benchmarking": [[6, "weight-loading-and-benchmarking"]], "When to Evaluate": [[496, "when-to-evaluate"]], "Why Lazy Evaluation": [[496, "why-lazy-evaluation"]], "Xcode Workflow": [[3, "xcode-workflow"]], "mlx.core.Device": [[10, null]], "mlx.core.Dtype": [[11, null]], "mlx.core.DtypeCategory": [[12, null]], "mlx.core.Stream": [[324, null]], "mlx.core.abs": [[13, null]], "mlx.core.add": [[14, null]], "mlx.core.addmm": [[15, null]], "mlx.core.all": [[16, null]], "mlx.core.allclose": [[17, null]], "mlx.core.any": [[18, null]], "mlx.core.arange": [[19, null]], "mlx.core.arccos": [[20, null]], "mlx.core.arccosh": [[21, null]], "mlx.core.arcsin": [[22, null]], "mlx.core.arcsinh": [[23, null]], "mlx.core.arctan": [[24, null]], "mlx.core.arctan2": [[25, null]], "mlx.core.arctanh": [[26, null]], "mlx.core.argmax": [[27, null]], "mlx.core.argmin": [[28, null]], "mlx.core.argpartition": [[29, null]], "mlx.core.argsort": [[30, null]], "mlx.core.array": [[31, null]], "mlx.core.array.T": [[32, null]], "mlx.core.array.abs": [[33, null]], "mlx.core.array.all": [[34, null]], "mlx.core.array.any": [[35, null]], "mlx.core.array.argmax": [[36, null]], "mlx.core.array.argmin": [[37, null]], "mlx.core.array.astype": [[38, null]], "mlx.core.array.at": [[39, null]], "mlx.core.array.conj": [[40, null]], "mlx.core.array.cos": [[41, null]], "mlx.core.array.cummax": [[42, null]], "mlx.core.array.cummin": [[43, null]], "mlx.core.array.cumprod": [[44, null]], "mlx.core.array.cumsum": [[45, null]], "mlx.core.array.diag": [[46, null]], "mlx.core.array.diagonal": [[47, null]], "mlx.core.array.dtype": [[48, null]], "mlx.core.array.exp": [[49, null]], "mlx.core.array.flatten": [[50, null]], "mlx.core.array.item": [[51, null]], "mlx.core.array.itemsize": [[52, null]], "mlx.core.array.log": [[53, null]], "mlx.core.array.log10": [[54, null]], "mlx.core.array.log1p": [[55, null]], "mlx.core.array.log2": [[56, null]], "mlx.core.array.logsumexp": [[57, null]], "mlx.core.array.max": [[58, null]], "mlx.core.array.mean": [[59, null]], "mlx.core.array.min": [[60, null]], "mlx.core.array.moveaxis": [[61, null]], "mlx.core.array.nbytes": [[62, null]], "mlx.core.array.ndim": [[63, null]], "mlx.core.array.prod": [[64, null]], "mlx.core.array.reciprocal": [[65, null]], "mlx.core.array.reshape": [[66, null]], "mlx.core.array.round": [[67, null]], "mlx.core.array.rsqrt": [[68, null]], "mlx.core.array.shape": [[69, null]], "mlx.core.array.sin": [[70, null]], "mlx.core.array.size": [[71, null]], "mlx.core.array.split": [[72, null]], "mlx.core.array.sqrt": [[73, null]], "mlx.core.array.square": [[74, null]], "mlx.core.array.squeeze": [[75, null]], "mlx.core.array.std": [[76, null]], "mlx.core.array.sum": [[77, null]], "mlx.core.array.swapaxes": [[78, null]], "mlx.core.array.tolist": [[79, null]], "mlx.core.array.transpose": [[80, null]], "mlx.core.array.var": [[81, null]], "mlx.core.array.view": [[82, null]], "mlx.core.array_equal": [[83, null]], "mlx.core.as_strided": [[84, null]], "mlx.core.atleast_1d": [[85, null]], "mlx.core.atleast_2d": [[86, null]], "mlx.core.atleast_3d": [[87, null]], "mlx.core.bitwise_and": [[88, null]], "mlx.core.bitwise_or": [[89, null]], "mlx.core.bitwise_xor": [[90, null]], "mlx.core.block_masked_mm": [[91, null]], "mlx.core.broadcast_to": [[92, null]], "mlx.core.ceil": [[93, null]], "mlx.core.clip": [[94, null]], "mlx.core.compile": [[95, null]], "mlx.core.concatenate": [[96, null]], "mlx.core.conj": [[97, null]], "mlx.core.conjugate": [[98, null]], "mlx.core.conv1d": [[99, null]], "mlx.core.conv2d": [[100, null]], "mlx.core.conv3d": [[101, null]], "mlx.core.conv_general": [[102, null]], "mlx.core.conv_transpose1d": [[103, null]], "mlx.core.conv_transpose2d": [[104, null]], "mlx.core.conv_transpose3d": [[105, null]], "mlx.core.convolve": [[106, null]], "mlx.core.cos": [[107, null]], "mlx.core.cosh": [[108, null]], "mlx.core.cummax": [[109, null]], "mlx.core.cummin": [[110, null]], "mlx.core.cumprod": [[111, null]], "mlx.core.cumsum": [[112, null]], "mlx.core.custom_function": [[113, null]], "mlx.core.default_device": [[114, null]], "mlx.core.default_stream": [[115, null]], "mlx.core.degrees": [[116, null]], "mlx.core.dequantize": [[117, null]], "mlx.core.diag": [[118, null]], "mlx.core.diagonal": [[119, null]], "mlx.core.disable_compile": [[120, null]], "mlx.core.distributed.Group": [[121, null]], "mlx.core.distributed.all_gather": [[122, null]], "mlx.core.distributed.all_sum": [[123, null]], "mlx.core.distributed.init": [[124, null]], "mlx.core.distributed.is_available": [[125, null]], "mlx.core.distributed.recv": [[126, null]], "mlx.core.distributed.recv_like": [[127, null]], "mlx.core.distributed.send": [[128, null]], "mlx.core.divide": [[129, null]], "mlx.core.divmod": [[130, null]], "mlx.core.einsum": [[131, null]], "mlx.core.einsum_path": [[132, null]], "mlx.core.enable_compile": [[133, null]], "mlx.core.equal": [[134, null]], "mlx.core.erf": [[135, null]], "mlx.core.erfinv": [[136, null]], "mlx.core.eval": [[137, null]], "mlx.core.exp": [[138, null]], "mlx.core.expand_dims": [[139, null]], "mlx.core.expm1": [[140, null]], "mlx.core.export_function": [[141, null]], "mlx.core.export_to_dot": [[142, null]], "mlx.core.exporter": [[143, null]], "mlx.core.eye": [[144, null]], "mlx.core.fast.layer_norm": [[145, null]], "mlx.core.fast.metal_kernel": [[146, null]], "mlx.core.fast.rms_norm": [[147, null]], "mlx.core.fast.rope": [[148, null]], "mlx.core.fast.scaled_dot_product_attention": [[149, null]], "mlx.core.fft.fft": [[150, null]], "mlx.core.fft.fft2": [[151, null]], "mlx.core.fft.fftn": [[152, null]], "mlx.core.fft.ifft": [[153, null]], "mlx.core.fft.ifft2": [[154, null]], "mlx.core.fft.ifftn": [[155, null]], "mlx.core.fft.irfft": [[156, null]], "mlx.core.fft.irfft2": [[157, null]], "mlx.core.fft.irfftn": [[158, null]], "mlx.core.fft.rfft": [[159, null]], "mlx.core.fft.rfft2": [[160, null]], "mlx.core.fft.rfftn": [[161, null]], "mlx.core.finfo": [[162, null]], "mlx.core.flatten": [[163, null]], "mlx.core.floor": [[164, null]], "mlx.core.floor_divide": [[165, null]], "mlx.core.full": [[166, null]], "mlx.core.gather_mm": [[167, null]], "mlx.core.gather_qmm": [[168, null]], "mlx.core.grad": [[169, null]], "mlx.core.greater": [[170, null]], "mlx.core.greater_equal": [[171, null]], "mlx.core.hadamard_transform": [[172, null]], "mlx.core.identity": [[173, null]], "mlx.core.imag": [[174, null]], "mlx.core.import_function": [[175, null]], "mlx.core.inner": [[176, null]], "mlx.core.isclose": [[177, null]], "mlx.core.isfinite": [[178, null]], "mlx.core.isinf": [[179, null]], "mlx.core.isnan": [[180, null]], "mlx.core.isneginf": [[181, null]], "mlx.core.isposinf": [[182, null]], "mlx.core.issubdtype": [[183, null]], "mlx.core.jvp": [[184, null]], "mlx.core.kron": [[185, null]], "mlx.core.left_shift": [[186, null]], "mlx.core.less": [[187, null]], "mlx.core.less_equal": [[188, null]], "mlx.core.linalg.cholesky": [[189, null]], "mlx.core.linalg.cholesky_inv": [[190, null]], "mlx.core.linalg.cross": [[191, null]], "mlx.core.linalg.eigh": [[192, null]], "mlx.core.linalg.eigvalsh": [[193, null]], "mlx.core.linalg.inv": [[194, null]], "mlx.core.linalg.norm": [[195, null]], "mlx.core.linalg.qr": [[196, null]], "mlx.core.linalg.svd": [[197, null]], "mlx.core.linalg.tri_inv": [[198, null]], "mlx.core.linspace": [[199, null]], "mlx.core.load": [[200, null]], "mlx.core.log": [[201, null]], "mlx.core.log10": [[202, null]], "mlx.core.log1p": [[203, null]], "mlx.core.log2": [[204, null]], "mlx.core.logaddexp": [[205, null]], "mlx.core.logical_and": [[206, null]], "mlx.core.logical_not": [[207, null]], "mlx.core.logical_or": [[208, null]], "mlx.core.logsumexp": [[209, null]], "mlx.core.matmul": [[210, null]], "mlx.core.max": [[211, null]], "mlx.core.maximum": [[212, null]], "mlx.core.mean": [[213, null]], "mlx.core.meshgrid": [[214, null]], "mlx.core.metal.clear_cache": [[215, null]], "mlx.core.metal.device_info": [[216, null]], "mlx.core.metal.get_active_memory": [[217, null]], "mlx.core.metal.get_cache_memory": [[218, null]], "mlx.core.metal.get_peak_memory": [[219, null]], "mlx.core.metal.is_available": [[220, null]], "mlx.core.metal.reset_peak_memory": [[221, null]], "mlx.core.metal.set_cache_limit": [[222, null]], "mlx.core.metal.set_memory_limit": [[223, null]], "mlx.core.metal.set_wired_limit": [[224, null]], "mlx.core.metal.start_capture": [[225, null]], "mlx.core.metal.stop_capture": [[226, null]], "mlx.core.min": [[227, null]], "mlx.core.minimum": [[228, null]], "mlx.core.moveaxis": [[229, null]], "mlx.core.multiply": [[230, null]], "mlx.core.nan_to_num": [[231, null]], "mlx.core.negative": [[232, null]], "mlx.core.new_stream": [[233, null]], "mlx.core.not_equal": [[234, null]], "mlx.core.ones": [[235, null]], "mlx.core.ones_like": [[236, null]], "mlx.core.outer": [[237, null]], "mlx.core.pad": [[238, null]], "mlx.core.partition": [[239, null]], "mlx.core.power": [[240, null]], "mlx.core.prod": [[241, null]], "mlx.core.put_along_axis": [[242, null]], "mlx.core.quantize": [[243, null]], "mlx.core.quantized_matmul": [[244, null]], "mlx.core.radians": [[245, null]], "mlx.core.random.bernoulli": [[246, null]], "mlx.core.random.categorical": [[247, null]], "mlx.core.random.gumbel": [[248, null]], "mlx.core.random.key": [[249, null]], "mlx.core.random.laplace": [[250, null]], "mlx.core.random.multivariate_normal": [[251, null]], "mlx.core.random.normal": [[252, null]], "mlx.core.random.permutation": [[253, null]], "mlx.core.random.randint": [[254, null]], "mlx.core.random.seed": [[255, null]], "mlx.core.random.split": [[256, null]], "mlx.core.random.truncated_normal": [[257, null]], "mlx.core.random.uniform": [[258, null]], "mlx.core.real": [[259, null]], "mlx.core.reciprocal": [[260, null]], "mlx.core.remainder": [[261, null]], "mlx.core.repeat": [[262, null]], "mlx.core.reshape": [[263, null]], "mlx.core.right_shift": [[264, null]], "mlx.core.roll": [[265, null]], "mlx.core.round": [[266, null]], "mlx.core.rsqrt": [[267, null]], "mlx.core.save": [[268, null]], "mlx.core.save_gguf": [[269, null]], "mlx.core.save_safetensors": [[270, null]], "mlx.core.savez": [[271, null]], "mlx.core.savez_compressed": [[272, null]], "mlx.core.set_default_device": [[273, null]], "mlx.core.set_default_stream": [[274, null]], "mlx.core.sigmoid": [[275, null]], "mlx.core.sign": [[276, null]], "mlx.core.sin": [[277, null]], "mlx.core.sinh": [[278, null]], "mlx.core.slice": [[279, null]], "mlx.core.slice_update": [[280, null]], "mlx.core.softmax": [[281, null]], "mlx.core.sort": [[282, null]], "mlx.core.split": [[283, null]], "mlx.core.sqrt": [[284, null]], "mlx.core.square": [[285, null]], "mlx.core.squeeze": [[286, null]], "mlx.core.stack": [[287, null]], "mlx.core.std": [[288, null]], "mlx.core.stop_gradient": [[289, null]], "mlx.core.stream": [[290, null]], "mlx.core.subtract": [[291, null]], "mlx.core.sum": [[292, null]], "mlx.core.swapaxes": [[293, null]], "mlx.core.synchronize": [[294, null]], "mlx.core.take": [[295, null]], "mlx.core.take_along_axis": [[296, null]], "mlx.core.tan": [[297, null]], "mlx.core.tanh": [[298, null]], "mlx.core.tensordot": [[299, null]], "mlx.core.tile": [[300, null]], "mlx.core.topk": [[301, null]], "mlx.core.trace": [[302, null]], "mlx.core.transpose": [[303, null]], "mlx.core.tri": [[304, null]], "mlx.core.tril": [[305, null]], "mlx.core.triu": [[306, null]], "mlx.core.unflatten": [[307, null]], "mlx.core.value_and_grad": [[308, null]], "mlx.core.var": [[309, null]], "mlx.core.view": [[310, null]], "mlx.core.vjp": [[311, null]], "mlx.core.vmap": [[312, null]], "mlx.core.where": [[313, null]], "mlx.core.zeros": [[314, null]], "mlx.core.zeros_like": [[315, null]], "mlx.nn.ALiBi": [[335, null]], "mlx.nn.AvgPool1d": [[336, null]], "mlx.nn.AvgPool2d": [[337, null]], "mlx.nn.AvgPool3d": [[338, null]], "mlx.nn.BatchNorm": [[339, null]], "mlx.nn.CELU": [[340, null]], "mlx.nn.Conv1d": [[341, null]], "mlx.nn.Conv2d": [[342, null]], "mlx.nn.Conv3d": [[343, null]], "mlx.nn.ConvTranspose1d": [[344, null]], "mlx.nn.ConvTranspose2d": [[345, null]], "mlx.nn.ConvTranspose3d": [[346, null]], "mlx.nn.Dropout": [[347, null]], "mlx.nn.Dropout2d": [[348, null]], "mlx.nn.Dropout3d": [[349, null]], "mlx.nn.ELU": [[350, null]], "mlx.nn.Embedding": [[351, null]], "mlx.nn.GELU": [[352, null]], "mlx.nn.GLU": [[353, null]], "mlx.nn.GRU": [[354, null]], "mlx.nn.GroupNorm": [[355, null]], "mlx.nn.HardShrink": [[356, null]], "mlx.nn.HardTanh": [[357, null]], "mlx.nn.Hardswish": [[358, null]], "mlx.nn.InstanceNorm": [[359, null]], "mlx.nn.LSTM": [[360, null]], "mlx.nn.LayerNorm": [[361, null]], "mlx.nn.LeakyReLU": [[362, null]], "mlx.nn.Linear": [[363, null]], "mlx.nn.LogSigmoid": [[364, null]], "mlx.nn.LogSoftmax": [[365, null]], "mlx.nn.MaxPool1d": [[366, null]], "mlx.nn.MaxPool2d": [[367, null]], "mlx.nn.MaxPool3d": [[368, null]], "mlx.nn.Mish": [[369, null]], "mlx.nn.Module.apply": [[370, null]], "mlx.nn.Module.apply_to_modules": [[371, null]], "mlx.nn.Module.children": [[372, null]], "mlx.nn.Module.eval": [[373, null]], "mlx.nn.Module.filter_and_map": [[374, null]], "mlx.nn.Module.freeze": [[375, null]], "mlx.nn.Module.leaf_modules": [[376, null]], "mlx.nn.Module.load_weights": [[377, null]], "mlx.nn.Module.modules": [[378, null]], "mlx.nn.Module.named_modules": [[379, null]], "mlx.nn.Module.parameters": [[380, null]], "mlx.nn.Module.save_weights": [[381, null]], "mlx.nn.Module.set_dtype": [[382, null]], "mlx.nn.Module.state": [[383, null]], "mlx.nn.Module.train": [[384, null]], "mlx.nn.Module.trainable_parameters": [[385, null]], "mlx.nn.Module.training": [[386, null]], "mlx.nn.Module.unfreeze": [[387, null]], "mlx.nn.Module.update": [[388, null]], "mlx.nn.Module.update_modules": [[389, null]], "mlx.nn.MultiHeadAttention": [[390, null]], "mlx.nn.PReLU": [[391, null]], "mlx.nn.QuantizedEmbedding": [[392, null]], "mlx.nn.QuantizedLinear": [[393, null]], "mlx.nn.RMSNorm": [[394, null]], "mlx.nn.RNN": [[395, null]], "mlx.nn.ReLU": [[396, null]], "mlx.nn.ReLU6": [[397, null]], "mlx.nn.RoPE": [[398, null]], "mlx.nn.SELU": [[399, null]], "mlx.nn.Sequential": [[400, null]], "mlx.nn.SiLU": [[401, null]], "mlx.nn.Sigmoid": [[402, null]], "mlx.nn.SinusoidalPositionalEncoding": [[403, null]], "mlx.nn.Softmax": [[404, null]], "mlx.nn.Softmin": [[405, null]], "mlx.nn.Softplus": [[406, null]], "mlx.nn.Softshrink": [[407, null]], "mlx.nn.Softsign": [[408, null]], "mlx.nn.Step": [[409, null]], "mlx.nn.Tanh": [[410, null]], "mlx.nn.Transformer": [[411, null]], "mlx.nn.Upsample": [[412, null]], "mlx.nn.celu": [[421, null]], "mlx.nn.elu": [[422, null]], "mlx.nn.gelu": [[423, null]], "mlx.nn.gelu_approx": [[424, null]], "mlx.nn.gelu_fast_approx": [[425, null]], "mlx.nn.glu": [[426, null]], "mlx.nn.hard_shrink": [[427, null]], "mlx.nn.hard_tanh": [[428, null]], "mlx.nn.hardswish": [[429, null]], "mlx.nn.init.constant": [[413, null]], "mlx.nn.init.glorot_normal": [[414, null]], "mlx.nn.init.glorot_uniform": [[415, null]], "mlx.nn.init.he_normal": [[416, null]], "mlx.nn.init.he_uniform": [[417, null]], "mlx.nn.init.identity": [[418, null]], "mlx.nn.init.normal": [[419, null]], "mlx.nn.init.uniform": [[420, null]], "mlx.nn.leaky_relu": [[430, null]], "mlx.nn.log_sigmoid": [[431, null]], "mlx.nn.log_softmax": [[432, null]], "mlx.nn.losses.binary_cross_entropy": [[433, null]], "mlx.nn.losses.cosine_similarity_loss": [[434, null]], "mlx.nn.losses.cross_entropy": [[435, null]], "mlx.nn.losses.gaussian_nll_loss": [[436, null]], "mlx.nn.losses.hinge_loss": [[437, null]], "mlx.nn.losses.huber_loss": [[438, null]], "mlx.nn.losses.kl_div_loss": [[439, null]], "mlx.nn.losses.l1_loss": [[440, null]], "mlx.nn.losses.log_cosh_loss": [[441, null]], "mlx.nn.losses.margin_ranking_loss": [[442, null]], "mlx.nn.losses.mse_loss": [[443, null]], "mlx.nn.losses.nll_loss": [[444, null]], "mlx.nn.losses.smooth_l1_loss": [[445, null]], "mlx.nn.losses.triplet_loss": [[446, null]], "mlx.nn.mish": [[447, null]], "mlx.nn.prelu": [[448, null]], "mlx.nn.quantize": [[316, null]], "mlx.nn.relu": [[449, null]], "mlx.nn.relu6": [[450, null]], "mlx.nn.selu": [[451, null]], "mlx.nn.sigmoid": [[452, null]], "mlx.nn.silu": [[453, null]], "mlx.nn.softmax": [[454, null]], "mlx.nn.softmin": [[455, null]], "mlx.nn.softplus": [[456, null]], "mlx.nn.softshrink": [[457, null]], "mlx.nn.step": [[458, null]], "mlx.nn.tanh": [[459, null]], "mlx.nn.value_and_grad": [[317, null]], "mlx.optimizers.AdaDelta": [[467, null]], "mlx.optimizers.Adafactor": [[468, null]], "mlx.optimizers.Adagrad": [[469, null]], "mlx.optimizers.Adam": [[470, null]], "mlx.optimizers.AdamW": [[471, null]], "mlx.optimizers.Adamax": [[472, null]], "mlx.optimizers.Lion": [[473, null]], "mlx.optimizers.Optimizer.apply_gradients": [[474, null]], "mlx.optimizers.Optimizer.init": [[475, null]], "mlx.optimizers.Optimizer.state": [[476, null]], "mlx.optimizers.Optimizer.update": [[477, null]], "mlx.optimizers.RMSprop": [[478, null]], "mlx.optimizers.SGD": [[479, null]], "mlx.optimizers.clip_grad_norm": [[318, null]], "mlx.optimizers.cosine_decay": [[480, null]], "mlx.optimizers.exponential_decay": [[481, null]], "mlx.optimizers.join_schedules": [[482, null]], "mlx.optimizers.linear_schedule": [[483, null]], "mlx.optimizers.step_decay": [[484, null]], "mlx.utils.tree_flatten": [[319, null]], "mlx.utils.tree_map": [[320, null]], "mlx.utils.tree_map_with_path": [[321, null]], "mlx.utils.tree_reduce": [[322, null]], "mlx.utils.tree_unflatten": [[323, null]], "x86 Shell": [[9, "x86-shell"]]}, "docnames": ["cpp/ops", "dev/custom_metal_kernels", "dev/extensions", "dev/metal_debugger", "dev/mlx_in_cpp", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.conj", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.std", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array.view", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv3d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.conv_transpose1d", "python/_autosummary/mlx.core.conv_transpose2d", "python/_autosummary/mlx.core.conv_transpose3d", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.custom_function", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.distributed.Group", "python/_autosummary/mlx.core.distributed.all_gather", "python/_autosummary/mlx.core.distributed.all_sum", "python/_autosummary/mlx.core.distributed.init", "python/_autosummary/mlx.core.distributed.is_available", "python/_autosummary/mlx.core.distributed.recv", "python/_autosummary/mlx.core.distributed.recv_like", "python/_autosummary/mlx.core.distributed.send", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.einsum", "python/_autosummary/mlx.core.einsum_path", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.export_function", "python/_autosummary/mlx.core.export_to_dot", "python/_autosummary/mlx.core.exporter", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.metal_kernel", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.finfo", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.hadamard_transform", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.imag", "python/_autosummary/mlx.core.import_function", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isfinite", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.kron", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.cholesky_inv", "python/_autosummary/mlx.core.linalg.cross", "python/_autosummary/mlx.core.linalg.eigh", "python/_autosummary/mlx.core.linalg.eigvalsh", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linalg.tri_inv", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.clear_cache", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.get_active_memory", "python/_autosummary/mlx.core.metal.get_cache_memory", "python/_autosummary/mlx.core.metal.get_peak_memory", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.reset_peak_memory", "python/_autosummary/mlx.core.metal.set_cache_limit", "python/_autosummary/mlx.core.metal.set_memory_limit", "python/_autosummary/mlx.core.metal.set_wired_limit", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.nan_to_num", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.put_along_axis", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.laplace", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.permutation", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.real", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.roll", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.slice", "python/_autosummary/mlx.core.slice_update", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.unflatten", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.view", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/distributed", "python/export", "python/fast", "python/fft", "python/linalg", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.AvgPool3d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.CELU", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.ConvTranspose1d", "python/nn/_autosummary/mlx.nn.ConvTranspose2d", "python/nn/_autosummary/mlx.nn.ConvTranspose3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.ELU", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GLU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.HardShrink", "python/nn/_autosummary/mlx.nn.HardTanh", "python/nn/_autosummary/mlx.nn.Hardswish", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.LeakyReLU", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.LogSigmoid", "python/nn/_autosummary/mlx.nn.LogSoftmax", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.MaxPool3d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.ReLU6", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.Sigmoid", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softmax", "python/nn/_autosummary/mlx.nn.Softmin", "python/nn/_autosummary/mlx.nn.Softplus", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Softsign", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Tanh", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.celu", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hard_shrink", "python/nn/_autosummary_functions/mlx.nn.hard_tanh", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softmin", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/distributed", "usage/export", "usage/function_transforms", "usage/indexing", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["cpp/ops.rst", "dev/custom_metal_kernels.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "dev/mlx_in_cpp.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.conj.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.std.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array.view.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv3d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.conv_transpose1d.rst", "python/_autosummary/mlx.core.conv_transpose2d.rst", "python/_autosummary/mlx.core.conv_transpose3d.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.custom_function.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.distributed.Group.rst", "python/_autosummary/mlx.core.distributed.all_gather.rst", "python/_autosummary/mlx.core.distributed.all_sum.rst", "python/_autosummary/mlx.core.distributed.init.rst", "python/_autosummary/mlx.core.distributed.is_available.rst", "python/_autosummary/mlx.core.distributed.recv.rst", "python/_autosummary/mlx.core.distributed.recv_like.rst", "python/_autosummary/mlx.core.distributed.send.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.einsum.rst", "python/_autosummary/mlx.core.einsum_path.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.export_function.rst", "python/_autosummary/mlx.core.export_to_dot.rst", "python/_autosummary/mlx.core.exporter.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.metal_kernel.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.finfo.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.hadamard_transform.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.imag.rst", "python/_autosummary/mlx.core.import_function.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isfinite.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.kron.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.cholesky_inv.rst", "python/_autosummary/mlx.core.linalg.cross.rst", "python/_autosummary/mlx.core.linalg.eigh.rst", "python/_autosummary/mlx.core.linalg.eigvalsh.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linalg.tri_inv.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.clear_cache.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.get_active_memory.rst", "python/_autosummary/mlx.core.metal.get_cache_memory.rst", "python/_autosummary/mlx.core.metal.get_peak_memory.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.reset_peak_memory.rst", "python/_autosummary/mlx.core.metal.set_cache_limit.rst", "python/_autosummary/mlx.core.metal.set_memory_limit.rst", "python/_autosummary/mlx.core.metal.set_wired_limit.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.nan_to_num.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.put_along_axis.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.laplace.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.permutation.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.real.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.roll.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.slice.rst", "python/_autosummary/mlx.core.slice_update.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.unflatten.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.view.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/distributed.rst", "python/export.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.AvgPool3d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.CELU.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose1d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose2d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.ELU.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GLU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.HardShrink.rst", "python/nn/_autosummary/mlx.nn.HardTanh.rst", "python/nn/_autosummary/mlx.nn.Hardswish.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.LeakyReLU.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.LogSigmoid.rst", "python/nn/_autosummary/mlx.nn.LogSoftmax.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.MaxPool3d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.ReLU6.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.Sigmoid.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softmax.rst", "python/nn/_autosummary/mlx.nn.Softmin.rst", "python/nn/_autosummary/mlx.nn.Softplus.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Softsign.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Tanh.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.celu.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hard_shrink.rst", "python/nn/_autosummary_functions/mlx.nn.hard_tanh.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softmin.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/distributed.rst", "usage/export.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "indexentries": {"__init__() (array method)": [[31, "mlx.core.array.__init__", false]], "__init__() (custom_function method)": [[113, "mlx.core.custom_function.__init__", false]], "__init__() (device method)": [[10, "mlx.core.Device.__init__", false]], "__init__() (dtype method)": [[11, "mlx.core.Dtype.__init__", false]], "__init__() (dtypecategory method)": [[12, "mlx.core.DtypeCategory.__init__", false]], "__init__() (finfo method)": [[162, "mlx.core.finfo.__init__", false]], "__init__() (group method)": [[121, "mlx.core.distributed.Group.__init__", false]], "__init__() (stream method)": [[324, "mlx.core.Stream.__init__", false]], "abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice", false]], "abs() (array method)": [[33, "mlx.core.array.abs", false]], "abs() (in module mlx.core)": [[13, "mlx.core.abs", false]], "adadelta (class in mlx.optimizers)": [[467, "mlx.optimizers.AdaDelta", false]], "adafactor (class in mlx.optimizers)": [[468, "mlx.optimizers.Adafactor", false]], "adagrad (class in mlx.optimizers)": [[469, "mlx.optimizers.Adagrad", false]], "adam (class in mlx.optimizers)": [[470, "mlx.optimizers.Adam", false]], "adamax (class in mlx.optimizers)": [[472, "mlx.optimizers.Adamax", false]], "adamw (class in mlx.optimizers)": [[471, "mlx.optimizers.AdamW", false]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice", false]], "add() (in module mlx.core)": [[14, "mlx.core.add", false]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", false]], "addmm() (in module mlx.core)": [[15, "mlx.core.addmm", false]], "alibi (class in mlx.nn)": [[335, "mlx.nn.ALiBi", false]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice", false], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayib14StreamOrDevice", false]], "all() (array method)": [[34, "mlx.core.array.all", false]], "all() (in module mlx.core)": [[16, "mlx.core.all", false]], "all_gather() (in module mlx.core.distributed)": [[122, "mlx.core.distributed.all_gather", false]], "all_sum() (in module mlx.core.distributed)": [[123, "mlx.core.distributed.all_sum", false]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "allclose() (in module mlx.core)": [[17, "mlx.core.allclose", false]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayib14StreamOrDevice", false]], "any() (array method)": [[35, "mlx.core.array.any", false]], "any() (in module mlx.core)": [[18, "mlx.core.any", false]], "apply() (module method)": [[370, "mlx.nn.Module.apply", false]], "apply_gradients() (optimizer method)": [[474, "mlx.optimizers.Optimizer.apply_gradients", false]], "apply_to_modules() (module method)": [[371, "mlx.nn.Module.apply_to_modules", false]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice", false], [0, "_CPPv46aranged5Dtype14StreamOrDevice", false], [0, "_CPPv46arangedd14StreamOrDevice", false], [0, "_CPPv46arangedd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangeddd14StreamOrDevice", false], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangei14StreamOrDevice", false], [0, "_CPPv46arangeii14StreamOrDevice", false], [0, "_CPPv46arangeiii14StreamOrDevice", false]], "arange() (in module mlx.core)": [[19, "mlx.core.arange", false]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice", false]], "arccos() (in module mlx.core)": [[20, "mlx.core.arccos", false]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice", false]], "arccosh() (in module mlx.core)": [[21, "mlx.core.arccosh", false]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice", false]], "arcsin() (in module mlx.core)": [[22, "mlx.core.arcsin", false]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice", false]], "arcsinh() (in module mlx.core)": [[23, "mlx.core.arcsinh", false]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice", false]], "arctan() (in module mlx.core)": [[24, "mlx.core.arctan", false]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", false]], "arctan2() (in module mlx.core)": [[25, "mlx.core.arctan2", false]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice", false]], "arctanh() (in module mlx.core)": [[26, "mlx.core.arctanh", false]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice", false]], "argmax() (array method)": [[36, "mlx.core.array.argmax", false]], "argmax() (in module mlx.core)": [[27, "mlx.core.argmax", false]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayib14StreamOrDevice", false]], "argmin() (array method)": [[37, "mlx.core.array.argmin", false]], "argmin() (in module mlx.core)": [[28, "mlx.core.argmin", false]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", false]], "argpartition() (in module mlx.core)": [[29, "mlx.core.argpartition", false]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice", false], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice", false]], "argsort() (in module mlx.core)": [[30, "mlx.core.argsort", false]], "array (class in mlx.core)": [[31, "mlx.core.array", false]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", false]], "array_equal() (in module mlx.core)": [[83, "mlx.core.array_equal", false]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", false]], "as_strided() (in module mlx.core)": [[84, "mlx.core.as_strided", false]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice", false]], "astype() (array method)": [[38, "mlx.core.array.astype", false]], "at (array property)": [[39, "mlx.core.array.at", false]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_1d() (in module mlx.core)": [[85, "mlx.core.atleast_1d", false]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_2d() (in module mlx.core)": [[86, "mlx.core.atleast_2d", false]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_3d() (in module mlx.core)": [[87, "mlx.core.atleast_3d", false]], "avgpool1d (class in mlx.nn)": [[336, "mlx.nn.AvgPool1d", false]], "avgpool2d (class in mlx.nn)": [[337, "mlx.nn.AvgPool2d", false]], "avgpool3d (class in mlx.nn)": [[338, "mlx.nn.AvgPool3d", false]], "batchnorm (class in mlx.nn)": [[339, "mlx.nn.BatchNorm", false]], "bernoulli() (in module mlx.core.random)": [[246, "mlx.core.random.bernoulli", false]], "binary_cross_entropy (class in mlx.nn.losses)": [[433, "mlx.nn.losses.binary_cross_entropy", false]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", false]], "bitwise_and() (in module mlx.core)": [[88, "mlx.core.bitwise_and", false]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", false]], "bitwise_or() (in module mlx.core)": [[89, "mlx.core.bitwise_or", false]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", false]], "bitwise_xor() (in module mlx.core)": [[90, "mlx.core.bitwise_xor", false]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", false]], "block_masked_mm() (in module mlx.core)": [[91, "mlx.core.block_masked_mm", false]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", false]], "broadcast_to() (in module mlx.core)": [[92, "mlx.core.broadcast_to", false]], "categorical() (in module mlx.core.random)": [[247, "mlx.core.random.categorical", false]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice", false]], "ceil() (in module mlx.core)": [[93, "mlx.core.ceil", false]], "celu (class in mlx.nn)": [[340, "mlx.nn.CELU", false], [421, "mlx.nn.celu", false]], "children() (module method)": [[372, "mlx.nn.Module.children", false]], "cholesky() (in module mlx.core.linalg)": [[189, "mlx.core.linalg.cholesky", false]], "cholesky_inv() (in module mlx.core.linalg)": [[190, "mlx.core.linalg.cholesky_inv", false]], "clear_cache() (in module mlx.core.metal)": [[215, "mlx.core.metal.clear_cache", false]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", false]], "clip() (in module mlx.core)": [[94, "mlx.core.clip", false]], "clip_grad_norm() (in module mlx.optimizers)": [[318, "mlx.optimizers.clip_grad_norm", false]], "compile() (in module mlx.core)": [[95, "mlx.core.compile", false]], "concatenate (c++ function)": [[0, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", false]], "concatenate() (in module mlx.core)": [[96, "mlx.core.concatenate", false]], "conj() (array method)": [[40, "mlx.core.array.conj", false]], "conj() (in module mlx.core)": [[97, "mlx.core.conj", false]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice", false]], "conjugate() (in module mlx.core)": [[98, "mlx.core.conjugate", false]], "constant() (in module mlx.nn.init)": [[413, "mlx.nn.init.constant", false]], "contiguous (c++ function)": [[0, "_CPPv410contiguousRK5arrayb14StreamOrDevice", false]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", false]], "conv1d (class in mlx.nn)": [[341, "mlx.nn.Conv1d", false]], "conv1d() (in module mlx.core)": [[99, "mlx.core.conv1d", false]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv2d (class in mlx.nn)": [[342, "mlx.nn.Conv2d", false]], "conv2d() (in module mlx.core)": [[100, "mlx.core.conv2d", false]], "conv3d (c++ function)": [[0, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "conv3d (class in mlx.nn)": [[343, "mlx.nn.Conv3d", false]], "conv3d() (in module mlx.core)": [[101, "mlx.core.conv3d", false]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false]], "conv_general() (in module mlx.core)": [[102, "mlx.core.conv_general", false]], "conv_transpose1d (c++ function)": [[0, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", false]], "conv_transpose1d() (in module mlx.core)": [[103, "mlx.core.conv_transpose1d", false]], "conv_transpose2d (c++ function)": [[0, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv_transpose2d() (in module mlx.core)": [[104, "mlx.core.conv_transpose2d", false]], "conv_transpose3d (c++ function)": [[0, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "conv_transpose3d() (in module mlx.core)": [[105, "mlx.core.conv_transpose3d", false]], "convolve() (in module mlx.core)": [[106, "mlx.core.convolve", false]], "convtranspose1d (class in mlx.nn)": [[344, "mlx.nn.ConvTranspose1d", false]], "convtranspose2d (class in mlx.nn)": [[345, "mlx.nn.ConvTranspose2d", false]], "convtranspose3d (class in mlx.nn)": [[346, "mlx.nn.ConvTranspose3d", false]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice", false]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice", false]], "cos() (array method)": [[41, "mlx.core.array.cos", false]], "cos() (in module mlx.core)": [[107, "mlx.core.cos", false]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice", false]], "cosh() (in module mlx.core)": [[108, "mlx.core.cosh", false]], "cosine_decay() (in module mlx.optimizers)": [[480, "mlx.optimizers.cosine_decay", false]], "cosine_similarity_loss (class in mlx.nn.losses)": [[434, "mlx.nn.losses.cosine_similarity_loss", false]], "cross() (in module mlx.core.linalg)": [[191, "mlx.core.linalg.cross", false]], "cross_entropy (class in mlx.nn.losses)": [[435, "mlx.nn.losses.cross_entropy", false]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", false]], "cummax() (array method)": [[42, "mlx.core.array.cummax", false]], "cummax() (in module mlx.core)": [[109, "mlx.core.cummax", false]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice", false]], "cummin() (array method)": [[43, "mlx.core.array.cummin", false]], "cummin() (in module mlx.core)": [[110, "mlx.core.cummin", false]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", false]], "cumprod() (array method)": [[44, "mlx.core.array.cumprod", false]], "cumprod() (in module mlx.core)": [[111, "mlx.core.cumprod", false]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", false]], "cumsum() (array method)": [[45, "mlx.core.array.cumsum", false]], "cumsum() (in module mlx.core)": [[112, "mlx.core.cumsum", false]], "custom_function (class in mlx.core)": [[113, "mlx.core.custom_function", false]], "default_device() (in module mlx.core)": [[114, "mlx.core.default_device", false]], "default_stream() (in module mlx.core)": [[115, "mlx.core.default_stream", false]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice", false]], "degrees() (in module mlx.core)": [[116, "mlx.core.degrees", false]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", false]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", false]], "dequantize() (in module mlx.core)": [[117, "mlx.core.dequantize", false]], "device (class in mlx.core)": [[10, "mlx.core.Device", false]], "device_info() (in module mlx.core.metal)": [[216, "mlx.core.metal.device_info", false]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice", false]], "diag() (array method)": [[46, "mlx.core.array.diag", false]], "diag() (in module mlx.core)": [[118, "mlx.core.diag", false]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", false]], "diagonal() (array method)": [[47, "mlx.core.array.diagonal", false]], "diagonal() (in module mlx.core)": [[119, "mlx.core.diagonal", false]], "disable_compile() (in module mlx.core)": [[120, "mlx.core.disable_compile", false]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", false]], "divide() (in module mlx.core)": [[129, "mlx.core.divide", false]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", false]], "divmod() (in module mlx.core)": [[130, "mlx.core.divmod", false]], "dropout (class in mlx.nn)": [[347, "mlx.nn.Dropout", false]], "dropout2d (class in mlx.nn)": [[348, "mlx.nn.Dropout2d", false]], "dropout3d (class in mlx.nn)": [[349, "mlx.nn.Dropout3d", false]], "dtype (array property)": [[48, "mlx.core.array.dtype", false]], "dtype (class in mlx.core)": [[11, "mlx.core.Dtype", false]], "dtypecategory (class in mlx.core)": [[12, "mlx.core.DtypeCategory", false]], "eigh() (in module mlx.core.linalg)": [[192, "mlx.core.linalg.eigh", false]], "eigvalsh() (in module mlx.core.linalg)": [[193, "mlx.core.linalg.eigvalsh", false]], "einsum() (in module mlx.core)": [[131, "mlx.core.einsum", false]], "einsum_path() (in module mlx.core)": [[132, "mlx.core.einsum_path", false]], "elu (class in mlx.nn)": [[350, "mlx.nn.ELU", false], [422, "mlx.nn.elu", false]], "embedding (class in mlx.nn)": [[351, "mlx.nn.Embedding", false]], "enable_compile() (in module mlx.core)": [[133, "mlx.core.enable_compile", false]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", false]], "equal() (in module mlx.core)": [[134, "mlx.core.equal", false]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice", false]], "erf() (in module mlx.core)": [[135, "mlx.core.erf", false]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice", false]], "erfinv() (in module mlx.core)": [[136, "mlx.core.erfinv", false]], "eval() (in module mlx.core)": [[137, "mlx.core.eval", false]], "eval() (module method)": [[373, "mlx.nn.Module.eval", false]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice", false]], "exp() (array method)": [[49, "mlx.core.array.exp", false]], "exp() (in module mlx.core)": [[138, "mlx.core.exp", false]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", false]], "expand_dims() (in module mlx.core)": [[139, "mlx.core.expand_dims", false]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice", false]], "expm1() (in module mlx.core)": [[140, "mlx.core.expm1", false]], "exponential_decay() (in module mlx.optimizers)": [[481, "mlx.optimizers.exponential_decay", false]], "export_function() (in module mlx.core)": [[141, "mlx.core.export_function", false]], "export_to_dot() (in module mlx.core)": [[142, "mlx.core.export_to_dot", false]], "exporter() (in module mlx.core)": [[143, "mlx.core.exporter", false]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice", false], [0, "_CPPv43eyei5Dtype14StreamOrDevice", false], [0, "_CPPv43eyeii14StreamOrDevice", false], [0, "_CPPv43eyeiii14StreamOrDevice", false], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice", false]], "eye() (in module mlx.core)": [[144, "mlx.core.eye", false]], "fft() (in module mlx.core.fft)": [[150, "mlx.core.fft.fft", false]], "fft2() (in module mlx.core.fft)": [[151, "mlx.core.fft.fft2", false]], "fftn() (in module mlx.core.fft)": [[152, "mlx.core.fft.fftn", false]], "filter_and_map() (module method)": [[374, "mlx.nn.Module.filter_and_map", false]], "finfo (class in mlx.core)": [[162, "mlx.core.finfo", false]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice", false], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice", false]], "flatten() (array method)": [[50, "mlx.core.array.flatten", false]], "flatten() (in module mlx.core)": [[163, "mlx.core.flatten", false]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice", false]], "floor() (in module mlx.core)": [[164, "mlx.core.floor", false]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", false]], "floor_divide() (in module mlx.core)": [[165, "mlx.core.floor_divide", false]], "freeze() (module method)": [[375, "mlx.nn.Module.freeze", false]], "full (c++ function)": [[0, "_CPPv44full5Shape5array14StreamOrDevice", false], [0, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", false], [0, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", false], [0, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", false]], "full() (in module mlx.core)": [[166, "mlx.core.full", false]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", false], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", false]], "gather_mm (c++ function)": [[0, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", false]], "gather_mm() (in module mlx.core)": [[167, "mlx.core.gather_mm", false]], "gather_qmm (c++ function)": [[0, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", false]], "gather_qmm() (in module mlx.core)": [[168, "mlx.core.gather_qmm", false]], "gaussian_nll_loss (class in mlx.nn.losses)": [[436, "mlx.nn.losses.gaussian_nll_loss", false]], "gelu (class in mlx.nn)": [[352, "mlx.nn.GELU", false], [423, "mlx.nn.gelu", false]], "gelu_approx (class in mlx.nn)": [[424, "mlx.nn.gelu_approx", false]], "gelu_fast_approx (class in mlx.nn)": [[425, "mlx.nn.gelu_fast_approx", false]], "get_active_memory() (in module mlx.core.metal)": [[217, "mlx.core.metal.get_active_memory", false]], "get_cache_memory() (in module mlx.core.metal)": [[218, "mlx.core.metal.get_cache_memory", false]], "get_peak_memory() (in module mlx.core.metal)": [[219, "mlx.core.metal.get_peak_memory", false]], "glorot_normal() (in module mlx.nn.init)": [[414, "mlx.nn.init.glorot_normal", false]], "glorot_uniform() (in module mlx.nn.init)": [[415, "mlx.nn.init.glorot_uniform", false]], "glu (class in mlx.nn)": [[353, "mlx.nn.GLU", false], [426, "mlx.nn.glu", false]], "grad() (in module mlx.core)": [[169, "mlx.core.grad", false]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", false]], "greater() (in module mlx.core)": [[170, "mlx.core.greater", false]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", false]], "greater_equal() (in module mlx.core)": [[171, "mlx.core.greater_equal", false]], "group (class in mlx.core.distributed)": [[121, "mlx.core.distributed.Group", false]], "groupnorm (class in mlx.nn)": [[355, "mlx.nn.GroupNorm", false]], "gru (class in mlx.nn)": [[354, "mlx.nn.GRU", false]], "gumbel() (in module mlx.core.random)": [[248, "mlx.core.random.gumbel", false]], "hadamard_transform (c++ function)": [[0, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", false]], "hadamard_transform() (in module mlx.core)": [[172, "mlx.core.hadamard_transform", false]], "hard_shrink (class in mlx.nn)": [[427, "mlx.nn.hard_shrink", false]], "hard_tanh (class in mlx.nn)": [[428, "mlx.nn.hard_tanh", false]], "hardshrink (class in mlx.nn)": [[356, "mlx.nn.HardShrink", false]], "hardswish (class in mlx.nn)": [[358, "mlx.nn.Hardswish", false], [429, "mlx.nn.hardswish", false]], "hardtanh (class in mlx.nn)": [[357, "mlx.nn.HardTanh", false]], "he_normal() (in module mlx.nn.init)": [[416, "mlx.nn.init.he_normal", false]], "he_uniform() (in module mlx.nn.init)": [[417, "mlx.nn.init.he_uniform", false]], "hinge_loss (class in mlx.nn.losses)": [[437, "mlx.nn.losses.hinge_loss", false]], "huber_loss (class in mlx.nn.losses)": [[438, "mlx.nn.losses.huber_loss", false]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice", false], [0, "_CPPv48identityi5Dtype14StreamOrDevice", false]], "identity() (in module mlx.core)": [[173, "mlx.core.identity", false]], "identity() (in module mlx.nn.init)": [[418, "mlx.nn.init.identity", false]], "ifft() (in module mlx.core.fft)": [[153, "mlx.core.fft.ifft", false]], "ifft2() (in module mlx.core.fft)": [[154, "mlx.core.fft.ifft2", false]], "ifftn() (in module mlx.core.fft)": [[155, "mlx.core.fft.ifftn", false]], "imag (c++ function)": [[0, "_CPPv44imagRK5array14StreamOrDevice", false]], "imag() (in module mlx.core)": [[174, "mlx.core.imag", false]], "import_function() (in module mlx.core)": [[175, "mlx.core.import_function", false]], "init() (in module mlx.core.distributed)": [[124, "mlx.core.distributed.init", false]], "init() (optimizer method)": [[475, "mlx.optimizers.Optimizer.init", false]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", false]], "inner() (in module mlx.core)": [[176, "mlx.core.inner", false]], "instancenorm (class in mlx.nn)": [[359, "mlx.nn.InstanceNorm", false]], "inv() (in module mlx.core.linalg)": [[194, "mlx.core.linalg.inv", false]], "irfft() (in module mlx.core.fft)": [[156, "mlx.core.fft.irfft", false]], "irfft2() (in module mlx.core.fft)": [[157, "mlx.core.fft.irfft2", false]], "irfftn() (in module mlx.core.fft)": [[158, "mlx.core.fft.irfftn", false]], "is_available() (in module mlx.core.distributed)": [[125, "mlx.core.distributed.is_available", false]], "is_available() (in module mlx.core.metal)": [[220, "mlx.core.metal.is_available", false]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "isclose() (in module mlx.core)": [[177, "mlx.core.isclose", false]], "isfinite (c++ function)": [[0, "_CPPv48isfiniteRK5array14StreamOrDevice", false]], "isfinite() (in module mlx.core)": [[178, "mlx.core.isfinite", false]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice", false]], "isinf() (in module mlx.core)": [[179, "mlx.core.isinf", false]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice", false]], "isnan() (in module mlx.core)": [[180, "mlx.core.isnan", false]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice", false]], "isneginf() (in module mlx.core)": [[181, "mlx.core.isneginf", false]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice", false]], "isposinf() (in module mlx.core)": [[182, "mlx.core.isposinf", false]], "issubdtype() (in module mlx.core)": [[183, "mlx.core.issubdtype", false]], "item() (array method)": [[51, "mlx.core.array.item", false]], "itemsize (array property)": [[52, "mlx.core.array.itemsize", false]], "join_schedules() (in module mlx.optimizers)": [[482, "mlx.optimizers.join_schedules", false]], "jvp() (in module mlx.core)": [[184, "mlx.core.jvp", false]], "key() (in module mlx.core.random)": [[249, "mlx.core.random.key", false]], "kl_div_loss (class in mlx.nn.losses)": [[439, "mlx.nn.losses.kl_div_loss", false]], "kron (c++ function)": [[0, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", false]], "kron() (in module mlx.core)": [[185, "mlx.core.kron", false]], "l1_loss (class in mlx.nn.losses)": [[440, "mlx.nn.losses.l1_loss", false]], "laplace() (in module mlx.core.random)": [[250, "mlx.core.random.laplace", false]], "layer_norm() (in module mlx.core.fast)": [[145, "mlx.core.fast.layer_norm", false]], "layernorm (class in mlx.nn)": [[361, "mlx.nn.LayerNorm", false]], "leaf_modules() (module method)": [[376, "mlx.nn.Module.leaf_modules", false]], "leaky_relu (class in mlx.nn)": [[430, "mlx.nn.leaky_relu", false]], "leakyrelu (class in mlx.nn)": [[362, "mlx.nn.LeakyReLU", false]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", false]], "left_shift() (in module mlx.core)": [[186, "mlx.core.left_shift", false]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", false]], "less() (in module mlx.core)": [[187, "mlx.core.less", false]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", false]], "less_equal() (in module mlx.core)": [[188, "mlx.core.less_equal", false]], "linear (class in mlx.nn)": [[363, "mlx.nn.Linear", false]], "linear_schedule() (in module mlx.optimizers)": [[483, "mlx.optimizers.linear_schedule", false]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice", false]], "linspace() (in module mlx.core)": [[199, "mlx.core.linspace", false]], "lion (class in mlx.optimizers)": [[473, "mlx.optimizers.Lion", false]], "load() (in module mlx.core)": [[200, "mlx.core.load", false]], "load_weights() (module method)": [[377, "mlx.nn.Module.load_weights", false]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice", false]], "log() (array method)": [[53, "mlx.core.array.log", false]], "log() (in module mlx.core)": [[201, "mlx.core.log", false]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice", false]], "log10() (array method)": [[54, "mlx.core.array.log10", false]], "log10() (in module mlx.core)": [[202, "mlx.core.log10", false]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice", false]], "log1p() (array method)": [[55, "mlx.core.array.log1p", false]], "log1p() (in module mlx.core)": [[203, "mlx.core.log1p", false]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice", false]], "log2() (array method)": [[56, "mlx.core.array.log2", false]], "log2() (in module mlx.core)": [[204, "mlx.core.log2", false]], "log_cosh_loss (class in mlx.nn.losses)": [[441, "mlx.nn.losses.log_cosh_loss", false]], "log_sigmoid (class in mlx.nn)": [[431, "mlx.nn.log_sigmoid", false]], "log_softmax (class in mlx.nn)": [[432, "mlx.nn.log_softmax", false]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", false]], "logaddexp() (in module mlx.core)": [[205, "mlx.core.logaddexp", false]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", false]], "logical_and() (in module mlx.core)": [[206, "mlx.core.logical_and", false]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice", false]], "logical_not() (in module mlx.core)": [[207, "mlx.core.logical_not", false]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", false]], "logical_or() (in module mlx.core)": [[208, "mlx.core.logical_or", false]], "logsigmoid (class in mlx.nn)": [[364, "mlx.nn.LogSigmoid", false]], "logsoftmax (class in mlx.nn)": [[365, "mlx.nn.LogSoftmax", false]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", false]], "logsumexp() (array method)": [[57, "mlx.core.array.logsumexp", false]], "logsumexp() (in module mlx.core)": [[209, "mlx.core.logsumexp", false]], "lstm (class in mlx.nn)": [[360, "mlx.nn.LSTM", false]], "margin_ranking_loss (class in mlx.nn.losses)": [[442, "mlx.nn.losses.margin_ranking_loss", false]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", false]], "matmul() (in module mlx.core)": [[210, "mlx.core.matmul", false]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayib14StreamOrDevice", false]], "max() (array method)": [[58, "mlx.core.array.max", false]], "max() (in module mlx.core)": [[211, "mlx.core.max", false]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", false]], "maximum() (in module mlx.core)": [[212, "mlx.core.maximum", false]], "maxpool1d (class in mlx.nn)": [[366, "mlx.nn.MaxPool1d", false]], "maxpool2d (class in mlx.nn)": [[367, "mlx.nn.MaxPool2d", false]], "maxpool3d (class in mlx.nn)": [[368, "mlx.nn.MaxPool3d", false]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayib14StreamOrDevice", false]], "mean() (array method)": [[59, "mlx.core.array.mean", false]], "mean() (in module mlx.core)": [[213, "mlx.core.mean", false]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", false]], "meshgrid() (in module mlx.core)": [[214, "mlx.core.meshgrid", false]], "metal_kernel() (in module mlx.core.fast)": [[146, "mlx.core.fast.metal_kernel", false]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice", false], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayib14StreamOrDevice", false]], "min() (array method)": [[60, "mlx.core.array.min", false]], "min() (in module mlx.core)": [[227, "mlx.core.min", false]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", false]], "minimum() (in module mlx.core)": [[228, "mlx.core.minimum", false]], "mish (class in mlx.nn)": [[369, "mlx.nn.Mish", false], [447, "mlx.nn.mish", false]], "module (class in mlx.nn)": [[464, "mlx.nn.Module", false]], "modules() (module method)": [[378, "mlx.nn.Module.modules", false]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", false]], "moveaxis() (array method)": [[61, "mlx.core.array.moveaxis", false]], "moveaxis() (in module mlx.core)": [[229, "mlx.core.moveaxis", false]], "mse_loss (class in mlx.nn.losses)": [[443, "mlx.nn.losses.mse_loss", false]], "multiheadattention (class in mlx.nn)": [[390, "mlx.nn.MultiHeadAttention", false]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", false]], "multiply() (in module mlx.core)": [[230, "mlx.core.multiply", false]], "multivariate_normal() (in module mlx.core.random)": [[251, "mlx.core.random.multivariate_normal", false]], "named_modules() (module method)": [[379, "mlx.nn.Module.named_modules", false]], "nan_to_num (c++ function)": [[0, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", false]], "nan_to_num() (in module mlx.core)": [[231, "mlx.core.nan_to_num", false]], "nbytes (array property)": [[62, "mlx.core.array.nbytes", false]], "ndim (array property)": [[63, "mlx.core.array.ndim", false]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice", false]], "negative() (in module mlx.core)": [[232, "mlx.core.negative", false]], "new_stream() (in module mlx.core)": [[233, "mlx.core.new_stream", false]], "nll_loss (class in mlx.nn.losses)": [[444, "mlx.nn.losses.nll_loss", false]], "norm() (in module mlx.core.linalg)": [[195, "mlx.core.linalg.norm", false]], "normal() (in module mlx.core.random)": [[252, "mlx.core.random.normal", false]], "normal() (in module mlx.nn.init)": [[419, "mlx.nn.init.normal", false]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", false]], "not_equal() (in module mlx.core)": [[234, "mlx.core.not_equal", false]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", false]], "ones (c++ function)": [[0, "_CPPv44onesRK5Shape14StreamOrDevice", false], [0, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", false]], "ones() (in module mlx.core)": [[235, "mlx.core.ones", false]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice", false]], "ones_like() (in module mlx.core)": [[236, "mlx.core.ones_like", false]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array", false], [0, "_CPPv4I0Ene5arrayRK5array1T", false], [0, "_CPPv4neRK5arrayRK5array", false]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array", false], [0, "_CPPv4I0Erm5arrayRK5array1T", false], [0, "_CPPv4rmRK5arrayRK5array", false]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array", false]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array", false]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array", false], [0, "_CPPv4I0Eml5arrayRK5array1T", false], [0, "_CPPv4mlRK5arrayRK5array", false]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array", false], [0, "_CPPv4I0Epl5arrayRK5array1T", false], [0, "_CPPv4plRK5arrayRK5array", false]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array", false], [0, "_CPPv4I0Emi5arrayRK5array1T", false], [0, "_CPPv4miRK5array", false], [0, "_CPPv4miRK5arrayRK5array", false]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array", false], [0, "_CPPv4dvRK5arrayd", false], [0, "_CPPv4dvdRK5array", false]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array", false], [0, "_CPPv4I0Elt5arrayRK5array1T", false], [0, "_CPPv4ltRK5arrayRK5array", false]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array", false]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array", false], [0, "_CPPv4I0Ele5arrayRK5array1T", false], [0, "_CPPv4leRK5arrayRK5array", false]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array", false], [0, "_CPPv4I0Eeq5arrayRK5array1T", false], [0, "_CPPv4eqRK5arrayRK5array", false]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array", false], [0, "_CPPv4I0Egt5arrayRK5array1T", false], [0, "_CPPv4gtRK5arrayRK5array", false]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array", false], [0, "_CPPv4I0Ege5arrayRK5array1T", false], [0, "_CPPv4geRK5arrayRK5array", false]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array", false]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array", false]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array", false]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array", false]], "optimizer (class in mlx.optimizers)": [[486, "mlx.optimizers.Optimizer", false]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", false]], "outer() (in module mlx.core)": [[237, "mlx.core.outer", false]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", false]], "pad() (in module mlx.core)": [[238, "mlx.core.pad", false]], "parameters() (module method)": [[380, "mlx.nn.Module.parameters", false]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice", false]], "partition() (in module mlx.core)": [[239, "mlx.core.partition", false]], "permutation() (in module mlx.core.random)": [[253, "mlx.core.random.permutation", false]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", false]], "power() (in module mlx.core)": [[240, "mlx.core.power", false]], "prelu (class in mlx.nn)": [[391, "mlx.nn.PReLU", false], [448, "mlx.nn.prelu", false]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayib14StreamOrDevice", false]], "prod() (array method)": [[64, "mlx.core.array.prod", false]], "prod() (in module mlx.core)": [[241, "mlx.core.prod", false]], "put_along_axis (c++ function)": [[0, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false]], "put_along_axis() (in module mlx.core)": [[242, "mlx.core.put_along_axis", false]], "qr() (in module mlx.core.linalg)": [[196, "mlx.core.linalg.qr", false]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice", false]], "quantize() (in module mlx.core)": [[243, "mlx.core.quantize", false]], "quantize() (in module mlx.nn)": [[316, "mlx.nn.quantize", false]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", false]], "quantized_matmul() (in module mlx.core)": [[244, "mlx.core.quantized_matmul", false]], "quantizedembedding (class in mlx.nn)": [[392, "mlx.nn.QuantizedEmbedding", false]], "quantizedlinear (class in mlx.nn)": [[393, "mlx.nn.QuantizedLinear", false]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice", false]], "radians() (in module mlx.core)": [[245, "mlx.core.radians", false]], "randint() (in module mlx.core.random)": [[254, "mlx.core.random.randint", false]], "real (c++ function)": [[0, "_CPPv44realRK5array14StreamOrDevice", false]], "real() (in module mlx.core)": [[259, "mlx.core.real", false]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice", false]], "reciprocal() (array method)": [[65, "mlx.core.array.reciprocal", false]], "reciprocal() (in module mlx.core)": [[260, "mlx.core.reciprocal", false]], "recv() (in module mlx.core.distributed)": [[126, "mlx.core.distributed.recv", false]], "recv_like() (in module mlx.core.distributed)": [[127, "mlx.core.distributed.recv_like", false]], "relu (class in mlx.nn)": [[396, "mlx.nn.ReLU", false], [449, "mlx.nn.relu", false]], "relu6 (class in mlx.nn)": [[397, "mlx.nn.ReLU6", false], [450, "mlx.nn.relu6", false]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", false]], "remainder() (in module mlx.core)": [[261, "mlx.core.remainder", false]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice", false], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice", false]], "repeat() (in module mlx.core)": [[262, "mlx.core.repeat", false]], "reset_peak_memory() (in module mlx.core.metal)": [[221, "mlx.core.metal.reset_peak_memory", false]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", false]], "reshape() (array method)": [[66, "mlx.core.array.reshape", false]], "reshape() (in module mlx.core)": [[263, "mlx.core.reshape", false]], "rfft() (in module mlx.core.fft)": [[159, "mlx.core.fft.rfft", false]], "rfft2() (in module mlx.core.fft)": [[160, "mlx.core.fft.rfft2", false]], "rfftn() (in module mlx.core.fft)": [[161, "mlx.core.fft.rfftn", false]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", false]], "right_shift() (in module mlx.core)": [[264, "mlx.core.right_shift", false]], "rms_norm() (in module mlx.core.fast)": [[147, "mlx.core.fast.rms_norm", false]], "rmsnorm (class in mlx.nn)": [[394, "mlx.nn.RMSNorm", false]], "rmsprop (class in mlx.optimizers)": [[478, "mlx.optimizers.RMSprop", false]], "rnn (class in mlx.nn)": [[395, "mlx.nn.RNN", false]], "roll (c++ function)": [[0, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayi14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayii14StreamOrDevice", false]], "roll() (in module mlx.core)": [[265, "mlx.core.roll", false]], "rope (class in mlx.nn)": [[398, "mlx.nn.RoPE", false]], "rope() (in module mlx.core.fast)": [[148, "mlx.core.fast.rope", false]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice", false], [0, "_CPPv45roundRK5arrayi14StreamOrDevice", false]], "round() (array method)": [[67, "mlx.core.array.round", false]], "round() (in module mlx.core)": [[266, "mlx.core.round", false]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice", false]], "rsqrt() (array method)": [[68, "mlx.core.array.rsqrt", false]], "rsqrt() (in module mlx.core)": [[267, "mlx.core.rsqrt", false]], "save() (in module mlx.core)": [[268, "mlx.core.save", false]], "save_gguf() (in module mlx.core)": [[269, "mlx.core.save_gguf", false]], "save_safetensors() (in module mlx.core)": [[270, "mlx.core.save_safetensors", false]], "save_weights() (module method)": [[381, "mlx.nn.Module.save_weights", false]], "savez() (in module mlx.core)": [[271, "mlx.core.savez", false]], "savez_compressed() (in module mlx.core)": [[272, "mlx.core.savez_compressed", false]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[149, "mlx.core.fast.scaled_dot_product_attention", false]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "seed() (in module mlx.core.random)": [[255, "mlx.core.random.seed", false]], "selu (class in mlx.nn)": [[399, "mlx.nn.SELU", false], [451, "mlx.nn.selu", false]], "send() (in module mlx.core.distributed)": [[128, "mlx.core.distributed.send", false]], "sequential (class in mlx.nn)": [[400, "mlx.nn.Sequential", false]], "set_cache_limit() (in module mlx.core.metal)": [[222, "mlx.core.metal.set_cache_limit", false]], "set_default_device() (in module mlx.core)": [[273, "mlx.core.set_default_device", false]], "set_default_stream() (in module mlx.core)": [[274, "mlx.core.set_default_stream", false]], "set_dtype() (module method)": [[382, "mlx.nn.Module.set_dtype", false]], "set_memory_limit() (in module mlx.core.metal)": [[223, "mlx.core.metal.set_memory_limit", false]], "set_wired_limit() (in module mlx.core.metal)": [[224, "mlx.core.metal.set_wired_limit", false]], "sgd (class in mlx.optimizers)": [[479, "mlx.optimizers.SGD", false]], "shape (array property)": [[69, "mlx.core.array.shape", false]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice", false]], "sigmoid (class in mlx.nn)": [[402, "mlx.nn.Sigmoid", false], [452, "mlx.nn.sigmoid", false]], "sigmoid() (in module mlx.core)": [[275, "mlx.core.sigmoid", false]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice", false]], "sign() (in module mlx.core)": [[276, "mlx.core.sign", false]], "silu (class in mlx.nn)": [[401, "mlx.nn.SiLU", false], [453, "mlx.nn.silu", false]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice", false]], "sin() (array method)": [[70, "mlx.core.array.sin", false]], "sin() (in module mlx.core)": [[277, "mlx.core.sin", false]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice", false]], "sinh() (in module mlx.core)": [[278, "mlx.core.sinh", false]], "sinusoidalpositionalencoding (class in mlx.nn)": [[403, "mlx.nn.SinusoidalPositionalEncoding", false]], "size (array property)": [[71, "mlx.core.array.size", false]], "slice (c++ function)": [[0, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", false]], "slice() (in module mlx.core)": [[279, "mlx.core.slice", false]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", false], [0, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", false], [0, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "slice_update() (in module mlx.core)": [[280, "mlx.core.slice_update", false]], "smooth_l1_loss (class in mlx.nn.losses)": [[445, "mlx.nn.losses.smooth_l1_loss", false]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice", false]], "softmax (class in mlx.nn)": [[404, "mlx.nn.Softmax", false], [454, "mlx.nn.softmax", false]], "softmax() (in module mlx.core)": [[281, "mlx.core.softmax", false]], "softmin (class in mlx.nn)": [[405, "mlx.nn.Softmin", false], [455, "mlx.nn.softmin", false]], "softplus (class in mlx.nn)": [[406, "mlx.nn.Softplus", false], [456, "mlx.nn.softplus", false]], "softshrink (class in mlx.nn)": [[407, "mlx.nn.Softshrink", false], [457, "mlx.nn.softshrink", false]], "softsign (class in mlx.nn)": [[408, "mlx.nn.Softsign", false]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice", false], [0, "_CPPv44sortRK5arrayi14StreamOrDevice", false]], "sort() (in module mlx.core)": [[282, "mlx.core.sort", false]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayi14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayii14StreamOrDevice", false]], "split() (array method)": [[72, "mlx.core.array.split", false]], "split() (in module mlx.core)": [[283, "mlx.core.split", false]], "split() (in module mlx.core.random)": [[256, "mlx.core.random.split", false]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice", false]], "sqrt() (array method)": [[73, "mlx.core.array.sqrt", false]], "sqrt() (in module mlx.core)": [[284, "mlx.core.sqrt", false]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice", false]], "square() (array method)": [[74, "mlx.core.array.square", false]], "square() (in module mlx.core)": [[285, "mlx.core.square", false]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice", false]], "squeeze() (array method)": [[75, "mlx.core.array.squeeze", false]], "squeeze() (in module mlx.core)": [[286, "mlx.core.squeeze", false]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", false]], "stack() (in module mlx.core)": [[287, "mlx.core.stack", false]], "start_capture() (in module mlx.core.metal)": [[225, "mlx.core.metal.start_capture", false]], "state (module property)": [[383, "mlx.nn.Module.state", false]], "state (optimizer property)": [[476, "mlx.optimizers.Optimizer.state", false]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice", false], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv4StRK5arraybi14StreamOrDevice", false], [0, "_CPPv4StRK5arrayibi14StreamOrDevice", false]], "std() (array method)": [[76, "mlx.core.array.std", false]], "std() (in module mlx.core)": [[288, "mlx.core.std", false]], "step (class in mlx.nn)": [[409, "mlx.nn.Step", false], [458, "mlx.nn.step", false]], "step_decay() (in module mlx.optimizers)": [[484, "mlx.optimizers.step_decay", false]], "stop_capture() (in module mlx.core.metal)": [[226, "mlx.core.metal.stop_capture", false]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice", false]], "stop_gradient() (in module mlx.core)": [[289, "mlx.core.stop_gradient", false]], "stream (class in mlx.core)": [[324, "mlx.core.Stream", false]], "stream() (in module mlx.core)": [[290, "mlx.core.stream", false]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", false]], "subtract() (in module mlx.core)": [[291, "mlx.core.subtract", false]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayib14StreamOrDevice", false]], "sum() (array method)": [[77, "mlx.core.array.sum", false]], "sum() (in module mlx.core)": [[292, "mlx.core.sum", false]], "svd() (in module mlx.core.linalg)": [[197, "mlx.core.linalg.svd", false]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", false]], "swapaxes() (array method)": [[78, "mlx.core.array.swapaxes", false]], "swapaxes() (in module mlx.core)": [[293, "mlx.core.swapaxes", false]], "synchronize() (in module mlx.core)": [[294, "mlx.core.synchronize", false]], "t (array property)": [[32, "mlx.core.array.T", false]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayi14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayii14StreamOrDevice", false]], "take() (in module mlx.core)": [[295, "mlx.core.take", false]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", false]], "take_along_axis() (in module mlx.core)": [[296, "mlx.core.take_along_axis", false]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice", false]], "tan() (in module mlx.core)": [[297, "mlx.core.tan", false]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice", false]], "tanh (class in mlx.nn)": [[410, "mlx.nn.Tanh", false], [459, "mlx.nn.tanh", false]], "tanh() (in module mlx.core)": [[298, "mlx.core.tanh", false]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", false], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", false]], "tensordot() (in module mlx.core)": [[299, "mlx.core.tensordot", false]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "tile() (in module mlx.core)": [[300, "mlx.core.tile", false]], "tolist() (array method)": [[79, "mlx.core.array.tolist", false]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice", false], [0, "_CPPv44topkRK5arrayii14StreamOrDevice", false]], "topk() (in module mlx.core)": [[301, "mlx.core.topk", false]], "trace (c++ function)": [[0, "_CPPv45traceRK5array14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", false]], "trace() (in module mlx.core)": [[302, "mlx.core.trace", false]], "train() (module method)": [[384, "mlx.nn.Module.train", false]], "trainable_parameters() (module method)": [[385, "mlx.nn.Module.trainable_parameters", false]], "training (module property)": [[386, "mlx.nn.Module.training", false]], "transformer (class in mlx.nn)": [[411, "mlx.nn.Transformer", false]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "transpose() (array method)": [[80, "mlx.core.array.transpose", false]], "transpose() (in module mlx.core)": [[303, "mlx.core.transpose", false]], "tree_flatten() (in module mlx.utils)": [[319, "mlx.utils.tree_flatten", false]], "tree_map() (in module mlx.utils)": [[320, "mlx.utils.tree_map", false]], "tree_map_with_path() (in module mlx.utils)": [[321, "mlx.utils.tree_map_with_path", false]], "tree_reduce() (in module mlx.utils)": [[322, "mlx.utils.tree_reduce", false]], "tree_unflatten() (in module mlx.utils)": [[323, "mlx.utils.tree_unflatten", false]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice", false], [0, "_CPPv43triiii5Dtype14StreamOrDevice", false]], "tri() (in module mlx.core)": [[304, "mlx.core.tri", false]], "tri_inv() (in module mlx.core.linalg)": [[198, "mlx.core.linalg.tri_inv", false]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice", false]], "tril() (in module mlx.core)": [[305, "mlx.core.tril", false]], "triplet_loss (class in mlx.nn.losses)": [[446, "mlx.nn.losses.triplet_loss", false]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice", false]], "triu() (in module mlx.core)": [[306, "mlx.core.triu", false]], "truncated_normal() (in module mlx.core.random)": [[257, "mlx.core.random.truncated_normal", false]], "unflatten (c++ function)": [[0, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", false]], "unflatten() (in module mlx.core)": [[307, "mlx.core.unflatten", false]], "unfreeze() (module method)": [[387, "mlx.nn.Module.unfreeze", false]], "uniform() (in module mlx.core.random)": [[258, "mlx.core.random.uniform", false]], "uniform() (in module mlx.nn.init)": [[420, "mlx.nn.init.uniform", false]], "update() (module method)": [[388, "mlx.nn.Module.update", false]], "update() (optimizer method)": [[477, "mlx.optimizers.Optimizer.update", false]], "update_modules() (module method)": [[389, "mlx.nn.Module.update_modules", false]], "upsample (class in mlx.nn)": [[412, "mlx.nn.Upsample", false]], "value_and_grad() (in module mlx.core)": [[308, "mlx.core.value_and_grad", false]], "value_and_grad() (in module mlx.nn)": [[317, "mlx.nn.value_and_grad", false]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice", false], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv43varRK5arraybi14StreamOrDevice", false], [0, "_CPPv43varRK5arrayibi14StreamOrDevice", false]], "var() (array method)": [[81, "mlx.core.array.var", false]], "var() (in module mlx.core)": [[309, "mlx.core.var", false]], "view (c++ function)": [[0, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", false]], "view() (array method)": [[82, "mlx.core.array.view", false]], "view() (in module mlx.core)": [[310, "mlx.core.view", false]], "vjp() (in module mlx.core)": [[311, "mlx.core.vjp", false]], "vmap() (in module mlx.core)": [[312, "mlx.core.vmap", false]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", false]], "where() (in module mlx.core)": [[313, "mlx.core.where", false]], "zeros (c++ function)": [[0, "_CPPv45zerosRK5Shape14StreamOrDevice", false], [0, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", false]], "zeros() (in module mlx.core)": [[314, "mlx.core.zeros", false]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice", false]], "zeros_like() (in module mlx.core)": [[315, "mlx.core.zeros_like", false]]}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::a"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::allow_col_major"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::dilation"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::groups"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::input"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::padding"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::s"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::stride"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv_transpose1d::weight"], [0, 0, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::dilation"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::groups"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::input"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::padding"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::s"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::stride"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::weight"], [0, 0, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::dilation"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::groups"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::input"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::padding"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::s"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::stride"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::a"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::b"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::lhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::rhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "gather_mm::s"], [0, 0, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::biases"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::bits"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::group_size"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::lhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::rhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::s"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::scales"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::transpose"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::w"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbii14StreamOrDevice", "gather_qmm::x"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::a"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::s"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::scale"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag"], [0, 1, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag::a"], [0, 1, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::a"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::a"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::b"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::a"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::nan"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::neginf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::posinf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayKNSt6stringE14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayKNSt6stringE14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayKNSt6stringE14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayKNSt6stringE14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::a"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::axis"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::indices"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::s"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::values"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv44realRK5array14StreamOrDevice", "real"], [0, 1, 1, "_CPPv44realRK5array14StreamOrDevice", "real::a"], [0, 1, 1, "_CPPv44realRK5array14StreamOrDevice", "real::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::axes"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::axes"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::axis"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::axis"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::shift"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::axes"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::slice_size"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::strides"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::axes"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::index"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::index"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::dtype"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::a"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::axis"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::s"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::shape"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::a"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::dtype"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[10, 3, 1, "", "Device"], [11, 3, 1, "", "Dtype"], [12, 3, 1, "", "DtypeCategory"], [324, 3, 1, "", "Stream"], [13, 5, 1, "", "abs"], [14, 5, 1, "", "add"], [15, 5, 1, "", "addmm"], [16, 5, 1, "", "all"], [17, 5, 1, "", "allclose"], [18, 5, 1, "", "any"], [19, 5, 1, "", "arange"], [20, 5, 1, "", "arccos"], [21, 5, 1, "", "arccosh"], [22, 5, 1, "", "arcsin"], [23, 5, 1, "", "arcsinh"], [24, 5, 1, "", "arctan"], [25, 5, 1, "", "arctan2"], [26, 5, 1, "", "arctanh"], [27, 5, 1, "", "argmax"], [28, 5, 1, "", "argmin"], [29, 5, 1, "", "argpartition"], [30, 5, 1, "", "argsort"], [31, 3, 1, "", "array"], [83, 5, 1, "", "array_equal"], [84, 5, 1, "", "as_strided"], [85, 5, 1, "", "atleast_1d"], [86, 5, 1, "", "atleast_2d"], [87, 5, 1, "", "atleast_3d"], [88, 5, 1, "", "bitwise_and"], [89, 5, 1, "", "bitwise_or"], [90, 5, 1, "", "bitwise_xor"], [91, 5, 1, "", "block_masked_mm"], [92, 5, 1, "", "broadcast_to"], [93, 5, 1, "", "ceil"], [94, 5, 1, "", "clip"], [95, 5, 1, "", "compile"], [96, 5, 1, "", "concatenate"], [97, 5, 1, "", "conj"], [98, 5, 1, "", "conjugate"], [99, 5, 1, "", "conv1d"], [100, 5, 1, "", "conv2d"], [101, 5, 1, "", "conv3d"], [102, 5, 1, "", "conv_general"], [103, 5, 1, "", "conv_transpose1d"], [104, 5, 1, "", "conv_transpose2d"], [105, 5, 1, "", "conv_transpose3d"], [106, 5, 1, "", "convolve"], [107, 5, 1, "", "cos"], [108, 5, 1, "", "cosh"], [109, 5, 1, "", "cummax"], [110, 5, 1, "", "cummin"], [111, 5, 1, "", "cumprod"], [112, 5, 1, "", "cumsum"], [113, 3, 1, "", "custom_function"], [114, 5, 1, "", "default_device"], [115, 5, 1, "", "default_stream"], [116, 5, 1, "", "degrees"], [117, 5, 1, "", "dequantize"], [118, 5, 1, "", "diag"], [119, 5, 1, "", "diagonal"], [120, 5, 1, "", "disable_compile"], [129, 5, 1, "", "divide"], [130, 5, 1, "", "divmod"], [131, 5, 1, "", "einsum"], [132, 5, 1, "", "einsum_path"], [133, 5, 1, "", "enable_compile"], [134, 5, 1, "", "equal"], [135, 5, 1, "", "erf"], [136, 5, 1, "", "erfinv"], [137, 5, 1, "", "eval"], [138, 5, 1, "", "exp"], [139, 5, 1, "", "expand_dims"], [140, 5, 1, "", "expm1"], [141, 5, 1, "", "export_function"], [142, 5, 1, "", "export_to_dot"], [143, 5, 1, "", "exporter"], [144, 5, 1, "", "eye"], [162, 3, 1, "", "finfo"], [163, 5, 1, "", "flatten"], [164, 5, 1, "", "floor"], [165, 5, 1, "", "floor_divide"], [166, 5, 1, "", "full"], [167, 5, 1, "", "gather_mm"], [168, 5, 1, "", "gather_qmm"], [169, 5, 1, "", "grad"], [170, 5, 1, "", "greater"], [171, 5, 1, "", "greater_equal"], [172, 5, 1, "", "hadamard_transform"], [173, 5, 1, "", "identity"], [174, 5, 1, "", "imag"], [175, 5, 1, "", "import_function"], [176, 5, 1, "", "inner"], [177, 5, 1, "", "isclose"], [178, 5, 1, "", "isfinite"], [179, 5, 1, "", "isinf"], [180, 5, 1, "", "isnan"], [181, 5, 1, "", "isneginf"], [182, 5, 1, "", "isposinf"], [183, 5, 1, "", "issubdtype"], [184, 5, 1, "", "jvp"], [185, 5, 1, "", "kron"], [186, 5, 1, "", "left_shift"], [187, 5, 1, "", "less"], [188, 5, 1, "", "less_equal"], [199, 5, 1, "", "linspace"], [200, 5, 1, "", "load"], [201, 5, 1, "", "log"], [202, 5, 1, "", "log10"], [203, 5, 1, "", "log1p"], [204, 5, 1, "", "log2"], [205, 5, 1, "", "logaddexp"], [206, 5, 1, "", "logical_and"], [207, 5, 1, "", "logical_not"], [208, 5, 1, "", "logical_or"], [209, 5, 1, "", "logsumexp"], [210, 5, 1, "", "matmul"], [211, 5, 1, "", "max"], [212, 5, 1, "", "maximum"], [213, 5, 1, "", "mean"], [214, 5, 1, "", "meshgrid"], [227, 5, 1, "", "min"], [228, 5, 1, "", "minimum"], [229, 5, 1, "", "moveaxis"], [230, 5, 1, "", "multiply"], [231, 5, 1, "", "nan_to_num"], [232, 5, 1, "", "negative"], [233, 5, 1, "", "new_stream"], [234, 5, 1, "", "not_equal"], [235, 5, 1, "", "ones"], [236, 5, 1, "", "ones_like"], [237, 5, 1, "", "outer"], [238, 5, 1, "", "pad"], [239, 5, 1, "", "partition"], [240, 5, 1, "", "power"], [241, 5, 1, "", "prod"], [242, 5, 1, "", "put_along_axis"], [243, 5, 1, "", "quantize"], [244, 5, 1, "", "quantized_matmul"], [245, 5, 1, "", "radians"], [259, 5, 1, "", "real"], [260, 5, 1, "", "reciprocal"], [261, 5, 1, "", "remainder"], [262, 5, 1, "", "repeat"], [263, 5, 1, "", "reshape"], [264, 5, 1, "", "right_shift"], [265, 5, 1, "", "roll"], [266, 5, 1, "", "round"], [267, 5, 1, "", "rsqrt"], [268, 5, 1, "", "save"], [269, 5, 1, "", "save_gguf"], [270, 5, 1, "", "save_safetensors"], [271, 5, 1, "", "savez"], [272, 5, 1, "", "savez_compressed"], [273, 5, 1, "", "set_default_device"], [274, 5, 1, "", "set_default_stream"], [275, 5, 1, "", "sigmoid"], [276, 5, 1, "", "sign"], [277, 5, 1, "", "sin"], [278, 5, 1, "", "sinh"], [279, 5, 1, "", "slice"], [280, 5, 1, "", "slice_update"], [281, 5, 1, "", "softmax"], [282, 5, 1, "", "sort"], [283, 5, 1, "", "split"], [284, 5, 1, "", "sqrt"], [285, 5, 1, "", "square"], [286, 5, 1, "", "squeeze"], [287, 5, 1, "", "stack"], [288, 5, 1, "", "std"], [289, 5, 1, "", "stop_gradient"], [290, 5, 1, "", "stream"], [291, 5, 1, "", "subtract"], [292, 5, 1, "", "sum"], [293, 5, 1, "", "swapaxes"], [294, 5, 1, "", "synchronize"], [295, 5, 1, "", "take"], [296, 5, 1, "", "take_along_axis"], [297, 5, 1, "", "tan"], [298, 5, 1, "", "tanh"], [299, 5, 1, "", "tensordot"], [300, 5, 1, "", "tile"], [301, 5, 1, "", "topk"], [302, 5, 1, "", "trace"], [303, 5, 1, "", "transpose"], [304, 5, 1, "", "tri"], [305, 5, 1, "", "tril"], [306, 5, 1, "", "triu"], [307, 5, 1, "", "unflatten"], [308, 5, 1, "", "value_and_grad"], [309, 5, 1, "", "var"], [310, 5, 1, "", "view"], [311, 5, 1, "", "vjp"], [312, 5, 1, "", "vmap"], [313, 5, 1, "", "where"], [314, 5, 1, "", "zeros"], [315, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[10, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[11, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[12, 4, 1, "", "__init__"]], "mlx.core.Stream": [[324, 4, 1, "", "__init__"]], "mlx.core.array": [[32, 6, 1, "", "T"], [31, 4, 1, "", "__init__"], [33, 4, 1, "", "abs"], [34, 4, 1, "", "all"], [35, 4, 1, "", "any"], [36, 4, 1, "", "argmax"], [37, 4, 1, "", "argmin"], [38, 4, 1, "", "astype"], [39, 6, 1, "", "at"], [40, 4, 1, "", "conj"], [41, 4, 1, "", "cos"], [42, 4, 1, "", "cummax"], [43, 4, 1, "", "cummin"], [44, 4, 1, "", "cumprod"], [45, 4, 1, "", "cumsum"], [46, 4, 1, "", "diag"], [47, 4, 1, "", "diagonal"], [48, 6, 1, "", "dtype"], [49, 4, 1, "", "exp"], [50, 4, 1, "", "flatten"], [51, 4, 1, "", "item"], [52, 6, 1, "", "itemsize"], [53, 4, 1, "", "log"], [54, 4, 1, "", "log10"], [55, 4, 1, "", "log1p"], [56, 4, 1, "", "log2"], [57, 4, 1, "", "logsumexp"], [58, 4, 1, "", "max"], [59, 4, 1, "", "mean"], [60, 4, 1, "", "min"], [61, 4, 1, "", "moveaxis"], [62, 6, 1, "", "nbytes"], [63, 6, 1, "", "ndim"], [64, 4, 1, "", "prod"], [65, 4, 1, "", "reciprocal"], [66, 4, 1, "", "reshape"], [67, 4, 1, "", "round"], [68, 4, 1, "", "rsqrt"], [69, 6, 1, "", "shape"], [70, 4, 1, "", "sin"], [71, 6, 1, "", "size"], [72, 4, 1, "", "split"], [73, 4, 1, "", "sqrt"], [74, 4, 1, "", "square"], [75, 4, 1, "", "squeeze"], [76, 4, 1, "", "std"], [77, 4, 1, "", "sum"], [78, 4, 1, "", "swapaxes"], [79, 4, 1, "", "tolist"], [80, 4, 1, "", "transpose"], [81, 4, 1, "", "var"], [82, 4, 1, "", "view"]], "mlx.core.custom_function": [[113, 4, 1, "", "__init__"]], "mlx.core.distributed": [[121, 3, 1, "", "Group"], [122, 5, 1, "", "all_gather"], [123, 5, 1, "", "all_sum"], [124, 5, 1, "", "init"], [125, 5, 1, "", "is_available"], [126, 5, 1, "", "recv"], [127, 5, 1, "", "recv_like"], [128, 5, 1, "", "send"]], "mlx.core.distributed.Group": [[121, 4, 1, "", "__init__"]], "mlx.core.fast": [[145, 5, 1, "", "layer_norm"], [146, 5, 1, "", "metal_kernel"], [147, 5, 1, "", "rms_norm"], [148, 5, 1, "", "rope"], [149, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[150, 5, 1, "", "fft"], [151, 5, 1, "", "fft2"], [152, 5, 1, "", "fftn"], [153, 5, 1, "", "ifft"], [154, 5, 1, "", "ifft2"], [155, 5, 1, "", "ifftn"], [156, 5, 1, "", "irfft"], [157, 5, 1, "", "irfft2"], [158, 5, 1, "", "irfftn"], [159, 5, 1, "", "rfft"], [160, 5, 1, "", "rfft2"], [161, 5, 1, "", "rfftn"]], "mlx.core.finfo": [[162, 4, 1, "", "__init__"]], "mlx.core.linalg": [[189, 5, 1, "", "cholesky"], [190, 5, 1, "", "cholesky_inv"], [191, 5, 1, "", "cross"], [192, 5, 1, "", "eigh"], [193, 5, 1, "", "eigvalsh"], [194, 5, 1, "", "inv"], [195, 5, 1, "", "norm"], [196, 5, 1, "", "qr"], [197, 5, 1, "", "svd"], [198, 5, 1, "", "tri_inv"]], "mlx.core.metal": [[215, 5, 1, "", "clear_cache"], [216, 5, 1, "", "device_info"], [217, 5, 1, "", "get_active_memory"], [218, 5, 1, "", "get_cache_memory"], [219, 5, 1, "", "get_peak_memory"], [220, 5, 1, "", "is_available"], [221, 5, 1, "", "reset_peak_memory"], [222, 5, 1, "", "set_cache_limit"], [223, 5, 1, "", "set_memory_limit"], [224, 5, 1, "", "set_wired_limit"], [225, 5, 1, "", "start_capture"], [226, 5, 1, "", "stop_capture"]], "mlx.core.random": [[246, 5, 1, "", "bernoulli"], [247, 5, 1, "", "categorical"], [248, 5, 1, "", "gumbel"], [249, 5, 1, "", "key"], [250, 5, 1, "", "laplace"], [251, 5, 1, "", "multivariate_normal"], [252, 5, 1, "", "normal"], [253, 5, 1, "", "permutation"], [254, 5, 1, "", "randint"], [255, 5, 1, "", "seed"], [256, 5, 1, "", "split"], [257, 5, 1, "", "truncated_normal"], [258, 5, 1, "", "uniform"]], "mlx.nn": [[335, 3, 1, "", "ALiBi"], [336, 3, 1, "", "AvgPool1d"], [337, 3, 1, "", "AvgPool2d"], [338, 3, 1, "", "AvgPool3d"], [339, 3, 1, "", "BatchNorm"], [340, 3, 1, "", "CELU"], [341, 3, 1, "", "Conv1d"], [342, 3, 1, "", "Conv2d"], [343, 3, 1, "", "Conv3d"], [344, 3, 1, "", "ConvTranspose1d"], [345, 3, 1, "", "ConvTranspose2d"], [346, 3, 1, "", "ConvTranspose3d"], [347, 3, 1, "", "Dropout"], [348, 3, 1, "", "Dropout2d"], [349, 3, 1, "", "Dropout3d"], [350, 3, 1, "", "ELU"], [351, 3, 1, "", "Embedding"], [352, 3, 1, "", "GELU"], [353, 3, 1, "", "GLU"], [354, 3, 1, "", "GRU"], [355, 3, 1, "", "GroupNorm"], [356, 3, 1, "", "HardShrink"], [357, 3, 1, "", "HardTanh"], [358, 3, 1, "", "Hardswish"], [359, 3, 1, "", "InstanceNorm"], [360, 3, 1, "", "LSTM"], [361, 3, 1, "", "LayerNorm"], [362, 3, 1, "", "LeakyReLU"], [363, 3, 1, "", "Linear"], [364, 3, 1, "", "LogSigmoid"], [365, 3, 1, "", "LogSoftmax"], [366, 3, 1, "", "MaxPool1d"], [367, 3, 1, "", "MaxPool2d"], [368, 3, 1, "", "MaxPool3d"], [369, 3, 1, "", "Mish"], [464, 3, 1, "", "Module"], [390, 3, 1, "", "MultiHeadAttention"], [391, 3, 1, "", "PReLU"], [392, 3, 1, "", "QuantizedEmbedding"], [393, 3, 1, "", "QuantizedLinear"], [394, 3, 1, "", "RMSNorm"], [395, 3, 1, "", "RNN"], [396, 3, 1, "", "ReLU"], [397, 3, 1, "", "ReLU6"], [398, 3, 1, "", "RoPE"], [399, 3, 1, "", "SELU"], [400, 3, 1, "", "Sequential"], [401, 3, 1, "", "SiLU"], [402, 3, 1, "", "Sigmoid"], [403, 3, 1, "", "SinusoidalPositionalEncoding"], [404, 3, 1, "", "Softmax"], [405, 3, 1, "", "Softmin"], [406, 3, 1, "", "Softplus"], [407, 3, 1, "", "Softshrink"], [408, 3, 1, "", "Softsign"], [409, 3, 1, "", "Step"], [410, 3, 1, "", "Tanh"], [411, 3, 1, "", "Transformer"], [412, 3, 1, "", "Upsample"], [421, 3, 1, "", "celu"], [422, 3, 1, "", "elu"], [423, 3, 1, "", "gelu"], [424, 3, 1, "", "gelu_approx"], [425, 3, 1, "", "gelu_fast_approx"], [426, 3, 1, "", "glu"], [427, 3, 1, "", "hard_shrink"], [428, 3, 1, "", "hard_tanh"], [429, 3, 1, "", "hardswish"], [430, 3, 1, "", "leaky_relu"], [431, 3, 1, "", "log_sigmoid"], [432, 3, 1, "", "log_softmax"], [447, 3, 1, "", "mish"], [448, 3, 1, "", "prelu"], [316, 5, 1, "", "quantize"], [449, 3, 1, "", "relu"], [450, 3, 1, "", "relu6"], [451, 3, 1, "", "selu"], [452, 3, 1, "", "sigmoid"], [453, 3, 1, "", "silu"], [454, 3, 1, "", "softmax"], [455, 3, 1, "", "softmin"], [456, 3, 1, "", "softplus"], [457, 3, 1, "", "softshrink"], [458, 3, 1, "", "step"], [459, 3, 1, "", "tanh"], [317, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[370, 4, 1, "", "apply"], [371, 4, 1, "", "apply_to_modules"], [372, 4, 1, "", "children"], [373, 4, 1, "", "eval"], [374, 4, 1, "", "filter_and_map"], [375, 4, 1, "", "freeze"], [376, 4, 1, "", "leaf_modules"], [377, 4, 1, "", "load_weights"], [378, 4, 1, "", "modules"], [379, 4, 1, "", "named_modules"], [380, 4, 1, "", "parameters"], [381, 4, 1, "", "save_weights"], [382, 4, 1, "", "set_dtype"], [383, 6, 1, "", "state"], [384, 4, 1, "", "train"], [385, 4, 1, "", "trainable_parameters"], [386, 6, 1, "", "training"], [387, 4, 1, "", "unfreeze"], [388, 4, 1, "", "update"], [389, 4, 1, "", "update_modules"]], "mlx.nn.init": [[413, 5, 1, "", "constant"], [414, 5, 1, "", "glorot_normal"], [415, 5, 1, "", "glorot_uniform"], [416, 5, 1, "", "he_normal"], [417, 5, 1, "", "he_uniform"], [418, 5, 1, "", "identity"], [419, 5, 1, "", "normal"], [420, 5, 1, "", "uniform"]], "mlx.nn.losses": [[433, 3, 1, "", "binary_cross_entropy"], [434, 3, 1, "", "cosine_similarity_loss"], [435, 3, 1, "", "cross_entropy"], [436, 3, 1, "", "gaussian_nll_loss"], [437, 3, 1, "", "hinge_loss"], [438, 3, 1, "", "huber_loss"], [439, 3, 1, "", "kl_div_loss"], [440, 3, 1, "", "l1_loss"], [441, 3, 1, "", "log_cosh_loss"], [442, 3, 1, "", "margin_ranking_loss"], [443, 3, 1, "", "mse_loss"], [444, 3, 1, "", "nll_loss"], [445, 3, 1, "", "smooth_l1_loss"], [446, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[467, 3, 1, "", "AdaDelta"], [468, 3, 1, "", "Adafactor"], [469, 3, 1, "", "Adagrad"], [470, 3, 1, "", "Adam"], [471, 3, 1, "", "AdamW"], [472, 3, 1, "", "Adamax"], [473, 3, 1, "", "Lion"], [486, 3, 1, "", "Optimizer"], [478, 3, 1, "", "RMSprop"], [479, 3, 1, "", "SGD"], [318, 5, 1, "", "clip_grad_norm"], [480, 5, 1, "", "cosine_decay"], [481, 5, 1, "", "exponential_decay"], [482, 5, 1, "", "join_schedules"], [483, 5, 1, "", "linear_schedule"], [484, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[474, 4, 1, "", "apply_gradients"], [475, 4, 1, "", "init"], [476, 6, 1, "", "state"], [477, 4, 1, "", "update"]], "mlx.utils": [[319, 5, 1, "", "tree_flatten"], [320, 5, 1, "", "tree_map"], [321, 5, 1, "", "tree_map_with_path"], [322, 5, 1, "", "tree_reduce"], [323, 5, 1, "", "tree_unflatten"]]}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "terms": {"": [0, 1, 2, 5, 6, 7, 48, 52, 63, 95, 115, 117, 151, 152, 154, 155, 157, 158, 160, 161, 169, 190, 195, 197, 200, 213, 237, 243, 247, 266, 269, 270, 288, 290, 308, 309, 310, 312, 317, 334, 337, 338, 354, 360, 367, 368, 374, 375, 377, 381, 382, 383, 387, 395, 466, 475, 476, 488, 491, 493, 494, 497, 498, 499, 500], "0": [0, 1, 2, 4, 5, 6, 7, 9, 10, 15, 19, 39, 46, 47, 50, 67, 72, 76, 81, 84, 96, 99, 100, 101, 102, 103, 104, 105, 113, 118, 119, 144, 146, 149, 163, 167, 169, 175, 185, 192, 194, 195, 196, 198, 215, 222, 224, 231, 238, 246, 250, 252, 253, 258, 262, 266, 279, 280, 283, 287, 288, 302, 304, 305, 306, 307, 308, 309, 312, 318, 319, 321, 322, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 355, 356, 359, 361, 362, 366, 367, 368, 391, 396, 398, 403, 407, 409, 411, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 427, 428, 429, 430, 433, 435, 437, 438, 442, 445, 446, 448, 449, 450, 451, 457, 458, 461, 464, 467, 468, 470, 471, 472, 473, 475, 478, 479, 480, 481, 482, 483, 484, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499], "00005": 5, "0001": 403, "0005": 424, "001": 468, "00364": 5, "01": [5, 362, 430, 471], "0137595": 416, "015": 425, "0184009": 417, "02264": 415, "024": 494, "02765": 416, "0300242": 417, "044715": [352, 424], "0485873": 435, "05": [17, 177, 339, 355, 359, 361, 394], "0507": 451, "05202": 6, "06": [436, 446, 467], "0638": 442, "06450": 361, "0645099": 419, "06561": 481, "06675": 473, "07467": 394, "08": [17, 177, 434, 469, 470, 471, 472, 478], "08022": 359, "081": 484, "08415": 425, "08494": 355, "08619": 417, "08681": [369, 447], "09864": 6, "0999938": 482, "0999961": 480, "0f": 0, "1": [0, 1, 2, 3, 4, 6, 7, 15, 19, 29, 30, 39, 47, 50, 99, 100, 101, 102, 103, 104, 105, 113, 118, 119, 140, 141, 142, 143, 146, 149, 150, 151, 153, 154, 156, 157, 158, 159, 160, 161, 163, 172, 176, 183, 185, 190, 191, 192, 193, 195, 196, 210, 214, 223, 237, 239, 243, 247, 250, 251, 252, 258, 275, 279, 280, 282, 295, 301, 302, 307, 308, 318, 321, 322, 326, 334, 336, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 359, 360, 361, 363, 366, 391, 394, 395, 398, 402, 403, 409, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 444, 445, 446, 451, 452, 454, 455, 456, 458, 461, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 478, 479, 480, 481, 482, 483, 484, 491, 492, 493, 494, 495, 497, 498, 499, 500], "10": [0, 3, 6, 7, 185, 202, 266, 271, 320, 334, 377, 461, 482, 484, 491, 492, 495], "100": [2, 5, 6, 433, 483, 491, 494, 496, 500], "1000": [480, 491], "10000": 398, "101": 483, "1024": [1, 6], "105361": 433, "109": 2, "10_000": 5, "10x": 473, "11": 195, "114": 2, "12": [6, 172, 185, 482], "1212": 467, "12451": 415, "128": [271, 334], "13": 9, "14": [9, 185], "15": [1, 9, 185, 195, 224, 322, 491], "150594": 414, "15268": 416, "16": [1, 146, 326, 336, 338, 359, 366, 368, 370, 464], "1606": 425, "1607": [359, 361], "16384": 172, "16506": 417, "17": [4, 9], "177208": 416, "18": 185, "1803": 355, "1908": [369, 447], "1910": 394, "191107": 414, "1985": 195, "1_000": 5, "1d": [0, 99, 103, 106, 269, 296], "1e": [0, 5, 7, 17, 177, 339, 355, 359, 361, 362, 394, 434, 436, 446, 466, 467, 468, 469, 470, 471, 472, 475, 478, 480, 481, 482, 483, 484], "1e3": 491, "1st": 243, "2": [0, 1, 2, 4, 5, 6, 7, 39, 100, 104, 113, 118, 119, 135, 141, 142, 143, 151, 154, 156, 157, 158, 159, 160, 161, 163, 172, 183, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 204, 210, 243, 251, 256, 279, 280, 299, 302, 304, 305, 306, 307, 318, 322, 326, 334, 336, 337, 338, 342, 345, 352, 362, 366, 367, 368, 394, 403, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 435, 436, 438, 445, 446, 461, 464, 466, 467, 469, 470, 471, 475, 478, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], "20": [172, 185, 195], "200": [6, 482, 494], "2002": 6, "2011": 469, "2012": [467, 478], "2015": [348, 470, 472], "2019": [6, 471], "2020": 6, "2021": 6, "20397": 433, "20_000": 6, "21": [6, 185, 484], "2104": 6, "223144": 433, "223404": 415, "225": 195, "225763": 442, "2302": 473, "23607": [195, 196], "24": 185, "24264": 195, "247": 6, "25": [9, 391, 412], "25211": 416, "256": [1, 2, 7, 146], "256995": 442, "27": 4, "28": [172, 185], "2d": [0, 100, 104, 119, 243, 339, 348], "2nd": 243, "2x": 497, "3": [0, 1, 2, 4, 6, 9, 101, 105, 113, 141, 143, 163, 183, 185, 191, 192, 193, 195, 196, 279, 280, 307, 318, 322, 338, 343, 346, 352, 368, 412, 415, 417, 424, 429, 468, 473, 488, 491, 493, 495, 497, 498], "30": 468, "3118": 497, "32": [1, 6, 7, 91, 243, 244, 326, 337, 338, 367, 368, 394, 491], "330": 6, "33333": 412, "348587": 435, "363207": 414, "36788": 491, "379159": 415, "380709": 419, "39": 6, "3d": [0, 2, 101, 105, 339, 349, 412], "3f": [2, 7, 491], "3x": 2, "4": [0, 1, 2, 6, 117, 146, 149, 163, 168, 185, 195, 243, 244, 271, 279, 307, 316, 322, 326, 336, 337, 338, 339, 359, 366, 367, 368, 392, 393, 411, 412, 414, 415, 416, 433, 491, 492, 493, 495, 498, 500], "4096": [491, 494, 500], "40x": 1, "41421": 195, "417497": 420, "42": 323, "437": 6, "44": 6, "447214": 196, "458835": 416, "475": 6, "48095": 414, "4d": [1, 412], "4m": 1, "5": [0, 1, 2, 5, 6, 9, 185, 195, 223, 246, 279, 322, 336, 339, 347, 348, 349, 352, 356, 359, 366, 407, 412, 413, 416, 417, 424, 427, 445, 457, 461, 466, 478, 480, 481, 491, 494, 495], "50": [0, 199], "500": [6, 500], "5000": 2, "510826": 433, "512": [2, 3, 6, 411, 500], "534422": 419, "539245": 433, "53947": 414, "55": 1, "5701": 467, "573409": 442, "57771": 196, "579": 6, "5f": 5, "6": [1, 2, 6, 113, 185, 195, 271, 279, 397, 411, 415, 424, 425, 429, 436, 446, 450, 478, 491, 495, 498], "61278": 414, "617261": 420, "628": 6, "633": 6, "639": 494, "64": [0, 1, 91, 117, 168, 243, 244, 316, 326, 392, 393], "64331": 417, "666329": 417, "66667": 412, "67326": 451, "676": 1, "690": 6, "6967": 416, "7": [2, 6, 185, 195, 243, 495], "702": [352, 425], "707107": 192, "71828": 491, "74166": 195, "74597": 195, "75": 412, "75596": 442, "75787": 416, "765166": 442, "773433": 442, "776856": 415, "793615": 417, "79854": 417, "7b": 6, "7m": 1, "8": [0, 1, 2, 6, 9, 195, 243, 326, 337, 338, 359, 367, 368, 411, 434, 467, 468, 469, 470, 471, 472, 478, 491, 495, 498, 500], "8192": [6, 172], "84804": 195, "863726": 420, "883935": 420, "890597": 415, "894427": 196, "89613": 414, "8gb": 6, "8x": 1, "9": [4, 9, 195, 435, 467, 470, 471, 472, 473, 475, 481, 484, 497], "90041": 415, "912766": 415, "916291": 433, "95": 7, "982273": 419, "99": [473, 478], "995016": 414, "999": [470, 471, 472], "A": [0, 2, 6, 8, 9, 10, 69, 83, 95, 141, 142, 145, 146, 147, 149, 169, 183, 184, 190, 192, 193, 195, 196, 197, 200, 209, 210, 211, 216, 227, 243, 246, 247, 248, 250, 251, 252, 253, 254, 257, 258, 283, 287, 290, 308, 311, 312, 316, 317, 318, 319, 320, 321, 322, 323, 324, 334, 339, 348, 354, 355, 359, 361, 374, 378, 379, 382, 388, 389, 394, 400, 403, 411, 414, 415, 417, 425, 446, 447, 464, 466, 470, 472, 474, 475, 477, 482, 491, 492, 493, 494, 496, 497], "AS": 167, "And": [4, 6, 412], "As": [7, 39, 295, 334], "At": [94, 307], "But": [493, 500], "By": [6, 316, 382, 433, 494, 497], "For": [0, 1, 2, 4, 6, 9, 39, 113, 149, 167, 183, 195, 243, 323, 334, 339, 348, 352, 370, 375, 384, 387, 393, 398, 403, 412, 414, 415, 416, 417, 433, 461, 466, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], "If": [0, 1, 2, 4, 6, 9, 16, 17, 18, 19, 27, 28, 29, 30, 79, 83, 84, 94, 96, 106, 109, 110, 111, 112, 118, 119, 122, 123, 124, 126, 127, 128, 137, 145, 148, 149, 159, 160, 161, 165, 166, 169, 177, 189, 190, 191, 195, 200, 209, 210, 211, 213, 214, 222, 223, 227, 231, 235, 238, 239, 241, 242, 247, 251, 253, 262, 265, 281, 282, 283, 288, 292, 294, 295, 296, 299, 301, 302, 308, 309, 312, 314, 316, 320, 322, 339, 341, 342, 343, 344, 345, 346, 355, 361, 363, 375, 377, 387, 393, 395, 398, 400, 403, 412, 433, 435, 446, 468, 470, 471, 491, 492, 493, 494, 496, 499, 500, 501], "In": [0, 1, 2, 6, 7, 39, 149, 210, 243, 320, 334, 348, 355, 464, 467, 469, 470, 472, 473, 474, 490, 491, 492, 493, 494, 496, 499, 500], "It": [2, 6, 9, 127, 169, 274, 308, 318, 322, 334, 389, 393, 474, 486, 497, 499], "Its": [334, 493], "No": [2, 6, 192, 193], "Not": [95, 234, 491], "ON": [3, 4, 9], "Of": 494, "On": [1, 491, 494, 496], "One": [150, 153, 159, 238, 267, 491, 493, 494], "THE": 9, "That": 6, "The": [0, 1, 2, 3, 4, 6, 7, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 48, 52, 62, 63, 69, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 191, 192, 193, 195, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 218, 219, 222, 223, 224, 225, 227, 228, 229, 230, 232, 234, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 269, 270, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 326, 328, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 351, 353, 354, 355, 359, 360, 361, 363, 366, 367, 368, 370, 371, 375, 377, 381, 382, 383, 384, 387, 388, 389, 390, 392, 393, 394, 395, 398, 400, 403, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 426, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 458, 461, 464, 466, 467, 468, 469, 470, 471, 472, 473, 476, 478, 479, 480, 483, 486, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501], "Then": [5, 9], "There": [1, 2, 334, 412, 491], "These": [1, 2, 95, 242, 296, 435, 500], "To": [0, 2, 3, 5, 6, 7, 9, 222, 334, 461, 466, 491, 492, 493, 494, 498], "With": [2, 493], "_": [1, 3, 5, 6, 321, 334, 480, 481, 482, 483, 484, 488, 491, 496, 500], "__call__": [1, 6, 7, 334, 464, 493], "__init__": [2, 6, 7, 10, 11, 12, 31, 113, 121, 162, 324, 334, 464], "__main__": [2, 6], "__name__": [2, 6], "_a": 2, "_ext": 2, "_f": 195, "_in": [414, 415], "_out": [414, 415], "_p": 446, "_val": 428, "a1": 167, "a2": 167, "a_": 195, "a_max": [0, 94], "a_min": [0, 94], "a_ndim": 1, "a_shap": 1, "a_strid": 1, "a_view": 497, "ab": [0, 17, 177, 195, 308, 355, 359, 361, 369, 394, 425, 447, 491, 493], "abil": 492, "abl": [2, 4, 243], "abort": 113, "about": [1, 2, 6, 7, 132, 216, 496, 500], "abov": [1, 2, 6, 243, 305, 334, 412, 492, 493, 494, 495, 496, 500], "absolut": [0, 13, 17, 177, 424, 425, 445], "acc": 322, "acceler": [2, 4, 339], "access": [0, 6, 51, 334, 464, 475, 492, 496, 500], "accord": [0, 248, 313, 316, 390, 414, 415, 416, 417], "accordingli": 2, "accumul": [322, 394], "accuraci": 7, "accustom": 6, "achiev": [334, 492], "across": [1, 2, 9, 355, 492], "act": [2, 441], "action": 334, "activ": [2, 9, 217, 348, 409, 411, 427, 447, 457, 458, 460, 491], "actual": [6, 19, 377, 464, 496], "ad": [0, 1, 2, 5, 9, 145, 359, 464, 467, 468, 469, 470, 471, 472, 478, 492, 496, 499], "adadelta": 466, "adafactor": 466, "adagrad": 466, "adam": [466, 472, 473, 482, 483], "adamax": 466, "adamw": [466, 473], "adapt": [467, 468, 469, 492], "add": [0, 1, 2, 3, 4, 6, 15, 39, 139, 205, 238, 243, 341, 342, 343, 344, 345, 346, 493, 494, 500], "add_argu": 6, "add_depend": 2, "add_execut": 4, "add_fun": 493, "add_librari": 2, "addit": [0, 2, 4, 6, 9, 14, 15, 141, 145, 147, 149, 200, 339, 355, 361, 390, 394, 464, 494], "addmm": 0, "address": 2, "adjac": 348, "advanc": [6, 491], "advantag": 500, "advis": 497, "affin": [339, 355, 359, 361, 363, 393], "after": [2, 6, 7, 29, 163, 165, 168, 215, 239, 243, 339, 355, 361, 370, 371, 375, 377, 384, 387, 388, 389, 390, 411, 445, 491, 500], "after_1": 238, "after_2": 238, "after_i": 238, "after_n": 238, "afternoon": 6, "again": [6, 9, 334, 491], "against": [0, 4], "aggreg": 390, "ago": 6, "ai": 113, "ainv": [194, 198], "albeit": 500, "algebra": 8, "algorithm": [412, 473], "alia": [97, 98, 352], "alibi": 334, "align": [190, 243, 354, 360], "align_corn": 412, "all": [0, 1, 2, 3, 7, 9, 17, 29, 39, 85, 86, 87, 95, 100, 101, 102, 104, 105, 113, 122, 123, 124, 142, 144, 152, 155, 158, 161, 167, 168, 197, 210, 238, 239, 265, 286, 316, 334, 370, 371, 375, 378, 379, 380, 385, 387, 390, 403, 411, 412, 461, 464, 486, 488, 491, 495, 496, 498, 501], "all_avg": 492, "all_reduce_grad": 492, "all_sum": 492, "allclos": [0, 1, 146], "alloc": [2, 218, 222, 223, 464], "allow": [0, 1, 2, 141, 143, 183, 318, 334, 389, 464, 486, 492, 495, 498], "allow_col_major": 0, "almost": 6, "alon": [2, 497], "along": [0, 2, 27, 28, 95, 96, 109, 110, 111, 112, 122, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 167, 168, 172, 191, 195, 242, 253, 262, 265, 281, 283, 287, 295, 296, 299, 300, 301, 302, 310, 334, 353, 395, 426], "alpha": [0, 2, 15, 243, 340, 350, 421, 422, 446, 448, 451, 471, 478], "alpha_": 2, "alreadi": [2, 3, 6, 492], "also": [0, 1, 2, 4, 6, 7, 8, 9, 12, 14, 88, 89, 90, 120, 129, 130, 134, 152, 155, 158, 161, 170, 171, 186, 187, 188, 205, 212, 228, 230, 234, 240, 243, 261, 264, 291, 316, 317, 328, 334, 374, 388, 390, 392, 393, 401, 423, 451, 453, 460, 466, 491, 492, 493, 494, 495, 496, 497, 498, 501], "altern": 488, "alwai": [1, 84, 175, 217, 319, 493, 494], "am": 6, "among": 2, "amount": [6, 219, 336, 366, 493], "amus": 6, "an": [0, 1, 2, 3, 4, 6, 7, 9, 11, 16, 18, 31, 85, 86, 87, 92, 99, 100, 101, 102, 103, 104, 105, 121, 126, 127, 128, 137, 141, 143, 144, 145, 149, 163, 166, 173, 175, 178, 189, 195, 200, 223, 224, 229, 235, 236, 238, 241, 242, 243, 244, 253, 262, 263, 265, 266, 283, 286, 293, 295, 296, 299, 300, 304, 307, 312, 314, 315, 319, 320, 321, 322, 334, 347, 352, 355, 360, 361, 363, 370, 390, 391, 393, 395, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 424, 448, 461, 466, 467, 477, 481, 486, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501], "anaconda": 492, "anchor": 446, "angl": [116, 245, 362], "angular": [148, 398], "ani": [0, 1, 2, 6, 8, 19, 95, 113, 319, 320, 321, 322, 323, 334, 352, 370, 371, 374, 383, 393, 411, 412, 461, 483, 490, 491, 494, 496, 498, 499, 500], "anonym": 491, "anoth": [0, 94, 183, 210, 291, 313, 326, 334, 370, 491, 493, 494, 495, 500], "anwywher": 9, "anyhow": 6, "anymor": 6, "anyth": [6, 308, 496], "anytim": 496, "api": [1, 2, 141, 143, 175, 352, 492, 493, 494], "app": 9, "append": [6, 210, 491, 496], "appl": [2, 6, 8, 9, 500], "appli": [0, 39, 148, 149, 167, 197, 320, 321, 322, 334, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 348, 349, 350, 352, 353, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 384, 391, 393, 394, 395, 396, 397, 399, 401, 402, 404, 405, 406, 407, 408, 409, 410, 412, 421, 422, 423, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 461, 470, 471, 474, 477, 483, 486, 491, 492], "applic": [3, 9], "apply_fn": 371, "apply_gradi": 466, "apply_to_modul": [334, 375], "approach": [441, 494], "appropri": [2, 491], "approx": 352, "approxim": [17, 352, 423, 424, 425], "ar": [0, 1, 2, 5, 6, 7, 8, 9, 17, 19, 83, 91, 92, 94, 95, 102, 106, 113, 119, 126, 127, 137, 144, 146, 149, 151, 152, 154, 155, 157, 158, 160, 161, 163, 168, 169, 177, 178, 179, 180, 181, 182, 183, 184, 192, 193, 195, 196, 200, 210, 223, 237, 238, 239, 243, 244, 246, 247, 248, 253, 254, 257, 258, 265, 271, 272, 286, 287, 295, 308, 311, 312, 316, 319, 320, 326, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 355, 359, 361, 363, 377, 390, 393, 412, 433, 435, 436, 460, 464, 466, 473, 475, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], "arang": [0, 1, 195, 253, 326, 412, 495, 497], "arbitrari": [319, 464], "arbitrarili": [1, 95, 334, 490, 494, 498], "arc": 0, "arcco": 0, "arccosh": 0, "architectur": [6, 9, 216, 334, 389, 500], "archiv": 499, "arcsin": 0, "arcsinh": 0, "arctan": 0, "arctan2": 0, "arctanh": 0, "arg": [2, 6, 11, 19, 121, 137, 141, 142, 143, 162, 175, 271, 272, 324], "arg1": 183, "arg2": 183, "argmax": [0, 7], "argmin": 0, "argnam": [169, 308], "argnum": [2, 113, 169, 308, 494], "argpars": 6, "argpartit": 0, "argsort": 0, "argument": [1, 32, 66, 80, 95, 137, 169, 308, 320, 321, 322, 334, 412, 488, 492, 493, 494, 499, 500, 501], "argumentpars": 6, "ari": [85, 86, 87], "aris": 497, "arm": 9, "arm64": 9, "around": 6, "arr": [0, 268, 495], "arr_0": 499, "arrai": [0, 1, 2, 4, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 122, 123, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 334, 339, 360, 370, 377, 380, 385, 391, 412, 413, 414, 415, 416, 417, 418, 419, 420, 426, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 458, 461, 464, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484, 491, 492, 493, 494, 496, 497, 498, 500], "array_equ": [0, 17, 177], "arrayfir": 8, "arxiv": [6, 355, 359, 361, 369, 394, 425, 447, 467, 473], "as_strid": 0, "ascend": [192, 193], "ask": [6, 492], "assert": [1, 2, 146], "assign": [0, 2, 39, 464], "associ": [2, 271, 272, 496], "assum": [0, 2, 6, 91, 191, 192, 193, 196, 320, 334, 355], "astyp": [0, 1, 2, 6, 146, 370, 497], "atleast": 0, "atleast_1d": 0, "atleast_2d": 0, "atleast_3d": 0, "atol": [0, 17, 177], "atom": [1, 146], "atomic_fetch_add_explicit": 1, "atomic_output": [1, 146], "attach": 2, "attempt": 95, "attend": 390, "attent": [149, 375, 390, 403, 411], "attention_norm": 6, "attribut": [1, 10, 11, 12, 31, 162, 324, 383, 464, 486], "audio": 412, "auto": [0, 2, 4, 9, 493], "autom": 494, "automat": [1, 2, 8, 146, 200, 492, 498, 499, 500], "autoregress": 6, "avail": [2, 5, 6, 7, 9, 11, 125, 220, 328, 500], "averag": [336, 337, 338, 467, 468, 470, 471, 472, 492], "avgpool1d": 334, "avgpool2d": 334, "avgpool3d": 334, "avoid": [1, 2, 382, 491], "awai": [2, 6], "awar": [491, 496], "ax": [0, 2, 16, 18, 27, 28, 80, 113, 139, 151, 152, 154, 155, 157, 158, 160, 161, 163, 176, 195, 209, 211, 213, 227, 238, 241, 265, 279, 280, 281, 286, 288, 292, 293, 299, 303, 309, 494], "axes_a": 0, "axes_b": 0, "axi": [0, 2, 6, 7, 16, 18, 27, 28, 29, 30, 34, 35, 36, 37, 42, 43, 44, 45, 57, 58, 59, 60, 64, 72, 75, 76, 77, 81, 96, 109, 110, 111, 112, 119, 122, 139, 145, 147, 150, 153, 156, 157, 158, 159, 160, 161, 163, 172, 191, 195, 209, 211, 213, 227, 229, 238, 239, 241, 242, 247, 253, 262, 265, 281, 282, 283, 286, 287, 288, 292, 293, 295, 296, 300, 301, 302, 303, 307, 309, 310, 312, 336, 337, 338, 353, 366, 367, 368, 395, 426, 432, 434, 435, 439, 444, 446, 454, 455, 495], "axis1": [0, 47, 78, 119, 293, 302], "axis2": [0, 47, 78, 119, 293, 302], "axpbi": 2, "axpby_": 2, "axpby_gener": 2, "axpby_general_bfloat16": 2, "axpby_general_complex64": 2, "axpby_general_float16": 2, "axpby_general_float32": 2, "axpby_impl": 2, "axpby_impl_acceler": 2, "b": [0, 1, 2, 3, 4, 6, 14, 15, 17, 25, 83, 88, 89, 90, 91, 129, 130, 134, 146, 149, 165, 167, 170, 171, 175, 176, 177, 185, 186, 187, 188, 191, 195, 205, 206, 208, 210, 212, 228, 230, 234, 237, 240, 243, 250, 261, 264, 291, 299, 308, 321, 322, 353, 363, 395, 412, 426, 494, 495, 496, 497, 498, 499, 500], "b1": 167, "b2": 167, "b_": [354, 360], "b_stride": 1, "ba": [470, 472], "back": [6, 113, 220, 497], "backend": [1, 9, 124, 125], "backward": [1, 491, 494], "bad": 496, "balanc": 441, "baltimor": 195, "bandwidth": [491, 492], "bar": 492, "base": [0, 2, 4, 148, 195, 202, 204, 240, 398, 411, 464, 466, 472, 486, 488, 491, 495], "base_idx": 1, "basi": 486, "basic": [5, 266, 494], "batch": [6, 15, 91, 149, 167, 168, 210, 251, 339, 341, 342, 343, 344, 345, 346, 348, 349, 354, 360, 390, 395, 412, 496], "batch_idx": 1, "batch_iter": [7, 466], "batch_siz": [7, 466], "batchnorm": 334, "becaus": [6, 217, 334, 491, 493, 496], "been": [0, 2, 6, 218, 496], "befor": [1, 2, 6, 9, 29, 146, 239, 374, 411, 475, 492, 495, 496], "before_1": 238, "before_2": 238, "before_i": 238, "before_n": 238, "beforehand": 237, "beggin": 265, "begin": [84, 190, 219, 243, 354, 360, 409, 427, 438, 445, 451, 457, 458], "behav": 113, "behavior": [251, 441, 495, 496], "behaviour": [113, 189, 190], "behind": 494, "being": [289, 334], "bell": 2, "below": [2, 9, 195, 304, 306, 326, 412, 496], "bench": 2, "benchmark": [2, 491], "benefici": [348, 349, 496], "best": 492, "beta": [0, 2, 15, 117, 243, 339, 355, 359, 361, 445, 466, 470, 471, 472, 473], "beta_": 2, "beta_1": [468, 470, 471, 472, 473], "beta_2": [470, 471, 472, 473], "better": [494, 500], "between": [0, 2, 8, 94, 163, 411, 434, 437, 438, 441, 482, 492, 496, 497, 500], "beyond": [265, 480, 483], "bfloat16": [2, 12, 172, 326, 497], "bfloat16_t": 2, "bia": [6, 117, 145, 168, 243, 244, 320, 334, 341, 342, 343, 344, 345, 346, 354, 360, 361, 363, 375, 377, 387, 390, 393, 395, 470, 471, 472, 475, 494], "bias": [0, 117, 168, 243, 244, 354, 360, 375, 387, 390], "bias_correct": [470, 471], "bicub": 412, "big": [1, 491], "bigger": [6, 468], "bilinear": [1, 412], "binari": [200, 268, 269, 270, 271, 272, 310, 409, 433, 458, 491], "binary_cross_entropi": [334, 491], "bit": [0, 117, 168, 186, 243, 244, 264, 316, 326, 370, 392, 393, 394], "bitwis": [0, 88, 89, 90, 186, 264], "bitwise_and": 0, "bitwise_or": 0, "bitwise_xor": 0, "block": [0, 2, 6, 91, 411], "block_masked_mm": 0, "block_siz": [0, 91], "bn": 339, "bodi": [1, 146], "bool": [0, 1, 2, 16, 17, 18, 27, 28, 34, 35, 36, 37, 42, 43, 44, 45, 57, 58, 59, 60, 64, 76, 77, 79, 81, 83, 95, 102, 109, 110, 111, 112, 124, 125, 141, 143, 146, 148, 168, 177, 183, 189, 190, 195, 198, 200, 209, 211, 213, 214, 220, 223, 227, 241, 244, 288, 292, 309, 316, 339, 341, 342, 343, 344, 345, 346, 354, 355, 359, 360, 361, 363, 370, 374, 375, 377, 382, 384, 387, 390, 393, 395, 398, 403, 411, 412, 433, 436, 468, 470, 471, 479], "bool_": [12, 326], "boolean": [0, 17, 83, 149, 177, 178, 179, 180, 181, 182, 183, 206, 207, 208, 326, 386, 495], "both": [1, 2, 14, 88, 89, 90, 129, 130, 134, 170, 171, 183, 186, 187, 188, 195, 205, 212, 228, 230, 234, 240, 247, 261, 264, 291, 316, 336, 337, 338, 359, 360, 366, 367, 368, 466, 491, 492, 493, 494, 498, 500], "bottom": 412, "bound": [0, 254, 257, 258, 352, 420, 491, 495, 500], "boundari": 482, "bracket": 6, "brain": 326, "break": 497, "bregler": 348, "broadcast": [0, 2, 14, 17, 88, 89, 90, 92, 94, 129, 130, 134, 149, 166, 170, 171, 177, 186, 187, 188, 205, 210, 212, 228, 230, 234, 240, 242, 246, 247, 251, 257, 258, 261, 264, 291, 296, 313, 390], "broadcast_arrai": [0, 2], "broadcast_to": 0, "broadcasted_input": 2, "brought": 8, "btl_tcp_link": 492, "buffer": [1, 2, 217, 497], "bui": 6, "build": [3, 4, 6, 8, 416, 464, 491, 493], "build_ext": [2, 9], "build_shared_lib": [2, 9], "built": [1, 2, 4, 9, 496], "bundl": 6, "byte": [52, 62, 217, 218, 219, 222, 223, 224, 326], "c": [0, 1, 2, 6, 15, 195, 339, 341, 342, 343, 344, 345, 346, 348, 349, 359, 360, 497, 498, 500], "c_": [360, 473], "c_in": [99, 100, 101, 102, 103, 104, 105], "c_out": [99, 100, 101, 102, 103, 104, 105], "c_pad": 1, "c_t": [360, 473], "cach": [6, 9, 215, 217, 218, 222, 491], "calcul": [195, 433, 436, 442, 468], "call": [2, 3, 6, 7, 32, 127, 165, 175, 215, 219, 334, 351, 375, 387, 392, 400, 464, 466, 475, 491, 492, 493, 494, 496], "callabl": [95, 113, 141, 143, 146, 169, 175, 184, 308, 311, 312, 316, 317, 319, 320, 321, 322, 370, 371, 374, 382, 395, 400, 411, 413, 414, 415, 416, 417, 418, 419, 420, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 482, 483, 484], "can": [1, 2, 3, 4, 6, 8, 9, 14, 19, 66, 80, 84, 88, 89, 90, 95, 119, 120, 121, 129, 130, 134, 137, 141, 142, 149, 170, 171, 175, 186, 187, 188, 195, 205, 212, 224, 228, 230, 234, 240, 246, 247, 254, 257, 258, 261, 264, 269, 291, 302, 307, 308, 322, 334, 337, 338, 351, 352, 367, 368, 374, 387, 392, 400, 412, 435, 461, 464, 466, 474, 475, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501], "cannot": [6, 94, 495, 497], "captur": [2, 3, 95, 113, 225, 226, 334, 491], "care": [6, 493, 496], "carefulli": [491, 493], "carri": 2, "cartesian": 214, "case": [2, 6, 122, 123, 124, 126, 127, 128, 152, 155, 156, 158, 159, 160, 161, 163, 189, 190, 191, 192, 193, 194, 196, 197, 198, 210, 263, 286, 307, 337, 338, 348, 367, 368, 409, 427, 445, 451, 457, 458, 474, 475, 491, 493, 494, 498, 499, 500, 501], "cast": [2, 38, 159, 160, 161, 200, 370, 382, 497], "caster": 2, "categor": 6, "categori": [12, 183, 326], "catlas_saxpbi": 2, "caus": [334, 491, 496], "causal": 6, "caution": 84, "cd": [3, 9], "cdf": [248, 352, 423], "cdot": [425, 434, 437, 453], "ceil": 0, "ceildiv": 1, "cell": 360, "celu": 334, "certain": [2, 384, 491], "chang": [84, 95, 141, 143, 175, 274, 310, 388, 393, 412, 438, 445, 491, 497], "channel": [1, 99, 100, 101, 102, 103, 104, 105, 339, 341, 342, 343, 344, 345, 346, 348, 349], "channel_idx": 1, "charact": 319, "check": [0, 2, 9, 83, 125, 183, 192, 193, 220, 377, 493, 494, 495], "checklist": 492, "checkout": [3, 491], "checkpoint": [411, 466], "chen": 473, "child": 389, "children": 334, "chip": 9, "choleski": 190, "choos": [6, 148, 398], "chosen": 132, "clamp": 163, "clang": 9, "clariti": 494, "class": [2, 6, 7, 10, 11, 12, 31, 113, 121, 162, 324, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 467, 468, 469, 470, 471, 472, 473, 478, 479, 486], "class_pred": 316, "classif": [416, 417], "classifi": 7, "classmethod": [392, 393], "clear": 215, "click": 9, "clip": [0, 318, 433, 468], "clip_threshold": 468, "clipped_grad": 318, "clone": 9, "close": [5, 8, 9, 17, 177], "closer": 320, "cmake": [3, 4, 9], "cmake_arg": 3, "cmake_build_parallel_level": 9, "cmake_build_typ": 9, "cmake_current_list_dir": 2, "cmake_cxx_standard": 4, "cmake_cxx_standard_requir": 4, "cmake_host_system_processor": 9, "cmake_library_output_directori": 2, "cmake_minimum_requir": 4, "cmakebuild": 2, "cmakeextens": 2, "cmakelist": [2, 4], "cmdclass": 2, "co": [0, 2, 113, 403, 494], "code": [1, 146, 491, 492, 493, 496], "coeffici": [2, 467, 468, 470, 471, 472, 473], "col": 304, "col_contigu": 2, "cold": 9, "collect": [2, 320, 321, 490], "column": [2, 144, 173, 192, 243], "com": [9, 492], "combin": [6, 197, 322], "come": [2, 6, 492, 494], "command": [2, 3, 4, 9, 492], "command_buff": 2, "common": [2, 466, 491, 496], "commonli": [7, 388, 461, 491], "commun": [8, 121, 124, 125], "compar": [2, 83, 491], "comparison": [17, 134, 170, 171, 187, 188, 234], "compat": [6, 141, 143, 149, 175, 247, 251, 352, 499], "compil": [0, 3, 4, 8, 9, 120, 133, 146, 492, 493, 494, 496], "compiled_fun": [491, 493], "compiled_grad_fn": 491, "complet": [5, 6, 9, 223, 388, 389, 493, 494, 500], "complex": [2, 97, 98, 157, 158, 159, 160, 161, 174, 192, 193, 259, 319, 326, 334, 389, 491, 493, 494], "complex64": [2, 12, 326], "complex64_t": 2, "complexflo": 12, "compon": [2, 4, 6], "compos": [8, 334, 491, 494, 498], "composit": 498, "compress": 272, "compromis": 6, "comput": [0, 1, 2, 5, 6, 7, 8, 9, 109, 110, 111, 112, 113, 117, 132, 140, 148, 169, 184, 185, 189, 190, 191, 192, 193, 194, 195, 198, 205, 213, 237, 243, 261, 281, 288, 289, 299, 308, 309, 311, 317, 334, 339, 354, 355, 359, 360, 361, 375, 388, 393, 394, 398, 411, 414, 415, 416, 417, 424, 425, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 466, 467, 468, 470, 471, 472, 473, 477, 491, 492, 493, 494, 498, 500], "computation": 496, "compute_encod": 2, "concaten": [0, 6, 122], "concept": 464, "concis": 6, "concret": [2, 354, 360, 363, 395, 496, 500], "conda": [9, 492], "condit": [0, 2, 313, 491, 500], "config": [2, 4, 492], "configu": 466, "configur": [117, 492], "confirm": 492, "confus": 7, "conj": 98, "conjug": [0, 97], "connect": 492, "consecut": [148, 243, 398], "consequ": 6, "consid": [6, 17, 83, 177, 319, 320, 321, 355, 490], "consider": 491, "const": [0, 1, 2, 436], "constant": [0, 2, 6, 9, 113, 145, 147, 238, 334, 339, 355, 361, 394, 436, 446, 478, 480, 491, 493, 497], "constant_valu": 238, "constitut": 320, "construct": [0, 2, 7, 46, 118, 166, 235, 300, 314], "consum": 496, "contain": [2, 6, 9, 29, 30, 69, 95, 119, 132, 156, 157, 158, 167, 168, 192, 195, 206, 207, 208, 243, 283, 313, 318, 334, 374, 376, 377, 383, 411, 442, 461, 464, 491, 492, 494], "content": [9, 374, 491], "context": [290, 493], "contigu": [0, 1, 2, 84, 146], "continu": [340, 421, 494], "contract": [0, 132], "contribut": 2, "contriv": [494, 500], "control": [0, 362, 488, 496], "conv": 106, "conv1d": [0, 334], "conv2d": [0, 334], "conv3d": [0, 334], "conv_gener": 0, "conv_transpose1d": 0, "conv_transpose2d": 0, "conv_transpose3d": 0, "conveni": [1, 2, 7, 183], "convent": [19, 106, 131, 132, 412], "convers": 8, "convert": [0, 1, 2, 79, 85, 86, 87, 116, 163, 245, 392, 393, 496, 497, 498], "convolut": [0, 99, 100, 101, 102, 103, 104, 105, 106, 341, 342, 343, 344, 345, 346, 348, 349], "convolv": [99, 100, 101, 102, 103, 104, 105], "convtranspose1d": 334, "convtranspose2d": 334, "convtranspose3d": 334, "coordin": [0, 214], "copi": [0, 1, 2, 6, 8, 239, 282, 497], "copy_inplac": 2, "copytyp": 2, "core": [1, 2, 3, 4, 5, 6, 7, 316, 334, 336, 337, 338, 339, 359, 366, 367, 368, 377, 380, 382, 385, 412, 413, 414, 415, 416, 417, 418, 419, 420, 433, 435, 442, 461, 464, 466, 491, 492, 497, 498], "corner": 412, "correct": [2, 9, 470, 471, 472, 495, 496], "correctli": 39, "correl": [102, 348], "correspond": [0, 1, 2, 16, 18, 79, 94, 117, 119, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 192, 209, 211, 227, 241, 279, 280, 292, 299, 307, 312, 320, 494], "cos_first": 403, "cosh": [0, 441], "cosin": [0, 20, 21, 107, 108, 434, 480, 482, 494], "cosine_decai": [466, 482], "cosine_similarity_loss": 334, "cost": [9, 468, 492, 496], "costli": 496, "cot": 1, "cot_index": 1, "cotan": [2, 113], "cotang": [1, 2, 113, 311], "could": [6, 334], "count": [334, 482], "counter": 488, "cours": 494, "coursera": 478, "cout": [4, 493], "cov": 251, "covari": [251, 339], "cover": 2, "cpp": [2, 4], "cpu": [8, 9, 192, 193, 196, 500], "cpython": 2, "crash": [84, 491], "creat": [0, 2, 6, 9, 84, 124, 144, 173, 290, 334, 464, 466, 482, 491, 493, 495, 497], "create_additive_causal_mask": 6, "criteria": 2, "cross": [7, 102, 433, 435], "cross_entropi": [7, 334], "crowd": 6, "cry": 6, "cubic": 412, "cummax": 0, "cummin": 0, "cumprod": 0, "cumsum": 0, "cumul": [0, 84, 109, 110, 111, 112], "current": [6, 8, 9, 84, 91, 101, 104, 105, 128, 216, 218, 243, 322, 334, 468, 492, 496], "custom": [8, 113, 146, 411], "custom_decod": 411, "custom_encod": 411, "custom_funct": 1, "custom_kernel_myexp_float": 1, "custom_tim": 2, "cvpr": 348, "cxx": 4, "cycl": 490, "d": [0, 1, 2, 6, 101, 105, 118, 119, 149, 176, 195, 210, 214, 237, 295, 302, 304, 305, 306, 323, 343, 346, 349, 354, 360, 395, 467, 470, 472, 500], "d1": 500, "d2": 500, "d2fdx2": 494, "d_i": 363, "dampen": 479, "darwin": 2, "data": [0, 2, 7, 8, 11, 19, 126, 144, 159, 160, 166, 173, 199, 231, 235, 248, 257, 302, 304, 310, 314, 349, 413, 414, 415, 416, 417, 418, 419, 420, 491, 492, 493, 495, 497], "dataset": [5, 492, 496], "datatyp": 52, "dbuild_shared_lib": 9, "dcmake_build_typ": [4, 9], "ddof": [0, 76, 81, 288, 309], "deal": 491, "debug": [1, 3, 492], "debugg": 8, "decai": [468, 471, 473, 479, 480, 481, 484], "decay_r": [468, 481, 484], "decay_step": 480, "decent": 7, "decid": [320, 374], "decim": [0, 67, 266], "declar": 2, "decltyp": 1, "decod": 411, "decomposit": [189, 190, 197], "decor": [1, 113], "decoupl": 471, "deep": [339, 414, 415, 416, 417], "def": [1, 2, 5, 6, 7, 113, 141, 143, 146, 308, 334, 464, 491, 492, 493, 494, 495, 496, 497, 500], "default": [1, 2, 9, 15, 16, 17, 18, 19, 27, 28, 29, 30, 83, 84, 91, 95, 96, 99, 100, 101, 102, 103, 104, 105, 113, 114, 115, 117, 118, 119, 122, 123, 124, 126, 127, 128, 141, 143, 144, 146, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 167, 168, 169, 172, 173, 177, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 209, 211, 213, 214, 222, 223, 224, 227, 231, 235, 238, 239, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 266, 273, 274, 282, 283, 286, 287, 288, 290, 292, 294, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 314, 316, 326, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 350, 353, 354, 356, 359, 360, 362, 363, 366, 367, 368, 370, 375, 377, 382, 384, 387, 390, 391, 392, 393, 395, 398, 403, 407, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 426, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 464, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 488, 490, 491, 493, 494, 497, 499, 501], "default_devic": 501, "default_stream": 501, "defin": [1, 2, 5, 6, 7, 9, 113, 127, 146, 168, 191, 195, 244, 316, 319, 497], "definit": [113, 189, 190, 251], "degre": [0, 245, 446], "delta": [438, 467], "delv": [416, 417], "demonstr": 497, "denomin": [359, 434, 467, 469, 470, 471, 472, 478], "dens": [214, 500], "depend": [0, 2, 3, 4, 5, 9, 79, 195, 354, 360, 395, 491, 492, 495, 499, 500], "depth": [319, 338, 343, 346, 349, 368, 494], "dequant": [0, 243], "deriv": [2, 493, 494, 496], "descend": 372, "descent": [479, 491, 496], "describ": [2, 496], "descript": [2, 4, 6, 326], "design": [1, 5, 8, 488, 500], "destin": [0, 2, 61, 128, 229, 242], "destroi": 491, "detach": 494, "detail": [1, 2, 11, 222, 334, 348, 398, 403, 412, 414, 415, 416, 417, 467, 469, 470, 472, 473, 495, 498], "detect": 491, "determin": [0, 2, 119, 251, 322, 326, 381, 499], "dev": [2, 9], "develop": [2, 4, 9], "developer_dir": 9, "deviat": [0, 252, 288, 414, 416, 419], "deviatoin": 0, "devic": [1, 2, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 122, 123, 126, 127, 128, 129, 130, 131, 134, 135, 136, 138, 139, 140, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 223, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 313, 314, 315, 324, 500, 501], "device_info": 224, "devicetyp": 10, "df": 497, "dfdx": [493, 494, 495], "dft": [150, 151, 152, 153, 154, 155, 159, 160, 161], "dhwc": 349, "diag": [0, 197], "diagon": [0, 46, 118, 144, 302, 304, 305, 306], "dict": [95, 137, 142, 200, 216, 269, 270, 271, 316, 318, 380, 385, 388, 389, 464, 466, 474, 475, 477, 490, 493, 494, 499], "dict_kei": [320, 475], "dictionari": [6, 95, 141, 175, 200, 216, 269, 270, 318, 319, 322, 334, 374, 383, 388, 389, 476, 490, 499], "did": 6, "diff": 2, "differ": [8, 183, 291, 310, 445, 491, 493, 494], "differenti": [1, 2, 8, 340, 421], "difficult": 494, "difficulti": [414, 415], "dilat": [0, 99, 100, 101, 102, 103, 104, 105, 341, 342, 344, 345], "dim": [1, 6, 148, 149, 351, 355, 359, 361, 390, 392, 394, 398, 403, 411], "dimens": [0, 1, 2, 6, 16, 18, 27, 28, 63, 69, 79, 85, 86, 87, 95, 100, 101, 102, 104, 105, 119, 139, 148, 149, 157, 158, 160, 161, 163, 167, 168, 176, 189, 190, 192, 193, 194, 195, 196, 197, 198, 209, 210, 211, 213, 227, 241, 242, 243, 247, 256, 288, 292, 296, 299, 303, 309, 339, 341, 342, 343, 344, 345, 346, 348, 349, 353, 354, 355, 359, 360, 361, 390, 394, 395, 398, 411, 412, 426, 435, 491, 494], "dimension": [31, 145, 147, 150, 151, 152, 153, 154, 155, 159, 160, 161, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 351, 363, 366, 367, 368, 392, 393, 403, 495, 497], "dir": 4, "direct": [2, 6, 372, 473, 500], "directli": [2, 6, 84], "directori": [2, 4, 6, 9], "disabl": [120, 222, 491], "disable_compil": 491, "disappoint": 6, "discard": [6, 319], "discov": 9, "discoveri": 473, "discret": [106, 150, 151, 152, 153, 154, 155, 159, 160, 161, 351, 392], "discuss": 2, "disk": 6, "dispatch": 2, "dispatch_thread": 2, "dispatchthread": 1, "displai": 334, "distanc": [6, 446], "distribut": [8, 9, 246, 247, 248, 250, 251, 252, 257, 258, 363, 414, 415, 416, 417, 419, 420, 436, 439, 444, 446, 461], "diverg": 439, "divid": [0, 2, 39, 165, 243, 261, 492], "divis": [0, 129, 165, 243, 261], "divisor": [288, 309], "divmod": 0, "dloss_dw": 494, "dloss_dx": 494, "dlpack": 497, "dlvalu": 308, "dmlx_build_cpu": 9, "dmlx_build_gguf": 9, "dmlx_build_safetensor": 9, "dmlx_metal_debug": 3, "dmlx_metal_jit": 9, "do": [0, 2, 6, 9, 310, 334, 376, 387, 461, 464, 491, 492, 493, 494, 496], "doc": [2, 7, 492], "document": [2, 3, 4, 66, 80, 146, 269, 270, 326, 491, 493, 494, 495], "doe": [0, 2, 3, 6, 9, 217, 310, 318, 334, 491, 495, 496, 497], "doesn": [2, 334, 493], "domain": [257, 492], "don": [1, 9, 491, 500], "done": [334, 347, 394, 491, 492, 496, 497], "dot": [142, 189, 194, 198, 299, 319, 379, 390], "doubl": [0, 6], "doubt": 6, "down": [6, 318], "downsampl": [336, 337, 338, 366, 367, 368], "dparam": 308, "draw": 247, "drop": 374, "dropout": [334, 348, 349, 384, 411, 491], "dropout2d": 334, "dropout3d": 334, "dst": 128, "dt": 135, "dtype": [0, 1, 2, 6, 12, 19, 31, 38, 39, 79, 82, 126, 127, 144, 146, 162, 163, 166, 173, 183, 185, 192, 193, 195, 196, 199, 235, 248, 250, 251, 252, 254, 257, 258, 279, 280, 302, 304, 307, 310, 314, 326, 382, 412, 413, 414, 415, 416, 417, 418, 419, 420, 433, 435, 442, 480, 481, 482, 483, 484, 491, 492, 493, 494, 495, 497, 498, 499], "dtypecategori": [183, 326], "dual": 441, "duchi": 469, "duplic": 493, "dure": [3, 95, 347, 348, 349, 412, 497], "dx": 113, "dy": 113, "dyld": 492, "dyld_library_path": 492, "dylib": 2, "dynam": [0, 493, 496], "e": [2, 7, 9, 113, 135, 146, 167, 168, 184, 275, 339, 341, 342, 343, 344, 345, 346, 348, 349, 355, 359, 361, 375, 394, 431, 432, 454, 455, 460, 466, 469, 491, 493, 496, 501], "e5": 326, "e8": 326, "each": [0, 1, 2, 69, 117, 137, 148, 168, 183, 189, 190, 192, 193, 194, 197, 198, 210, 214, 238, 243, 244, 247, 262, 271, 272, 283, 300, 303, 310, 312, 313, 348, 349, 351, 354, 355, 360, 395, 398, 411, 433, 435, 488, 491, 492, 493, 496], "eager": 496, "earli": 348, "earlier": 2, "eas": 6, "easi": [2, 334, 492], "easier": [1, 142, 496], "edg": [94, 238, 412, 491], "edit": [9, 389], "effect": [348, 491, 496], "effici": [6, 8, 167, 348, 398, 496, 498], "eigenvalu": [192, 193], "eigenvector": 192, "einstein": [131, 132], "einsum": 132, "either": [9, 14, 66, 79, 80, 88, 89, 90, 94, 129, 130, 134, 165, 170, 171, 175, 186, 187, 188, 195, 205, 210, 212, 228, 230, 234, 240, 261, 264, 291, 308, 337, 338, 367, 368, 400, 412, 416, 417, 497], "elem": [1, 146], "elem_to_loc": [1, 2], "element": [0, 1, 2, 13, 14, 20, 21, 22, 23, 24, 25, 26, 29, 71, 84, 88, 89, 90, 93, 107, 108, 109, 110, 111, 112, 117, 129, 130, 134, 135, 136, 138, 140, 144, 164, 165, 168, 170, 171, 177, 178, 179, 180, 181, 182, 186, 187, 188, 201, 202, 203, 204, 205, 206, 207, 208, 212, 214, 228, 230, 232, 234, 239, 240, 243, 244, 260, 261, 262, 264, 265, 267, 275, 276, 277, 278, 284, 285, 291, 295, 297, 298, 301, 308, 310, 313, 340, 347, 348, 349, 354, 358, 360, 369, 391, 395, 398, 402, 421, 428, 429, 431, 432, 447, 448, 450, 453, 454, 455, 456, 491, 494], "elementwis": [1, 97, 98], "elif": 6, "ellipsi": 495, "elman": 395, "els": [0, 2, 6, 334, 375, 492, 496], "elsewher": [304, 495], "elu": [334, 451], "emb": [6, 351, 392, 403], "embed": [6, 316, 334, 392, 398, 403, 434], "empti": 251, "enabl": [3, 6, 9, 95, 133, 479], "enclos": 493, "encod": [2, 148, 398, 403, 411, 435], "encount": [2, 494], "end": [119, 190, 220, 243, 265, 354, 360, 409, 427, 438, 445, 451, 457, 458, 480, 483, 493], "end_axi": [0, 50, 163], "end_encod": 2, "endif": 2, "endl": [4, 493], "endswith": 375, "enhanc": [6, 398, 496], "enjoi": 2, "enough": [2, 496], "ensur": [0, 1, 2, 9, 146, 318, 441, 492, 493], "ensure_row_contigu": [1, 146], "enter": 6, "entir": [16, 18, 27, 28, 209, 211, 213, 227, 241, 288, 292, 309, 348, 349], "entri": [0, 253, 307, 348, 349], "entropi": [7, 433, 435], "enumer": 334, "environ": [9, 120, 133, 492], "ep": [5, 145, 147, 339, 355, 359, 361, 394, 434, 436, 446, 466, 467, 468, 469, 470, 471, 472, 478], "epoch": 7, "epsilon": [339, 355, 359, 361, 394, 434, 436, 467, 469, 470, 471, 472, 478], "epsilon_1": 468, "epsilon_2": 468, "equal": [0, 1, 17, 29, 83, 144, 171, 177, 188, 234, 239, 254, 283, 359, 363], "equal_nan": [0, 17, 83, 177], "equat": [131, 132], "equival": [0, 2, 32, 66, 80, 127, 130, 165, 168, 172, 295, 340, 350, 352, 356, 357, 358, 364, 365, 389, 391, 393, 396, 397, 399, 401, 404, 405, 406, 407, 408, 410], "erf": [0, 136, 491], "erfinv": 0, "error": [0, 2, 9, 124, 135, 136, 223, 224, 283, 352, 423, 424, 425, 441, 443, 491, 494, 497], "error_norm": 5, "estim": 472, "eta": 473, "etc": [2, 243, 334, 412, 492], "eval": [2, 3, 5, 6, 7, 334, 464, 466, 491, 492, 493, 494, 496, 498], "eval_cpu": 2, "eval_fn": 7, "eval_gpu": 2, "evalu": [2, 6, 7, 8, 128, 137, 184, 311, 334, 373, 384, 464, 466, 491, 493, 498], "even": [1, 2, 6, 95, 491, 493, 496, 497], "evenli": [0, 199], "everi": [243, 320, 466, 484, 494], "everyth": [6, 492], "everywher": 0, "exact": [424, 425], "exactli": [2, 6, 148, 377, 494], "exampl": [0, 3, 4, 5, 6, 7, 9, 19, 39, 113, 141, 142, 143, 146, 149, 163, 175, 183, 185, 192, 193, 195, 196, 279, 280, 290, 295, 307, 318, 321, 322, 334, 336, 337, 338, 339, 359, 366, 367, 368, 375, 377, 384, 387, 412, 413, 414, 415, 416, 417, 418, 419, 420, 433, 435, 442, 461, 466, 475, 480, 481, 482, 483, 484, 488, 494, 495, 496, 497, 498, 499], "exce": 318, "exceed": 223, "except": [8, 113, 144, 156, 157, 159, 160, 161, 355, 377, 493, 495, 497], "exclud": [242, 296], "exclus": [0, 84, 90], "execut": [2, 4, 9, 85, 86, 87, 185, 219, 497, 500], "execute_process": 4, "exist": [2, 3, 6, 375, 387], "exp": [0, 1, 140, 146, 205, 209, 248, 281, 340, 350, 402, 421, 422, 439, 451, 452, 456, 491, 493, 500], "exp_elementwis": [1, 146], "expand_dim": 0, "expect": [2, 6, 341, 342, 343, 344, 345, 346, 347, 348, 349, 403, 411, 436, 491, 495], "expens": 411, "expensive_fun": 496, "experiment": [141, 143, 175, 497], "explain": 2, "explicit": [2, 475, 488, 497], "explicitli": [167, 334, 488], "explor": 9, "expm1": 0, "exponenti": [0, 138, 140, 340, 350, 399, 421, 422, 451, 481], "exponential_decai": 466, "export": [8, 9, 141, 142, 175], "export_funct": 493, "ext_modul": 2, "extend": [2, 238], "extens": [8, 200, 225, 381, 499], "extern": 497, "extra": [1, 320, 321, 493], "extract": [0, 6, 46, 118, 119, 279, 334, 374, 464, 492], "extras_requir": 2, "extrem": [495, 496], "ey": [0, 6, 194, 198], "f": [0, 2, 5, 7, 113, 195, 334, 360, 471, 491, 497], "f_jvp": 113, "f_t": 360, "f_vjp": 113, "f_vmap": 113, "face": 6, "factor": [2, 15, 172, 189, 190, 196, 412, 435, 481, 484], "fail": 491, "fall": [2, 113], "fallback": 2, "fals": [0, 1, 2, 6, 16, 17, 18, 27, 28, 34, 35, 36, 37, 42, 43, 44, 45, 57, 58, 59, 60, 64, 76, 77, 81, 83, 95, 102, 109, 110, 111, 112, 124, 141, 143, 146, 177, 183, 189, 190, 195, 198, 200, 209, 211, 213, 214, 223, 227, 241, 288, 292, 309, 313, 316, 319, 320, 321, 322, 326, 355, 359, 361, 363, 375, 377, 387, 390, 393, 398, 403, 411, 412, 433, 436, 468, 470, 471, 479, 493, 497], "famili": 6, "fan": [414, 415, 416, 417], "fan_in": [414, 415, 416, 417], "fan_out": [414, 415, 416, 417], "far": 466, "fast": [1, 8, 352, 425, 492, 500], "faster": [1, 2, 9, 130, 423, 433, 491, 494], "featur": [1, 8, 99, 100, 101, 102, 103, 104, 105, 148, 339, 354, 355, 359, 360, 361, 363, 393, 394, 395, 398, 411, 412, 491, 496], "feed": 6, "feed_forward": 6, "feedforward": [414, 415], "feel": 6, "fetch": 1, "few": [1, 2, 6, 7, 8, 9, 492, 493, 496, 498], "ffn": 6, "ffn_norm": 6, "fft": 8, "figur": 492, "file": [4, 6, 9, 141, 142, 143, 175, 200, 268, 269, 270, 271, 272, 377, 381, 492, 493, 494, 499], "file_or_weight": 377, "fill": [0, 2, 166, 236, 304, 315, 413, 414, 415, 416, 417, 419, 420], "filter": [0, 106, 341, 342, 343, 344, 345, 346, 370, 374], "filter_and_map": 334, "filter_fn": [370, 374], "final": [2, 4, 5, 6, 7, 172, 480, 483], "find": [2, 4, 5, 9, 492], "find_packag": [2, 4], "finder": 9, "fine": [488, 493, 496], "finetun": 334, "finish": 2, "finit": [0, 178, 231], "first": [0, 1, 2, 3, 4, 5, 6, 7, 9, 119, 122, 163, 169, 183, 185, 186, 197, 206, 208, 210, 239, 256, 264, 293, 299, 302, 308, 319, 321, 322, 334, 337, 338, 355, 367, 368, 412, 434, 442, 468, 472, 475, 491, 493, 494, 497, 500], "first_lay": 496, "firt": 491, "fit": [2, 243, 500], "five": 491, "fix": [2, 6, 9, 491, 496], "flag": [2, 4, 9, 491, 497], "flat": [167, 168, 319, 323], "flat_param": 271, "flatten": [0, 29, 30, 109, 110, 111, 112, 195, 237, 239, 242, 262, 265, 282, 295, 296, 301, 319, 491], "flexibl": 8, "flexibli": 389, "flip": [0, 102, 106], "float": [0, 1, 2, 12, 15, 17, 19, 79, 145, 146, 147, 148, 149, 162, 165, 166, 172, 177, 183, 195, 231, 244, 246, 250, 252, 318, 326, 339, 347, 348, 349, 355, 359, 361, 370, 382, 394, 398, 403, 409, 411, 412, 413, 414, 415, 416, 417, 419, 420, 434, 435, 436, 438, 442, 445, 446, 457, 458, 467, 468, 469, 470, 471, 472, 473, 478, 479, 480, 481, 483, 484], "float16": [1, 2, 12, 146, 172, 200, 326, 370, 496, 497], "float16_t": [1, 2], "float32": [0, 1, 2, 12, 19, 144, 146, 149, 172, 173, 183, 192, 193, 195, 196, 199, 235, 248, 250, 251, 252, 257, 258, 280, 304, 314, 326, 412, 413, 414, 415, 416, 417, 418, 419, 420, 433, 435, 442, 480, 481, 482, 483, 484, 491, 492, 493, 494, 495, 496, 497, 498, 499], "float64": 183, "floor": [0, 1, 165], "floor_divid": 0, "flow": [0, 289, 496], "flush": 2, "fn": [175, 317, 320, 321, 322, 498], "follow": [1, 2, 4, 6, 7, 8, 9, 19, 106, 117, 149, 167, 195, 238, 243, 321, 334, 424, 425, 439, 467, 468, 469, 472, 473, 479, 488, 491, 492, 493, 494, 500], "foo": 492, "food": 6, "forc": [6, 7, 334, 492, 498], "forg": 9, "formal": [117, 243], "format": [6, 142, 200, 268, 269, 270, 271, 272, 497], "formul": [340, 350], "formula": 445, "forth": 412, "forward": [1, 2, 308, 491, 496], "found": [4, 374], "four": 339, "fourier": [150, 151, 152, 153, 154, 155, 159, 160, 161], "fourth": 493, "frac": [135, 243, 275, 339, 347, 348, 349, 355, 359, 361, 363, 394, 402, 414, 415, 416, 417, 434, 436, 438, 441, 452, 454, 455, 467, 469, 470, 471, 472, 478], "fraction": 19, "framework": [2, 8], "free": 222, "freez": [334, 387, 464], "freq": 148, "frequenc": [148, 398, 403], "frequent": [491, 496], "friend": 6, "fro": 195, "frobeniu": 195, "from": [0, 1, 2, 4, 6, 7, 8, 84, 116, 117, 119, 122, 123, 126, 127, 128, 146, 157, 158, 160, 161, 166, 167, 172, 175, 195, 200, 210, 214, 219, 222, 236, 243, 245, 246, 247, 248, 249, 250, 254, 257, 271, 279, 286, 289, 291, 295, 296, 301, 302, 313, 315, 319, 320, 321, 322, 323, 334, 363, 375, 377, 390, 414, 415, 416, 417, 419, 420, 436, 445, 461, 466, 490, 491, 492, 493, 494, 496, 497, 498, 499, 500], "from_embed": 392, "from_linear": 393, "front": [2, 493], "frozen": [334, 375, 385, 387, 393, 464], "fuction": 130, "full": [0, 1, 2, 7, 66, 80, 106, 146, 281, 388, 389, 436, 491, 492, 493, 496], "full_turn": 403, "fulli": [2, 8, 492, 497, 500], "fun": [95, 141, 143, 169, 184, 308, 311, 312, 491, 493, 495, 496, 500], "fun1": 496, "func": 395, "function": [0, 1, 2, 3, 5, 6, 7, 8, 17, 19, 84, 95, 113, 130, 135, 136, 141, 143, 146, 169, 175, 177, 184, 189, 190, 192, 193, 194, 195, 196, 197, 198, 210, 224, 275, 308, 311, 312, 317, 318, 320, 321, 322, 334, 340, 350, 352, 353, 356, 357, 358, 364, 365, 369, 371, 375, 382, 387, 391, 395, 396, 397, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 447, 452, 454, 455, 456, 457, 458, 459, 461, 466, 475, 488, 490, 492, 495, 496, 497, 499], "functionexport": 143, "functool": 491, "further": [2, 9, 494], "fuse": [1, 491], "fusibl": 491, "futur": [6, 141, 143, 175, 393, 495, 496], "fx": 113, "g": [3, 9, 113, 146, 195, 243, 360, 460, 478, 479, 493, 496, 501], "g_t": [360, 467, 469, 470, 471, 472, 473, 478, 479], "gain": [414, 415, 416, 417], "gamma": [339, 355, 359, 361, 394, 414, 415, 416, 417], "gap": 1, "gate": [353, 354, 426], "gather": [0, 122, 167, 168], "gather_mm": [0, 168], "gather_qmm": 0, "gaurante": 310, "gaussian": [5, 352, 423, 424, 425, 436], "gaussian_nll_loss": 334, "gelu": [334, 424, 425, 491], "gelu_approx": [334, 352, 423], "gelu_fast_approx": [334, 352, 423], "geluapprox": 352, "gelufast": 352, "gener": [0, 1, 2, 3, 5, 12, 19, 102, 144, 146, 157, 158, 199, 214, 246, 251, 252, 253, 254, 257, 258, 411, 488, 491, 495, 496, 501], "general_": 2, "generate_stub": 9, "geq": [409, 458], "get": [2, 5, 7, 9, 100, 101, 102, 104, 105, 114, 115, 162, 216, 217, 218, 219, 249, 334, 491, 493, 494, 496, 500], "get_cache_memori": 215, "get_command_encod": 2, "get_kernel": 2, "gguf": [9, 200, 269, 499], "gh": 1, "gii": 1, "git": 9, "github": [5, 7, 9, 491], "give": [2, 6, 7, 29, 491], "given": [0, 2, 9, 16, 18, 29, 39, 84, 92, 94, 96, 109, 110, 111, 112, 117, 119, 132, 137, 139, 149, 150, 151, 152, 153, 154, 155, 159, 160, 161, 166, 167, 195, 209, 211, 213, 222, 227, 231, 233, 241, 251, 253, 254, 265, 266, 274, 281, 283, 288, 292, 294, 300, 301, 302, 304, 305, 306, 309, 324, 347, 374, 390, 434, 436, 442], "gix": 1, "gix_mult": 1, "giy_mult": 1, "global": [120, 122, 123, 124, 126, 127, 128, 133, 255, 318, 488, 491], "glorot": [414, 415], "glorot_norm": 334, "glorot_uniform": 334, "glu": [6, 334], "gm": 1, "gn": 1, "go": [2, 6, 494], "golub": 195, "good": [2, 9, 466, 491, 492, 500], "goroshin": 348, "gower": 6, "gpu": [1, 3, 8, 9, 216, 495, 500], "gputrac": [3, 225], "grad": [2, 5, 7, 113, 308, 318, 466, 474, 491, 492, 493, 494, 495, 496, 498], "grad_fn": [5, 491, 494], "gradient": [0, 5, 7, 113, 169, 289, 308, 317, 318, 334, 375, 388, 393, 411, 441, 464, 466, 467, 468, 470, 471, 472, 473, 474, 477, 479, 491, 492, 494, 495, 496, 497, 498], "grain": 488, "graph": [2, 6, 7, 8, 142, 493, 494], "great": 3, "greater": [0, 6, 29, 140, 171, 239, 318, 409, 458], "greater_equ": 0, "grep": 9, "grid": [2, 146, 214], "grid_dim": 2, "grid_grad": 1, "grid_idx": 1, "grid_sampl": 1, "grid_sample_grad": 1, "grid_sample_ref": 1, "grid_sample_vjp": 1, "grid_shap": 1, "grid_siz": 1, "ground": [5, 6, 435, 445], "group": [0, 1, 99, 100, 101, 102, 103, 104, 105, 117, 122, 123, 124, 126, 127, 128, 149, 168, 243, 244, 310, 316, 341, 342, 355, 392, 393, 492], "group_dim": 2, "group_siz": [0, 117, 168, 243, 244, 316, 392, 393], "groupnorm": 334, "grow": 496, "gru": 334, "guid": [2, 4, 8, 493], "gw": 1, "h": [1, 2, 4, 99, 100, 101, 103, 104, 105, 195, 339, 342, 343, 345, 346, 348, 349, 354, 360, 395, 494, 496], "h_": [354, 360, 395], "h_in": 1, "h_stride": 1, "h_t": [354, 360, 395], "ha": [2, 3, 6, 7, 8, 9, 79, 95, 119, 128, 156, 157, 159, 160, 161, 169, 189, 190, 192, 193, 194, 197, 198, 214, 218, 247, 339, 354, 360, 363, 395, 464, 466, 491, 493, 495, 496, 498, 500], "had": 6, "hadamard": [0, 172], "hadamard_transform": 0, "half": [2, 19, 254, 258, 398, 496], "halv": [353, 426], "hand": [6, 494, 496], "handi": 494, "handl": [2, 334, 491], "happen": [2, 6, 145, 411, 466, 491, 496], "happi": 6, "hard": 6, "hard_shrink": [334, 356], "hard_tanh": [334, 357], "hardcod": 491, "hardshrink": [334, 427], "hardswish": 334, "hardtanh": [334, 428], "hat": [117, 243], "have": [0, 1, 2, 6, 9, 17, 83, 85, 86, 87, 91, 113, 122, 149, 157, 158, 160, 161, 168, 177, 210, 225, 247, 310, 319, 360, 390, 400, 473, 475, 490, 491, 492, 493, 495, 496, 500], "haven": 6, "hazan": 469, "he": [6, 416, 417], "he_norm": 334, "he_uniform": 334, "head": [149, 390, 411], "header": [2, 146], "heart": 6, "heavi": 6, "height": [337, 338, 339, 342, 343, 345, 346, 348, 349, 367, 368], "hello": [319, 323], "help": [2, 6, 491, 500], "helper": [6, 146, 491], "henc": [0, 2, 243, 491], "hendryck": 425, "here": [2, 6, 466, 491, 493, 494, 496, 499, 500], "hermitian": [192, 193], "hf": 360, "hg": 360, "hh": 395, "hi": [6, 360], "hidden": [354, 360, 395, 411], "hidden_dim": [7, 464, 466], "hidden_s": [354, 360, 395], "hierarchi": 326, "high": [254, 258, 334, 351, 420, 461], "high_pad_s": 0, "higher": [2, 176, 224, 442, 494], "highli": 9, "him": 6, "hing": 437, "hinge_loss": 334, "hinton": 478, "hit": 2, "hn": 354, "ho": 360, "hold": [2, 6, 11, 12, 195, 491], "homebrew": 492, "hopkin": 195, "host": 2, "host1": 492, "host2": 492, "host_nam": 1, "hostfil": 492, "hostnam": 492, "hot": 435, "hour": 6, "how": [2, 4, 6, 7, 334, 336, 337, 338, 341, 342, 343, 344, 345, 346, 351, 366, 367, 368, 392, 412, 474, 491, 495, 500], "howev": [2, 113, 334, 352, 355, 475, 488, 491, 492, 496, 497], "hr": 354, "http": [355, 359, 361, 369, 394, 425, 447], "huber": 438, "huber_loss": 334, "human": [416, 417], "hundr": 9, "hurri": 6, "hutter": 471, "hyperbol": [0, 21, 23, 26, 108, 278, 298, 410, 459], "hz": 354, "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 17, 19, 29, 38, 79, 84, 94, 100, 101, 102, 104, 105, 106, 109, 110, 111, 112, 113, 118, 119, 122, 123, 125, 126, 127, 128, 130, 137, 141, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 166, 167, 168, 172, 175, 177, 178, 183, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 205, 209, 210, 214, 220, 223, 224, 238, 239, 242, 243, 244, 251, 252, 253, 263, 265, 268, 269, 270, 275, 281, 283, 288, 289, 294, 295, 296, 299, 302, 303, 307, 308, 309, 310, 311, 312, 313, 316, 318, 319, 320, 321, 322, 326, 328, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 352, 354, 355, 359, 360, 361, 363, 366, 367, 368, 374, 375, 381, 383, 384, 386, 387, 389, 390, 391, 393, 394, 395, 398, 403, 409, 411, 412, 416, 417, 423, 425, 433, 434, 436, 441, 442, 445, 446, 448, 453, 458, 464, 466, 468, 470, 471, 473, 474, 475, 480, 482, 483, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501], "i386": 9, "i_n": 1, "i_nw": 1, "i_s": 1, "i_sw": 1, "i_t": 360, "iclr": [470, 471, 472], "id": [7, 9], "idea": [494, 496], "idempot": [375, 387], "ident": [0, 113, 128, 144, 289, 334, 384], "identifi": [2, 319, 490], "idim": 7, "idiom": [7, 491], "idx": [39, 495], "ie": [387, 492], "ieee": 326, "ignor": [6, 39, 94, 95, 137, 468], "ih": 395, "ii": 1, "ij": 214, "imag": [0, 342, 343, 345, 346, 348, 349, 412], "imagenet": [416, 417], "imaginari": 174, "immedi": [6, 370], "implement": [0, 1, 5, 7, 148, 149, 195, 351, 374, 390, 398, 400, 403, 409, 411, 412, 458, 467, 468, 469, 472, 473, 474, 486, 491, 494], "impli": 310, "implicit": [488, 491, 494], "implicitli": 496, "import": [2, 3, 5, 6, 7, 9, 113, 172, 175, 195, 271, 308, 319, 320, 321, 322, 323, 334, 336, 337, 338, 339, 359, 366, 367, 368, 377, 412, 433, 435, 442, 461, 464, 466, 491, 492, 494, 495, 496, 497, 498], "import_funct": 493, "imported_ab": 493, "imported_fun": 493, "imported_funct": 493, "improv": [1, 2, 3, 6, 433, 467, 468, 469, 470, 471, 472, 478, 491, 492], "in_ax": [312, 494], "in_channel": [341, 342, 343, 344, 345, 346], "in_dim": [334, 464], "in_proj": 464, "inci": 2, "includ": [1, 2, 4, 109, 110, 111, 112, 142, 146, 217, 218, 223, 361, 371, 383, 393, 436, 466, 491, 493, 494, 495, 498, 499, 501], "include_dir": 2, "inclus": [0, 42, 43, 44, 45, 109, 110, 111, 112, 163], "incom": 2, "inconveni": 491, "incorpor": 497, "incorrect": 497, "increas": 224, "increment": 19, "incur": [6, 9], "incx": 2, "independ": [121, 348, 349], "index": [0, 1, 2, 8, 10, 29, 39, 139, 144, 169, 214, 239, 279, 280, 295, 296, 308], "indic": [0, 2, 17, 27, 28, 29, 30, 39, 167, 168, 169, 177, 178, 179, 180, 181, 182, 183, 197, 242, 279, 280, 283, 295, 296, 308, 384, 386, 435, 442, 482, 495], "indices_or_sect": [72, 283], "indirectli": 497, "individu": [334, 348, 349], "ineffici": [495, 496], "inexact": [12, 183], "inf": [195, 231, 390], "infer": [8, 166, 200, 302, 307, 492, 493], "infin": [0, 179, 181, 182, 231, 366, 367, 368, 472], "infinit": [17, 177, 178], "info": [6, 9], "inform": [3, 4, 6, 7, 9, 132, 162, 216, 269, 270, 326, 334, 339, 352, 390, 493, 494, 500], "inherit": [7, 490], "inifn": 179, "init": [334, 391, 461, 466, 480, 481, 483, 484, 492], "init_fn": [413, 414, 415, 416, 417, 418, 419, 420, 461], "init_valu": 1, "initi": [1, 3, 5, 6, 124, 322, 334, 339, 355, 359, 361, 363, 391, 394, 413, 414, 415, 416, 417, 418, 419, 420, 464, 475, 480, 481, 483, 484, 491, 492, 493, 496], "initializer_list": 0, "inject": 0, "inlin": 0, "inner": [0, 491], "inorm": 359, "inp": [1, 146], "inp_ndim": 1, "inp_shap": 1, "inp_strid": 1, "inplac": [2, 9], "input": [0, 1, 2, 5, 6, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 118, 119, 122, 123, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 167, 168, 169, 170, 171, 172, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 227, 228, 229, 230, 231, 232, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 253, 256, 259, 260, 261, 262, 263, 264, 265, 266, 267, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 315, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 351, 353, 354, 355, 359, 360, 361, 363, 366, 367, 368, 390, 393, 394, 395, 398, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 426, 433, 434, 436, 437, 438, 439, 441, 442, 444, 446, 458, 461, 491, 493, 494, 495, 498, 499], "input_dil": [0, 102], "input_dim": [7, 334, 363, 393], "input_nam": [1, 146], "input_s": [354, 360, 395], "inputs1": 442, "inputs2": 442, "insert": [119, 139, 500], "insid": [491, 493], "inspect": [3, 491, 498], "inspir": 8, "instabl": 446, "instal": [2, 4], "instanc": [6, 39, 113, 243, 323, 334, 359, 370, 371, 372, 375, 377, 378, 379, 384, 387, 388, 389, 400, 464, 497], "instancenorm": 334, "instanti": [1, 2, 7, 496], "instantiate_kernel": 2, "instead": [2, 9, 113, 334, 389, 403, 492, 494, 496], "instruct": [4, 493], "int": [0, 1, 2, 4, 6, 7, 10, 16, 18, 19, 27, 28, 29, 30, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 50, 57, 58, 59, 60, 61, 64, 67, 69, 72, 75, 76, 77, 78, 79, 81, 84, 91, 92, 96, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 117, 118, 119, 126, 127, 128, 132, 139, 144, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 168, 169, 173, 183, 191, 195, 199, 209, 211, 213, 216, 217, 218, 219, 222, 223, 224, 227, 229, 235, 238, 239, 241, 242, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 262, 263, 265, 266, 279, 280, 281, 282, 283, 286, 287, 288, 292, 293, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 314, 316, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 351, 353, 354, 355, 359, 360, 361, 363, 366, 367, 368, 390, 392, 393, 394, 395, 398, 403, 411, 426, 434, 435, 439, 444, 446, 464, 480, 482, 483, 484], "int16": 326, "int32": [0, 1, 12, 19, 39, 163, 183, 185, 195, 254, 279, 307, 326, 412, 495, 498], "int64": [12, 326], "int64_t": 2, "int8": [12, 326], "int_0": 135, "integ": [0, 12, 165, 167, 168, 183, 195, 216, 238, 243, 244, 246, 253, 254, 283, 295, 299, 312, 326, 351, 382, 482, 495], "integr": [19, 295, 496], "intend": [0, 491], "interact": 411, "interest": 500, "interfac": 2, "intermedi": 497, "intern": 339, "interpol": 412, "interpret": 4, "interv": [19, 199, 254, 258], "introduc": [0, 265], "intuit": 334, "invalid": [0, 84], "invers": [0, 20, 21, 22, 23, 24, 25, 26, 136, 153, 154, 155, 156, 157, 158, 190, 194, 198], "invert": 0, "involv": [466, 491], "iogpu": 224, "iostream": 4, "ip": 492, "is_avail": 124, "is_equival": 2, "is_floating_point": 2, "is_leaf": [319, 320, 321, 322], "is_leaf_fn": 374, "isclos": 0, "isfinit": 0, "ish": 6, "ishmael": 6, "isinf": 0, "isnan": 0, "isneginf": 0, "isposinf": 0, "issu": [492, 494, 497], "issubdtyp": [12, 326], "item": [0, 2, 5, 6, 7, 320, 466, 493, 496, 497, 498], "iter": [5, 7, 197, 320, 321, 488, 491, 496], "iterm": 9, "itertool": [6, 320], "its": [0, 1, 2, 9, 149, 190, 210, 239, 256, 304, 317, 323, 334, 393, 466, 470, 471, 472, 492, 496, 497, 500], "itself": [2, 316, 475], "ix": 1, "ix_n": 1, "ix_nw": 1, "ix_s": 1, "ix_sw": 1, "iy_n": 1, "iy_nw": 1, "iy_s": 1, "iy_sw": 1, "j": [6, 9, 195, 348, 469, 470, 472], "j8": 2, "jacobian": [2, 184, 311, 498], "jain": 348, "jax": [8, 488], "jit": 146, "jmlr": 469, "jnp": 497, "john": 195, "join": 482, "join_schedul": 466, "jointli": 251, "just": [2, 4, 7, 361, 491, 493, 495], "jvp": [2, 113, 498], "k": [0, 6, 46, 91, 118, 144, 149, 167, 172, 301, 304, 305, 306, 363, 375], "kaim": 417, "keep": [2, 16, 18, 27, 28, 209, 211, 213, 227, 241, 288, 292, 309, 334, 374, 494, 496], "keepdim": [0, 16, 18, 27, 28, 34, 35, 36, 37, 57, 58, 59, 60, 64, 76, 77, 81, 195, 209, 211, 213, 227, 241, 281, 288, 292, 309], "kei": [1, 3, 6, 141, 149, 175, 216, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 319, 320, 374, 375, 387, 390, 475, 488, 490, 493, 494], "kept": 224, "kernel": [2, 8, 9, 99, 100, 101, 102, 103, 104, 105, 146, 336, 366, 491, 495], "kernel_dil": [0, 102], "kernel_s": [336, 337, 338, 341, 342, 343, 344, 345, 346, 366, 367, 368], "key_cach": 6, "key_input_dim": 390, "key_proj": 6, "keyword": [141, 169, 271, 272, 308, 320, 334, 488, 493, 499, 501], "kind": 6, "kingma": [470, 472], "kl_div_loss": 334, "kname": 2, "know": [2, 6], "known": [401, 453], "kron": 0, "kroneck": [0, 185], "kth": [0, 29, 239], "kullback": 439, "kw_onli": 2, "kwarg": [11, 121, 141, 142, 175, 271, 272, 324, 493, 501], "l": [6, 7, 189, 190, 192, 193, 334, 339, 341, 344, 354, 360, 395, 445], "l1": [308, 438, 440, 441, 445], "l1_loss": 334, "l2": [438, 441, 479], "l2_loss": 334, "l_": 438, "la": 195, "label": [3, 5, 435, 442], "label_smooth": 435, "lack": 495, "lambd": [356, 407, 427, 457], "lambda": [320, 321, 322, 334, 356, 370, 375, 382, 407, 427, 451, 457, 467, 468, 469, 470, 471, 472, 473, 478, 479, 491, 492, 493, 494], "languag": [1, 2, 4], "larg": [6, 334, 390, 441, 491, 492, 493, 496], "larger": [1, 148, 224, 398, 473], "largest": [195, 231, 301], "lasso": 308, "last": [0, 1, 6, 30, 79, 145, 147, 152, 155, 157, 158, 160, 161, 163, 167, 168, 176, 189, 190, 192, 193, 194, 196, 197, 198, 210, 219, 247, 282, 299, 310, 341, 342, 343, 344, 345, 346, 348, 349, 355, 412, 497], "latenc": 492, "later": [3, 9, 466], "launch": [1, 2, 124, 492, 495], "layer": [8, 145, 316, 334, 336, 337, 338, 348, 349, 354, 355, 360, 361, 363, 366, 367, 368, 384, 389, 392, 393, 395, 400, 411, 460, 464, 493], "layer_s": 7, "layernorm": 334, "layout": 1, "lazi": [8, 464, 498], "lazili": [6, 334], "lceil": 91, "ld": [354, 360, 395], "lead": [0, 19, 84, 491], "leaf": [95, 316, 319, 320, 321, 322, 374], "leaf_modul": 334, "leaki": [362, 430], "leaky_relu": 334, "leakyrelu": 334, "learn": [5, 7, 8, 339, 355, 359, 361, 391, 394, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479], "learnabl": [341, 342, 343, 344, 345, 346, 400], "learning_r": [7, 466, 467, 468, 469, 470, 471, 472, 473, 475, 478, 479, 480, 481, 482, 483, 484, 491], "least": [6, 85, 86, 87, 94, 189, 190, 192, 193, 194, 196, 197, 198, 243], "leav": [2, 137, 320, 321, 322], "lectur": 478, "lecun": 348, "left": [0, 6, 148, 186, 195, 243, 265, 352, 398, 412, 424, 425, 436, 438, 446], "left_shift": 0, "leibler": 439, "len": [6, 152, 155, 158, 161, 172, 482], "length": [6, 286, 339, 341, 344, 354, 360, 395, 482], "leq": [438, 451], "less": [0, 1, 6, 29, 188, 224, 239, 398, 445], "less_equ": 0, "let": [1, 2, 5, 6, 190, 491, 493, 494, 496, 497], "level": [0, 167, 168, 416, 417], "lh": [354, 360, 395], "lhs_indic": [0, 167, 168], "lhs_mask": 91, "lib": 492, "libmlx": 9, "libmlx_ext": 2, "libmpi": 492, "librari": [2, 4, 9, 328, 334, 493], "like": [2, 6, 8, 127, 141, 143, 175, 183, 236, 315, 349, 441, 475, 477, 491, 492, 493, 494, 496, 497, 498, 500], "likelihood": [436, 444], "limit": [0, 2, 94, 222, 223, 224, 495], "linalg": 172, "line": [6, 492, 493, 496, 497], "linear": [0, 2, 6, 7, 8, 316, 320, 334, 340, 350, 352, 353, 362, 377, 393, 395, 396, 397, 399, 401, 412, 421, 422, 423, 424, 425, 426, 430, 449, 450, 451, 453, 461, 464, 475, 483, 491, 493], "linear1": 6, "linear2": 6, "linear3": 6, "linear_schedul": [466, 482], "linearli": 390, "link": [2, 4, 9], "linspac": 0, "lion": 466, "list": [1, 6, 11, 16, 18, 31, 72, 79, 84, 85, 86, 87, 92, 95, 96, 102, 132, 137, 146, 151, 152, 154, 155, 157, 158, 160, 161, 166, 169, 184, 195, 209, 211, 213, 214, 227, 235, 238, 241, 246, 247, 248, 250, 251, 252, 254, 257, 258, 269, 281, 283, 287, 288, 292, 299, 300, 303, 308, 309, 311, 314, 319, 322, 323, 334, 375, 377, 378, 379, 380, 385, 387, 388, 389, 464, 466, 470, 471, 472, 473, 482, 490, 491, 492, 493, 494, 496], "liter": [2, 238, 412, 416, 417, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446], "littl": 6, "liu": 6, "live": [8, 146, 500], "ll": [1, 5, 7, 438, 491, 494], "llama": 6, "llamaattent": 6, "llamaencoderlay": 6, "llm": 8, "load": [7, 8, 328, 377, 492], "load_weight": [334, 496], "loader": 7, "loader_path": 2, "loan": 195, "loc": [1, 250, 252], "local": [334, 348, 492], "locat": [0, 2, 4, 84, 279, 280, 388, 389, 492, 500], "log": [0, 203, 205, 209, 364, 365, 431, 432, 433, 436, 439, 441, 444, 456], "log10": 0, "log1p": 0, "log2": 0, "log_cosh_loss": 334, "log_sigmoid": [334, 364], "log_softmax": [334, 365], "logaddexp": 0, "logarithm": [0, 201, 202, 203, 204], "logcosh": 441, "logic": [0, 2, 206, 207, 208], "logical_and": 0, "logical_not": 0, "logical_or": 0, "logist": [0, 5, 275, 425, 453], "logit": [6, 247, 433, 435, 491], "logsigmoid": 334, "logsoftmax": 334, "logsumexp": 0, "long": 6, "longer": [6, 106, 494], "look": [2, 6, 492], "lookup": 351, "loop": [6, 7, 491, 492, 494, 496], "loshchilov": 471, "loss": [5, 7, 308, 334, 466, 491, 492, 494, 496], "loss_and_grad": 334, "loss_and_grad_fn": [7, 466, 491, 494], "loss_fn": [5, 7, 466, 491, 494], "loss_grad_fn": 492, "lot": [492, 494], "low": [254, 258, 420, 461], "low_pad_s": 0, "lower": [189, 190, 192, 193, 198, 243, 254, 257, 258, 304, 420], "lr": [5, 473], "lr_schedul": [480, 481, 482, 484], "lstm": 334, "lto": 2, "lu": 6, "luckili": 496, "lvalu": 308, "m": [0, 2, 4, 6, 9, 91, 144, 167, 172, 195, 304, 467, 491], "m1": [1, 6, 491, 494, 500], "m10": 326, "m7": 326, "m_": [470, 471, 472, 473], "m_t": [470, 471, 472, 473], "mac": 492, "machin": [6, 8, 9, 478, 492], "maco": [9, 224], "macosx": 9, "made": [6, 328], "mai": [2, 4, 141, 143, 175, 195, 316, 348, 492, 494, 495], "main": [4, 8, 119, 144, 146, 302, 320, 321, 334, 492], "maintain": [348, 349, 473], "major": [0, 2], "make": [1, 2, 3, 4, 6, 7, 9, 142, 143, 210, 233, 274, 334, 480, 481, 483, 484, 491, 496, 498, 500], "make_shar": 2, "malloc_or_wait": 2, "man": 6, "manag": [290, 488, 492, 493, 500], "mani": [2, 84, 283, 341, 342, 343, 344, 345, 346, 351, 392, 491, 492, 493, 496], "manual": 334, "map": [2, 7, 39, 200, 320, 351, 370, 493], "map_fn": [370, 374], "map_torch_to_mlx": 6, "margin": [442, 446], "margin_ranking_loss": 334, "mask": [0, 6, 91, 149, 384, 390, 495], "mask_lh": [0, 91], "mask_n": 1, "mask_nw": 1, "mask_out": [0, 91], "mask_rh": [0, 91], "mask_s": 1, "mask_sw": 1, "matadata": 200, "match": [9, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 217, 377, 412, 435, 492, 495, 497], "materi": [6, 8], "math": [6, 446, 491], "mathbf": 190, "mathcal": 363, "mathemat": 195, "mathrm": [135, 275, 359], "matmul": [0, 167, 500], "matric": [195, 196, 197], "matrix": [0, 5, 15, 46, 91, 117, 118, 144, 167, 168, 172, 173, 189, 190, 192, 193, 194, 195, 196, 197, 198, 210, 214, 243, 244, 251, 392, 393, 418, 461], "matter": [6, 334, 493], "max": [0, 1, 2, 195, 212, 340, 366, 367, 368, 391, 421, 428, 429, 434, 436, 437, 442, 446, 448, 450, 468, 472, 491, 494, 500], "max_buffer_s": 216, "max_freq": 403, "max_i": 243, "max_norm": 318, "max_recommended_working_set_s": [216, 224], "max_val": 428, "maximum": [0, 7, 27, 39, 94, 109, 219, 223, 318, 334, 362, 366, 367, 368, 396, 403, 424, 425, 430, 449, 464, 496], "maxpool1d": 334, "maxpool2d": 334, "maxpool3d": 334, "maxtotalthreadsperthreadgroup": 2, "mca": 492, "md": 195, "me": 6, "mean": [0, 1, 5, 6, 7, 147, 250, 251, 252, 308, 334, 339, 355, 375, 394, 419, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 491, 494, 497], "meant": 113, "measur": 500, "mechan": 411, "medic": 349, "meet": 9, "member": [2, 334, 380, 385], "memori": [0, 1, 2, 8, 84, 215, 217, 218, 219, 221, 222, 223, 224, 411, 464, 468, 491, 496, 497], "memory_order_relax": 1, "memory_s": [216, 224], "memoryview": [496, 497], "merg": 491, "meshgrid": 0, "metadata": [5, 200, 269, 270], "metal": [2, 4, 8, 146], "metal_captur": 3, "metal_kernel": 1, "metal_path": 9, "metallib": [2, 9], "method": [2, 6, 10, 11, 31, 113, 121, 162, 316, 324, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 381, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 464, 467, 468, 469, 470, 471, 472, 473, 475, 478, 479, 486], "millisecond": [9, 491, 500], "min": [0, 2, 195, 228, 340, 391, 421, 428, 429, 448, 450], "min_freq": 403, "min_i": 243, "min_val": 428, "mind": [2, 6], "mine": 6, "minibatch": 7, "minim": 492, "minimum": [0, 28, 39, 94, 110, 403, 433, 434], "minsizerel": 9, "minu": 140, "minut": 6, "mish": 334, "mismatch": 493, "miss": [377, 493, 499], "mix": 495, "mkdir": [3, 9], "ml": 9, "mlp": [7, 334, 411, 466], "mlp_dim": [6, 411], "mlx": [1, 3, 5, 6, 7, 9, 328, 334, 461, 464, 466, 488, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], "mlx_build_acceler": 4, "mlx_build_benchmark": 9, "mlx_build_cpu": 9, "mlx_build_exampl": 9, "mlx_build_gguf": 9, "mlx_build_met": [2, 4, 9], "mlx_build_metallib": 2, "mlx_build_python_bind": 9, "mlx_build_safetensor": 9, "mlx_build_test": 9, "mlx_cxx_flag": 4, "mlx_disable_compil": [120, 133, 491], "mlx_ext": 2, "mlx_ext_metallib": 2, "mlx_found": 4, "mlx_include_dir": [2, 4], "mlx_librari": 4, "mlx_metal_debug": [3, 9], "mlx_metal_jit": 9, "mlx_root": 4, "mlx_sample_extens": 2, "mlx_trace": 3, "mlxfn": [141, 143, 175, 493], "mnist": 7, "mode": [0, 1, 2, 106, 238, 373, 384, 386, 412, 416, 417, 492], "model": [5, 7, 8, 271, 316, 317, 320, 321, 334, 370, 373, 375, 377, 381, 384, 386, 387, 388, 390, 411, 461, 464, 466, 474, 475, 477, 491, 492, 493, 496], "modest": 2, "modif": 497, "modifi": 497, "modul": [2, 4, 6, 7, 316, 317, 400, 411, 461, 477, 490, 491, 496], "moment": [6, 468, 472], "momentum": [339, 473, 475, 479, 491], "monei": 6, "monoton": 447, "more": [1, 2, 3, 4, 7, 11, 79, 119, 141, 167, 189, 190, 192, 193, 194, 197, 198, 210, 222, 223, 269, 270, 326, 334, 339, 348, 398, 403, 411, 412, 414, 415, 416, 417, 433, 488, 491, 492, 494, 495, 498, 500], "most": [2, 149, 247, 307, 334, 477, 491, 492, 494, 495, 496], "move": [0, 2, 229, 500], "moveaxi": 0, "mpi": 328, "mpiexec": 492, "mpirun": 492, "mse": 308, "mse_loss": 334, "mtl": 2, "mtl_capture_en": 3, "mtlcommandbuff": 2, "mu": 479, "much": [1, 2, 6, 336, 337, 338, 366, 367, 368, 491, 496], "multi": [8, 149, 341, 342, 343, 344, 345, 346, 493, 495, 497], "multidimension": 214, "multiheadattent": [6, 334], "multipl": [0, 1, 9, 15, 91, 143, 145, 147, 167, 168, 210, 230, 243, 244, 390, 403, 481, 482, 484, 491, 496, 499], "multipli": [0, 2, 39, 168, 243, 244, 347, 403, 412], "murtadha": 6, "must": [0, 1, 2, 3, 9, 91, 94, 141, 148, 149, 166, 168, 192, 193, 195, 246, 247, 251, 254, 257, 258, 313, 412, 497], "mx": [1, 2, 3, 4, 5, 6, 7, 39, 97, 98, 113, 124, 127, 141, 142, 143, 146, 163, 175, 183, 185, 192, 193, 195, 196, 200, 253, 271, 279, 280, 307, 308, 318, 334, 336, 337, 338, 339, 350, 359, 362, 366, 367, 368, 370, 377, 381, 396, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 430, 433, 434, 435, 439, 442, 449, 459, 461, 464, 466, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501], "my": [6, 9], "my_devic": 501, "my_path": 271, "myexp": [1, 146], "myexp_strid": 1, "mymlp": 464, "n": [0, 1, 2, 6, 31, 91, 99, 100, 101, 102, 103, 104, 105, 144, 149, 150, 152, 153, 155, 156, 159, 161, 172, 173, 251, 288, 304, 309, 339, 341, 342, 343, 344, 345, 346, 348, 349, 354, 360, 395, 412, 441, 446, 492], "n_kv": 149, "n_q": 149, "n_t": 354, "naiv": [2, 494], "naive_add": 494, "name": [1, 2, 113, 142, 146, 168, 200, 243, 244, 269, 270, 271, 272, 334, 355, 374, 377, 379, 492, 495, 499], "named_modul": 334, "namespac": 4, "nan": [0, 17, 83, 177, 178, 180, 231], "nan_to_num": 0, "nanobind": [2, 411], "nanobind_add_modul": 2, "nativ": 9, "natur": [0, 201, 203, 496], "nb": 2, "nb_domain": 2, "nb_func": 411, "nb_modul": 2, "nb_static": 2, "nbyte": 2, "nc": 339, "ndarrai": [31, 495, 496, 498], "ndhwc": [343, 346, 349], "ndim": [0, 1, 2, 163, 195, 197, 412], "ne": 1, "nearest": [1, 412], "necessari": 334, "necessarili": 301, "need": [1, 2, 4, 6, 7, 8, 9, 83, 243, 334, 388, 389, 403, 411, 488, 492, 494, 496, 497, 498, 500], "neg": [0, 119, 163, 181, 231, 265, 302, 362, 366, 367, 368, 390, 436, 444, 446, 495], "negat": [0, 232], "negative_slop": [362, 430], "neginf": [0, 231], "neighbor": 412, "neither": [169, 308], "nelem": 2, "nervou": 6, "nest": [79, 95, 322, 334, 464, 490, 494], "nesterov": 479, "network": [6, 8, 339, 348, 351, 414, 415, 461, 464, 478, 492], "neural": [6, 8, 351, 414, 415, 447, 461, 464, 478], "never": [6, 496], "new": [0, 2, 7, 92, 119, 229, 233, 263, 287, 303, 310, 320, 321, 382, 390, 464, 466, 477, 482, 491, 493, 495, 496, 497], "new_tre": 321, "next": [2, 4, 6, 7, 222, 493], "nh": [354, 360, 395], "nhwc": [339, 342, 345], "nice": [494, 496], "nlc": [339, 341, 344], "nld": [354, 360, 395], "nlh": [354, 360, 395], "nll": [436, 444], "nll_loss": 334, "nn": [2, 6, 7, 271, 320, 334, 461, 464, 466, 475, 477, 491, 493, 496], "nobodi": 6, "node": [95, 137, 312, 321, 322], "nois": 5, "noisi": 5, "nomins": 2, "non": [0, 1, 2, 4, 9, 214, 385, 395, 447, 464], "none": [1, 2, 6, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 120, 122, 123, 126, 127, 128, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 221, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 319, 320, 321, 322, 336, 337, 338, 352, 366, 367, 368, 370, 374, 375, 382, 387, 390, 395, 403, 411, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 468, 486, 493, 495], "nonlinear": [395, 491], "nonzero": 495, "noop": 387, "nor": [2, 169, 308], "norm": [6, 147, 318, 355, 446, 472, 473], "norm1": 6, "norm2": 6, "norm_first": 411, "normal": [1, 2, 5, 6, 145, 146, 147, 192, 251, 257, 334, 336, 337, 338, 339, 355, 359, 361, 366, 367, 368, 394, 411, 414, 416, 497, 500], "not_equ": 0, "notabl": [6, 8], "notat": [117, 319, 379], "note": [0, 1, 2, 4, 6, 9, 17, 19, 84, 91, 95, 101, 104, 105, 113, 149, 157, 158, 168, 177, 195, 217, 243, 247, 310, 316, 334, 394, 412, 466, 497, 499], "noth": [6, 113, 334, 496], "notic": [6, 493, 494, 499], "now": [1, 2, 6, 9, 393, 491, 492, 497], "np": [1, 6, 7, 492, 497, 498], "npy": [200, 268, 499], "npz": [6, 200, 271, 272, 377, 381, 499], "nuclear": 195, "nullopt": 0, "num": [0, 6, 199, 256], "num_class": [7, 466], "num_decoder_lay": 411, "num_embed": [351, 392], "num_encoder_lay": 411, "num_epoch": [7, 466], "num_exampl": 5, "num_featur": [5, 339], "num_group": 355, "num_head": [6, 390, 411], "num_it": 5, "num_lay": [6, 7, 466], "num_param": 334, "num_paramet": 391, "num_sampl": 247, "num_split": 0, "number": [0, 2, 12, 19, 62, 71, 95, 100, 101, 102, 104, 105, 117, 142, 144, 149, 168, 169, 173, 184, 199, 231, 238, 243, 244, 247, 250, 252, 256, 258, 262, 265, 266, 299, 300, 304, 308, 311, 312, 316, 334, 339, 341, 342, 343, 344, 345, 346, 348, 349, 355, 359, 390, 391, 411, 412, 414, 415, 416, 417, 480, 482, 483, 488, 491, 494, 501], "number_of_el": 0, "numer": [6, 145, 147, 195, 205, 209, 281, 339, 355, 359, 361, 394, 433, 434, 436, 446, 467, 468, 469, 470, 471, 472, 478, 491, 496], "numpi": [2, 6, 7, 8, 14, 17, 19, 88, 89, 90, 92, 129, 130, 134, 170, 171, 177, 186, 187, 188, 205, 210, 212, 228, 230, 234, 240, 261, 264, 291, 496, 498, 499], "nw": 1, "nwhc": 348, "o": [2, 9, 149, 360], "o_t": 360, "obj": 269, "object": [3, 11, 31, 51, 79, 95, 142, 143, 146, 183, 271, 312, 319, 320, 321, 322, 326, 348, 411, 490], "observ": 6, "occupi": [117, 168, 243, 244], "occur": 497, "odim": 7, "odot": [354, 360], "off": [6, 9, 496], "offer": 441, "offset": [0, 1, 2, 6, 47, 84, 119, 145, 148, 302], "often": 349, "ok": [377, 491, 493, 494], "okai": [491, 496], "old": 6, "older": [141, 143, 175], "omit": [472, 492], "onc": [2, 9, 491, 493], "one": [0, 2, 4, 6, 9, 39, 79, 85, 94, 100, 101, 102, 104, 105, 139, 141, 144, 145, 147, 148, 195, 203, 210, 244, 247, 286, 291, 307, 326, 387, 412, 435, 492, 493, 500], "ones": [0, 2, 6, 236, 271, 280, 304, 388, 389, 466, 492, 495], "ones_lik": 0, "onli": [1, 2, 6, 8, 9, 83, 91, 100, 101, 102, 104, 105, 113, 192, 193, 195, 224, 243, 251, 310, 334, 374, 375, 377, 382, 384, 387, 388, 389, 464, 491, 492, 493, 494, 499, 500], "onlin": 469, "op": [1, 2, 237, 310, 375, 496], "open": [3, 9, 19, 254, 258], "openmpi": 492, "oper": [3, 6, 8, 10, 38, 85, 86, 87, 102, 149, 167, 168, 240, 242, 281, 289, 296, 324, 334, 411, 473, 491, 492, 494, 495, 496, 497, 498, 500, 501], "operand": [131, 132, 167], "opportun": 491, "opt": [474, 492], "optim": [1, 3, 5, 7, 8, 388, 491, 492, 494, 496], "option": [0, 3, 6, 15, 16, 18, 19, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 84, 85, 86, 87, 91, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 109, 110, 111, 112, 113, 117, 118, 119, 122, 123, 124, 126, 127, 128, 141, 143, 144, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 167, 168, 169, 173, 181, 182, 185, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 209, 211, 213, 214, 223, 227, 231, 235, 238, 239, 241, 243, 244, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 262, 263, 265, 281, 282, 283, 286, 287, 288, 292, 294, 295, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 312, 314, 316, 319, 320, 321, 322, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 354, 360, 363, 366, 367, 368, 370, 374, 375, 377, 382, 387, 390, 392, 393, 395, 398, 403, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 467, 468, 469, 470, 471, 472, 473, 475, 478, 479, 480, 488, 491, 493, 499, 501], "ord": 195, "order": [0, 1, 29, 84, 102, 132, 192, 193, 195, 239, 243, 301, 334, 355, 388, 400, 475, 491, 494], "ordinari": 176, "org": [355, 359, 361, 369, 394, 425, 447], "origin": [6, 119, 318, 339, 383, 414, 415, 416, 417, 467, 468, 469, 472, 473, 493, 497], "orthonorm": 172, "ostream": 2, "ostringstream": 2, "other": [0, 2, 6, 8, 183, 195, 334, 376, 464, 473, 491, 492, 493, 495, 496, 498], "other_input": 334, "otherwis": [19, 102, 124, 223, 253, 316, 319, 320, 321, 322, 375, 377, 387, 409, 411, 412, 427, 433, 438, 445, 457, 458, 496, 497], "our": [1, 2, 6, 7, 400, 467, 468, 469, 472, 473, 492], "out": [0, 1, 2, 9, 91, 146, 175, 348, 349, 384, 491, 492, 493, 494, 495], "out_ax": [312, 494], "out_channel": [341, 342, 343, 344, 345, 346], "out_dim": [334, 464], "out_dtyp": 2, "out_idx": 2, "out_mask": 91, "out_proj": [6, 464], "out_ptr": 2, "out_shap": [1, 2], "outer": [0, 491, 496], "outlier": 441, "output": [0, 1, 2, 6, 9, 16, 17, 18, 19, 29, 84, 91, 92, 95, 97, 98, 109, 110, 111, 112, 113, 131, 142, 144, 145, 146, 147, 148, 149, 156, 159, 160, 161, 166, 167, 169, 172, 173, 177, 195, 199, 209, 211, 213, 214, 227, 231, 235, 236, 239, 241, 242, 246, 247, 248, 250, 251, 252, 254, 257, 258, 271, 272, 279, 280, 281, 286, 288, 292, 296, 302, 304, 308, 309, 310, 311, 312, 313, 314, 315, 339, 341, 342, 343, 344, 345, 346, 359, 363, 390, 393, 409, 411, 412, 414, 415, 416, 417, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 458, 461, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500], "output_dim": [7, 334, 363, 393], "output_directori": 2, "output_dtyp": [1, 146], "output_fil": 6, "output_nam": [1, 146], "output_shap": [1, 146], "output_strip_trailing_whitespac": 4, "output_vari": 4, "outsid": [146, 163], "over": [0, 2, 6, 7, 16, 18, 27, 28, 29, 30, 99, 100, 101, 102, 103, 104, 105, 109, 110, 111, 112, 152, 155, 158, 161, 176, 195, 197, 199, 209, 211, 213, 227, 239, 241, 267, 281, 282, 288, 292, 299, 301, 309, 339, 341, 342, 343, 344, 345, 346, 355, 361, 394, 435, 480, 483, 492, 494], "overal": 2, "overhead": [491, 496, 500], "overlap": 1, "overload": 19, "overrid": [2, 133], "overview": 3, "overwrit": 6, "own": [9, 497], "owndata": 497, "p": [9, 246, 334, 347, 348, 349, 446, 470, 472], "pack": [168, 243, 244], "packag": [2, 5, 7, 9, 328, 461, 492], "package_data": 2, "pad": [0, 1, 99, 100, 101, 102, 103, 104, 105, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 336, 337, 338, 341, 342, 343, 344, 345, 346, 366, 367, 368], "pad_valu": 0, "pad_width": [0, 238], "padding_hi": 0, "padding_lo": 0, "page": 498, "pain": 6, "pair": [0, 2, 238, 377, 398], "pairwis": 446, "pan": 6, "paper": [339, 403, 467, 468, 469, 472, 473], "parallel": [492, 500], "param": [308, 316, 334, 461, 493, 494], "paramet": [0, 1, 2, 5, 6, 7, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 359, 360, 361, 362, 363, 366, 367, 368, 370, 371, 374, 375, 377, 382, 383, 384, 387, 388, 389, 390, 391, 392, 393, 394, 395, 398, 400, 403, 407, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 426, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 458, 460, 461, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 486, 491, 492, 493, 494, 496], "parameter_scal": 468, "parametr": [391, 448], "pars": [6, 142], "parse_arg": 6, "parser": 6, "part": [1, 2, 141, 143, 174, 175, 259, 494, 495], "partial": [388, 389, 491, 496], "particip": [122, 123, 126, 127, 128], "particular": [243, 355], "particularli": 491, "partit": [0, 29], "pass": [1, 2, 6, 7, 66, 80, 237, 238, 308, 317, 319, 320, 321, 334, 375, 387, 388, 389, 400, 491, 492, 493, 496], "password": 492, "path": [3, 4, 9, 132, 141, 142, 143, 175, 225, 271, 272, 316, 321, 377, 492], "pattern": [334, 496], "peak": [219, 221], "penalti": 479, "pep": 497, "per": [6, 7, 117, 149, 168, 243, 244, 316, 339, 355, 359, 361, 394, 486, 491, 492, 496], "perceptron": [8, 493], "perf_count": 491, "perfectli": 496, "perform": [0, 1, 2, 3, 6, 8, 15, 91, 102, 109, 110, 111, 112, 128, 131, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 167, 168, 172, 192, 193, 210, 244, 266, 281, 295, 334, 355, 411, 416, 417, 466, 491, 492, 495, 496, 500], "perhap": [2, 6], "perm": 7, "permtuat": 253, "permut": [0, 7], "persist": 9, "pg": 195, "phi": [352, 423], "physic": 492, "pi": [135, 352, 403, 424, 494], "pick": 2, "pip": [2, 4, 9], "pipelin": 2, "pixel": 348, "place": [2, 6, 39, 265, 266, 316, 492, 496, 497], "placehold": 491, "plai": [2, 6], "plain": 400, "plan": [2, 491], "platform": 9, "plu": [0, 203], "point": [0, 2, 5, 6, 9, 84, 162, 165, 244, 326], "pointer": 2, "pool": [336, 337, 338, 366, 367, 368, 500], "popul": 2, "portion": 347, "posinf": [0, 231], "posit": [0, 6, 29, 119, 148, 163, 169, 182, 189, 190, 229, 231, 239, 251, 265, 302, 308, 320, 334, 341, 342, 343, 344, 345, 346, 390, 398, 403, 436, 446, 493], "possibl": [283, 351, 392, 491, 492, 495, 500], "possibli": [6, 15, 91, 167, 210, 318], "postur": 6, "potenti": 223, "power": [0, 494, 497], "practic": [2, 491], "pre": [9, 149, 433], "preced": 355, "precis": [0, 2, 6, 140, 149, 334, 352, 394, 433, 474, 491], "preclud": 334, "pred": [437, 441], "predic": [316, 382], "predict": [433, 436, 437, 438, 439, 440, 441, 443, 444, 445], "prefix": [312, 319], "prelu": 334, "prepar": [2, 6], "prepend": [3, 210], "preprint": [6, 467, 473], "preprocessor": 9, "present": 1, "preserv": [263, 494], "press": [6, 195], "pressur": 2, "pretti": [491, 496], "prevent": [289, 446, 497], "previou": [222, 223, 224], "primal": [1, 2, 113, 184, 311], "primit": 494, "print": [1, 2, 5, 6, 7, 9, 113, 185, 318, 319, 320, 321, 323, 334, 488, 491, 492, 493, 494, 495, 496, 497, 498], "prior": [242, 295, 296], "priorit": 494, "privat": [2, 4], "prng": [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 488], "prob": 433, "probabl": [9, 254, 347, 348, 349, 393, 433, 435, 439, 500], "problem": [5, 7, 334], "process": [6, 102, 106, 121, 122, 123, 124, 126, 127, 128, 320, 321, 349, 351, 411, 490, 492], "processor": 9, "prod": [0, 1], "produc": [0, 2, 9, 95, 390, 461, 493], "product": [0, 2, 15, 84, 111, 176, 184, 185, 191, 210, 237, 241, 299, 311, 390, 498], "profil": 3, "program": [4, 219, 492], "programmat": 389, "project": [3, 4, 6, 390, 493], "project_source_dir": 2, "promot": [2, 149], "promote_typ": 2, "promoted_dtyp": 2, "prompt": 6, "propag": [494, 495], "properti": [32, 39, 48, 52, 62, 63, 69, 71, 383, 386, 476, 494], "proportion": 318, "protocol": 497, "provid": [0, 2, 6, 84, 117, 141, 142, 169, 253, 265, 299, 308, 320, 322, 328, 334, 370, 375, 377, 387, 388, 389, 392, 393, 411, 412, 460, 464, 492, 493, 499, 501], "pseudo": 488, "pth": 6, "public": [2, 334], "pun": 0, "pure": [1, 113, 334, 466], "purpos": [1, 195], "purs": 6, "push": 2, "push_back": 2, "put": [0, 1, 7, 242, 491, 492], "put_along_axi": 0, "py": [2, 6, 9, 492], "pypi": 9, "python": [1, 3, 4, 6, 51, 69, 79, 137, 319, 320, 321, 322, 323, 464, 474, 475, 477, 490, 492, 493, 494, 497], "python_execut": 4, "python_requir": 2, "pytorch": [6, 8, 352, 355, 494], "pytorch_compat": 355, "q": [149, 196], "qualifi": 492, "quantiz": [0, 117, 168, 200, 244, 392, 393], "quantized_matmul": 0, "quantizedembed": 334, "quantizedlinear": 334, "quarter": 6, "queri": [6, 149, 224, 390], "query_input_dim": 390, "query_proj": 6, "question": [6, 496], "queue": 3, "quick": [2, 8], "quit": [494, 497], "quotient": [0, 129, 130, 165], "r": [2, 6, 196, 308, 348, 354], "r_t": 354, "race": 500, "radian": [0, 116], "rag": 6, "rain": 6, "rais": [0, 6, 113, 195, 223, 240, 283, 377, 493], "ram": 6, "random": [1, 2, 3, 5, 6, 7, 8, 146, 336, 337, 338, 339, 359, 366, 367, 368, 377, 384, 491, 493, 494, 500, 501], "randomli": [5, 6, 253, 347, 348, 349], "rang": [0, 2, 3, 5, 6, 7, 9, 19, 163, 167, 199, 415, 417, 424, 425, 466, 480, 481, 482, 483, 484, 488, 491, 494, 496, 500], "rank": [0, 126, 127, 128, 442, 492], "rate": [5, 466, 467, 468, 469, 470, 471, 472, 473, 478, 479], "rather": [2, 494, 500], "ratio": [0, 25], "rceil": 91, "re": [7, 9, 461], "readabl": 3, "readi": 2, "real": [0, 156, 157, 158, 159, 160, 161, 189, 190, 192, 193], "realli": 361, "reason": [1, 6, 495], "reboot": 9, "receiv": [126, 127, 316, 482, 497], "reciproc": [0, 267], "reclaim": 222, "recommend": [9, 223, 473], "recompil": [95, 491], "record": [3, 219, 496], "recreat": [323, 466], "rectifi": [362, 396, 397, 416, 417, 430, 449, 450], "recurr": [354, 360, 395], "recurs": [142, 334, 374, 375, 380, 385, 387, 464], "recv": 127, "redirect": 2, "reduc": [0, 1, 9, 16, 18, 27, 28, 123, 209, 211, 213, 227, 241, 288, 292, 309, 322, 339, 411, 441], "reduct": [16, 18, 123, 209, 211, 227, 241, 322, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 492], "redund": 494, "refer": [195, 359, 369, 383, 414, 415, 416, 417, 425, 447, 495], "reflect": [383, 491, 495, 497], "regard": 352, "regardless": [84, 149], "regist": [2, 7], "register_librari": 2, "regress": [8, 441], "regular": [39, 348, 447, 471, 491, 493, 495], "regularli": 2, "reimplement": 2, "rel": [17, 177, 468, 491], "relative_step": 468, "relax": 223, "releas": 4, "relev": 2, "reli": [1, 2], "relu": [334, 391, 411, 448, 461], "relu6": 334, "remain": [0, 6, 224, 308, 321, 347, 348, 349, 492], "remaind": [0, 130], "remov": [0, 119, 210, 247, 286, 435], "rep": [0, 300], "repeat": [0, 300], "repeatedli": 5, "repetit": 262, "replac": [0, 6, 231, 388, 389, 411, 445], "replai": 3, "repli": 6, "repo": [5, 7, 9, 491], "report": [217, 223], "repres": [2, 6, 121, 124, 168, 442, 446, 497], "represent": [6, 243, 310, 319, 323], "request": 2, "requir": [1, 2, 4, 6, 334, 492, 496, 497], "requires_grad": 494, "rerun": [491, 496], "rescal": 318, "research": 8, "reset": 221, "reset_peak_memori": 219, "reshap": [0, 6, 195, 412, 491, 495], "resid": 224, "resolv": 2, "resourc": 2, "resource_limit": 216, "respect": [2, 5, 7, 113, 145, 147, 167, 168, 169, 243, 308, 320, 334, 339, 352, 355, 359, 361, 464, 494, 498], "respons": 2, "rest": [6, 148, 320, 321, 398], "restart": 9, "restor": 265, "result": [0, 6, 15, 19, 39, 79, 84, 95, 142, 145, 147, 168, 185, 195, 210, 244, 251, 262, 287, 320, 321, 322, 403, 433, 491, 494, 497], "resum": 6, "return": [0, 1, 2, 4, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 51, 69, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 116, 117, 118, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 222, 223, 224, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 334, 354, 360, 370, 371, 372, 374, 375, 376, 377, 378, 379, 380, 384, 385, 387, 388, 389, 395, 413, 414, 415, 416, 417, 418, 419, 420, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 461, 464, 474, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500], "return_metadata": 200, "revers": [0, 2, 42, 43, 44, 45, 84, 109, 110, 111, 112, 303, 403], "rf": 9, "rfft": 156, "rfft2": 157, "rfftn": 158, "rho": 467, "rhs_indic": [0, 167, 168], "rhs_mask": 91, "right": [0, 1, 2, 9, 243, 264, 265, 352, 412, 424, 425, 436, 438, 446], "right_shift": 0, "rm": [6, 9, 147, 468], "rmsnorm": [6, 334], "rmsprop": 466, "rnn": [334, 354], "roadcast": 254, "robust": 441, "roform": [6, 398], "roll": 0, "root": [0, 6, 147, 267, 284, 394], "rope": [6, 334], "rosetta": 9, "rotari": [6, 148, 398], "rotat": [148, 398], "round": [0, 243], "routin": 2, "row": [0, 1, 2, 84, 144, 146, 173, 243, 304], "row_contigu": 2, "rpath": 2, "rsqrt": 0, "rtol": [0, 17, 177], "rule": [2, 466], "run": [1, 2, 3, 4, 6, 7, 8, 9, 10, 146, 237, 324, 339, 370, 467, 468, 470, 471, 472, 491, 492, 493, 496, 500, 501], "runtim": [6, 124, 328, 491, 492], "runtime_error": 2, "safetensor": [9, 200, 270, 377, 381, 466, 496, 499], "sai": [2, 6, 461, 496], "said": 6, "sake": 494, "same": [0, 2, 6, 9, 17, 39, 83, 92, 95, 100, 101, 102, 104, 105, 106, 122, 145, 147, 156, 159, 160, 161, 168, 169, 177, 184, 238, 247, 265, 266, 280, 310, 311, 313, 321, 334, 337, 338, 339, 347, 355, 359, 367, 368, 392, 413, 414, 415, 416, 417, 418, 419, 420, 435, 446, 464, 474, 488, 491, 492, 493, 495, 500], "sampl": [2, 5, 6, 199, 246, 247, 248, 250, 251, 254, 257, 258, 414, 415, 416, 417, 419, 420, 436, 442, 446, 488, 491, 493], "sat": 6, "save": [3, 6, 8, 200, 225, 243, 269, 270, 271, 272, 381, 493, 496], "save_gguf": 499, "save_safetensor": [381, 466, 499], "save_weight": 334, "savez": [6, 381, 499], "savez_compress": 499, "saw": [6, 494], "scalar": [0, 2, 14, 15, 17, 31, 51, 79, 83, 88, 89, 90, 91, 92, 94, 129, 130, 134, 165, 166, 169, 170, 171, 172, 177, 186, 187, 188, 199, 205, 206, 207, 208, 210, 212, 228, 230, 231, 234, 238, 240, 246, 254, 257, 258, 261, 264, 269, 291, 308, 310, 313, 317, 446, 493, 494, 496, 498], "scale": [0, 2, 6, 15, 117, 145, 147, 148, 149, 168, 172, 243, 244, 250, 252, 318, 348, 349, 361, 390, 398, 399, 403, 412, 451, 468], "scale_arr": 2, "scale_factor": 412, "scale_paramet": 468, "scatter": 0, "scatter_add": 0, "scatter_max": 0, "scatter_min": 0, "scatter_prod": 0, "schedul": [2, 223, 466, 480, 481, 482, 483, 484, 486, 500], "schema": 3, "scipi": 172, "scope": 334, "score": [6, 149, 442], "sdk": 9, "se": 1, "second": [6, 9, 119, 183, 185, 186, 206, 208, 210, 264, 293, 302, 308, 337, 338, 367, 368, 434, 442, 468, 472, 491, 493, 494, 500], "second_layer_a": 496, "second_layer_b": 496, "secret": 6, "section": [1, 6, 9, 283, 446, 491, 492, 494], "see": [1, 2, 4, 6, 7, 9, 11, 12, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 195, 222, 269, 270, 316, 326, 334, 339, 340, 348, 350, 352, 356, 357, 358, 364, 365, 373, 391, 392, 393, 396, 397, 398, 399, 401, 403, 404, 405, 406, 407, 408, 410, 412, 414, 415, 416, 417, 423, 424, 425, 451, 491, 492, 493, 494, 495, 498, 500], "seed": 249, "seen": 497, "select": [0, 3, 9, 192, 193, 301, 313, 370, 374, 382], "self": [6, 7, 10, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 51, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 113, 162, 334, 447, 464], "selu": 334, "semant": [14, 88, 89, 90, 92, 129, 130, 134, 170, 171, 186, 187, 188, 205, 210, 212, 228, 230, 234, 240, 261, 264, 291, 500], "semi": [189, 190, 251], "send": 492, "sennrich": 6, "sensit": 441, "sentencepiec": 6, "separ": [6, 66, 80, 355, 442], "sequenc": [6, 16, 18, 34, 35, 57, 58, 59, 60, 64, 72, 75, 76, 77, 81, 84, 92, 102, 126, 139, 146, 151, 152, 154, 155, 157, 158, 160, 161, 166, 209, 211, 213, 227, 235, 241, 246, 247, 248, 250, 251, 252, 254, 257, 258, 263, 279, 280, 281, 283, 286, 288, 292, 299, 300, 303, 307, 309, 314, 339, 341, 344, 354, 360, 395, 411, 488, 500], "sequenti": [334, 461], "seri": 9, "serial": 466, "set": [2, 4, 6, 7, 9, 95, 113, 120, 122, 123, 124, 126, 127, 128, 133, 145, 148, 216, 222, 223, 224, 273, 274, 290, 352, 361, 363, 373, 375, 382, 383, 384, 387, 388, 393, 398, 409, 434, 446, 458, 464, 466, 468, 470, 471, 475, 488, 493, 494, 496], "set_byt": 2, "set_compute_pipeline_st": 2, "set_data": 2, "set_default_devic": 2, "set_dtyp": 334, "set_input_arrai": 2, "set_memory_limit": 222, "set_output_arrai": 2, "set_vector_byt": 2, "setup": [2, 4, 5, 7, 9, 491, 493], "sever": [6, 9, 99, 100, 101, 102, 103, 104, 105, 271, 272, 491, 499], "sgd": [5, 7, 466, 473, 475, 480, 481, 484, 491], "shade": [1, 2], "shall": 6, "shape": [0, 2, 3, 6, 7, 66, 83, 84, 91, 92, 95, 99, 100, 101, 102, 103, 104, 105, 119, 122, 126, 127, 141, 143, 146, 149, 150, 153, 156, 159, 160, 161, 166, 167, 172, 184, 194, 198, 210, 235, 236, 246, 247, 248, 250, 251, 252, 254, 257, 258, 263, 265, 280, 307, 310, 311, 313, 314, 315, 334, 336, 337, 338, 339, 341, 342, 343, 344, 345, 346, 348, 349, 354, 359, 360, 363, 366, 367, 368, 377, 395, 413, 414, 415, 416, 417, 418, 419, 420, 435, 446, 466, 491, 493, 494, 495, 498, 500], "shapeless": [0, 95, 141, 143], "share": [8, 117, 168, 243, 244, 310, 492], "shazeer": 6, "shift": [0, 186, 264, 265, 339], "shop": 6, "should": [1, 2, 4, 5, 6, 7, 9, 84, 119, 122, 145, 146, 147, 149, 184, 215, 224, 225, 242, 243, 296, 302, 308, 311, 316, 319, 334, 341, 342, 343, 344, 345, 346, 348, 349, 384, 390, 400, 435, 437, 442, 464, 490, 491, 492, 493, 494, 496, 497, 501], "show": [9, 326, 491], "shown": 2, "shuffl": 7, "side": [0, 238, 336, 337, 338, 366, 367, 368, 491], "sigma": [352, 353, 354, 360, 402, 414, 415, 416, 417, 425, 426, 431, 452, 453], "sigmoid": [0, 6, 334, 364, 401, 425, 431, 433, 453], "sign": [0, 17, 177, 326, 473], "signal": [106, 412], "signatur": [1, 146], "signedinteg": [12, 183], "signific": 243, "silent": [159, 160, 161], "silicon": [2, 6, 8, 9, 500], "silu": 334, "simd": 1, "simd_sum": 1, "simdgroup": 1, "simdgroup_s": 1, "similar": [6, 168, 183, 320, 388, 389, 390, 434, 497, 499], "similarli": [2, 9, 210, 494, 496], "simpl": [2, 6, 7, 334, 351, 460, 466, 491, 492, 493, 494, 496], "simple_axpbi": 2, "simple_tim": 2, "simplest": [2, 334, 492], "simpli": [2, 6, 9, 350, 362, 396, 422, 430, 449, 459, 464, 491, 492, 494], "simplic": 0, "simultan": 1, "sin": [0, 113, 403, 493, 494, 498], "sinc": [1, 2, 6, 7, 168, 219, 464, 473, 482, 491, 493, 497, 500], "sine": [0, 22, 23, 277, 278, 493, 494], "sing": 195, "singer": 469, "singl": [2, 7, 137, 184, 200, 214, 238, 311, 337, 338, 367, 368, 491, 493, 495, 499], "singleton": [0, 16, 18, 27, 28, 124, 209, 210, 211, 213, 227, 241, 288, 292, 309], "singular": [195, 197], "sinh": 0, "sinusoid": 403, "sinusoidalpositionalencod": 334, "size": [0, 1, 2, 6, 7, 52, 69, 91, 100, 101, 104, 105, 117, 139, 145, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 166, 168, 172, 173, 183, 191, 195, 218, 223, 224, 243, 244, 247, 263, 279, 283, 286, 307, 310, 316, 334, 336, 337, 338, 341, 342, 343, 344, 345, 346, 351, 359, 366, 367, 368, 392, 393, 412, 468, 492, 496, 497], "size_in_megabyt": 224, "size_t": [0, 2], "skip": [3, 84], "slice": [0, 280, 495], "slice_s": [0, 279], "slice_upd": 0, "slide": [336, 337, 338, 366, 367, 368], "slight": [6, 496], "slightli": [398, 500], "slope": 362, "slot": 492, "slow": 491, "slowli": 6, "small": [6, 140, 145, 147, 339, 355, 361, 394, 436, 441, 446, 491, 492, 500], "smaller": [0, 9, 239, 473, 491], "smallest": 195, "smile": 6, "smooth": [435, 445, 478], "smooth_l1_loss": 334, "sned": 128, "snippet": 492, "so": [1, 2, 6, 9, 169, 172, 308, 347, 412, 466, 491, 492, 496, 500], "softmax": [0, 6, 149, 334, 365, 432, 435], "softmin": 334, "softplu": [334, 369, 447], "softshrink": 334, "softsign": 334, "solv": 334, "some": [0, 2, 5, 6, 7, 142, 375, 387, 466, 475, 491, 493, 494, 496], "someon": 6, "someth": [5, 6, 495], "sometim": 491, "sonoma": 9, "soon": 6, "sort": [0, 29, 30, 239, 301], "sourc": [0, 1, 2, 3, 4, 61, 126, 127, 146, 229, 303, 492], "space": [0, 2, 199, 433, 444], "spars": [0, 214], "spatial": [100, 101, 102, 104, 105, 336, 337, 338, 355, 366, 367, 368, 412], "speak": [6, 195], "special": 2, "specif": [1, 2, 9, 492, 494], "specifi": [0, 2, 19, 38, 100, 101, 102, 104, 105, 119, 157, 158, 166, 169, 191, 195, 199, 229, 235, 242, 247, 262, 293, 295, 296, 299, 302, 303, 308, 312, 314, 339, 409, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 458, 491, 492, 493, 494, 500], "speed": [1, 2], "spent": 6, "split": [0, 353, 355, 426], "splittabl": 488, "sqrt": [0, 6, 135, 149, 172, 339, 352, 355, 359, 361, 363, 394, 403, 414, 415, 416, 417, 424, 467, 469, 470, 471, 478, 491], "squar": [0, 5, 6, 147, 173, 194, 198, 267, 284, 308, 320, 334, 394, 443, 445, 467, 468, 470, 471, 472, 494, 497], "squeez": [0, 412, 491], "src": [0, 126, 127], "ssh": 492, "stabil": [145, 147, 339, 355, 359, 361, 394, 433, 434, 436, 467, 468, 469, 470, 471, 472, 478], "stabl": [205, 209, 281, 441], "stable_abi": 2, "stack": [0, 491], "standard": [0, 1, 4, 7, 51, 79, 210, 248, 252, 288, 411, 414, 416, 419, 492, 498], "starmap": [6, 320], "start": [0, 1, 2, 5, 6, 8, 9, 19, 148, 199, 225, 279, 280, 283, 322, 491, 493, 495, 500], "start_axi": [0, 50, 163], "start_captur": 3, "start_indic": [279, 280], "state": [6, 7, 334, 354, 360, 395, 466, 475, 488, 491], "static": [9, 491], "static_cast": 2, "std": [0, 2, 4, 419, 493], "step": [0, 3, 4, 6, 7, 19, 334, 354, 360, 395, 468, 475, 480, 482, 483, 484, 491, 492], "step_decai": 466, "step_siz": 484, "still": [6, 9, 195, 491, 496], "stochast": [469, 470, 472, 479, 496], "stood": 6, "stop": [0, 2, 6, 19, 199, 226, 289, 494, 495], "stop_captur": 3, "stop_gradi": [0, 494], "storag": 84, "store": 6, "str": [2, 106, 131, 132, 141, 142, 143, 146, 169, 175, 192, 193, 195, 200, 214, 216, 225, 268, 269, 270, 271, 272, 308, 316, 319, 323, 370, 371, 374, 375, 377, 379, 381, 387, 412, 416, 417, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446], "straight": 6, "strang": 6, "stream": [2, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 122, 123, 126, 127, 128, 129, 130, 131, 134, 135, 136, 138, 139, 140, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 309, 310, 313, 314, 315, 492, 500], "streamcontext": 290, "streamordevic": [0, 2], "street": 6, "strength": [473, 479], "strict": [124, 170, 187, 375, 377, 387], "strictli": [195, 224], "stride": [0, 2, 84, 99, 100, 101, 102, 103, 104, 105, 336, 337, 338, 341, 342, 343, 344, 345, 346, 366, 367, 368, 398, 495], "string": [0, 2, 132, 141, 146, 175, 216, 238, 493, 497, 499], "structur": [2, 474, 494], "stub": 9, "style": [2, 14, 17, 88, 89, 90, 129, 130, 134, 170, 171, 177, 186, 187, 188, 205, 210, 212, 228, 230, 234, 240, 261, 264, 291], "su": 6, "sub": [0, 7, 119, 256, 279, 280, 302, 316], "subarrai": [119, 283], "subclass": 464, "subdivid": 1, "subdtyp": 183, "subgradi": 469, "sublinear": 468, "submodul": [6, 7, 334, 371, 375, 376, 387, 389], "suboptim": 493, "subscript": [131, 132], "subsect": 6, "subsequ": 466, "subset": [334, 374], "substanti": 9, "subtl": 491, "subtract": [0, 39], "subtyp": [183, 326], "sudo": [9, 224], "sum": [0, 2, 5, 14, 112, 123, 143, 176, 195, 209, 281, 299, 302, 334, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 492, 495, 497], "sum_": [195, 441], "sum_i": 432, "sum_j": [454, 455], "summat": [131, 132], "super": [6, 7, 334, 464], "superset": [320, 474], "support": [1, 2, 6, 8, 9, 17, 91, 101, 104, 105, 149, 163, 172, 177, 189, 190, 192, 193, 194, 196, 197, 198, 200, 210, 243, 251, 492, 494, 495, 497, 499], "suppos": [494, 500], "sure": [2, 3, 6, 9, 334, 491], "surpass": [416, 417], "surpris": 6, "sw": 1, "swap": [0, 106, 223, 293, 389], "swapax": [0, 113], "swiglu": 6, "swish": [401, 453], "switch": 9, "symbol": 473, "symmetr": [100, 101, 104, 105, 189, 190, 192, 193], "symmetri": [192, 193], "synchron": [2, 491], "syntax": [39, 495], "synthet": 5, "sysctl": 224, "system": [4, 6, 9, 216, 217, 218, 224], "t": [0, 1, 2, 4, 6, 9, 135, 146, 149, 168, 189, 190, 244, 308, 334, 354, 360, 395, 467, 468, 469, 470, 471, 472, 473, 478, 479, 491, 493, 494, 500], "t_kv": 149, "t_q": 149, "tabl": [1, 195, 326, 351], "take": [0, 2, 6, 7, 88, 89, 90, 95, 141, 167, 169, 184, 212, 228, 236, 244, 296, 308, 311, 312, 315, 321, 322, 336, 337, 338, 366, 367, 368, 390, 433, 488, 492, 493, 494, 495, 499, 500, 501], "take_along_axi": [0, 495], "taken": [119, 295, 302], "talk": 492, "tan": 0, "tangent": [0, 2, 24, 25, 26, 113, 184, 297, 298, 410, 459], "tangent_i": 2, "tangent_x": 2, "tanh": [0, 334, 352, 354, 360, 369, 395, 424, 447], "target": [2, 308, 433, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 491], "target_include_directori": 2, "target_link_librari": [2, 4], "target_link_opt": 2, "target_sourc": 2, "task": [223, 441], "tau": 479, "tcp": 492, "tell": [4, 6, 491, 497], "temp": 6, "templat": [0, 1, 2, 146], "ten": 496, "tend": 473, "tensor": [200, 299, 446, 497], "tensordot": 0, "term": [2, 436, 467, 468, 469, 470, 471, 472, 478], "termin": 9, "test": [7, 9, 492], "test_imag": 7, "test_label": 7, "text": [6, 352, 354, 360, 369, 395, 402, 409, 414, 415, 416, 417, 424, 427, 428, 429, 436, 437, 438, 441, 442, 445, 447, 448, 451, 452, 457, 458, 468, 473], "textrm": [243, 352, 353, 423, 426], "tf": 497, "tgp_size": 2, "th": [109, 110, 111, 112, 118, 144, 192, 482], "than": [1, 2, 6, 79, 106, 119, 130, 148, 167, 170, 171, 187, 188, 189, 190, 192, 193, 194, 197, 198, 210, 222, 224, 318, 320, 398, 409, 412, 442, 445, 458, 468, 473, 491, 493, 494, 500], "thank": 496, "thei": [1, 2, 5, 6, 9, 17, 106, 168, 177, 400, 437, 464, 473, 490, 491, 492, 493, 496, 498, 499, 500], "them": [0, 2, 6, 122, 334, 375, 387, 492, 493, 500], "themselv": [2, 491], "thi": [0, 1, 2, 4, 6, 7, 9, 16, 17, 18, 19, 27, 28, 29, 30, 84, 113, 133, 141, 143, 146, 167, 168, 172, 175, 177, 184, 189, 190, 192, 193, 194, 195, 196, 197, 198, 205, 209, 210, 211, 213, 215, 217, 224, 227, 239, 241, 247, 274, 281, 282, 283, 288, 292, 295, 301, 309, 318, 321, 322, 334, 347, 348, 349, 353, 354, 360, 371, 372, 374, 375, 378, 379, 380, 385, 387, 388, 389, 390, 393, 395, 409, 414, 415, 416, 417, 424, 425, 426, 433, 441, 458, 464, 475, 490, 491, 492, 493, 494, 496, 497, 499], "thing": [2, 6, 492], "third": [191, 338, 368, 493], "thompson": 348, "those": [2, 6, 334], "though": [2, 6, 491, 493, 496, 497], "thousand": 496, "thread": [1, 2], "thread_index_in_simdgroup": 1, "thread_position_in_grid": [1, 2, 146], "threadgroup": [1, 2, 146], "threads_per_simdgroup": 1, "three": [6, 87, 338, 368, 412], "threefri": 488, "threshold": [409, 438, 445, 458], "through": [1, 2, 289, 411, 473, 491, 493, 494, 497], "throw": [2, 95, 124], "thu": [6, 334], "thumb": 466, "tic": 491, "tieleman": 478, "tile": [0, 149], "time": [2, 6, 9, 223, 300, 334, 354, 360, 395, 491, 494, 496, 500], "timeit": [491, 494], "titl": 2, "tmp": [1, 146], "to_quant": 316, "to_stream": 2, "toc": 491, "togeth": [0, 1, 2, 7, 243, 320, 321, 492], "tok_embed": 6, "token": [6, 351, 392], "told": 6, "toler": [0, 17, 177], "too": [183, 491, 496], "took": 6, "tool": 9, "top": [2, 301, 363, 412], "topk": 0, "torch": [6, 497], "torch_weight": 6, "total": [224, 494], "total_norm": 318, "tpi": 491, "trace": [0, 3, 143, 491], "trace_fil": 3, "tracer": 388, "track": [2, 334, 339], "track_running_stat": 339, "trade": 496, "tradit": [6, 148, 348, 349, 398], "train": [6, 7, 334, 339, 347, 348, 349, 373, 375, 387, 414, 415, 493], "train_imag": [7, 466], "train_label": [7, 466], "trainabl": [7, 317, 334, 464], "trainable_paramet": [334, 374, 475], "transform": [1, 6, 8, 113, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 172, 317, 334, 339, 355, 361, 363, 374, 375, 387, 393, 398, 495], "transformerencod": 271, "transit": 482, "translat": [145, 361], "transpos": [0, 6, 32, 103, 104, 105, 168, 244, 344, 345, 346], "treat": [0, 2, 113, 157, 158, 160, 161, 295, 412, 491], "tree": [8, 95, 137, 169, 308, 312, 319, 320, 321, 322, 323, 474, 475, 477, 486, 494], "tree_flatten": [271, 320, 323, 334, 466, 493], "tree_map": [321, 334, 492], "tree_unflatten": [6, 466, 493], "trembl": 6, "tri": 0, "triangl": [192, 193, 304], "triangular": [189, 190, 198], "trigger": 491, "tril": 0, "trilinear": 412, "triplet": 446, "triplet_loss": 334, "triu": 0, "true": [0, 1, 2, 4, 5, 6, 17, 42, 43, 44, 45, 83, 95, 109, 110, 111, 112, 146, 148, 168, 177, 183, 189, 190, 195, 200, 214, 223, 244, 281, 313, 316, 319, 320, 321, 322, 326, 334, 339, 341, 342, 343, 344, 345, 346, 354, 355, 359, 360, 361, 363, 374, 375, 377, 384, 387, 393, 395, 398, 403, 411, 412, 433, 441, 468, 470, 471, 491, 493], "truncat": [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 257], "truth": [5, 435, 445], "try": [2, 9], "tupl": [0, 31, 66, 69, 80, 96, 100, 101, 102, 104, 105, 126, 130, 132, 137, 139, 141, 175, 184, 192, 195, 196, 197, 238, 243, 263, 265, 279, 280, 286, 307, 308, 311, 319, 320, 321, 322, 323, 336, 337, 338, 342, 343, 345, 346, 366, 367, 368, 377, 379, 400, 412, 468, 470, 471, 472, 473, 490, 493, 494], "tutori": 2, "twice": 500, "two": [0, 2, 14, 15, 17, 25, 83, 86, 88, 89, 90, 91, 119, 129, 134, 151, 154, 160, 167, 168, 170, 171, 177, 185, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 205, 210, 212, 228, 230, 234, 237, 293, 322, 337, 353, 360, 367, 426, 434, 491, 492, 493, 494, 495, 500], "txt": [2, 4], "type": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 69, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 116, 117, 118, 119, 122, 123, 124, 126, 127, 128, 129, 130, 131, 132, 134, 135, 136, 138, 139, 140, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 222, 223, 224, 227, 228, 229, 230, 231, 232, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 266, 267, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 322, 334, 382, 411, 413, 414, 415, 416, 417, 418, 419, 420, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 491, 493, 495], "type_to_nam": 2, "typenam": [0, 1, 2], "typic": [0, 149, 351, 466, 491, 496], "u": [1, 2, 4, 189, 192, 193, 197, 363, 389, 486, 496], "u_": 467, "u_t": 467, "uint": [1, 2, 146], "uint16": [12, 326], "uint3": 1, "uint32": [12, 27, 28, 29, 30, 247, 326], "uint64": [12, 326], "uint8": [12, 326], "ultra": 6, "unabl": 9, "unam": 9, "unari": 491, "unchang": [148, 289, 398], "uncheck": 9, "uncompress": 271, "undefin": [0, 29, 113, 189, 190, 239, 251, 495], "under": [2, 195], "underli": [2, 310], "understand": [6, 414, 415], "unevalu": 142, "unexpect": [2, 19], "unflatten": 0, "unfreez": [334, 375], "unfrozen": 387, "unifi": 8, "uniform": [3, 334, 363, 377, 415, 417, 461, 488, 491, 494, 500], "uniformli": 258, "unintend": 0, "union": [19, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 53, 54, 55, 56, 57, 58, 59, 60, 61, 64, 65, 66, 67, 68, 70, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 85, 86, 87, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 181, 182, 183, 185, 192, 193, 216, 269, 290], "uniqu": [2, 488], "unique_ptr": 2, "unit": [340, 350, 352, 353, 354, 362, 396, 397, 399, 401, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 430, 449, 450, 451, 453], "unittest": 9, "univers": 195, "unless": [6, 17, 177, 195, 464], "unlik": [6, 17, 177, 348, 349, 383], "unnecessari": [2, 6], "unnorm": [247, 433, 435], "unscal": 468, "unsign": [168, 243, 244, 326], "unsignedinteg": 12, "unspecifi": [16, 18, 19, 27, 28, 29, 30, 96, 109, 110, 111, 112, 166, 209, 211, 213, 227, 235, 239, 241, 262, 281, 282, 288, 292, 295, 301, 302, 309, 314, 501], "unsqueez": 6, "unsupport": 200, "until": [2, 496, 498], "unus": 2, "up": [1, 2, 6, 113, 491], "upcast": 2, "updat": [0, 1, 2, 5, 6, 7, 39, 95, 280, 316, 320, 322, 339, 370, 371, 377, 382, 383, 384, 389, 466, 468, 471, 473, 474, 475, 479, 480, 481, 482, 483, 484, 491, 492, 493, 496], "update_modul": 334, "uplo": [192, 193], "upon": [6, 320, 321], "upper": [189, 190, 192, 193, 198, 243, 254, 257, 258, 420], "upsampl": 334, "us": [0, 3, 5, 6, 7, 8, 9, 19, 39, 84, 113, 117, 120, 122, 123, 126, 127, 128, 130, 146, 148, 163, 168, 186, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 210, 217, 218, 219, 222, 224, 243, 244, 262, 263, 264, 265, 294, 307, 319, 322, 326, 328, 334, 337, 338, 348, 351, 352, 354, 360, 363, 367, 368, 370, 374, 381, 388, 390, 392, 393, 395, 398, 403, 411, 412, 416, 417, 424, 425, 434, 461, 464, 466, 467, 468, 470, 471, 472, 473, 474, 475, 488, 490, 491, 492, 493, 494, 495, 498, 500], "usag": [411, 491], "user": [2, 6, 334], "usual": [351, 392, 490, 496], "util": [1, 2, 6, 8, 9, 271, 334, 466, 492], "v": [6, 106, 149, 192, 334, 375, 497], "v_": [467, 469, 470, 471, 472, 478, 479], "v_t": [467, 469, 470, 471, 472, 478, 479], "val": [0, 31, 166], "valid": [7, 106, 163, 312, 319, 375, 387, 490], "valid_parameter_filt": 370, "valu": [0, 1, 5, 6, 12, 13, 17, 19, 27, 28, 51, 79, 83, 94, 141, 144, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 166, 175, 177, 191, 195, 197, 199, 216, 224, 231, 238, 242, 246, 247, 248, 250, 251, 252, 254, 257, 258, 265, 269, 295, 296, 308, 312, 317, 319, 320, 321, 322, 326, 337, 338, 340, 347, 348, 349, 350, 356, 359, 363, 367, 368, 374, 390, 391, 407, 409, 411, 413, 433, 434, 435, 436, 437, 438, 440, 441, 442, 443, 444, 445, 458, 464, 468, 471, 480, 481, 483, 484, 494], "value_and_grad": [7, 113, 334, 388, 464, 466, 477, 491, 494, 497, 498], "value_and_grad_fn": 496, "value_cach": 6, "value_dim": 390, "value_input_dim": 390, "value_output_dim": 390, "value_proj": 6, "valueerror": [113, 195, 377, 494], "values_hat": 6, "van": 195, "var": [0, 339, 355, 359, 361, 436], "variabl": [9, 95, 113, 120, 133, 141, 142, 143, 169, 184, 308, 311, 312, 491, 492, 493], "varianc": [0, 288, 309, 339, 355, 436], "variant": [6, 445, 472], "variou": 195, "vector": [0, 2, 5, 8, 176, 184, 195, 295, 311, 312, 351, 435, 493, 498], "verbos": [1, 146], "veri": [6, 390, 492, 496, 500], "verifi": [5, 9], "versa": 265, "version": [2, 4, 9, 117, 141, 143, 175, 205, 209, 243, 281, 312, 488, 494, 495], "versu": 491, "via": [9, 113, 474, 477, 492, 496, 497], "vice": 265, "video": 349, "view": [0, 3, 84, 497], "virtual": 2, "visual": 142, "vjp": [2, 113, 498], "vmap": [2, 113, 493, 494, 496, 498], "vmap_add": 494, "vocab_s": 6, "vocabulari": [351, 392], "void": [1, 2], "vt": 197, "w": [0, 1, 5, 100, 101, 104, 105, 117, 168, 192, 243, 244, 308, 321, 339, 342, 343, 345, 346, 348, 349, 363, 466, 479, 494], "w1": [6, 318], "w2": [6, 318], "w3": 6, "w_": [354, 360, 395, 467, 468, 469, 470, 471, 472, 473, 478, 479], "w_1": 243, "w_g": 243, "w_i": [117, 243], "w_in": 1, "w_q": 243, "w_star": 5, "w_stride": 1, "w_t": [467, 469, 470, 471, 472, 473, 478, 479], "wa": [4, 6, 84, 126, 127, 492, 493, 496], "wai": [2, 6, 9, 334, 412, 491, 492, 493, 494, 495], "wait": [2, 6, 223], "walk": [6, 493], "walkthrough": 2, "walsh": 172, "want": [1, 6, 492, 493, 494, 500], "warm": [2, 491], "warmup": [482, 483], "warmup_init": 468, "watch": [6, 491], "wd": 473, "we": [0, 1, 2, 5, 6, 7, 113, 117, 126, 127, 168, 243, 244, 334, 351, 392, 400, 471, 473, 488, 490, 491, 492, 493, 494, 496, 500], "weight": [0, 5, 99, 100, 101, 102, 103, 104, 105, 145, 147, 320, 334, 377, 381, 392, 393, 433, 435, 464, 468, 471, 473, 475, 479, 494, 496], "weight_decai": [468, 471, 473, 479], "weight_fil": 6, "weights_fp16": 496, "well": [6, 334, 375, 387, 390, 496], "wen": 6, "went": 6, "were": [6, 500], "wet": 6, "what": [2, 6, 320], "whatsoev": 6, "whc": 348, "when": [0, 1, 2, 6, 8, 9, 95, 102, 113, 128, 189, 190, 192, 193, 194, 195, 197, 198, 200, 341, 342, 343, 344, 345, 346, 412, 416, 417, 433, 439, 445, 464, 466, 482, 488, 491, 492, 493, 500], "where": [0, 4, 7, 144, 177, 190, 243, 308, 312, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 354, 355, 359, 360, 361, 363, 374, 391, 394, 395, 409, 416, 417, 422, 423, 425, 436, 442, 448, 451, 453, 458, 475, 492, 494, 495], "wherea": 494, "whether": [141, 143, 146, 168, 192, 193, 198, 244, 354, 360, 374, 390, 395, 433, 436, 442], "which": [0, 1, 2, 6, 7, 8, 9, 19, 38, 84, 95, 102, 119, 122, 123, 126, 127, 128, 137, 141, 143, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 169, 175, 178, 179, 180, 181, 182, 184, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 200, 214, 225, 243, 247, 248, 262, 263, 265, 268, 269, 270, 271, 272, 286, 287, 295, 302, 307, 308, 311, 312, 316, 337, 338, 348, 349, 352, 367, 368, 370, 374, 398, 433, 435, 438, 442, 445, 461, 474, 475, 488, 491, 492, 493, 494, 495, 496, 500, 501], "while": [2, 3, 6, 9, 263, 398, 496, 497], "whistl": 2, "who": 6, "whose": [144, 316, 317], "why": 6, "wide": 496, "width": [337, 338, 339, 342, 343, 345, 346, 348, 349, 367, 368, 392, 393], "window": [9, 336, 337, 338, 366, 367, 368], "wipe": 9, "wire": 224, "wired_limit_mb": 224, "wise": [0, 2, 13, 14, 20, 21, 22, 23, 24, 25, 26, 88, 89, 90, 93, 107, 108, 129, 130, 134, 135, 136, 138, 140, 164, 165, 170, 171, 177, 186, 187, 188, 201, 202, 203, 204, 205, 206, 207, 208, 212, 228, 230, 232, 234, 240, 260, 261, 264, 267, 275, 276, 277, 278, 284, 285, 291, 297, 298, 340, 348, 349, 358, 369, 391, 402, 421, 428, 429, 431, 432, 447, 448, 450, 453, 454, 455, 456, 491], "wish": 9, "with_logit": 433, "within": [0, 3, 29, 177], "without": [1, 6, 8, 289, 390, 460, 490, 491, 492, 493, 496, 497, 500], "wk": 6, "wl": 2, "wo": 6, "word": 0, "work": [2, 3, 6, 223, 491, 492, 493, 494, 495, 496], "workhors": 334, "world": [323, 492], "worri": [1, 496], "would": [2, 6, 412, 492, 493, 495, 496, 497, 500], "wq": 6, "wrap": [113, 334], "wrapper": 493, "write": [0, 1, 2, 6, 334, 497], "written": [2, 493], "wrong": 493, "wrt": 317, "wv": 6, "x": [0, 1, 2, 4, 5, 6, 7, 39, 91, 113, 122, 123, 127, 128, 135, 140, 141, 142, 145, 146, 147, 168, 172, 173, 175, 195, 244, 248, 253, 266, 271, 275, 305, 306, 313, 320, 322, 334, 336, 337, 338, 339, 340, 350, 352, 353, 355, 359, 361, 362, 363, 366, 367, 368, 369, 370, 391, 394, 396, 402, 403, 409, 412, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 464, 466, 473, 491, 492, 493, 494, 495, 496, 497, 498, 500], "x1": 434, "x2": 434, "x86_64": 9, "x_1": [434, 442], "x_2": [434, 442], "x_cast": 2, "x_grad": 1, "x_i": [432, 454, 455], "x_j": [454, 455], "x_offset": 2, "x_ptr": 2, "x_shape": 1, "x_stride": 2, "x_t": [354, 360, 395], "x_view": 497, "xcode": 9, "xcodeproj": 3, "xcrun": 9, "xf": 360, "xg": 360, "xi": 360, "xn": 354, "xo": 360, "xor": 90, "xr": 354, "xy": [0, 214], "xz": 354, "x\u00b2": 497, "y": [0, 2, 4, 5, 6, 7, 39, 113, 141, 142, 172, 175, 313, 334, 339, 348, 355, 359, 361, 363, 394, 437, 442, 445, 466, 469, 491, 492, 493, 494, 496, 497], "y_": [437, 441], "y_cast": 2, "y_hat": 334, "y_offset": 2, "y_ptr": 2, "y_stride": 2, "ye": 6, "year": 6, "yet": [6, 195, 334, 464, 475, 494, 495, 496, 498], "yield": [6, 7, 488], "you": [2, 3, 4, 6, 7, 8, 9, 224, 334, 403, 411, 461, 488, 491, 492, 493, 494, 495, 497, 499, 500], "your": [2, 6, 9, 464, 494, 496], "z": [2, 354, 491, 493, 496], "z_t": 354, "zeiler": 467, "zero": [0, 141, 144, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 191, 214, 221, 280, 304, 305, 306, 315, 334, 336, 337, 338, 347, 348, 349, 377, 413, 414, 415, 416, 417, 418, 419, 420, 461, 466, 468, 493, 495], "zero_grad": 494, "zeros_lik": 0, "zhang": 6, "zip": [6, 7], "zip_saf": 2}, "titles": ["Operations", "Custom Metal Kernels", "Custom Extensions in MLX", "Metal Debugger", "Using MLX in C++", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.conj", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.std", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array.view", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv3d", "mlx.core.conv_general", "mlx.core.conv_transpose1d", "mlx.core.conv_transpose2d", "mlx.core.conv_transpose3d", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.custom_function", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.distributed.Group", "mlx.core.distributed.all_gather", "mlx.core.distributed.all_sum", "mlx.core.distributed.init", "mlx.core.distributed.is_available", "mlx.core.distributed.recv", "mlx.core.distributed.recv_like", "mlx.core.distributed.send", "mlx.core.divide", "mlx.core.divmod", "mlx.core.einsum", "mlx.core.einsum_path", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.export_function", "mlx.core.export_to_dot", "mlx.core.exporter", "mlx.core.eye", "mlx.core.fast.layer_norm", "mlx.core.fast.metal_kernel", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.finfo", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.hadamard_transform", "mlx.core.identity", "mlx.core.imag", "mlx.core.import_function", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isfinite", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.kron", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.cholesky_inv", "mlx.core.linalg.cross", "mlx.core.linalg.eigh", "mlx.core.linalg.eigvalsh", "mlx.core.linalg.inv", "mlx.core.linalg.norm", "mlx.core.linalg.qr", "mlx.core.linalg.svd", "mlx.core.linalg.tri_inv", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.clear_cache", "mlx.core.metal.device_info", "mlx.core.metal.get_active_memory", "mlx.core.metal.get_cache_memory", "mlx.core.metal.get_peak_memory", "mlx.core.metal.is_available", "mlx.core.metal.reset_peak_memory", "mlx.core.metal.set_cache_limit", "mlx.core.metal.set_memory_limit", "mlx.core.metal.set_wired_limit", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.nan_to_num", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.put_along_axis", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.laplace", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.permutation", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.real", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.roll", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.slice", "mlx.core.slice_update", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.unflatten", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.view", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Distributed Communication", "Export Functions", "Fast", "FFT", "Linear Algebra", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.AvgPool3d", "mlx.nn.BatchNorm", "mlx.nn.CELU", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.ConvTranspose1d", "mlx.nn.ConvTranspose2d", "mlx.nn.ConvTranspose3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.ELU", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GLU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.HardShrink", "mlx.nn.HardTanh", "mlx.nn.Hardswish", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.LeakyReLU", "mlx.nn.Linear", "mlx.nn.LogSigmoid", "mlx.nn.LogSoftmax", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.MaxPool3d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.ReLU6", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.Sigmoid", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softmax", "mlx.nn.Softmin", "mlx.nn.Softplus", "mlx.nn.Softshrink", "mlx.nn.Softsign", "mlx.nn.Step", "mlx.nn.Tanh", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.celu", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hard_shrink", "mlx.nn.hard_tanh", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softmin", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Distributed Communication", "Exporting Functions", "Function Transforms", "Indexing Arrays", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "titleterms": {"A": 500, "In": 495, "The": 334, "ab": [13, 33], "adadelta": 467, "adafactor": 468, "adagrad": 469, "adam": 470, "adamax": 472, "adamw": 471, "add": 14, "addmm": 15, "algebra": 332, "alibi": 335, "all": [6, 16, 34, 492], "all_gath": 122, "all_sum": 123, "allclos": 17, "ani": [18, 35], "api": [8, 9], "appli": 370, "apply_gradi": 474, "apply_to_modul": 371, "arang": 19, "arcco": 20, "arccosh": 21, "arcsin": 22, "arcsinh": 23, "arctan": 24, "arctan2": 25, "arctanh": 26, "argmax": [27, 36], "argmin": [28, 37], "argpartit": 29, "argsort": 30, "arrai": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 325, 495, 499], "array_equ": 83, "as_strid": 84, "astyp": 38, "atleast_1d": 85, "atleast_2d": 86, "atleast_3d": 87, "attent": 6, "automat": 494, "avgpool1d": 336, "avgpool2d": 337, "avgpool3d": 338, "back": 2, "basic": [491, 493, 498], "batchnorm": 339, "benchmark": 6, "bernoulli": 246, "binari": 9, "binary_cross_entropi": 433, "bind": 2, "bitwise_and": 88, "bitwise_or": 89, "bitwise_xor": 90, "block_masked_mm": 91, "broadcast_to": 92, "build": [2, 9], "c": [4, 8, 9, 493], "categor": 247, "ceil": 93, "celu": [340, 421], "children": 372, "choleski": 189, "cholesky_inv": 190, "class": 334, "clear_cach": 215, "clip": 94, "clip_grad_norm": 318, "cmake": 2, "co": [41, 107], "code": [2, 6], "common": 485, "commun": [328, 492], "compil": [95, 491], "complex": 1, "comput": 496, "concaten": 96, "conj": [40, 97], "conjug": 98, "constant": 413, "conv1d": [99, 341], "conv2d": [100, 342], "conv3d": [101, 343], "conv_gener": 102, "conv_transpose1d": 103, "conv_transpose2d": 104, "conv_transpose3d": 105, "convers": 497, "convert": 6, "convolv": 106, "convtranspose1d": 344, "convtranspose2d": 345, "convtranspose3d": 346, "core": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 324], "cosh": 108, "cosine_decai": 480, "cosine_similarity_loss": 434, "cpu": 2, "cross": 191, "cross_entropi": 435, "cummax": [42, 109], "cummin": [43, 110], "cumprod": [44, 111], "cumsum": [45, 112], "custom": [1, 2], "custom_funct": 113, "data": 326, "debug": 491, "debugg": 3, "default_devic": 114, "default_stream": 115, "degre": 116, "dequant": 117, "devic": [10, 327], "device_info": 216, "diag": [46, 118], "diagon": [47, 119], "differ": 495, "differenti": 494, "disable_compil": 120, "distribut": [121, 122, 123, 124, 125, 126, 127, 128, 328, 492], "divid": 129, "divmod": 130, "download": [2, 6], "dropout": 347, "dropout2d": 348, "dropout3d": 349, "dtype": [11, 48], "dtypecategori": 12, "eigh": 192, "eigvalsh": 193, "einsum": 131, "einsum_path": 132, "elu": [350, 422], "embed": 351, "enable_compil": 133, "encod": 6, "end": 2, "equal": 134, "erf": 135, "erfinv": 136, "eval": [137, 373], "evalu": 496, "exampl": [1, 2, 8, 491, 492, 493, 500], "exp": [49, 138], "expand_dim": 139, "expm1": 140, "exponential_decai": 481, "export": [143, 329, 493], "export_funct": 141, "export_to_dot": 142, "extens": 2, "ey": 144, "fast": [145, 146, 147, 148, 149, 330], "fft": [150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 331], "fft2": 151, "fftn": 152, "filter_and_map": 374, "finfo": 162, "flatten": [50, 163], "floor": 164, "floor_divid": 165, "format": 499, "found": 9, "framework": 497, "freez": 375, "from": [9, 495], "full": [6, 166], "function": [329, 460, 463, 491, 493, 494, 498], "further": 8, "gather_mm": 167, "gather_qmm": 168, "gaussian_nll_loss": 436, "gelu": [352, 423], "gelu_approx": 424, "gelu_fast_approx": 425, "gener": 6, "get": 492, "get_active_memori": 217, "get_cache_memori": 218, "get_peak_memori": 219, "glorot_norm": 414, "glorot_uniform": 415, "glu": [353, 426], "gpu": 2, "grad": [169, 334], "graph": [491, 496, 498], "greater": 170, "greater_equ": 171, "grid": 1, "group": 121, "groupnorm": 355, "gru": 354, "guid": 498, "gumbel": 248, "hadamard_transform": 172, "hard_shrink": 427, "hard_tanh": 428, "hardshrink": 356, "hardswish": [358, 429], "hardtanh": 357, "he_norm": 416, "he_uniform": 417, "hinge_loss": 437, "host": 492, "huber_loss": 438, "ident": [173, 418], "ifft": 153, "ifft2": 154, "ifftn": 155, "imag": 174, "implement": [2, 6], "import": 493, "import_funct": 175, "index": 495, "infer": 6, "init": [124, 413, 414, 415, 416, 417, 418, 419, 420, 475], "initi": 461, "inner": 176, "inspect": 334, "instal": [8, 9, 492], "instancenorm": 359, "introduc": 2, "inv": 194, "irfft": 156, "irfft2": 157, "irfftn": 158, "is_avail": [125, 220], "isclos": 177, "isfinit": 178, "isinf": 179, "isnan": 180, "isneginf": 181, "isposinf": 182, "issubdtyp": 183, "item": 51, "items": 52, "jax": 497, "join_schedul": 482, "jvp": 184, "kei": 249, "kernel": 1, "kl_div_loss": 439, "kron": 185, "l1_loss": 440, "laplac": 250, "layer": [6, 7, 462], "layer_norm": 145, "layernorm": 361, "lazi": 496, "leaf_modul": 376, "leaky_relu": 430, "leakyrelu": 362, "left_shift": 186, "less": 187, "less_equ": 188, "linalg": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198], "linear": [5, 332, 363], "linear_schedul": 483, "linspac": 199, "lion": 473, "llm": 6, "load": [6, 200, 466, 499], "load_weight": 377, "log": [53, 201], "log10": [54, 202], "log1p": [55, 203], "log2": [56, 204], "log_cosh_loss": 441, "log_sigmoid": 431, "log_softmax": 432, "logaddexp": 205, "logical_and": 206, "logical_not": 207, "logical_or": 208, "logsigmoid": 364, "logsoftmax": 365, "logsumexp": [57, 209], "loss": [433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 463], "lstm": 360, "margin_ranking_loss": 442, "matmul": 210, "max": [58, 211], "maximum": 212, "maxpool1d": 366, "maxpool2d": 367, "maxpool3d": 368, "mean": [59, 213], "memori": 500, "meshgrid": 214, "metal": [1, 3, 9, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 333], "metal_kernel": 146, "min": [60, 227], "minim": 9, "minimum": 228, "mish": [369, 447], "mlx": [2, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484], "model": 6, "modul": [334, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 464, 493], "more": 493, "moveaxi": [61, 229], "mpi": 492, "mse_loss": 443, "multi": 7, "multiheadattent": 390, "multipl": 493, "multipli": 230, "multivariate_norm": 251, "named_modul": 379, "nan_to_num": 231, "nbyte": 62, "ndim": 63, "neg": 232, "network": 334, "neural": 334, "new_stream": 233, "nll_loss": 444, "nn": [316, 317, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459], "norm": 195, "normal": [252, 419], "not_equ": 234, "numpi": [495, 497], "ones": 235, "ones_lik": 236, "onli": 496, "oper": [0, 2, 465], "optim": [318, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486], "option": 9, "other": 497, "outer": 237, "packag": 4, "pad": 238, "paramet": [334, 380], "partit": 239, "perceptron": 7, "permut": 253, "place": 495, "power": 240, "prelu": [391, 448], "primit": 2, "prod": [64, 241], "pure": 491, "put": 6, "put_along_axi": 242, "python": [2, 8, 9], "pytorch": 497, "qr": 196, "quantiz": [243, 316], "quantized_matmul": 244, "quantizedembed": 392, "quantizedlinear": 393, "quick": [334, 498], "radian": 245, "randint": 254, "random": [246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 488], "read": 8, "real": 259, "reciproc": [65, 260], "recv": 126, "recv_lik": 127, "reduc": 492, "refer": 8, "regress": 5, "relu": [396, 449], "relu6": [397, 450], "remaind": 261, "remot": 492, "repeat": 262, "requir": 9, "reset_peak_memori": 221, "reshap": [66, 263], "result": 2, "rfft": 159, "rfft2": 160, "rfftn": 161, "right_shift": 264, "rms_norm": 147, "rmsnorm": 394, "rmsprop": 478, "rnn": 395, "roll": 265, "rope": [148, 398], "round": [67, 266], "rsqrt": [68, 267], "sampl": 1, "save": [268, 466, 499], "save_gguf": 269, "save_safetensor": 270, "save_weight": 381, "savez": 271, "savez_compress": 272, "scaled_dot_product_attent": 149, "schedul": 487, "script": [2, 6], "seed": 255, "selu": [399, 451], "send": 128, "sequenti": 400, "serial": 499, "set": 492, "set_cache_limit": 222, "set_default_devic": 273, "set_default_stream": 274, "set_dtyp": 382, "set_memory_limit": 223, "set_wired_limit": 224, "setuptool": 2, "sgd": 479, "shape": [1, 69], "shapeless": [491, 493], "shell": 9, "sigmoid": [275, 402, 452], "sign": 276, "silu": [401, 453], "simpl": [1, 500], "sin": [70, 277], "sinh": 278, "sinusoidalpositionalencod": 403, "size": [9, 71], "slice": 279, "slice_upd": 280, "smooth_l1_loss": 445, "softmax": [281, 404, 454], "softmin": [405, 455], "softplu": [406, 456], "softshrink": [407, 457], "softsign": 408, "sort": 282, "sourc": 9, "specifi": 501, "speedup": 491, "split": [72, 256, 283], "sqrt": [73, 284], "squar": [74, 285], "squeez": [75, 286], "stack": 287, "start": [334, 492, 498], "start_captur": 225, "state": [383, 476], "std": [76, 288], "step": [409, 458], "step_decai": 484, "stop_captur": 226, "stop_gradi": 289, "stream": [290, 324, 327, 501], "stride": 1, "subtract": 291, "sum": [77, 292], "support": 326, "svd": 197, "swapax": [78, 293], "synchron": 294, "t": 32, "take": 295, "take_along_axi": 296, "tan": 297, "tanh": [298, 410, 459], "tensordot": 299, "tensorflow": 497, "tile": 300, "togeth": 6, "tolist": 79, "topk": 301, "trace": [302, 493], "train": [384, 386, 491, 492], "trainable_paramet": 385, "transform": [2, 411, 489, 491, 493, 494, 496, 498], "transpos": [80, 303], "tree": 490, "tree_flatten": 319, "tree_map": 320, "tree_map_with_path": 321, "tree_reduc": 322, "tree_unflatten": 323, "tri": 304, "tri_inv": 198, "tril": 305, "triplet_loss": 446, "triu": 306, "troubleshoot": 9, "truncated_norm": 257, "tune": 492, "type": 326, "unflatten": 307, "unfreez": 387, "unifi": 500, "uniform": [258, 420], "up": 492, "updat": [334, 388, 477, 495], "update_modul": 389, "upsampl": 412, "us": [1, 2, 4, 496, 501], "usag": [2, 8], "util": [319, 320, 321, 322, 323, 490], "valu": 334, "value_and_grad": [308, 317], "var": [81, 309], "variabl": 4, "vector": 494, "view": [82, 310], "vjp": [1, 311], "vmap": 312, "weight": 6, "what": 496, "when": 496, "where": 313, "why": 496, "workflow": 3, "x86": 9, "xcode": 3, "you": 496, "zero": 314, "zeros_lik": 315}})