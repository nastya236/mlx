Search.setIndex({"alltitles": {"A Simple Example": [[521, "a-simple-example"]], "Array": [[343, null]], "Attention layer": [[6, "attention-layer"]], "Automatic Differentiation": [[514, "automatic-differentiation"]], "Automatic Vectorization": [[514, "automatic-vectorization"]], "Basics": [[519, "basics"]], "Basics of Compile": [[511, "basics-of-compile"]], "Basics of Exporting": [[513, "basics-of-exporting"]], "Binary Size Minimization": [[9, "binary-size-minimization"]], "Binding to Python": [[2, "binding-to-python"]], "Build Options": [[9, "id5"]], "Build Requirements": [[9, "build-requirements"]], "Build and Install": [[9, null]], "Build from source": [[9, "build-from-source"]], "Building and Binding": [[2, "building-and-binding"]], "Building with CMake": [[2, "building-with-cmake"]], "Building with setuptools": [[2, "building-with-setuptools"]], "C++ API": [[9, "c-api"]], "C++ API Reference": [[8, null]], "CUDA": [[9, "cuda"], [9, "id3"]], "Common Optimizers": [[505, null]], "Compilation": [[511, null]], "Compiling Training Graphs": [[511, "compiling-training-graphs"]], "Complex Example": [[1, "complex-example"]], "Conversion to NumPy and Other Frameworks": [[518, null]], "Converting the weights": [[6, "converting-the-weights"]], "Custom Extensions in MLX": [[2, null]], "Custom Metal Kernels": [[1, null]], "Data Types": [[344, null]], "Debugging": [[511, "debugging"]], "Defining a Ring": [[512, "defining-a-ring"]], "Devices and Streams": [[345, null]], "Differences from NumPy": [[515, "differences-from-numpy"]], "Distributed Communication": [[346, null], [512, null]], "Download the code": [[2, null], [6, null]], "Encoder layer": [[6, "encoder-layer"]], "Example Speedup": [[511, "example-speedup"]], "Examples": [[8, null]], "Export Functions": [[347, null]], "Exporting Functions": [[513, null]], "Exporting Modules": [[513, "exporting-modules"]], "Exporting Multiple Traces": [[513, "exporting-multiple-traces"]], "FFT": [[349, null]], "Fast": [[348, null]], "Full model": [[6, "full-model"]], "Function Transforms": [[514, null]], "Function and Graph Transformations": [[519, "function-and-graph-transformations"]], "Functions": [[479, null]], "Further Reading": [[8, null]], "Generation": [[6, "generation"]], "Getting Started": [[512, "getting-started"]], "Getting Started with MPI": [[512, "getting-started-with-mpi"]], "Getting Started with Ring": [[512, "getting-started-with-ring"]], "Grid Sample VJP": [[1, "grid-sample-vjp"]], "Implementing the CPU Back-end": [[2, "implementing-the-cpu-back-end"]], "Implementing the GPU Back-end": [[2, "implementing-the-gpu-back-end"]], "Implementing the Primitive": [[2, "implementing-the-primitive"]], "Implementing the model": [[6, "implementing-the-model"]], "Importing Functions in C++": [[513, "importing-functions-in-c"]], "In Place Updates": [[515, "in-place-updates"]], "Indexing Arrays": [[515, null]], "Initializers": [[480, null]], "Inspecting Modules": [[353, "inspecting-modules"]], "Install": [[8, null]], "Installing MPI": [[512, "installing-mpi"]], "Introducing the Example": [[2, "introducing-the-example"]], "JAX": [[518, "jax"]], "LLM inference": [[6, null]], "Launching Distributed Programs": [[516, null]], "Layers": [[481, null]], "Lazy Evaluation": [[517, null]], "Linear Algebra": [[350, null]], "Linear Regression": [[5, null]], "Linux": [[9, "linux"]], "Loss Functions": [[482, null]], "MLX": [[8, null]], "MPI Specifics": [[516, "mpi-specifics"]], "Memory Management": [[351, null]], "Metal": [[352, null]], "Metal Debugger": [[3, null]], "Metal not found": [[9, "metal-not-found"]], "Module": [[483, null]], "More Examples": [[513, "more-examples"]], "Multi-Layer Perceptron": [[7, null]], "Neural Networks": [[353, null]], "Only Compute What You Use": [[517, "only-compute-what-you-use"]], "Operations": [[0, null], [2, "operations"], [484, null]], "Operations and Primitives": [[2, "operations-and-primitives"]], "Optimizer": [[506, null]], "Optimizers": [[485, null]], "Package Variables": [[4, "id1"]], "Parameters": [[353, "parameters"]], "Primitive Transforms": [[2, "primitive-transforms"]], "Primitives": [[2, "primitives"]], "Providing Hosts": [[516, "providing-hosts"]], "Pure Functions": [[511, "pure-functions"]], "Putting it all together": [[6, "putting-it-all-together"]], "PyTorch": [[518, "pytorch"]], "Python API": [[9, "python-api"]], "Python API Reference": [[8, null]], "Python Installation": [[9, "python-installation"]], "Quick Start Guide": [[519, null]], "Quick Start with Neural Networks": [[353, "quick-start-with-neural-networks"]], "Random": [[508, null]], "Results": [[2, "results"]], "Ring Specifics": [[516, "ring-specifics"]], "Running Distributed Programs": [[512, "running-distributed-programs"]], "Saving and Loading": [[485, "saving-and-loading"]], "Saving and Loading Arrays": [[520, null]], "Schedulers": [[507, null]], "Scripts": [[2, "scripts"], [6, "scripts"]], "Selecting Backend": [[512, "selecting-backend"]], "Serialization Formats": [[520, "id1"]], "Setting up Remote Hosts": [[512, "setting-up-remote-hosts"], [516, "setting-up-remote-hosts"]], "Shapeless Compilation": [[511, "shapeless-compilation"]], "Shapeless Exports": [[513, "shapeless-exports"]], "Simple Example": [[1, "simple-example"]], "Specifying the Stream": [[522, "specifying-the-stream"]], "Supported Data Types": [[344, "id2"]], "TensorFlow": [[518, "tensorflow"]], "The Module Class": [[353, "the-module-class"]], "Thunderbolt Ring": [[512, "thunderbolt-ring"]], "Training Example": [[512, "training-example"]], "Transformations with Compile": [[511, "transformations-with-compile"]], "Transformations with Imported Functions": [[513, "transformations-with-imported-functions"]], "Transforming Compute Graphs": [[517, "transforming-compute-graphs"]], "Transforms": [[509, null]], "Tree Utils": [[510, null]], "Troubleshooting": [[9, "troubleshooting"], [9, "id4"]], "Tuning MPI All Reduce": [[512, "tuning-mpi-all-reduce"]], "Unified Memory": [[521, null]], "Updating the Parameters": [[353, "updating-the-parameters"]], "Usage": [[2, "usage"], [8, null], [516, "usage"]], "Using MLX in C++": [[4, null]], "Using Shape/Strides": [[1, "using-shape-strides"]], "Using Streams": [[522, null]], "Using the Primitive": [[2, "using-the-primitive"]], "Utilizing nn.average_gradients": [[512, "utilizing-nn-average-gradients"]], "Value and Grad": [[353, "value-and-grad"]], "Weight loading and benchmarking": [[6, "weight-loading-and-benchmarking"]], "When to Evaluate": [[517, "when-to-evaluate"]], "Why Lazy Evaluation": [[517, "why-lazy-evaluation"]], "Xcode Workflow": [[3, "xcode-workflow"]], "mlx.core.Device": [[10, null]], "mlx.core.Dtype": [[11, null]], "mlx.core.DtypeCategory": [[12, null]], "mlx.core.Stream": [[342, null]], "mlx.core.abs": [[13, null]], "mlx.core.add": [[14, null]], "mlx.core.addmm": [[15, null]], "mlx.core.all": [[16, null]], "mlx.core.allclose": [[17, null]], "mlx.core.any": [[18, null]], "mlx.core.arange": [[19, null]], "mlx.core.arccos": [[20, null]], "mlx.core.arccosh": [[21, null]], "mlx.core.arcsin": [[22, null]], "mlx.core.arcsinh": [[23, null]], "mlx.core.arctan": [[24, null]], "mlx.core.arctan2": [[25, null]], "mlx.core.arctanh": [[26, null]], "mlx.core.argmax": [[27, null]], "mlx.core.argmin": [[28, null]], "mlx.core.argpartition": [[29, null]], "mlx.core.argsort": [[30, null]], "mlx.core.array": [[31, null]], "mlx.core.array.T": [[32, null]], "mlx.core.array.abs": [[33, null]], "mlx.core.array.all": [[34, null]], "mlx.core.array.any": [[35, null]], "mlx.core.array.argmax": [[36, null]], "mlx.core.array.argmin": [[37, null]], "mlx.core.array.astype": [[38, null]], "mlx.core.array.at": [[39, null]], "mlx.core.array.conj": [[40, null]], "mlx.core.array.cos": [[41, null]], "mlx.core.array.cummax": [[42, null]], "mlx.core.array.cummin": [[43, null]], "mlx.core.array.cumprod": [[44, null]], "mlx.core.array.cumsum": [[45, null]], "mlx.core.array.diag": [[46, null]], "mlx.core.array.diagonal": [[47, null]], "mlx.core.array.dtype": [[48, null]], "mlx.core.array.exp": [[49, null]], "mlx.core.array.flatten": [[50, null]], "mlx.core.array.imag": [[51, null]], "mlx.core.array.item": [[52, null]], "mlx.core.array.itemsize": [[53, null]], "mlx.core.array.log": [[54, null]], "mlx.core.array.log10": [[55, null]], "mlx.core.array.log1p": [[56, null]], "mlx.core.array.log2": [[57, null]], "mlx.core.array.logcumsumexp": [[58, null]], "mlx.core.array.logsumexp": [[59, null]], "mlx.core.array.max": [[60, null]], "mlx.core.array.mean": [[61, null]], "mlx.core.array.min": [[62, null]], "mlx.core.array.moveaxis": [[63, null]], "mlx.core.array.nbytes": [[64, null]], "mlx.core.array.ndim": [[65, null]], "mlx.core.array.prod": [[66, null]], "mlx.core.array.real": [[67, null]], "mlx.core.array.reciprocal": [[68, null]], "mlx.core.array.reshape": [[69, null]], "mlx.core.array.round": [[70, null]], "mlx.core.array.rsqrt": [[71, null]], "mlx.core.array.shape": [[72, null]], "mlx.core.array.sin": [[73, null]], "mlx.core.array.size": [[74, null]], "mlx.core.array.split": [[75, null]], "mlx.core.array.sqrt": [[76, null]], "mlx.core.array.square": [[77, null]], "mlx.core.array.squeeze": [[78, null]], "mlx.core.array.std": [[79, null]], "mlx.core.array.sum": [[80, null]], "mlx.core.array.swapaxes": [[81, null]], "mlx.core.array.tolist": [[82, null]], "mlx.core.array.transpose": [[83, null]], "mlx.core.array.var": [[84, null]], "mlx.core.array.view": [[85, null]], "mlx.core.array_equal": [[86, null]], "mlx.core.as_strided": [[87, null]], "mlx.core.async_eval": [[88, null]], "mlx.core.atleast_1d": [[89, null]], "mlx.core.atleast_2d": [[90, null]], "mlx.core.atleast_3d": [[91, null]], "mlx.core.bitwise_and": [[92, null]], "mlx.core.bitwise_invert": [[93, null]], "mlx.core.bitwise_or": [[94, null]], "mlx.core.bitwise_xor": [[95, null]], "mlx.core.block_masked_mm": [[96, null]], "mlx.core.broadcast_arrays": [[97, null]], "mlx.core.broadcast_to": [[98, null]], "mlx.core.ceil": [[99, null]], "mlx.core.clear_cache": [[100, null]], "mlx.core.clip": [[101, null]], "mlx.core.compile": [[102, null]], "mlx.core.concatenate": [[103, null]], "mlx.core.conj": [[104, null]], "mlx.core.conjugate": [[105, null]], "mlx.core.contiguous": [[106, null]], "mlx.core.conv1d": [[107, null]], "mlx.core.conv2d": [[108, null]], "mlx.core.conv3d": [[109, null]], "mlx.core.conv_general": [[110, null]], "mlx.core.conv_transpose1d": [[111, null]], "mlx.core.conv_transpose2d": [[112, null]], "mlx.core.conv_transpose3d": [[113, null]], "mlx.core.convolve": [[114, null]], "mlx.core.cos": [[115, null]], "mlx.core.cosh": [[116, null]], "mlx.core.cummax": [[117, null]], "mlx.core.cummin": [[118, null]], "mlx.core.cumprod": [[119, null]], "mlx.core.cumsum": [[120, null]], "mlx.core.custom_function": [[121, null]], "mlx.core.default_device": [[122, null]], "mlx.core.default_stream": [[123, null]], "mlx.core.degrees": [[124, null]], "mlx.core.dequantize": [[125, null]], "mlx.core.diag": [[126, null]], "mlx.core.diagonal": [[127, null]], "mlx.core.disable_compile": [[128, null]], "mlx.core.distributed.Group": [[129, null]], "mlx.core.distributed.all_gather": [[130, null]], "mlx.core.distributed.all_sum": [[131, null]], "mlx.core.distributed.init": [[132, null]], "mlx.core.distributed.is_available": [[133, null]], "mlx.core.distributed.recv": [[134, null]], "mlx.core.distributed.recv_like": [[135, null]], "mlx.core.distributed.send": [[136, null]], "mlx.core.divide": [[137, null]], "mlx.core.divmod": [[138, null]], "mlx.core.einsum": [[139, null]], "mlx.core.einsum_path": [[140, null]], "mlx.core.enable_compile": [[141, null]], "mlx.core.equal": [[142, null]], "mlx.core.erf": [[143, null]], "mlx.core.erfinv": [[144, null]], "mlx.core.eval": [[145, null]], "mlx.core.exp": [[146, null]], "mlx.core.expand_dims": [[147, null]], "mlx.core.expm1": [[148, null]], "mlx.core.export_function": [[149, null]], "mlx.core.export_to_dot": [[150, null]], "mlx.core.exporter": [[151, null]], "mlx.core.eye": [[152, null]], "mlx.core.fast.layer_norm": [[153, null]], "mlx.core.fast.metal_kernel": [[154, null]], "mlx.core.fast.rms_norm": [[155, null]], "mlx.core.fast.rope": [[156, null]], "mlx.core.fast.scaled_dot_product_attention": [[157, null]], "mlx.core.fft.fft": [[158, null]], "mlx.core.fft.fft2": [[159, null]], "mlx.core.fft.fftn": [[160, null]], "mlx.core.fft.fftshift": [[161, null]], "mlx.core.fft.ifft": [[162, null]], "mlx.core.fft.ifft2": [[163, null]], "mlx.core.fft.ifftn": [[164, null]], "mlx.core.fft.ifftshift": [[165, null]], "mlx.core.fft.irfft": [[166, null]], "mlx.core.fft.irfft2": [[167, null]], "mlx.core.fft.irfftn": [[168, null]], "mlx.core.fft.rfft": [[169, null]], "mlx.core.fft.rfft2": [[170, null]], "mlx.core.fft.rfftn": [[171, null]], "mlx.core.finfo": [[172, null]], "mlx.core.flatten": [[173, null]], "mlx.core.floor": [[174, null]], "mlx.core.floor_divide": [[175, null]], "mlx.core.full": [[176, null]], "mlx.core.gather_mm": [[177, null]], "mlx.core.gather_qmm": [[178, null]], "mlx.core.get_active_memory": [[179, null]], "mlx.core.get_cache_memory": [[180, null]], "mlx.core.get_peak_memory": [[181, null]], "mlx.core.grad": [[182, null]], "mlx.core.greater": [[183, null]], "mlx.core.greater_equal": [[184, null]], "mlx.core.hadamard_transform": [[185, null]], "mlx.core.identity": [[186, null]], "mlx.core.imag": [[187, null]], "mlx.core.import_function": [[188, null]], "mlx.core.inner": [[189, null]], "mlx.core.isclose": [[190, null]], "mlx.core.isfinite": [[191, null]], "mlx.core.isinf": [[192, null]], "mlx.core.isnan": [[193, null]], "mlx.core.isneginf": [[194, null]], "mlx.core.isposinf": [[195, null]], "mlx.core.issubdtype": [[196, null]], "mlx.core.jvp": [[197, null]], "mlx.core.kron": [[198, null]], "mlx.core.left_shift": [[199, null]], "mlx.core.less": [[200, null]], "mlx.core.less_equal": [[201, null]], "mlx.core.linalg.cholesky": [[202, null]], "mlx.core.linalg.cholesky_inv": [[203, null]], "mlx.core.linalg.cross": [[204, null]], "mlx.core.linalg.eig": [[205, null]], "mlx.core.linalg.eigh": [[206, null]], "mlx.core.linalg.eigvals": [[207, null]], "mlx.core.linalg.eigvalsh": [[208, null]], "mlx.core.linalg.inv": [[209, null]], "mlx.core.linalg.lu": [[210, null]], "mlx.core.linalg.lu_factor": [[211, null]], "mlx.core.linalg.norm": [[212, null]], "mlx.core.linalg.pinv": [[213, null]], "mlx.core.linalg.qr": [[214, null]], "mlx.core.linalg.solve": [[215, null]], "mlx.core.linalg.solve_triangular": [[216, null]], "mlx.core.linalg.svd": [[217, null]], "mlx.core.linalg.tri_inv": [[218, null]], "mlx.core.linspace": [[219, null]], "mlx.core.load": [[220, null]], "mlx.core.log": [[221, null]], "mlx.core.log10": [[222, null]], "mlx.core.log1p": [[223, null]], "mlx.core.log2": [[224, null]], "mlx.core.logaddexp": [[225, null]], "mlx.core.logcumsumexp": [[226, null]], "mlx.core.logical_and": [[227, null]], "mlx.core.logical_not": [[228, null]], "mlx.core.logical_or": [[229, null]], "mlx.core.logsumexp": [[230, null]], "mlx.core.matmul": [[231, null]], "mlx.core.max": [[232, null]], "mlx.core.maximum": [[233, null]], "mlx.core.mean": [[234, null]], "mlx.core.meshgrid": [[235, null]], "mlx.core.metal.device_info": [[236, null]], "mlx.core.metal.is_available": [[237, null]], "mlx.core.metal.start_capture": [[238, null]], "mlx.core.metal.stop_capture": [[239, null]], "mlx.core.min": [[240, null]], "mlx.core.minimum": [[241, null]], "mlx.core.moveaxis": [[242, null]], "mlx.core.multiply": [[243, null]], "mlx.core.nan_to_num": [[244, null]], "mlx.core.negative": [[245, null]], "mlx.core.new_stream": [[246, null]], "mlx.core.not_equal": [[247, null]], "mlx.core.ones": [[248, null]], "mlx.core.ones_like": [[249, null]], "mlx.core.outer": [[250, null]], "mlx.core.pad": [[251, null]], "mlx.core.partition": [[252, null]], "mlx.core.power": [[253, null]], "mlx.core.prod": [[254, null]], "mlx.core.put_along_axis": [[255, null]], "mlx.core.quantize": [[256, null]], "mlx.core.quantized_matmul": [[257, null]], "mlx.core.radians": [[258, null]], "mlx.core.random.bernoulli": [[259, null]], "mlx.core.random.categorical": [[260, null]], "mlx.core.random.gumbel": [[261, null]], "mlx.core.random.key": [[262, null]], "mlx.core.random.laplace": [[263, null]], "mlx.core.random.multivariate_normal": [[264, null]], "mlx.core.random.normal": [[265, null]], "mlx.core.random.permutation": [[266, null]], "mlx.core.random.randint": [[267, null]], "mlx.core.random.seed": [[268, null]], "mlx.core.random.split": [[269, null]], "mlx.core.random.truncated_normal": [[270, null]], "mlx.core.random.uniform": [[271, null]], "mlx.core.real": [[272, null]], "mlx.core.reciprocal": [[273, null]], "mlx.core.remainder": [[274, null]], "mlx.core.repeat": [[275, null]], "mlx.core.reset_peak_memory": [[276, null]], "mlx.core.reshape": [[277, null]], "mlx.core.right_shift": [[278, null]], "mlx.core.roll": [[279, null]], "mlx.core.round": [[280, null]], "mlx.core.rsqrt": [[281, null]], "mlx.core.save": [[282, null]], "mlx.core.save_gguf": [[283, null]], "mlx.core.save_safetensors": [[284, null]], "mlx.core.savez": [[285, null]], "mlx.core.savez_compressed": [[286, null]], "mlx.core.set_cache_limit": [[287, null]], "mlx.core.set_default_device": [[288, null]], "mlx.core.set_default_stream": [[289, null]], "mlx.core.set_memory_limit": [[290, null]], "mlx.core.set_wired_limit": [[291, null]], "mlx.core.sigmoid": [[292, null]], "mlx.core.sign": [[293, null]], "mlx.core.sin": [[294, null]], "mlx.core.sinh": [[295, null]], "mlx.core.slice": [[296, null]], "mlx.core.slice_update": [[297, null]], "mlx.core.softmax": [[298, null]], "mlx.core.sort": [[299, null]], "mlx.core.split": [[300, null]], "mlx.core.sqrt": [[301, null]], "mlx.core.square": [[302, null]], "mlx.core.squeeze": [[303, null]], "mlx.core.stack": [[304, null]], "mlx.core.std": [[305, null]], "mlx.core.stop_gradient": [[306, null]], "mlx.core.stream": [[307, null]], "mlx.core.subtract": [[308, null]], "mlx.core.sum": [[309, null]], "mlx.core.swapaxes": [[310, null]], "mlx.core.synchronize": [[311, null]], "mlx.core.take": [[312, null]], "mlx.core.take_along_axis": [[313, null]], "mlx.core.tan": [[314, null]], "mlx.core.tanh": [[315, null]], "mlx.core.tensordot": [[316, null]], "mlx.core.tile": [[317, null]], "mlx.core.topk": [[318, null]], "mlx.core.trace": [[319, null]], "mlx.core.transpose": [[320, null]], "mlx.core.tri": [[321, null]], "mlx.core.tril": [[322, null]], "mlx.core.triu": [[323, null]], "mlx.core.unflatten": [[324, null]], "mlx.core.value_and_grad": [[325, null]], "mlx.core.var": [[326, null]], "mlx.core.view": [[327, null]], "mlx.core.vjp": [[328, null]], "mlx.core.vmap": [[329, null]], "mlx.core.where": [[330, null]], "mlx.core.zeros": [[331, null]], "mlx.core.zeros_like": [[332, null]], "mlx.nn.ALiBi": [[354, null]], "mlx.nn.AvgPool1d": [[355, null]], "mlx.nn.AvgPool2d": [[356, null]], "mlx.nn.AvgPool3d": [[357, null]], "mlx.nn.BatchNorm": [[358, null]], "mlx.nn.CELU": [[359, null]], "mlx.nn.Conv1d": [[360, null]], "mlx.nn.Conv2d": [[361, null]], "mlx.nn.Conv3d": [[362, null]], "mlx.nn.ConvTranspose1d": [[363, null]], "mlx.nn.ConvTranspose2d": [[364, null]], "mlx.nn.ConvTranspose3d": [[365, null]], "mlx.nn.Dropout": [[366, null]], "mlx.nn.Dropout2d": [[367, null]], "mlx.nn.Dropout3d": [[368, null]], "mlx.nn.ELU": [[369, null]], "mlx.nn.Embedding": [[370, null]], "mlx.nn.GELU": [[371, null]], "mlx.nn.GLU": [[372, null]], "mlx.nn.GRU": [[373, null]], "mlx.nn.GroupNorm": [[374, null]], "mlx.nn.HardShrink": [[375, null]], "mlx.nn.HardTanh": [[376, null]], "mlx.nn.Hardswish": [[377, null]], "mlx.nn.InstanceNorm": [[378, null]], "mlx.nn.LSTM": [[379, null]], "mlx.nn.LayerNorm": [[380, null]], "mlx.nn.LeakyReLU": [[381, null]], "mlx.nn.Linear": [[382, null]], "mlx.nn.LogSigmoid": [[383, null]], "mlx.nn.LogSoftmax": [[384, null]], "mlx.nn.MaxPool1d": [[385, null]], "mlx.nn.MaxPool2d": [[386, null]], "mlx.nn.MaxPool3d": [[387, null]], "mlx.nn.Mish": [[388, null]], "mlx.nn.Module.apply": [[389, null]], "mlx.nn.Module.apply_to_modules": [[390, null]], "mlx.nn.Module.children": [[391, null]], "mlx.nn.Module.eval": [[392, null]], "mlx.nn.Module.filter_and_map": [[393, null]], "mlx.nn.Module.freeze": [[394, null]], "mlx.nn.Module.leaf_modules": [[395, null]], "mlx.nn.Module.load_weights": [[396, null]], "mlx.nn.Module.modules": [[397, null]], "mlx.nn.Module.named_modules": [[398, null]], "mlx.nn.Module.parameters": [[399, null]], "mlx.nn.Module.save_weights": [[400, null]], "mlx.nn.Module.set_dtype": [[401, null]], "mlx.nn.Module.state": [[402, null]], "mlx.nn.Module.train": [[403, null]], "mlx.nn.Module.trainable_parameters": [[404, null]], "mlx.nn.Module.training": [[405, null]], "mlx.nn.Module.unfreeze": [[406, null]], "mlx.nn.Module.update": [[407, null]], "mlx.nn.Module.update_modules": [[408, null]], "mlx.nn.MultiHeadAttention": [[409, null]], "mlx.nn.PReLU": [[410, null]], "mlx.nn.QuantizedEmbedding": [[411, null]], "mlx.nn.QuantizedLinear": [[412, null]], "mlx.nn.RMSNorm": [[413, null]], "mlx.nn.RNN": [[414, null]], "mlx.nn.ReLU": [[415, null]], "mlx.nn.ReLU6": [[416, null]], "mlx.nn.RoPE": [[417, null]], "mlx.nn.SELU": [[418, null]], "mlx.nn.Sequential": [[419, null]], "mlx.nn.SiLU": [[420, null]], "mlx.nn.Sigmoid": [[421, null]], "mlx.nn.SinusoidalPositionalEncoding": [[422, null]], "mlx.nn.Softmax": [[423, null]], "mlx.nn.Softmin": [[424, null]], "mlx.nn.Softplus": [[425, null]], "mlx.nn.Softshrink": [[426, null]], "mlx.nn.Softsign": [[427, null]], "mlx.nn.Step": [[428, null]], "mlx.nn.Tanh": [[429, null]], "mlx.nn.Transformer": [[430, null]], "mlx.nn.Upsample": [[431, null]], "mlx.nn.average_gradients": [[333, null]], "mlx.nn.celu": [[440, null]], "mlx.nn.elu": [[441, null]], "mlx.nn.gelu": [[442, null]], "mlx.nn.gelu_approx": [[443, null]], "mlx.nn.gelu_fast_approx": [[444, null]], "mlx.nn.glu": [[445, null]], "mlx.nn.hard_shrink": [[446, null]], "mlx.nn.hard_tanh": [[447, null]], "mlx.nn.hardswish": [[448, null]], "mlx.nn.init.constant": [[432, null]], "mlx.nn.init.glorot_normal": [[433, null]], "mlx.nn.init.glorot_uniform": [[434, null]], "mlx.nn.init.he_normal": [[435, null]], "mlx.nn.init.he_uniform": [[436, null]], "mlx.nn.init.identity": [[437, null]], "mlx.nn.init.normal": [[438, null]], "mlx.nn.init.uniform": [[439, null]], "mlx.nn.leaky_relu": [[449, null]], "mlx.nn.log_sigmoid": [[450, null]], "mlx.nn.log_softmax": [[451, null]], "mlx.nn.losses.binary_cross_entropy": [[452, null]], "mlx.nn.losses.cosine_similarity_loss": [[453, null]], "mlx.nn.losses.cross_entropy": [[454, null]], "mlx.nn.losses.gaussian_nll_loss": [[455, null]], "mlx.nn.losses.hinge_loss": [[456, null]], "mlx.nn.losses.huber_loss": [[457, null]], "mlx.nn.losses.kl_div_loss": [[458, null]], "mlx.nn.losses.l1_loss": [[459, null]], "mlx.nn.losses.log_cosh_loss": [[460, null]], "mlx.nn.losses.margin_ranking_loss": [[461, null]], "mlx.nn.losses.mse_loss": [[462, null]], "mlx.nn.losses.nll_loss": [[463, null]], "mlx.nn.losses.smooth_l1_loss": [[464, null]], "mlx.nn.losses.triplet_loss": [[465, null]], "mlx.nn.mish": [[466, null]], "mlx.nn.prelu": [[467, null]], "mlx.nn.quantize": [[334, null]], "mlx.nn.relu": [[468, null]], "mlx.nn.relu6": [[469, null]], "mlx.nn.selu": [[470, null]], "mlx.nn.sigmoid": [[471, null]], "mlx.nn.silu": [[472, null]], "mlx.nn.softmax": [[473, null]], "mlx.nn.softmin": [[474, null]], "mlx.nn.softplus": [[475, null]], "mlx.nn.softshrink": [[476, null]], "mlx.nn.step": [[477, null]], "mlx.nn.tanh": [[478, null]], "mlx.nn.value_and_grad": [[335, null]], "mlx.optimizers.AdaDelta": [[486, null]], "mlx.optimizers.Adafactor": [[487, null]], "mlx.optimizers.Adagrad": [[488, null]], "mlx.optimizers.Adam": [[489, null]], "mlx.optimizers.AdamW": [[490, null]], "mlx.optimizers.Adamax": [[491, null]], "mlx.optimizers.Lion": [[492, null]], "mlx.optimizers.MultiOptimizer": [[493, null]], "mlx.optimizers.Optimizer.apply_gradients": [[494, null]], "mlx.optimizers.Optimizer.init": [[495, null]], "mlx.optimizers.Optimizer.state": [[496, null]], "mlx.optimizers.Optimizer.update": [[497, null]], "mlx.optimizers.RMSprop": [[498, null]], "mlx.optimizers.SGD": [[499, null]], "mlx.optimizers.clip_grad_norm": [[336, null]], "mlx.optimizers.cosine_decay": [[500, null]], "mlx.optimizers.exponential_decay": [[501, null]], "mlx.optimizers.join_schedules": [[502, null]], "mlx.optimizers.linear_schedule": [[503, null]], "mlx.optimizers.step_decay": [[504, null]], "mlx.utils.tree_flatten": [[337, null]], "mlx.utils.tree_map": [[338, null]], "mlx.utils.tree_map_with_path": [[339, null]], "mlx.utils.tree_reduce": [[340, null]], "mlx.utils.tree_unflatten": [[341, null]], "x86 Shell": [[9, "x86-shell"]]}, "docnames": ["cpp/ops", "dev/custom_metal_kernels", "dev/extensions", "dev/metal_debugger", "dev/mlx_in_cpp", "examples/linear_regression", "examples/llama-inference", "examples/mlp", "index", "install", "python/_autosummary/mlx.core.Device", "python/_autosummary/mlx.core.Dtype", "python/_autosummary/mlx.core.DtypeCategory", "python/_autosummary/mlx.core.abs", "python/_autosummary/mlx.core.add", "python/_autosummary/mlx.core.addmm", "python/_autosummary/mlx.core.all", "python/_autosummary/mlx.core.allclose", "python/_autosummary/mlx.core.any", "python/_autosummary/mlx.core.arange", "python/_autosummary/mlx.core.arccos", "python/_autosummary/mlx.core.arccosh", "python/_autosummary/mlx.core.arcsin", "python/_autosummary/mlx.core.arcsinh", "python/_autosummary/mlx.core.arctan", "python/_autosummary/mlx.core.arctan2", "python/_autosummary/mlx.core.arctanh", "python/_autosummary/mlx.core.argmax", "python/_autosummary/mlx.core.argmin", "python/_autosummary/mlx.core.argpartition", "python/_autosummary/mlx.core.argsort", "python/_autosummary/mlx.core.array", "python/_autosummary/mlx.core.array.T", "python/_autosummary/mlx.core.array.abs", "python/_autosummary/mlx.core.array.all", "python/_autosummary/mlx.core.array.any", "python/_autosummary/mlx.core.array.argmax", "python/_autosummary/mlx.core.array.argmin", "python/_autosummary/mlx.core.array.astype", "python/_autosummary/mlx.core.array.at", "python/_autosummary/mlx.core.array.conj", "python/_autosummary/mlx.core.array.cos", "python/_autosummary/mlx.core.array.cummax", "python/_autosummary/mlx.core.array.cummin", "python/_autosummary/mlx.core.array.cumprod", "python/_autosummary/mlx.core.array.cumsum", "python/_autosummary/mlx.core.array.diag", "python/_autosummary/mlx.core.array.diagonal", "python/_autosummary/mlx.core.array.dtype", "python/_autosummary/mlx.core.array.exp", "python/_autosummary/mlx.core.array.flatten", "python/_autosummary/mlx.core.array.imag", "python/_autosummary/mlx.core.array.item", "python/_autosummary/mlx.core.array.itemsize", "python/_autosummary/mlx.core.array.log", "python/_autosummary/mlx.core.array.log10", "python/_autosummary/mlx.core.array.log1p", "python/_autosummary/mlx.core.array.log2", "python/_autosummary/mlx.core.array.logcumsumexp", "python/_autosummary/mlx.core.array.logsumexp", "python/_autosummary/mlx.core.array.max", "python/_autosummary/mlx.core.array.mean", "python/_autosummary/mlx.core.array.min", "python/_autosummary/mlx.core.array.moveaxis", "python/_autosummary/mlx.core.array.nbytes", "python/_autosummary/mlx.core.array.ndim", "python/_autosummary/mlx.core.array.prod", "python/_autosummary/mlx.core.array.real", "python/_autosummary/mlx.core.array.reciprocal", "python/_autosummary/mlx.core.array.reshape", "python/_autosummary/mlx.core.array.round", "python/_autosummary/mlx.core.array.rsqrt", "python/_autosummary/mlx.core.array.shape", "python/_autosummary/mlx.core.array.sin", "python/_autosummary/mlx.core.array.size", "python/_autosummary/mlx.core.array.split", "python/_autosummary/mlx.core.array.sqrt", "python/_autosummary/mlx.core.array.square", "python/_autosummary/mlx.core.array.squeeze", "python/_autosummary/mlx.core.array.std", "python/_autosummary/mlx.core.array.sum", "python/_autosummary/mlx.core.array.swapaxes", "python/_autosummary/mlx.core.array.tolist", "python/_autosummary/mlx.core.array.transpose", "python/_autosummary/mlx.core.array.var", "python/_autosummary/mlx.core.array.view", "python/_autosummary/mlx.core.array_equal", "python/_autosummary/mlx.core.as_strided", "python/_autosummary/mlx.core.async_eval", "python/_autosummary/mlx.core.atleast_1d", "python/_autosummary/mlx.core.atleast_2d", "python/_autosummary/mlx.core.atleast_3d", "python/_autosummary/mlx.core.bitwise_and", "python/_autosummary/mlx.core.bitwise_invert", "python/_autosummary/mlx.core.bitwise_or", "python/_autosummary/mlx.core.bitwise_xor", "python/_autosummary/mlx.core.block_masked_mm", "python/_autosummary/mlx.core.broadcast_arrays", "python/_autosummary/mlx.core.broadcast_to", "python/_autosummary/mlx.core.ceil", "python/_autosummary/mlx.core.clear_cache", "python/_autosummary/mlx.core.clip", "python/_autosummary/mlx.core.compile", "python/_autosummary/mlx.core.concatenate", "python/_autosummary/mlx.core.conj", "python/_autosummary/mlx.core.conjugate", "python/_autosummary/mlx.core.contiguous", "python/_autosummary/mlx.core.conv1d", "python/_autosummary/mlx.core.conv2d", "python/_autosummary/mlx.core.conv3d", "python/_autosummary/mlx.core.conv_general", "python/_autosummary/mlx.core.conv_transpose1d", "python/_autosummary/mlx.core.conv_transpose2d", "python/_autosummary/mlx.core.conv_transpose3d", "python/_autosummary/mlx.core.convolve", "python/_autosummary/mlx.core.cos", "python/_autosummary/mlx.core.cosh", "python/_autosummary/mlx.core.cummax", "python/_autosummary/mlx.core.cummin", "python/_autosummary/mlx.core.cumprod", "python/_autosummary/mlx.core.cumsum", "python/_autosummary/mlx.core.custom_function", "python/_autosummary/mlx.core.default_device", "python/_autosummary/mlx.core.default_stream", "python/_autosummary/mlx.core.degrees", "python/_autosummary/mlx.core.dequantize", "python/_autosummary/mlx.core.diag", "python/_autosummary/mlx.core.diagonal", "python/_autosummary/mlx.core.disable_compile", "python/_autosummary/mlx.core.distributed.Group", "python/_autosummary/mlx.core.distributed.all_gather", "python/_autosummary/mlx.core.distributed.all_sum", "python/_autosummary/mlx.core.distributed.init", "python/_autosummary/mlx.core.distributed.is_available", "python/_autosummary/mlx.core.distributed.recv", "python/_autosummary/mlx.core.distributed.recv_like", "python/_autosummary/mlx.core.distributed.send", "python/_autosummary/mlx.core.divide", "python/_autosummary/mlx.core.divmod", "python/_autosummary/mlx.core.einsum", "python/_autosummary/mlx.core.einsum_path", "python/_autosummary/mlx.core.enable_compile", "python/_autosummary/mlx.core.equal", "python/_autosummary/mlx.core.erf", "python/_autosummary/mlx.core.erfinv", "python/_autosummary/mlx.core.eval", "python/_autosummary/mlx.core.exp", "python/_autosummary/mlx.core.expand_dims", "python/_autosummary/mlx.core.expm1", "python/_autosummary/mlx.core.export_function", "python/_autosummary/mlx.core.export_to_dot", "python/_autosummary/mlx.core.exporter", "python/_autosummary/mlx.core.eye", "python/_autosummary/mlx.core.fast.layer_norm", "python/_autosummary/mlx.core.fast.metal_kernel", "python/_autosummary/mlx.core.fast.rms_norm", "python/_autosummary/mlx.core.fast.rope", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention", "python/_autosummary/mlx.core.fft.fft", "python/_autosummary/mlx.core.fft.fft2", "python/_autosummary/mlx.core.fft.fftn", "python/_autosummary/mlx.core.fft.fftshift", "python/_autosummary/mlx.core.fft.ifft", "python/_autosummary/mlx.core.fft.ifft2", "python/_autosummary/mlx.core.fft.ifftn", "python/_autosummary/mlx.core.fft.ifftshift", "python/_autosummary/mlx.core.fft.irfft", "python/_autosummary/mlx.core.fft.irfft2", "python/_autosummary/mlx.core.fft.irfftn", "python/_autosummary/mlx.core.fft.rfft", "python/_autosummary/mlx.core.fft.rfft2", "python/_autosummary/mlx.core.fft.rfftn", "python/_autosummary/mlx.core.finfo", "python/_autosummary/mlx.core.flatten", "python/_autosummary/mlx.core.floor", "python/_autosummary/mlx.core.floor_divide", "python/_autosummary/mlx.core.full", "python/_autosummary/mlx.core.gather_mm", "python/_autosummary/mlx.core.gather_qmm", "python/_autosummary/mlx.core.get_active_memory", "python/_autosummary/mlx.core.get_cache_memory", "python/_autosummary/mlx.core.get_peak_memory", "python/_autosummary/mlx.core.grad", "python/_autosummary/mlx.core.greater", "python/_autosummary/mlx.core.greater_equal", "python/_autosummary/mlx.core.hadamard_transform", "python/_autosummary/mlx.core.identity", "python/_autosummary/mlx.core.imag", "python/_autosummary/mlx.core.import_function", "python/_autosummary/mlx.core.inner", "python/_autosummary/mlx.core.isclose", "python/_autosummary/mlx.core.isfinite", "python/_autosummary/mlx.core.isinf", "python/_autosummary/mlx.core.isnan", "python/_autosummary/mlx.core.isneginf", "python/_autosummary/mlx.core.isposinf", "python/_autosummary/mlx.core.issubdtype", "python/_autosummary/mlx.core.jvp", "python/_autosummary/mlx.core.kron", "python/_autosummary/mlx.core.left_shift", "python/_autosummary/mlx.core.less", "python/_autosummary/mlx.core.less_equal", "python/_autosummary/mlx.core.linalg.cholesky", "python/_autosummary/mlx.core.linalg.cholesky_inv", "python/_autosummary/mlx.core.linalg.cross", "python/_autosummary/mlx.core.linalg.eig", "python/_autosummary/mlx.core.linalg.eigh", "python/_autosummary/mlx.core.linalg.eigvals", "python/_autosummary/mlx.core.linalg.eigvalsh", "python/_autosummary/mlx.core.linalg.inv", "python/_autosummary/mlx.core.linalg.lu", "python/_autosummary/mlx.core.linalg.lu_factor", "python/_autosummary/mlx.core.linalg.norm", "python/_autosummary/mlx.core.linalg.pinv", "python/_autosummary/mlx.core.linalg.qr", "python/_autosummary/mlx.core.linalg.solve", "python/_autosummary/mlx.core.linalg.solve_triangular", "python/_autosummary/mlx.core.linalg.svd", "python/_autosummary/mlx.core.linalg.tri_inv", "python/_autosummary/mlx.core.linspace", "python/_autosummary/mlx.core.load", "python/_autosummary/mlx.core.log", "python/_autosummary/mlx.core.log10", "python/_autosummary/mlx.core.log1p", "python/_autosummary/mlx.core.log2", "python/_autosummary/mlx.core.logaddexp", "python/_autosummary/mlx.core.logcumsumexp", "python/_autosummary/mlx.core.logical_and", "python/_autosummary/mlx.core.logical_not", "python/_autosummary/mlx.core.logical_or", "python/_autosummary/mlx.core.logsumexp", "python/_autosummary/mlx.core.matmul", "python/_autosummary/mlx.core.max", "python/_autosummary/mlx.core.maximum", "python/_autosummary/mlx.core.mean", "python/_autosummary/mlx.core.meshgrid", "python/_autosummary/mlx.core.metal.device_info", "python/_autosummary/mlx.core.metal.is_available", "python/_autosummary/mlx.core.metal.start_capture", "python/_autosummary/mlx.core.metal.stop_capture", "python/_autosummary/mlx.core.min", "python/_autosummary/mlx.core.minimum", "python/_autosummary/mlx.core.moveaxis", "python/_autosummary/mlx.core.multiply", "python/_autosummary/mlx.core.nan_to_num", "python/_autosummary/mlx.core.negative", "python/_autosummary/mlx.core.new_stream", "python/_autosummary/mlx.core.not_equal", "python/_autosummary/mlx.core.ones", "python/_autosummary/mlx.core.ones_like", "python/_autosummary/mlx.core.outer", "python/_autosummary/mlx.core.pad", "python/_autosummary/mlx.core.partition", "python/_autosummary/mlx.core.power", "python/_autosummary/mlx.core.prod", "python/_autosummary/mlx.core.put_along_axis", "python/_autosummary/mlx.core.quantize", "python/_autosummary/mlx.core.quantized_matmul", "python/_autosummary/mlx.core.radians", "python/_autosummary/mlx.core.random.bernoulli", "python/_autosummary/mlx.core.random.categorical", "python/_autosummary/mlx.core.random.gumbel", "python/_autosummary/mlx.core.random.key", "python/_autosummary/mlx.core.random.laplace", "python/_autosummary/mlx.core.random.multivariate_normal", "python/_autosummary/mlx.core.random.normal", "python/_autosummary/mlx.core.random.permutation", "python/_autosummary/mlx.core.random.randint", "python/_autosummary/mlx.core.random.seed", "python/_autosummary/mlx.core.random.split", "python/_autosummary/mlx.core.random.truncated_normal", "python/_autosummary/mlx.core.random.uniform", "python/_autosummary/mlx.core.real", "python/_autosummary/mlx.core.reciprocal", "python/_autosummary/mlx.core.remainder", "python/_autosummary/mlx.core.repeat", "python/_autosummary/mlx.core.reset_peak_memory", "python/_autosummary/mlx.core.reshape", "python/_autosummary/mlx.core.right_shift", "python/_autosummary/mlx.core.roll", "python/_autosummary/mlx.core.round", "python/_autosummary/mlx.core.rsqrt", "python/_autosummary/mlx.core.save", "python/_autosummary/mlx.core.save_gguf", "python/_autosummary/mlx.core.save_safetensors", "python/_autosummary/mlx.core.savez", "python/_autosummary/mlx.core.savez_compressed", "python/_autosummary/mlx.core.set_cache_limit", "python/_autosummary/mlx.core.set_default_device", "python/_autosummary/mlx.core.set_default_stream", "python/_autosummary/mlx.core.set_memory_limit", "python/_autosummary/mlx.core.set_wired_limit", "python/_autosummary/mlx.core.sigmoid", "python/_autosummary/mlx.core.sign", "python/_autosummary/mlx.core.sin", "python/_autosummary/mlx.core.sinh", "python/_autosummary/mlx.core.slice", "python/_autosummary/mlx.core.slice_update", "python/_autosummary/mlx.core.softmax", "python/_autosummary/mlx.core.sort", "python/_autosummary/mlx.core.split", "python/_autosummary/mlx.core.sqrt", "python/_autosummary/mlx.core.square", "python/_autosummary/mlx.core.squeeze", "python/_autosummary/mlx.core.stack", "python/_autosummary/mlx.core.std", "python/_autosummary/mlx.core.stop_gradient", "python/_autosummary/mlx.core.stream", "python/_autosummary/mlx.core.subtract", "python/_autosummary/mlx.core.sum", "python/_autosummary/mlx.core.swapaxes", "python/_autosummary/mlx.core.synchronize", "python/_autosummary/mlx.core.take", "python/_autosummary/mlx.core.take_along_axis", "python/_autosummary/mlx.core.tan", "python/_autosummary/mlx.core.tanh", "python/_autosummary/mlx.core.tensordot", "python/_autosummary/mlx.core.tile", "python/_autosummary/mlx.core.topk", "python/_autosummary/mlx.core.trace", "python/_autosummary/mlx.core.transpose", "python/_autosummary/mlx.core.tri", "python/_autosummary/mlx.core.tril", "python/_autosummary/mlx.core.triu", "python/_autosummary/mlx.core.unflatten", "python/_autosummary/mlx.core.value_and_grad", "python/_autosummary/mlx.core.var", "python/_autosummary/mlx.core.view", "python/_autosummary/mlx.core.vjp", "python/_autosummary/mlx.core.vmap", "python/_autosummary/mlx.core.where", "python/_autosummary/mlx.core.zeros", "python/_autosummary/mlx.core.zeros_like", "python/_autosummary/mlx.nn.average_gradients", "python/_autosummary/mlx.nn.quantize", "python/_autosummary/mlx.nn.value_and_grad", "python/_autosummary/mlx.optimizers.clip_grad_norm", "python/_autosummary/mlx.utils.tree_flatten", "python/_autosummary/mlx.utils.tree_map", "python/_autosummary/mlx.utils.tree_map_with_path", "python/_autosummary/mlx.utils.tree_reduce", "python/_autosummary/mlx.utils.tree_unflatten", "python/_autosummary/stream_class", "python/array", "python/data_types", "python/devices_and_streams", "python/distributed", "python/export", "python/fast", "python/fft", "python/linalg", "python/memory_management", "python/metal", "python/nn", "python/nn/_autosummary/mlx.nn.ALiBi", "python/nn/_autosummary/mlx.nn.AvgPool1d", "python/nn/_autosummary/mlx.nn.AvgPool2d", "python/nn/_autosummary/mlx.nn.AvgPool3d", "python/nn/_autosummary/mlx.nn.BatchNorm", "python/nn/_autosummary/mlx.nn.CELU", "python/nn/_autosummary/mlx.nn.Conv1d", "python/nn/_autosummary/mlx.nn.Conv2d", "python/nn/_autosummary/mlx.nn.Conv3d", "python/nn/_autosummary/mlx.nn.ConvTranspose1d", "python/nn/_autosummary/mlx.nn.ConvTranspose2d", "python/nn/_autosummary/mlx.nn.ConvTranspose3d", "python/nn/_autosummary/mlx.nn.Dropout", "python/nn/_autosummary/mlx.nn.Dropout2d", "python/nn/_autosummary/mlx.nn.Dropout3d", "python/nn/_autosummary/mlx.nn.ELU", "python/nn/_autosummary/mlx.nn.Embedding", "python/nn/_autosummary/mlx.nn.GELU", "python/nn/_autosummary/mlx.nn.GLU", "python/nn/_autosummary/mlx.nn.GRU", "python/nn/_autosummary/mlx.nn.GroupNorm", "python/nn/_autosummary/mlx.nn.HardShrink", "python/nn/_autosummary/mlx.nn.HardTanh", "python/nn/_autosummary/mlx.nn.Hardswish", "python/nn/_autosummary/mlx.nn.InstanceNorm", "python/nn/_autosummary/mlx.nn.LSTM", "python/nn/_autosummary/mlx.nn.LayerNorm", "python/nn/_autosummary/mlx.nn.LeakyReLU", "python/nn/_autosummary/mlx.nn.Linear", "python/nn/_autosummary/mlx.nn.LogSigmoid", "python/nn/_autosummary/mlx.nn.LogSoftmax", "python/nn/_autosummary/mlx.nn.MaxPool1d", "python/nn/_autosummary/mlx.nn.MaxPool2d", "python/nn/_autosummary/mlx.nn.MaxPool3d", "python/nn/_autosummary/mlx.nn.Mish", "python/nn/_autosummary/mlx.nn.Module.apply", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules", "python/nn/_autosummary/mlx.nn.Module.children", "python/nn/_autosummary/mlx.nn.Module.eval", "python/nn/_autosummary/mlx.nn.Module.filter_and_map", "python/nn/_autosummary/mlx.nn.Module.freeze", "python/nn/_autosummary/mlx.nn.Module.leaf_modules", "python/nn/_autosummary/mlx.nn.Module.load_weights", "python/nn/_autosummary/mlx.nn.Module.modules", "python/nn/_autosummary/mlx.nn.Module.named_modules", "python/nn/_autosummary/mlx.nn.Module.parameters", "python/nn/_autosummary/mlx.nn.Module.save_weights", "python/nn/_autosummary/mlx.nn.Module.set_dtype", "python/nn/_autosummary/mlx.nn.Module.state", "python/nn/_autosummary/mlx.nn.Module.train", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters", "python/nn/_autosummary/mlx.nn.Module.training", "python/nn/_autosummary/mlx.nn.Module.unfreeze", "python/nn/_autosummary/mlx.nn.Module.update", "python/nn/_autosummary/mlx.nn.Module.update_modules", "python/nn/_autosummary/mlx.nn.MultiHeadAttention", "python/nn/_autosummary/mlx.nn.PReLU", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding", "python/nn/_autosummary/mlx.nn.QuantizedLinear", "python/nn/_autosummary/mlx.nn.RMSNorm", "python/nn/_autosummary/mlx.nn.RNN", "python/nn/_autosummary/mlx.nn.ReLU", "python/nn/_autosummary/mlx.nn.ReLU6", "python/nn/_autosummary/mlx.nn.RoPE", "python/nn/_autosummary/mlx.nn.SELU", "python/nn/_autosummary/mlx.nn.Sequential", "python/nn/_autosummary/mlx.nn.SiLU", "python/nn/_autosummary/mlx.nn.Sigmoid", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding", "python/nn/_autosummary/mlx.nn.Softmax", "python/nn/_autosummary/mlx.nn.Softmin", "python/nn/_autosummary/mlx.nn.Softplus", "python/nn/_autosummary/mlx.nn.Softshrink", "python/nn/_autosummary/mlx.nn.Softsign", "python/nn/_autosummary/mlx.nn.Step", "python/nn/_autosummary/mlx.nn.Tanh", "python/nn/_autosummary/mlx.nn.Transformer", "python/nn/_autosummary/mlx.nn.Upsample", "python/nn/_autosummary/mlx.nn.init.constant", "python/nn/_autosummary/mlx.nn.init.glorot_normal", "python/nn/_autosummary/mlx.nn.init.glorot_uniform", "python/nn/_autosummary/mlx.nn.init.he_normal", "python/nn/_autosummary/mlx.nn.init.he_uniform", "python/nn/_autosummary/mlx.nn.init.identity", "python/nn/_autosummary/mlx.nn.init.normal", "python/nn/_autosummary/mlx.nn.init.uniform", "python/nn/_autosummary_functions/mlx.nn.celu", "python/nn/_autosummary_functions/mlx.nn.elu", "python/nn/_autosummary_functions/mlx.nn.gelu", "python/nn/_autosummary_functions/mlx.nn.gelu_approx", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx", "python/nn/_autosummary_functions/mlx.nn.glu", "python/nn/_autosummary_functions/mlx.nn.hard_shrink", "python/nn/_autosummary_functions/mlx.nn.hard_tanh", "python/nn/_autosummary_functions/mlx.nn.hardswish", "python/nn/_autosummary_functions/mlx.nn.leaky_relu", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid", "python/nn/_autosummary_functions/mlx.nn.log_softmax", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss", "python/nn/_autosummary_functions/mlx.nn.mish", "python/nn/_autosummary_functions/mlx.nn.prelu", "python/nn/_autosummary_functions/mlx.nn.relu", "python/nn/_autosummary_functions/mlx.nn.relu6", "python/nn/_autosummary_functions/mlx.nn.selu", "python/nn/_autosummary_functions/mlx.nn.sigmoid", "python/nn/_autosummary_functions/mlx.nn.silu", "python/nn/_autosummary_functions/mlx.nn.softmax", "python/nn/_autosummary_functions/mlx.nn.softmin", "python/nn/_autosummary_functions/mlx.nn.softplus", "python/nn/_autosummary_functions/mlx.nn.softshrink", "python/nn/_autosummary_functions/mlx.nn.step", "python/nn/_autosummary_functions/mlx.nn.tanh", "python/nn/functions", "python/nn/init", "python/nn/layers", "python/nn/losses", "python/nn/module", "python/ops", "python/optimizers", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta", "python/optimizers/_autosummary/mlx.optimizers.Adafactor", "python/optimizers/_autosummary/mlx.optimizers.Adagrad", "python/optimizers/_autosummary/mlx.optimizers.Adam", "python/optimizers/_autosummary/mlx.optimizers.AdamW", "python/optimizers/_autosummary/mlx.optimizers.Adamax", "python/optimizers/_autosummary/mlx.optimizers.Lion", "python/optimizers/_autosummary/mlx.optimizers.MultiOptimizer", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update", "python/optimizers/_autosummary/mlx.optimizers.RMSprop", "python/optimizers/_autosummary/mlx.optimizers.SGD", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay", "python/optimizers/_autosummary/mlx.optimizers.join_schedules", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule", "python/optimizers/_autosummary/mlx.optimizers.step_decay", "python/optimizers/common_optimizers", "python/optimizers/optimizer", "python/optimizers/schedulers", "python/random", "python/transforms", "python/tree_utils", "usage/compile", "usage/distributed", "usage/export", "usage/function_transforms", "usage/indexing", "usage/launching_distributed", "usage/lazy_evaluation", "usage/numpy", "usage/quick_start", "usage/saving_and_loading", "usage/unified_memory", "usage/using_streams"], "envversion": {"sphinx": 62, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["cpp/ops.rst", "dev/custom_metal_kernels.rst", "dev/extensions.rst", "dev/metal_debugger.rst", "dev/mlx_in_cpp.rst", "examples/linear_regression.rst", "examples/llama-inference.rst", "examples/mlp.rst", "index.rst", "install.rst", "python/_autosummary/mlx.core.Device.rst", "python/_autosummary/mlx.core.Dtype.rst", "python/_autosummary/mlx.core.DtypeCategory.rst", "python/_autosummary/mlx.core.abs.rst", "python/_autosummary/mlx.core.add.rst", "python/_autosummary/mlx.core.addmm.rst", "python/_autosummary/mlx.core.all.rst", "python/_autosummary/mlx.core.allclose.rst", "python/_autosummary/mlx.core.any.rst", "python/_autosummary/mlx.core.arange.rst", "python/_autosummary/mlx.core.arccos.rst", "python/_autosummary/mlx.core.arccosh.rst", "python/_autosummary/mlx.core.arcsin.rst", "python/_autosummary/mlx.core.arcsinh.rst", "python/_autosummary/mlx.core.arctan.rst", "python/_autosummary/mlx.core.arctan2.rst", "python/_autosummary/mlx.core.arctanh.rst", "python/_autosummary/mlx.core.argmax.rst", "python/_autosummary/mlx.core.argmin.rst", "python/_autosummary/mlx.core.argpartition.rst", "python/_autosummary/mlx.core.argsort.rst", "python/_autosummary/mlx.core.array.rst", "python/_autosummary/mlx.core.array.T.rst", "python/_autosummary/mlx.core.array.abs.rst", "python/_autosummary/mlx.core.array.all.rst", "python/_autosummary/mlx.core.array.any.rst", "python/_autosummary/mlx.core.array.argmax.rst", "python/_autosummary/mlx.core.array.argmin.rst", "python/_autosummary/mlx.core.array.astype.rst", "python/_autosummary/mlx.core.array.at.rst", "python/_autosummary/mlx.core.array.conj.rst", "python/_autosummary/mlx.core.array.cos.rst", "python/_autosummary/mlx.core.array.cummax.rst", "python/_autosummary/mlx.core.array.cummin.rst", "python/_autosummary/mlx.core.array.cumprod.rst", "python/_autosummary/mlx.core.array.cumsum.rst", "python/_autosummary/mlx.core.array.diag.rst", "python/_autosummary/mlx.core.array.diagonal.rst", "python/_autosummary/mlx.core.array.dtype.rst", "python/_autosummary/mlx.core.array.exp.rst", "python/_autosummary/mlx.core.array.flatten.rst", "python/_autosummary/mlx.core.array.imag.rst", "python/_autosummary/mlx.core.array.item.rst", "python/_autosummary/mlx.core.array.itemsize.rst", "python/_autosummary/mlx.core.array.log.rst", "python/_autosummary/mlx.core.array.log10.rst", "python/_autosummary/mlx.core.array.log1p.rst", "python/_autosummary/mlx.core.array.log2.rst", "python/_autosummary/mlx.core.array.logcumsumexp.rst", "python/_autosummary/mlx.core.array.logsumexp.rst", "python/_autosummary/mlx.core.array.max.rst", "python/_autosummary/mlx.core.array.mean.rst", "python/_autosummary/mlx.core.array.min.rst", "python/_autosummary/mlx.core.array.moveaxis.rst", "python/_autosummary/mlx.core.array.nbytes.rst", "python/_autosummary/mlx.core.array.ndim.rst", "python/_autosummary/mlx.core.array.prod.rst", "python/_autosummary/mlx.core.array.real.rst", "python/_autosummary/mlx.core.array.reciprocal.rst", "python/_autosummary/mlx.core.array.reshape.rst", "python/_autosummary/mlx.core.array.round.rst", "python/_autosummary/mlx.core.array.rsqrt.rst", "python/_autosummary/mlx.core.array.shape.rst", "python/_autosummary/mlx.core.array.sin.rst", "python/_autosummary/mlx.core.array.size.rst", "python/_autosummary/mlx.core.array.split.rst", "python/_autosummary/mlx.core.array.sqrt.rst", "python/_autosummary/mlx.core.array.square.rst", "python/_autosummary/mlx.core.array.squeeze.rst", "python/_autosummary/mlx.core.array.std.rst", "python/_autosummary/mlx.core.array.sum.rst", "python/_autosummary/mlx.core.array.swapaxes.rst", "python/_autosummary/mlx.core.array.tolist.rst", "python/_autosummary/mlx.core.array.transpose.rst", "python/_autosummary/mlx.core.array.var.rst", "python/_autosummary/mlx.core.array.view.rst", "python/_autosummary/mlx.core.array_equal.rst", "python/_autosummary/mlx.core.as_strided.rst", "python/_autosummary/mlx.core.async_eval.rst", "python/_autosummary/mlx.core.atleast_1d.rst", "python/_autosummary/mlx.core.atleast_2d.rst", "python/_autosummary/mlx.core.atleast_3d.rst", "python/_autosummary/mlx.core.bitwise_and.rst", "python/_autosummary/mlx.core.bitwise_invert.rst", "python/_autosummary/mlx.core.bitwise_or.rst", "python/_autosummary/mlx.core.bitwise_xor.rst", "python/_autosummary/mlx.core.block_masked_mm.rst", "python/_autosummary/mlx.core.broadcast_arrays.rst", "python/_autosummary/mlx.core.broadcast_to.rst", "python/_autosummary/mlx.core.ceil.rst", "python/_autosummary/mlx.core.clear_cache.rst", "python/_autosummary/mlx.core.clip.rst", "python/_autosummary/mlx.core.compile.rst", "python/_autosummary/mlx.core.concatenate.rst", "python/_autosummary/mlx.core.conj.rst", "python/_autosummary/mlx.core.conjugate.rst", "python/_autosummary/mlx.core.contiguous.rst", "python/_autosummary/mlx.core.conv1d.rst", "python/_autosummary/mlx.core.conv2d.rst", "python/_autosummary/mlx.core.conv3d.rst", "python/_autosummary/mlx.core.conv_general.rst", "python/_autosummary/mlx.core.conv_transpose1d.rst", "python/_autosummary/mlx.core.conv_transpose2d.rst", "python/_autosummary/mlx.core.conv_transpose3d.rst", "python/_autosummary/mlx.core.convolve.rst", "python/_autosummary/mlx.core.cos.rst", "python/_autosummary/mlx.core.cosh.rst", "python/_autosummary/mlx.core.cummax.rst", "python/_autosummary/mlx.core.cummin.rst", "python/_autosummary/mlx.core.cumprod.rst", "python/_autosummary/mlx.core.cumsum.rst", "python/_autosummary/mlx.core.custom_function.rst", "python/_autosummary/mlx.core.default_device.rst", "python/_autosummary/mlx.core.default_stream.rst", "python/_autosummary/mlx.core.degrees.rst", "python/_autosummary/mlx.core.dequantize.rst", "python/_autosummary/mlx.core.diag.rst", "python/_autosummary/mlx.core.diagonal.rst", "python/_autosummary/mlx.core.disable_compile.rst", "python/_autosummary/mlx.core.distributed.Group.rst", "python/_autosummary/mlx.core.distributed.all_gather.rst", "python/_autosummary/mlx.core.distributed.all_sum.rst", "python/_autosummary/mlx.core.distributed.init.rst", "python/_autosummary/mlx.core.distributed.is_available.rst", "python/_autosummary/mlx.core.distributed.recv.rst", "python/_autosummary/mlx.core.distributed.recv_like.rst", "python/_autosummary/mlx.core.distributed.send.rst", "python/_autosummary/mlx.core.divide.rst", "python/_autosummary/mlx.core.divmod.rst", "python/_autosummary/mlx.core.einsum.rst", "python/_autosummary/mlx.core.einsum_path.rst", "python/_autosummary/mlx.core.enable_compile.rst", "python/_autosummary/mlx.core.equal.rst", "python/_autosummary/mlx.core.erf.rst", "python/_autosummary/mlx.core.erfinv.rst", "python/_autosummary/mlx.core.eval.rst", "python/_autosummary/mlx.core.exp.rst", "python/_autosummary/mlx.core.expand_dims.rst", "python/_autosummary/mlx.core.expm1.rst", "python/_autosummary/mlx.core.export_function.rst", "python/_autosummary/mlx.core.export_to_dot.rst", "python/_autosummary/mlx.core.exporter.rst", "python/_autosummary/mlx.core.eye.rst", "python/_autosummary/mlx.core.fast.layer_norm.rst", "python/_autosummary/mlx.core.fast.metal_kernel.rst", "python/_autosummary/mlx.core.fast.rms_norm.rst", "python/_autosummary/mlx.core.fast.rope.rst", "python/_autosummary/mlx.core.fast.scaled_dot_product_attention.rst", "python/_autosummary/mlx.core.fft.fft.rst", "python/_autosummary/mlx.core.fft.fft2.rst", "python/_autosummary/mlx.core.fft.fftn.rst", "python/_autosummary/mlx.core.fft.fftshift.rst", "python/_autosummary/mlx.core.fft.ifft.rst", "python/_autosummary/mlx.core.fft.ifft2.rst", "python/_autosummary/mlx.core.fft.ifftn.rst", "python/_autosummary/mlx.core.fft.ifftshift.rst", "python/_autosummary/mlx.core.fft.irfft.rst", "python/_autosummary/mlx.core.fft.irfft2.rst", "python/_autosummary/mlx.core.fft.irfftn.rst", "python/_autosummary/mlx.core.fft.rfft.rst", "python/_autosummary/mlx.core.fft.rfft2.rst", "python/_autosummary/mlx.core.fft.rfftn.rst", "python/_autosummary/mlx.core.finfo.rst", "python/_autosummary/mlx.core.flatten.rst", "python/_autosummary/mlx.core.floor.rst", "python/_autosummary/mlx.core.floor_divide.rst", "python/_autosummary/mlx.core.full.rst", "python/_autosummary/mlx.core.gather_mm.rst", "python/_autosummary/mlx.core.gather_qmm.rst", "python/_autosummary/mlx.core.get_active_memory.rst", "python/_autosummary/mlx.core.get_cache_memory.rst", "python/_autosummary/mlx.core.get_peak_memory.rst", "python/_autosummary/mlx.core.grad.rst", "python/_autosummary/mlx.core.greater.rst", "python/_autosummary/mlx.core.greater_equal.rst", "python/_autosummary/mlx.core.hadamard_transform.rst", "python/_autosummary/mlx.core.identity.rst", "python/_autosummary/mlx.core.imag.rst", "python/_autosummary/mlx.core.import_function.rst", "python/_autosummary/mlx.core.inner.rst", "python/_autosummary/mlx.core.isclose.rst", "python/_autosummary/mlx.core.isfinite.rst", "python/_autosummary/mlx.core.isinf.rst", "python/_autosummary/mlx.core.isnan.rst", "python/_autosummary/mlx.core.isneginf.rst", "python/_autosummary/mlx.core.isposinf.rst", "python/_autosummary/mlx.core.issubdtype.rst", "python/_autosummary/mlx.core.jvp.rst", "python/_autosummary/mlx.core.kron.rst", "python/_autosummary/mlx.core.left_shift.rst", "python/_autosummary/mlx.core.less.rst", "python/_autosummary/mlx.core.less_equal.rst", "python/_autosummary/mlx.core.linalg.cholesky.rst", "python/_autosummary/mlx.core.linalg.cholesky_inv.rst", "python/_autosummary/mlx.core.linalg.cross.rst", "python/_autosummary/mlx.core.linalg.eig.rst", "python/_autosummary/mlx.core.linalg.eigh.rst", "python/_autosummary/mlx.core.linalg.eigvals.rst", "python/_autosummary/mlx.core.linalg.eigvalsh.rst", "python/_autosummary/mlx.core.linalg.inv.rst", "python/_autosummary/mlx.core.linalg.lu.rst", "python/_autosummary/mlx.core.linalg.lu_factor.rst", "python/_autosummary/mlx.core.linalg.norm.rst", "python/_autosummary/mlx.core.linalg.pinv.rst", "python/_autosummary/mlx.core.linalg.qr.rst", "python/_autosummary/mlx.core.linalg.solve.rst", "python/_autosummary/mlx.core.linalg.solve_triangular.rst", "python/_autosummary/mlx.core.linalg.svd.rst", "python/_autosummary/mlx.core.linalg.tri_inv.rst", "python/_autosummary/mlx.core.linspace.rst", "python/_autosummary/mlx.core.load.rst", "python/_autosummary/mlx.core.log.rst", "python/_autosummary/mlx.core.log10.rst", "python/_autosummary/mlx.core.log1p.rst", "python/_autosummary/mlx.core.log2.rst", "python/_autosummary/mlx.core.logaddexp.rst", "python/_autosummary/mlx.core.logcumsumexp.rst", "python/_autosummary/mlx.core.logical_and.rst", "python/_autosummary/mlx.core.logical_not.rst", "python/_autosummary/mlx.core.logical_or.rst", "python/_autosummary/mlx.core.logsumexp.rst", "python/_autosummary/mlx.core.matmul.rst", "python/_autosummary/mlx.core.max.rst", "python/_autosummary/mlx.core.maximum.rst", "python/_autosummary/mlx.core.mean.rst", "python/_autosummary/mlx.core.meshgrid.rst", "python/_autosummary/mlx.core.metal.device_info.rst", "python/_autosummary/mlx.core.metal.is_available.rst", "python/_autosummary/mlx.core.metal.start_capture.rst", "python/_autosummary/mlx.core.metal.stop_capture.rst", "python/_autosummary/mlx.core.min.rst", "python/_autosummary/mlx.core.minimum.rst", "python/_autosummary/mlx.core.moveaxis.rst", "python/_autosummary/mlx.core.multiply.rst", "python/_autosummary/mlx.core.nan_to_num.rst", "python/_autosummary/mlx.core.negative.rst", "python/_autosummary/mlx.core.new_stream.rst", "python/_autosummary/mlx.core.not_equal.rst", "python/_autosummary/mlx.core.ones.rst", "python/_autosummary/mlx.core.ones_like.rst", "python/_autosummary/mlx.core.outer.rst", "python/_autosummary/mlx.core.pad.rst", "python/_autosummary/mlx.core.partition.rst", "python/_autosummary/mlx.core.power.rst", "python/_autosummary/mlx.core.prod.rst", "python/_autosummary/mlx.core.put_along_axis.rst", "python/_autosummary/mlx.core.quantize.rst", "python/_autosummary/mlx.core.quantized_matmul.rst", "python/_autosummary/mlx.core.radians.rst", "python/_autosummary/mlx.core.random.bernoulli.rst", "python/_autosummary/mlx.core.random.categorical.rst", "python/_autosummary/mlx.core.random.gumbel.rst", "python/_autosummary/mlx.core.random.key.rst", "python/_autosummary/mlx.core.random.laplace.rst", "python/_autosummary/mlx.core.random.multivariate_normal.rst", "python/_autosummary/mlx.core.random.normal.rst", "python/_autosummary/mlx.core.random.permutation.rst", "python/_autosummary/mlx.core.random.randint.rst", "python/_autosummary/mlx.core.random.seed.rst", "python/_autosummary/mlx.core.random.split.rst", "python/_autosummary/mlx.core.random.truncated_normal.rst", "python/_autosummary/mlx.core.random.uniform.rst", "python/_autosummary/mlx.core.real.rst", "python/_autosummary/mlx.core.reciprocal.rst", "python/_autosummary/mlx.core.remainder.rst", "python/_autosummary/mlx.core.repeat.rst", "python/_autosummary/mlx.core.reset_peak_memory.rst", "python/_autosummary/mlx.core.reshape.rst", "python/_autosummary/mlx.core.right_shift.rst", "python/_autosummary/mlx.core.roll.rst", "python/_autosummary/mlx.core.round.rst", "python/_autosummary/mlx.core.rsqrt.rst", "python/_autosummary/mlx.core.save.rst", "python/_autosummary/mlx.core.save_gguf.rst", "python/_autosummary/mlx.core.save_safetensors.rst", "python/_autosummary/mlx.core.savez.rst", "python/_autosummary/mlx.core.savez_compressed.rst", "python/_autosummary/mlx.core.set_cache_limit.rst", "python/_autosummary/mlx.core.set_default_device.rst", "python/_autosummary/mlx.core.set_default_stream.rst", "python/_autosummary/mlx.core.set_memory_limit.rst", "python/_autosummary/mlx.core.set_wired_limit.rst", "python/_autosummary/mlx.core.sigmoid.rst", "python/_autosummary/mlx.core.sign.rst", "python/_autosummary/mlx.core.sin.rst", "python/_autosummary/mlx.core.sinh.rst", "python/_autosummary/mlx.core.slice.rst", "python/_autosummary/mlx.core.slice_update.rst", "python/_autosummary/mlx.core.softmax.rst", "python/_autosummary/mlx.core.sort.rst", "python/_autosummary/mlx.core.split.rst", "python/_autosummary/mlx.core.sqrt.rst", "python/_autosummary/mlx.core.square.rst", "python/_autosummary/mlx.core.squeeze.rst", "python/_autosummary/mlx.core.stack.rst", "python/_autosummary/mlx.core.std.rst", "python/_autosummary/mlx.core.stop_gradient.rst", "python/_autosummary/mlx.core.stream.rst", "python/_autosummary/mlx.core.subtract.rst", "python/_autosummary/mlx.core.sum.rst", "python/_autosummary/mlx.core.swapaxes.rst", "python/_autosummary/mlx.core.synchronize.rst", "python/_autosummary/mlx.core.take.rst", "python/_autosummary/mlx.core.take_along_axis.rst", "python/_autosummary/mlx.core.tan.rst", "python/_autosummary/mlx.core.tanh.rst", "python/_autosummary/mlx.core.tensordot.rst", "python/_autosummary/mlx.core.tile.rst", "python/_autosummary/mlx.core.topk.rst", "python/_autosummary/mlx.core.trace.rst", "python/_autosummary/mlx.core.transpose.rst", "python/_autosummary/mlx.core.tri.rst", "python/_autosummary/mlx.core.tril.rst", "python/_autosummary/mlx.core.triu.rst", "python/_autosummary/mlx.core.unflatten.rst", "python/_autosummary/mlx.core.value_and_grad.rst", "python/_autosummary/mlx.core.var.rst", "python/_autosummary/mlx.core.view.rst", "python/_autosummary/mlx.core.vjp.rst", "python/_autosummary/mlx.core.vmap.rst", "python/_autosummary/mlx.core.where.rst", "python/_autosummary/mlx.core.zeros.rst", "python/_autosummary/mlx.core.zeros_like.rst", "python/_autosummary/mlx.nn.average_gradients.rst", "python/_autosummary/mlx.nn.quantize.rst", "python/_autosummary/mlx.nn.value_and_grad.rst", "python/_autosummary/mlx.optimizers.clip_grad_norm.rst", "python/_autosummary/mlx.utils.tree_flatten.rst", "python/_autosummary/mlx.utils.tree_map.rst", "python/_autosummary/mlx.utils.tree_map_with_path.rst", "python/_autosummary/mlx.utils.tree_reduce.rst", "python/_autosummary/mlx.utils.tree_unflatten.rst", "python/_autosummary/stream_class.rst", "python/array.rst", "python/data_types.rst", "python/devices_and_streams.rst", "python/distributed.rst", "python/export.rst", "python/fast.rst", "python/fft.rst", "python/linalg.rst", "python/memory_management.rst", "python/metal.rst", "python/nn.rst", "python/nn/_autosummary/mlx.nn.ALiBi.rst", "python/nn/_autosummary/mlx.nn.AvgPool1d.rst", "python/nn/_autosummary/mlx.nn.AvgPool2d.rst", "python/nn/_autosummary/mlx.nn.AvgPool3d.rst", "python/nn/_autosummary/mlx.nn.BatchNorm.rst", "python/nn/_autosummary/mlx.nn.CELU.rst", "python/nn/_autosummary/mlx.nn.Conv1d.rst", "python/nn/_autosummary/mlx.nn.Conv2d.rst", "python/nn/_autosummary/mlx.nn.Conv3d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose1d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose2d.rst", "python/nn/_autosummary/mlx.nn.ConvTranspose3d.rst", "python/nn/_autosummary/mlx.nn.Dropout.rst", "python/nn/_autosummary/mlx.nn.Dropout2d.rst", "python/nn/_autosummary/mlx.nn.Dropout3d.rst", "python/nn/_autosummary/mlx.nn.ELU.rst", "python/nn/_autosummary/mlx.nn.Embedding.rst", "python/nn/_autosummary/mlx.nn.GELU.rst", "python/nn/_autosummary/mlx.nn.GLU.rst", "python/nn/_autosummary/mlx.nn.GRU.rst", "python/nn/_autosummary/mlx.nn.GroupNorm.rst", "python/nn/_autosummary/mlx.nn.HardShrink.rst", "python/nn/_autosummary/mlx.nn.HardTanh.rst", "python/nn/_autosummary/mlx.nn.Hardswish.rst", "python/nn/_autosummary/mlx.nn.InstanceNorm.rst", "python/nn/_autosummary/mlx.nn.LSTM.rst", "python/nn/_autosummary/mlx.nn.LayerNorm.rst", "python/nn/_autosummary/mlx.nn.LeakyReLU.rst", "python/nn/_autosummary/mlx.nn.Linear.rst", "python/nn/_autosummary/mlx.nn.LogSigmoid.rst", "python/nn/_autosummary/mlx.nn.LogSoftmax.rst", "python/nn/_autosummary/mlx.nn.MaxPool1d.rst", "python/nn/_autosummary/mlx.nn.MaxPool2d.rst", "python/nn/_autosummary/mlx.nn.MaxPool3d.rst", "python/nn/_autosummary/mlx.nn.Mish.rst", "python/nn/_autosummary/mlx.nn.Module.apply.rst", "python/nn/_autosummary/mlx.nn.Module.apply_to_modules.rst", "python/nn/_autosummary/mlx.nn.Module.children.rst", "python/nn/_autosummary/mlx.nn.Module.eval.rst", "python/nn/_autosummary/mlx.nn.Module.filter_and_map.rst", "python/nn/_autosummary/mlx.nn.Module.freeze.rst", "python/nn/_autosummary/mlx.nn.Module.leaf_modules.rst", "python/nn/_autosummary/mlx.nn.Module.load_weights.rst", "python/nn/_autosummary/mlx.nn.Module.modules.rst", "python/nn/_autosummary/mlx.nn.Module.named_modules.rst", "python/nn/_autosummary/mlx.nn.Module.parameters.rst", "python/nn/_autosummary/mlx.nn.Module.save_weights.rst", "python/nn/_autosummary/mlx.nn.Module.set_dtype.rst", "python/nn/_autosummary/mlx.nn.Module.state.rst", "python/nn/_autosummary/mlx.nn.Module.train.rst", "python/nn/_autosummary/mlx.nn.Module.trainable_parameters.rst", "python/nn/_autosummary/mlx.nn.Module.training.rst", "python/nn/_autosummary/mlx.nn.Module.unfreeze.rst", "python/nn/_autosummary/mlx.nn.Module.update.rst", "python/nn/_autosummary/mlx.nn.Module.update_modules.rst", "python/nn/_autosummary/mlx.nn.MultiHeadAttention.rst", "python/nn/_autosummary/mlx.nn.PReLU.rst", "python/nn/_autosummary/mlx.nn.QuantizedEmbedding.rst", "python/nn/_autosummary/mlx.nn.QuantizedLinear.rst", "python/nn/_autosummary/mlx.nn.RMSNorm.rst", "python/nn/_autosummary/mlx.nn.RNN.rst", "python/nn/_autosummary/mlx.nn.ReLU.rst", "python/nn/_autosummary/mlx.nn.ReLU6.rst", "python/nn/_autosummary/mlx.nn.RoPE.rst", "python/nn/_autosummary/mlx.nn.SELU.rst", "python/nn/_autosummary/mlx.nn.Sequential.rst", "python/nn/_autosummary/mlx.nn.SiLU.rst", "python/nn/_autosummary/mlx.nn.Sigmoid.rst", "python/nn/_autosummary/mlx.nn.SinusoidalPositionalEncoding.rst", "python/nn/_autosummary/mlx.nn.Softmax.rst", "python/nn/_autosummary/mlx.nn.Softmin.rst", "python/nn/_autosummary/mlx.nn.Softplus.rst", "python/nn/_autosummary/mlx.nn.Softshrink.rst", "python/nn/_autosummary/mlx.nn.Softsign.rst", "python/nn/_autosummary/mlx.nn.Step.rst", "python/nn/_autosummary/mlx.nn.Tanh.rst", "python/nn/_autosummary/mlx.nn.Transformer.rst", "python/nn/_autosummary/mlx.nn.Upsample.rst", "python/nn/_autosummary/mlx.nn.init.constant.rst", "python/nn/_autosummary/mlx.nn.init.glorot_normal.rst", "python/nn/_autosummary/mlx.nn.init.glorot_uniform.rst", "python/nn/_autosummary/mlx.nn.init.he_normal.rst", "python/nn/_autosummary/mlx.nn.init.he_uniform.rst", "python/nn/_autosummary/mlx.nn.init.identity.rst", "python/nn/_autosummary/mlx.nn.init.normal.rst", "python/nn/_autosummary/mlx.nn.init.uniform.rst", "python/nn/_autosummary_functions/mlx.nn.celu.rst", "python/nn/_autosummary_functions/mlx.nn.elu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_approx.rst", "python/nn/_autosummary_functions/mlx.nn.gelu_fast_approx.rst", "python/nn/_autosummary_functions/mlx.nn.glu.rst", "python/nn/_autosummary_functions/mlx.nn.hard_shrink.rst", "python/nn/_autosummary_functions/mlx.nn.hard_tanh.rst", "python/nn/_autosummary_functions/mlx.nn.hardswish.rst", "python/nn/_autosummary_functions/mlx.nn.leaky_relu.rst", "python/nn/_autosummary_functions/mlx.nn.log_sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.log_softmax.rst", "python/nn/_autosummary_functions/mlx.nn.losses.binary_cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cosine_similarity_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.cross_entropy.rst", "python/nn/_autosummary_functions/mlx.nn.losses.gaussian_nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.hinge_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.huber_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.kl_div_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.log_cosh_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.margin_ranking_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.mse_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.nll_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.smooth_l1_loss.rst", "python/nn/_autosummary_functions/mlx.nn.losses.triplet_loss.rst", "python/nn/_autosummary_functions/mlx.nn.mish.rst", "python/nn/_autosummary_functions/mlx.nn.prelu.rst", "python/nn/_autosummary_functions/mlx.nn.relu.rst", "python/nn/_autosummary_functions/mlx.nn.relu6.rst", "python/nn/_autosummary_functions/mlx.nn.selu.rst", "python/nn/_autosummary_functions/mlx.nn.sigmoid.rst", "python/nn/_autosummary_functions/mlx.nn.silu.rst", "python/nn/_autosummary_functions/mlx.nn.softmax.rst", "python/nn/_autosummary_functions/mlx.nn.softmin.rst", "python/nn/_autosummary_functions/mlx.nn.softplus.rst", "python/nn/_autosummary_functions/mlx.nn.softshrink.rst", "python/nn/_autosummary_functions/mlx.nn.step.rst", "python/nn/_autosummary_functions/mlx.nn.tanh.rst", "python/nn/functions.rst", "python/nn/init.rst", "python/nn/layers.rst", "python/nn/losses.rst", "python/nn/module.rst", "python/ops.rst", "python/optimizers.rst", "python/optimizers/_autosummary/mlx.optimizers.AdaDelta.rst", "python/optimizers/_autosummary/mlx.optimizers.Adafactor.rst", "python/optimizers/_autosummary/mlx.optimizers.Adagrad.rst", "python/optimizers/_autosummary/mlx.optimizers.Adam.rst", "python/optimizers/_autosummary/mlx.optimizers.AdamW.rst", "python/optimizers/_autosummary/mlx.optimizers.Adamax.rst", "python/optimizers/_autosummary/mlx.optimizers.Lion.rst", "python/optimizers/_autosummary/mlx.optimizers.MultiOptimizer.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.apply_gradients.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.init.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.state.rst", "python/optimizers/_autosummary/mlx.optimizers.Optimizer.update.rst", "python/optimizers/_autosummary/mlx.optimizers.RMSprop.rst", "python/optimizers/_autosummary/mlx.optimizers.SGD.rst", "python/optimizers/_autosummary/mlx.optimizers.cosine_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.exponential_decay.rst", "python/optimizers/_autosummary/mlx.optimizers.join_schedules.rst", "python/optimizers/_autosummary/mlx.optimizers.linear_schedule.rst", "python/optimizers/_autosummary/mlx.optimizers.step_decay.rst", "python/optimizers/common_optimizers.rst", "python/optimizers/optimizer.rst", "python/optimizers/schedulers.rst", "python/random.rst", "python/transforms.rst", "python/tree_utils.rst", "usage/compile.rst", "usage/distributed.rst", "usage/export.rst", "usage/function_transforms.rst", "usage/indexing.rst", "usage/launching_distributed.rst", "usage/lazy_evaluation.rst", "usage/numpy.rst", "usage/quick_start.rst", "usage/saving_and_loading.rst", "usage/unified_memory.rst", "usage/using_streams.rst"], "indexentries": {"__init__() (array method)": [[31, "mlx.core.array.__init__", false]], "__init__() (custom_function method)": [[121, "mlx.core.custom_function.__init__", false]], "__init__() (device method)": [[10, "mlx.core.Device.__init__", false]], "__init__() (dtype method)": [[11, "mlx.core.Dtype.__init__", false]], "__init__() (dtypecategory method)": [[12, "mlx.core.DtypeCategory.__init__", false]], "__init__() (finfo method)": [[172, "mlx.core.finfo.__init__", false]], "__init__() (group method)": [[129, "mlx.core.distributed.Group.__init__", false]], "__init__() (stream method)": [[342, "mlx.core.Stream.__init__", false]], "abs (c++ function)": [[0, "_CPPv43absRK5array14StreamOrDevice", false]], "abs() (array method)": [[33, "mlx.core.array.abs", false]], "abs() (in module mlx.core)": [[13, "mlx.core.abs", false]], "adadelta (class in mlx.optimizers)": [[486, "mlx.optimizers.AdaDelta", false]], "adafactor (class in mlx.optimizers)": [[487, "mlx.optimizers.Adafactor", false]], "adagrad (class in mlx.optimizers)": [[488, "mlx.optimizers.Adagrad", false]], "adam (class in mlx.optimizers)": [[489, "mlx.optimizers.Adam", false]], "adamax (class in mlx.optimizers)": [[491, "mlx.optimizers.Adamax", false]], "adamw (class in mlx.optimizers)": [[490, "mlx.optimizers.AdamW", false]], "add (c++ function)": [[0, "_CPPv43addRK5arrayRK5array14StreamOrDevice", false]], "add() (in module mlx.core)": [[14, "mlx.core.add", false]], "addmm (c++ function)": [[0, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", false]], "addmm() (in module mlx.core)": [[15, "mlx.core.addmm", false]], "alibi (class in mlx.nn)": [[354, "mlx.nn.ALiBi", false]], "all (c++ function)": [[0, "_CPPv43allRK5array14StreamOrDevice", false], [0, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayb14StreamOrDevice", false], [0, "_CPPv43allRK5arrayib14StreamOrDevice", false]], "all() (array method)": [[34, "mlx.core.array.all", false]], "all() (in module mlx.core)": [[16, "mlx.core.all", false]], "all_gather() (in module mlx.core.distributed)": [[130, "mlx.core.distributed.all_gather", false]], "all_sum() (in module mlx.core.distributed)": [[131, "mlx.core.distributed.all_sum", false]], "allclose (c++ function)": [[0, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "allclose() (in module mlx.core)": [[17, "mlx.core.allclose", false]], "any (c++ function)": [[0, "_CPPv43anyRK5array14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayb14StreamOrDevice", false], [0, "_CPPv43anyRK5arrayib14StreamOrDevice", false]], "any() (array method)": [[35, "mlx.core.array.any", false]], "any() (in module mlx.core)": [[18, "mlx.core.any", false]], "apply() (module method)": [[389, "mlx.nn.Module.apply", false]], "apply_gradients() (optimizer method)": [[494, "mlx.optimizers.Optimizer.apply_gradients", false]], "apply_to_modules() (module method)": [[390, "mlx.nn.Module.apply_to_modules", false]], "arange (c++ function)": [[0, "_CPPv46aranged14StreamOrDevice", false], [0, "_CPPv46aranged5Dtype14StreamOrDevice", false], [0, "_CPPv46arangedd14StreamOrDevice", false], [0, "_CPPv46arangedd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangeddd14StreamOrDevice", false], [0, "_CPPv46arangeddd5Dtype14StreamOrDevice", false], [0, "_CPPv46arangei14StreamOrDevice", false], [0, "_CPPv46arangeii14StreamOrDevice", false], [0, "_CPPv46arangeiii14StreamOrDevice", false]], "arange() (in module mlx.core)": [[19, "mlx.core.arange", false]], "arccos (c++ function)": [[0, "_CPPv46arccosRK5array14StreamOrDevice", false]], "arccos() (in module mlx.core)": [[20, "mlx.core.arccos", false]], "arccosh (c++ function)": [[0, "_CPPv47arccoshRK5array14StreamOrDevice", false]], "arccosh() (in module mlx.core)": [[21, "mlx.core.arccosh", false]], "arcsin (c++ function)": [[0, "_CPPv46arcsinRK5array14StreamOrDevice", false]], "arcsin() (in module mlx.core)": [[22, "mlx.core.arcsin", false]], "arcsinh (c++ function)": [[0, "_CPPv47arcsinhRK5array14StreamOrDevice", false]], "arcsinh() (in module mlx.core)": [[23, "mlx.core.arcsinh", false]], "arctan (c++ function)": [[0, "_CPPv46arctanRK5array14StreamOrDevice", false]], "arctan() (in module mlx.core)": [[24, "mlx.core.arctan", false]], "arctan2 (c++ function)": [[0, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", false]], "arctan2() (in module mlx.core)": [[25, "mlx.core.arctan2", false]], "arctanh (c++ function)": [[0, "_CPPv47arctanhRK5array14StreamOrDevice", false]], "arctanh() (in module mlx.core)": [[26, "mlx.core.arctanh", false]], "argmax (c++ function)": [[0, "_CPPv46argmaxRK5array14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argmaxRK5arrayib14StreamOrDevice", false]], "argmax() (array method)": [[36, "mlx.core.array.argmax", false]], "argmax() (in module mlx.core)": [[27, "mlx.core.argmax", false]], "argmin (c++ function)": [[0, "_CPPv46argminRK5array14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayb14StreamOrDevice", false], [0, "_CPPv46argminRK5arrayib14StreamOrDevice", false]], "argmin() (array method)": [[37, "mlx.core.array.argmin", false]], "argmin() (in module mlx.core)": [[28, "mlx.core.argmin", false]], "argpartition (c++ function)": [[0, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", false]], "argpartition() (in module mlx.core)": [[29, "mlx.core.argpartition", false]], "argsort (c++ function)": [[0, "_CPPv47argsortRK5array14StreamOrDevice", false], [0, "_CPPv47argsortRK5arrayi14StreamOrDevice", false]], "argsort() (in module mlx.core)": [[30, "mlx.core.argsort", false]], "array (class in mlx.core)": [[31, "mlx.core.array", false]], "array_equal (c++ function)": [[0, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", false]], "array_equal() (in module mlx.core)": [[86, "mlx.core.array_equal", false]], "as_strided (c++ function)": [[0, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", false]], "as_strided() (in module mlx.core)": [[87, "mlx.core.as_strided", false]], "astype (c++ function)": [[0, "_CPPv46astype5array5Dtype14StreamOrDevice", false]], "astype() (array method)": [[38, "mlx.core.array.astype", false]], "async_eval() (in module mlx.core)": [[88, "mlx.core.async_eval", false]], "at (array property)": [[39, "mlx.core.array.at", false]], "atleast_1d (c++ function)": [[0, "_CPPv410atleast_1dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_1d() (in module mlx.core)": [[89, "mlx.core.atleast_1d", false]], "atleast_2d (c++ function)": [[0, "_CPPv410atleast_2dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_2d() (in module mlx.core)": [[90, "mlx.core.atleast_2d", false]], "atleast_3d (c++ function)": [[0, "_CPPv410atleast_3dRK5array14StreamOrDevice", false], [0, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "atleast_3d() (in module mlx.core)": [[91, "mlx.core.atleast_3d", false]], "average_gradients() (in module mlx.nn)": [[333, "mlx.nn.average_gradients", false]], "avgpool1d (class in mlx.nn)": [[355, "mlx.nn.AvgPool1d", false]], "avgpool2d (class in mlx.nn)": [[356, "mlx.nn.AvgPool2d", false]], "avgpool3d (class in mlx.nn)": [[357, "mlx.nn.AvgPool3d", false]], "batchnorm (class in mlx.nn)": [[358, "mlx.nn.BatchNorm", false]], "bernoulli() (in module mlx.core.random)": [[259, "mlx.core.random.bernoulli", false]], "binary_cross_entropy (class in mlx.nn.losses)": [[452, "mlx.nn.losses.binary_cross_entropy", false]], "bitwise_and (c++ function)": [[0, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", false]], "bitwise_and() (in module mlx.core)": [[92, "mlx.core.bitwise_and", false]], "bitwise_invert (c++ function)": [[0, "_CPPv414bitwise_invertRK5array14StreamOrDevice", false]], "bitwise_invert() (in module mlx.core)": [[93, "mlx.core.bitwise_invert", false]], "bitwise_or (c++ function)": [[0, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", false]], "bitwise_or() (in module mlx.core)": [[94, "mlx.core.bitwise_or", false]], "bitwise_xor (c++ function)": [[0, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", false]], "bitwise_xor() (in module mlx.core)": [[95, "mlx.core.bitwise_xor", false]], "block_masked_mm (c++ function)": [[0, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", false]], "block_masked_mm() (in module mlx.core)": [[96, "mlx.core.block_masked_mm", false]], "broadcast_arrays (c++ function)": [[0, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", false]], "broadcast_arrays() (in module mlx.core)": [[97, "mlx.core.broadcast_arrays", false]], "broadcast_to (c++ function)": [[0, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", false]], "broadcast_to() (in module mlx.core)": [[98, "mlx.core.broadcast_to", false]], "categorical() (in module mlx.core.random)": [[260, "mlx.core.random.categorical", false]], "ceil (c++ function)": [[0, "_CPPv44ceilRK5array14StreamOrDevice", false]], "ceil() (in module mlx.core)": [[99, "mlx.core.ceil", false]], "celu (class in mlx.nn)": [[359, "mlx.nn.CELU", false], [440, "mlx.nn.celu", false]], "children() (module method)": [[391, "mlx.nn.Module.children", false]], "cholesky() (in module mlx.core.linalg)": [[202, "mlx.core.linalg.cholesky", false]], "cholesky_inv() (in module mlx.core.linalg)": [[203, "mlx.core.linalg.cholesky_inv", false]], "clear_cache() (in module mlx.core)": [[100, "mlx.core.clear_cache", false]], "clip (c++ function)": [[0, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", false]], "clip() (in module mlx.core)": [[101, "mlx.core.clip", false]], "clip_grad_norm() (in module mlx.optimizers)": [[336, "mlx.optimizers.clip_grad_norm", false]], "compile() (in module mlx.core)": [[102, "mlx.core.compile", false]], "concatenate (c++ function)": [[0, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", false]], "concatenate() (in module mlx.core)": [[103, "mlx.core.concatenate", false]], "conj() (array method)": [[40, "mlx.core.array.conj", false]], "conj() (in module mlx.core)": [[104, "mlx.core.conj", false]], "conjugate (c++ function)": [[0, "_CPPv49conjugateRK5array14StreamOrDevice", false]], "conjugate() (in module mlx.core)": [[105, "mlx.core.conjugate", false]], "constant() (in module mlx.nn.init)": [[432, "mlx.nn.init.constant", false]], "contiguous (c++ function)": [[0, "_CPPv410contiguousRK5arrayb14StreamOrDevice", false]], "contiguous() (in module mlx.core)": [[106, "mlx.core.contiguous", false]], "conv1d (c++ function)": [[0, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", false]], "conv1d (class in mlx.nn)": [[360, "mlx.nn.Conv1d", false]], "conv1d() (in module mlx.core)": [[107, "mlx.core.conv1d", false]], "conv2d (c++ function)": [[0, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv2d (class in mlx.nn)": [[361, "mlx.nn.Conv2d", false]], "conv2d() (in module mlx.core)": [[108, "mlx.core.conv2d", false]], "conv3d (c++ function)": [[0, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "conv3d (class in mlx.nn)": [[362, "mlx.nn.Conv3d", false]], "conv3d() (in module mlx.core)": [[109, "mlx.core.conv3d", false]], "conv_general (c++ function)": [[0, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false], [0, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", false]], "conv_general() (in module mlx.core)": [[110, "mlx.core.conv_general", false]], "conv_transpose1d (c++ function)": [[0, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", false]], "conv_transpose1d() (in module mlx.core)": [[111, "mlx.core.conv_transpose1d", false]], "conv_transpose2d (c++ function)": [[0, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", false]], "conv_transpose2d() (in module mlx.core)": [[112, "mlx.core.conv_transpose2d", false]], "conv_transpose3d (c++ function)": [[0, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", false]], "conv_transpose3d() (in module mlx.core)": [[113, "mlx.core.conv_transpose3d", false]], "convolve() (in module mlx.core)": [[114, "mlx.core.convolve", false]], "convtranspose1d (class in mlx.nn)": [[363, "mlx.nn.ConvTranspose1d", false]], "convtranspose2d (class in mlx.nn)": [[364, "mlx.nn.ConvTranspose2d", false]], "convtranspose3d (class in mlx.nn)": [[365, "mlx.nn.ConvTranspose3d", false]], "copy (c++ function)": [[0, "_CPPv44copy5array14StreamOrDevice", false]], "cos (c++ function)": [[0, "_CPPv43cosRK5array14StreamOrDevice", false]], "cos() (array method)": [[41, "mlx.core.array.cos", false]], "cos() (in module mlx.core)": [[115, "mlx.core.cos", false]], "cosh (c++ function)": [[0, "_CPPv44coshRK5array14StreamOrDevice", false]], "cosh() (in module mlx.core)": [[116, "mlx.core.cosh", false]], "cosine_decay() (in module mlx.optimizers)": [[500, "mlx.optimizers.cosine_decay", false]], "cosine_similarity_loss (class in mlx.nn.losses)": [[453, "mlx.nn.losses.cosine_similarity_loss", false]], "cross() (in module mlx.core.linalg)": [[204, "mlx.core.linalg.cross", false]], "cross_entropy (class in mlx.nn.losses)": [[454, "mlx.nn.losses.cross_entropy", false]], "cummax (c++ function)": [[0, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", false]], "cummax() (array method)": [[42, "mlx.core.array.cummax", false]], "cummax() (in module mlx.core)": [[117, "mlx.core.cummax", false]], "cummin (c++ function)": [[0, "_CPPv46cumminRK5arrayibb14StreamOrDevice", false]], "cummin() (array method)": [[43, "mlx.core.array.cummin", false]], "cummin() (in module mlx.core)": [[118, "mlx.core.cummin", false]], "cumprod (c++ function)": [[0, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", false]], "cumprod() (array method)": [[44, "mlx.core.array.cumprod", false]], "cumprod() (in module mlx.core)": [[119, "mlx.core.cumprod", false]], "cumsum (c++ function)": [[0, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", false]], "cumsum() (array method)": [[45, "mlx.core.array.cumsum", false]], "cumsum() (in module mlx.core)": [[120, "mlx.core.cumsum", false]], "custom_function (class in mlx.core)": [[121, "mlx.core.custom_function", false]], "default_device() (in module mlx.core)": [[122, "mlx.core.default_device", false]], "default_stream() (in module mlx.core)": [[123, "mlx.core.default_stream", false]], "degrees (c++ function)": [[0, "_CPPv47degreesRK5array14StreamOrDevice", false]], "degrees() (in module mlx.core)": [[124, "mlx.core.degrees", false]], "depends (c++ function)": [[0, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", false]], "dequantize (c++ function)": [[0, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", false]], "dequantize() (in module mlx.core)": [[125, "mlx.core.dequantize", false]], "device (class in mlx.core)": [[10, "mlx.core.Device", false]], "device_info() (in module mlx.core.metal)": [[236, "mlx.core.metal.device_info", false]], "diag (c++ function)": [[0, "_CPPv44diagRK5arrayi14StreamOrDevice", false]], "diag() (array method)": [[46, "mlx.core.array.diag", false]], "diag() (in module mlx.core)": [[126, "mlx.core.diag", false]], "diagonal (c++ function)": [[0, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", false]], "diagonal() (array method)": [[47, "mlx.core.array.diagonal", false]], "diagonal() (in module mlx.core)": [[127, "mlx.core.diagonal", false]], "disable_compile() (in module mlx.core)": [[128, "mlx.core.disable_compile", false]], "divide (c++ function)": [[0, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", false]], "divide() (in module mlx.core)": [[137, "mlx.core.divide", false]], "divmod (c++ function)": [[0, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", false]], "divmod() (in module mlx.core)": [[138, "mlx.core.divmod", false]], "dropout (class in mlx.nn)": [[366, "mlx.nn.Dropout", false]], "dropout2d (class in mlx.nn)": [[367, "mlx.nn.Dropout2d", false]], "dropout3d (class in mlx.nn)": [[368, "mlx.nn.Dropout3d", false]], "dtype (array property)": [[48, "mlx.core.array.dtype", false]], "dtype (class in mlx.core)": [[11, "mlx.core.Dtype", false]], "dtypecategory (class in mlx.core)": [[12, "mlx.core.DtypeCategory", false]], "eig() (in module mlx.core.linalg)": [[205, "mlx.core.linalg.eig", false]], "eigh() (in module mlx.core.linalg)": [[206, "mlx.core.linalg.eigh", false]], "eigvals() (in module mlx.core.linalg)": [[207, "mlx.core.linalg.eigvals", false]], "eigvalsh() (in module mlx.core.linalg)": [[208, "mlx.core.linalg.eigvalsh", false]], "einsum() (in module mlx.core)": [[139, "mlx.core.einsum", false]], "einsum_path() (in module mlx.core)": [[140, "mlx.core.einsum_path", false]], "elu (class in mlx.nn)": [[369, "mlx.nn.ELU", false], [441, "mlx.nn.elu", false]], "embedding (class in mlx.nn)": [[370, "mlx.nn.Embedding", false]], "enable_compile() (in module mlx.core)": [[141, "mlx.core.enable_compile", false]], "equal (c++ function)": [[0, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", false]], "equal() (in module mlx.core)": [[142, "mlx.core.equal", false]], "erf (c++ function)": [[0, "_CPPv43erfRK5array14StreamOrDevice", false]], "erf() (in module mlx.core)": [[143, "mlx.core.erf", false]], "erfinv (c++ function)": [[0, "_CPPv46erfinvRK5array14StreamOrDevice", false]], "erfinv() (in module mlx.core)": [[144, "mlx.core.erfinv", false]], "eval() (in module mlx.core)": [[145, "mlx.core.eval", false]], "eval() (module method)": [[392, "mlx.nn.Module.eval", false]], "exp (c++ function)": [[0, "_CPPv43expRK5array14StreamOrDevice", false]], "exp() (array method)": [[49, "mlx.core.array.exp", false]], "exp() (in module mlx.core)": [[146, "mlx.core.exp", false]], "expand_dims (c++ function)": [[0, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", false]], "expand_dims() (in module mlx.core)": [[147, "mlx.core.expand_dims", false]], "expm1 (c++ function)": [[0, "_CPPv45expm1RK5array14StreamOrDevice", false]], "expm1() (in module mlx.core)": [[148, "mlx.core.expm1", false]], "exponential_decay() (in module mlx.optimizers)": [[501, "mlx.optimizers.exponential_decay", false]], "export_function() (in module mlx.core)": [[149, "mlx.core.export_function", false]], "export_to_dot() (in module mlx.core)": [[150, "mlx.core.export_to_dot", false]], "exporter() (in module mlx.core)": [[151, "mlx.core.exporter", false]], "eye (c++ function)": [[0, "_CPPv43eyei14StreamOrDevice", false], [0, "_CPPv43eyei5Dtype14StreamOrDevice", false], [0, "_CPPv43eyeii14StreamOrDevice", false], [0, "_CPPv43eyeiii14StreamOrDevice", false], [0, "_CPPv43eyeiii5Dtype14StreamOrDevice", false]], "eye() (in module mlx.core)": [[152, "mlx.core.eye", false]], "fft() (in module mlx.core.fft)": [[158, "mlx.core.fft.fft", false]], "fft2() (in module mlx.core.fft)": [[159, "mlx.core.fft.fft2", false]], "fftn() (in module mlx.core.fft)": [[160, "mlx.core.fft.fftn", false]], "fftshift() (in module mlx.core.fft)": [[161, "mlx.core.fft.fftshift", false]], "filter_and_map() (module method)": [[393, "mlx.nn.Module.filter_and_map", false]], "finfo (class in mlx.core)": [[172, "mlx.core.finfo", false]], "flatten (c++ function)": [[0, "_CPPv47flattenRK5array14StreamOrDevice", false], [0, "_CPPv47flattenRK5arrayii14StreamOrDevice", false]], "flatten() (array method)": [[50, "mlx.core.array.flatten", false]], "flatten() (in module mlx.core)": [[173, "mlx.core.flatten", false]], "floor (c++ function)": [[0, "_CPPv45floorRK5array14StreamOrDevice", false]], "floor() (in module mlx.core)": [[174, "mlx.core.floor", false]], "floor_divide (c++ function)": [[0, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", false]], "floor_divide() (in module mlx.core)": [[175, "mlx.core.floor_divide", false]], "freeze() (module method)": [[394, "mlx.nn.Module.freeze", false]], "full (c++ function)": [[0, "_CPPv44full5Shape5array14StreamOrDevice", false], [0, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", false], [0, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", false], [0, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", false]], "full() (in module mlx.core)": [[176, "mlx.core.full", false]], "gather (c++ function)": [[0, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", false], [0, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", false]], "gather_mm (c++ function)": [[0, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", false]], "gather_mm() (in module mlx.core)": [[177, "mlx.core.gather_mm", false]], "gather_qmm (c++ function)": [[0, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", false]], "gather_qmm() (in module mlx.core)": [[178, "mlx.core.gather_qmm", false]], "gaussian_nll_loss (class in mlx.nn.losses)": [[455, "mlx.nn.losses.gaussian_nll_loss", false]], "gelu (class in mlx.nn)": [[371, "mlx.nn.GELU", false], [442, "mlx.nn.gelu", false]], "gelu_approx (class in mlx.nn)": [[443, "mlx.nn.gelu_approx", false]], "gelu_fast_approx (class in mlx.nn)": [[444, "mlx.nn.gelu_fast_approx", false]], "get_active_memory() (in module mlx.core)": [[179, "mlx.core.get_active_memory", false]], "get_cache_memory() (in module mlx.core)": [[180, "mlx.core.get_cache_memory", false]], "get_peak_memory() (in module mlx.core)": [[181, "mlx.core.get_peak_memory", false]], "glorot_normal() (in module mlx.nn.init)": [[433, "mlx.nn.init.glorot_normal", false]], "glorot_uniform() (in module mlx.nn.init)": [[434, "mlx.nn.init.glorot_uniform", false]], "glu (class in mlx.nn)": [[372, "mlx.nn.GLU", false], [445, "mlx.nn.glu", false]], "grad() (in module mlx.core)": [[182, "mlx.core.grad", false]], "greater (c++ function)": [[0, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", false]], "greater() (in module mlx.core)": [[183, "mlx.core.greater", false]], "greater_equal (c++ function)": [[0, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", false]], "greater_equal() (in module mlx.core)": [[184, "mlx.core.greater_equal", false]], "group (class in mlx.core.distributed)": [[129, "mlx.core.distributed.Group", false]], "groupnorm (class in mlx.nn)": [[374, "mlx.nn.GroupNorm", false]], "gru (class in mlx.nn)": [[373, "mlx.nn.GRU", false]], "gumbel() (in module mlx.core.random)": [[261, "mlx.core.random.gumbel", false]], "hadamard_transform (c++ function)": [[0, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", false]], "hadamard_transform() (in module mlx.core)": [[185, "mlx.core.hadamard_transform", false]], "hard_shrink (class in mlx.nn)": [[446, "mlx.nn.hard_shrink", false]], "hard_tanh (class in mlx.nn)": [[447, "mlx.nn.hard_tanh", false]], "hardshrink (class in mlx.nn)": [[375, "mlx.nn.HardShrink", false]], "hardswish (class in mlx.nn)": [[377, "mlx.nn.Hardswish", false], [448, "mlx.nn.hardswish", false]], "hardtanh (class in mlx.nn)": [[376, "mlx.nn.HardTanh", false]], "he_normal() (in module mlx.nn.init)": [[435, "mlx.nn.init.he_normal", false]], "he_uniform() (in module mlx.nn.init)": [[436, "mlx.nn.init.he_uniform", false]], "hinge_loss (class in mlx.nn.losses)": [[456, "mlx.nn.losses.hinge_loss", false]], "huber_loss (class in mlx.nn.losses)": [[457, "mlx.nn.losses.huber_loss", false]], "identity (c++ function)": [[0, "_CPPv48identityi14StreamOrDevice", false], [0, "_CPPv48identityi5Dtype14StreamOrDevice", false]], "identity() (in module mlx.core)": [[186, "mlx.core.identity", false]], "identity() (in module mlx.nn.init)": [[437, "mlx.nn.init.identity", false]], "ifft() (in module mlx.core.fft)": [[162, "mlx.core.fft.ifft", false]], "ifft2() (in module mlx.core.fft)": [[163, "mlx.core.fft.ifft2", false]], "ifftn() (in module mlx.core.fft)": [[164, "mlx.core.fft.ifftn", false]], "ifftshift() (in module mlx.core.fft)": [[165, "mlx.core.fft.ifftshift", false]], "imag (array property)": [[51, "mlx.core.array.imag", false]], "imag (c++ function)": [[0, "_CPPv44imagRK5array14StreamOrDevice", false]], "imag() (in module mlx.core)": [[187, "mlx.core.imag", false]], "import_function() (in module mlx.core)": [[188, "mlx.core.import_function", false]], "init() (in module mlx.core.distributed)": [[132, "mlx.core.distributed.init", false]], "init() (optimizer method)": [[495, "mlx.optimizers.Optimizer.init", false]], "inner (c++ function)": [[0, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", false]], "inner() (in module mlx.core)": [[189, "mlx.core.inner", false]], "instancenorm (class in mlx.nn)": [[378, "mlx.nn.InstanceNorm", false]], "inv() (in module mlx.core.linalg)": [[209, "mlx.core.linalg.inv", false]], "irfft() (in module mlx.core.fft)": [[166, "mlx.core.fft.irfft", false]], "irfft2() (in module mlx.core.fft)": [[167, "mlx.core.fft.irfft2", false]], "irfftn() (in module mlx.core.fft)": [[168, "mlx.core.fft.irfftn", false]], "is_available() (in module mlx.core.distributed)": [[133, "mlx.core.distributed.is_available", false]], "is_available() (in module mlx.core.metal)": [[237, "mlx.core.metal.is_available", false]], "isclose (c++ function)": [[0, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", false]], "isclose() (in module mlx.core)": [[190, "mlx.core.isclose", false]], "isfinite (c++ function)": [[0, "_CPPv48isfiniteRK5array14StreamOrDevice", false]], "isfinite() (in module mlx.core)": [[191, "mlx.core.isfinite", false]], "isinf (c++ function)": [[0, "_CPPv45isinfRK5array14StreamOrDevice", false]], "isinf() (in module mlx.core)": [[192, "mlx.core.isinf", false]], "isnan (c++ function)": [[0, "_CPPv45isnanRK5array14StreamOrDevice", false]], "isnan() (in module mlx.core)": [[193, "mlx.core.isnan", false]], "isneginf (c++ function)": [[0, "_CPPv48isneginfRK5array14StreamOrDevice", false]], "isneginf() (in module mlx.core)": [[194, "mlx.core.isneginf", false]], "isposinf (c++ function)": [[0, "_CPPv48isposinfRK5array14StreamOrDevice", false]], "isposinf() (in module mlx.core)": [[195, "mlx.core.isposinf", false]], "issubdtype() (in module mlx.core)": [[196, "mlx.core.issubdtype", false]], "item() (array method)": [[52, "mlx.core.array.item", false]], "itemsize (array property)": [[53, "mlx.core.array.itemsize", false]], "join_schedules() (in module mlx.optimizers)": [[502, "mlx.optimizers.join_schedules", false]], "jvp() (in module mlx.core)": [[197, "mlx.core.jvp", false]], "key() (in module mlx.core.random)": [[262, "mlx.core.random.key", false]], "kl_div_loss (class in mlx.nn.losses)": [[458, "mlx.nn.losses.kl_div_loss", false]], "kron (c++ function)": [[0, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", false]], "kron() (in module mlx.core)": [[198, "mlx.core.kron", false]], "l1_loss (class in mlx.nn.losses)": [[459, "mlx.nn.losses.l1_loss", false]], "laplace() (in module mlx.core.random)": [[263, "mlx.core.random.laplace", false]], "layer_norm() (in module mlx.core.fast)": [[153, "mlx.core.fast.layer_norm", false]], "layernorm (class in mlx.nn)": [[380, "mlx.nn.LayerNorm", false]], "leaf_modules() (module method)": [[395, "mlx.nn.Module.leaf_modules", false]], "leaky_relu (class in mlx.nn)": [[449, "mlx.nn.leaky_relu", false]], "leakyrelu (class in mlx.nn)": [[381, "mlx.nn.LeakyReLU", false]], "left_shift (c++ function)": [[0, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", false]], "left_shift() (in module mlx.core)": [[199, "mlx.core.left_shift", false]], "less (c++ function)": [[0, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", false]], "less() (in module mlx.core)": [[200, "mlx.core.less", false]], "less_equal (c++ function)": [[0, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", false]], "less_equal() (in module mlx.core)": [[201, "mlx.core.less_equal", false]], "linear (class in mlx.nn)": [[382, "mlx.nn.Linear", false]], "linear_schedule() (in module mlx.optimizers)": [[503, "mlx.optimizers.linear_schedule", false]], "linspace (c++ function)": [[0, "_CPPv48linspaceddi5Dtype14StreamOrDevice", false]], "linspace() (in module mlx.core)": [[219, "mlx.core.linspace", false]], "lion (class in mlx.optimizers)": [[492, "mlx.optimizers.Lion", false]], "load() (in module mlx.core)": [[220, "mlx.core.load", false]], "load_weights() (module method)": [[396, "mlx.nn.Module.load_weights", false]], "log (c++ function)": [[0, "_CPPv43logRK5array14StreamOrDevice", false]], "log() (array method)": [[54, "mlx.core.array.log", false]], "log() (in module mlx.core)": [[221, "mlx.core.log", false]], "log10 (c++ function)": [[0, "_CPPv45log10RK5array14StreamOrDevice", false]], "log10() (array method)": [[55, "mlx.core.array.log10", false]], "log10() (in module mlx.core)": [[222, "mlx.core.log10", false]], "log1p (c++ function)": [[0, "_CPPv45log1pRK5array14StreamOrDevice", false]], "log1p() (array method)": [[56, "mlx.core.array.log1p", false]], "log1p() (in module mlx.core)": [[223, "mlx.core.log1p", false]], "log2 (c++ function)": [[0, "_CPPv44log2RK5array14StreamOrDevice", false]], "log2() (array method)": [[57, "mlx.core.array.log2", false]], "log2() (in module mlx.core)": [[224, "mlx.core.log2", false]], "log_cosh_loss (class in mlx.nn.losses)": [[460, "mlx.nn.losses.log_cosh_loss", false]], "log_sigmoid (class in mlx.nn)": [[450, "mlx.nn.log_sigmoid", false]], "log_softmax (class in mlx.nn)": [[451, "mlx.nn.log_softmax", false]], "logaddexp (c++ function)": [[0, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", false]], "logaddexp() (in module mlx.core)": [[225, "mlx.core.logaddexp", false]], "logcumsumexp (c++ function)": [[0, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", false]], "logcumsumexp() (array method)": [[58, "mlx.core.array.logcumsumexp", false]], "logcumsumexp() (in module mlx.core)": [[226, "mlx.core.logcumsumexp", false]], "logical_and (c++ function)": [[0, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", false]], "logical_and() (in module mlx.core)": [[227, "mlx.core.logical_and", false]], "logical_not (c++ function)": [[0, "_CPPv411logical_notRK5array14StreamOrDevice", false]], "logical_not() (in module mlx.core)": [[228, "mlx.core.logical_not", false]], "logical_or (c++ function)": [[0, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", false]], "logical_or() (in module mlx.core)": [[229, "mlx.core.logical_or", false]], "logsigmoid (class in mlx.nn)": [[383, "mlx.nn.LogSigmoid", false]], "logsoftmax (class in mlx.nn)": [[384, "mlx.nn.LogSoftmax", false]], "logsumexp (c++ function)": [[0, "_CPPv49logsumexpRK5array14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", false], [0, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", false]], "logsumexp() (array method)": [[59, "mlx.core.array.logsumexp", false]], "logsumexp() (in module mlx.core)": [[230, "mlx.core.logsumexp", false]], "lstm (class in mlx.nn)": [[379, "mlx.nn.LSTM", false]], "lu() (in module mlx.core.linalg)": [[210, "mlx.core.linalg.lu", false]], "lu_factor() (in module mlx.core.linalg)": [[211, "mlx.core.linalg.lu_factor", false]], "margin_ranking_loss (class in mlx.nn.losses)": [[461, "mlx.nn.losses.margin_ranking_loss", false]], "matmul (c++ function)": [[0, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", false]], "matmul() (in module mlx.core)": [[231, "mlx.core.matmul", false]], "max (c++ function)": [[0, "_CPPv43maxRK5array14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayb14StreamOrDevice", false], [0, "_CPPv43maxRK5arrayib14StreamOrDevice", false]], "max() (array method)": [[60, "mlx.core.array.max", false]], "max() (in module mlx.core)": [[232, "mlx.core.max", false]], "maximum (c++ function)": [[0, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", false]], "maximum() (in module mlx.core)": [[233, "mlx.core.maximum", false]], "maxpool1d (class in mlx.nn)": [[385, "mlx.nn.MaxPool1d", false]], "maxpool2d (class in mlx.nn)": [[386, "mlx.nn.MaxPool2d", false]], "maxpool3d (class in mlx.nn)": [[387, "mlx.nn.MaxPool3d", false]], "mean (c++ function)": [[0, "_CPPv44meanRK5array14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayb14StreamOrDevice", false], [0, "_CPPv44meanRK5arrayib14StreamOrDevice", false]], "mean() (array method)": [[61, "mlx.core.array.mean", false]], "mean() (in module mlx.core)": [[234, "mlx.core.mean", false]], "meshgrid (c++ function)": [[0, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", false]], "meshgrid() (in module mlx.core)": [[235, "mlx.core.meshgrid", false]], "metal_kernel() (in module mlx.core.fast)": [[154, "mlx.core.fast.metal_kernel", false]], "min (c++ function)": [[0, "_CPPv43minRK5array14StreamOrDevice", false], [0, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayb14StreamOrDevice", false], [0, "_CPPv43minRK5arrayib14StreamOrDevice", false]], "min() (array method)": [[62, "mlx.core.array.min", false]], "min() (in module mlx.core)": [[240, "mlx.core.min", false]], "minimum (c++ function)": [[0, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", false]], "minimum() (in module mlx.core)": [[241, "mlx.core.minimum", false]], "mish (class in mlx.nn)": [[388, "mlx.nn.Mish", false], [466, "mlx.nn.mish", false]], "module (class in mlx.nn)": [[483, "mlx.nn.Module", false]], "modules() (module method)": [[397, "mlx.nn.Module.modules", false]], "moveaxis (c++ function)": [[0, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", false]], "moveaxis() (array method)": [[63, "mlx.core.array.moveaxis", false]], "moveaxis() (in module mlx.core)": [[242, "mlx.core.moveaxis", false]], "mse_loss (class in mlx.nn.losses)": [[462, "mlx.nn.losses.mse_loss", false]], "multiheadattention (class in mlx.nn)": [[409, "mlx.nn.MultiHeadAttention", false]], "multioptimizer (class in mlx.optimizers)": [[493, "mlx.optimizers.MultiOptimizer", false]], "multiply (c++ function)": [[0, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", false]], "multiply() (in module mlx.core)": [[243, "mlx.core.multiply", false]], "multivariate_normal() (in module mlx.core.random)": [[264, "mlx.core.random.multivariate_normal", false]], "named_modules() (module method)": [[398, "mlx.nn.Module.named_modules", false]], "nan_to_num (c++ function)": [[0, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", false]], "nan_to_num() (in module mlx.core)": [[244, "mlx.core.nan_to_num", false]], "nbytes (array property)": [[64, "mlx.core.array.nbytes", false]], "ndim (array property)": [[65, "mlx.core.array.ndim", false]], "negative (c++ function)": [[0, "_CPPv48negativeRK5array14StreamOrDevice", false]], "negative() (in module mlx.core)": [[245, "mlx.core.negative", false]], "new_stream() (in module mlx.core)": [[246, "mlx.core.new_stream", false]], "nll_loss (class in mlx.nn.losses)": [[463, "mlx.nn.losses.nll_loss", false]], "norm() (in module mlx.core.linalg)": [[212, "mlx.core.linalg.norm", false]], "normal() (in module mlx.core.random)": [[265, "mlx.core.random.normal", false]], "normal() (in module mlx.nn.init)": [[438, "mlx.nn.init.normal", false]], "not_equal (c++ function)": [[0, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", false]], "not_equal() (in module mlx.core)": [[247, "mlx.core.not_equal", false]], "number_of_elements (c++ function)": [[0, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", false]], "ones (c++ function)": [[0, "_CPPv44onesRK5Shape14StreamOrDevice", false], [0, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", false]], "ones() (in module mlx.core)": [[248, "mlx.core.ones", false]], "ones_like (c++ function)": [[0, "_CPPv49ones_likeRK5array14StreamOrDevice", false]], "ones_like() (in module mlx.core)": [[249, "mlx.core.ones_like", false]], "operator!= (c++ function)": [[0, "_CPPv4I0Ene5array1TRK5array", false], [0, "_CPPv4I0Ene5arrayRK5array1T", false], [0, "_CPPv4neRK5arrayRK5array", false]], "operator% (c++ function)": [[0, "_CPPv4I0Erm5array1TRK5array", false], [0, "_CPPv4I0Erm5arrayRK5array1T", false], [0, "_CPPv4rmRK5arrayRK5array", false]], "operator& (c++ function)": [[0, "_CPPv4anRK5arrayRK5array", false]], "operator&& (c++ function)": [[0, "_CPPv4aaRK5arrayRK5array", false]], "operator* (c++ function)": [[0, "_CPPv4I0Eml5array1TRK5array", false], [0, "_CPPv4I0Eml5arrayRK5array1T", false], [0, "_CPPv4mlRK5arrayRK5array", false]], "operator+ (c++ function)": [[0, "_CPPv4I0Epl5array1TRK5array", false], [0, "_CPPv4I0Epl5arrayRK5array1T", false], [0, "_CPPv4plRK5arrayRK5array", false]], "operator- (c++ function)": [[0, "_CPPv4I0Emi5array1TRK5array", false], [0, "_CPPv4I0Emi5arrayRK5array1T", false], [0, "_CPPv4miRK5array", false], [0, "_CPPv4miRK5arrayRK5array", false]], "operator/ (c++ function)": [[0, "_CPPv4dvRK5arrayRK5array", false], [0, "_CPPv4dvRK5arrayd", false], [0, "_CPPv4dvdRK5array", false]], "operator< (c++ function)": [[0, "_CPPv4I0Elt5array1TRK5array", false], [0, "_CPPv4I0Elt5arrayRK5array1T", false], [0, "_CPPv4ltRK5arrayRK5array", false]], "operator<< (c++ function)": [[0, "_CPPv4lsRK5arrayRK5array", false]], "operator<= (c++ function)": [[0, "_CPPv4I0Ele5array1TRK5array", false], [0, "_CPPv4I0Ele5arrayRK5array1T", false], [0, "_CPPv4leRK5arrayRK5array", false]], "operator== (c++ function)": [[0, "_CPPv4I0Eeq5array1TRK5array", false], [0, "_CPPv4I0Eeq5arrayRK5array1T", false], [0, "_CPPv4eqRK5arrayRK5array", false]], "operator> (c++ function)": [[0, "_CPPv4I0Egt5array1TRK5array", false], [0, "_CPPv4I0Egt5arrayRK5array1T", false], [0, "_CPPv4gtRK5arrayRK5array", false]], "operator>= (c++ function)": [[0, "_CPPv4I0Ege5array1TRK5array", false], [0, "_CPPv4I0Ege5arrayRK5array1T", false], [0, "_CPPv4geRK5arrayRK5array", false]], "operator>> (c++ function)": [[0, "_CPPv4rsRK5arrayRK5array", false]], "operator^ (c++ function)": [[0, "_CPPv4eoRK5arrayRK5array", false]], "operator| (c++ function)": [[0, "_CPPv4orRK5arrayRK5array", false]], "operator|| (c++ function)": [[0, "_CPPv4ooRK5arrayRK5array", false]], "operator~ (c++ function)": [[0, "_CPPv4coRK5array", false]], "optimizer (class in mlx.optimizers)": [[506, "mlx.optimizers.Optimizer", false]], "outer (c++ function)": [[0, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", false]], "outer() (in module mlx.core)": [[250, "mlx.core.outer", false]], "pad (c++ function)": [[0, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", false], [0, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", false]], "pad() (in module mlx.core)": [[251, "mlx.core.pad", false]], "parameters() (module method)": [[399, "mlx.nn.Module.parameters", false]], "partition (c++ function)": [[0, "_CPPv49partitionRK5arrayi14StreamOrDevice", false], [0, "_CPPv49partitionRK5arrayii14StreamOrDevice", false]], "partition() (in module mlx.core)": [[252, "mlx.core.partition", false]], "permutation() (in module mlx.core.random)": [[266, "mlx.core.random.permutation", false]], "pinv() (in module mlx.core.linalg)": [[213, "mlx.core.linalg.pinv", false]], "power (c++ function)": [[0, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", false]], "power() (in module mlx.core)": [[253, "mlx.core.power", false]], "prelu (class in mlx.nn)": [[410, "mlx.nn.PReLU", false], [467, "mlx.nn.prelu", false]], "prod (c++ function)": [[0, "_CPPv44prodRK5array14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayb14StreamOrDevice", false], [0, "_CPPv44prodRK5arrayib14StreamOrDevice", false]], "prod() (array method)": [[66, "mlx.core.array.prod", false]], "prod() (in module mlx.core)": [[254, "mlx.core.prod", false]], "put_along_axis (c++ function)": [[0, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false]], "put_along_axis() (in module mlx.core)": [[255, "mlx.core.put_along_axis", false]], "qr() (in module mlx.core.linalg)": [[214, "mlx.core.linalg.qr", false]], "quantize (c++ function)": [[0, "_CPPv48quantizeRK5arrayii14StreamOrDevice", false]], "quantize() (in module mlx.core)": [[256, "mlx.core.quantize", false]], "quantize() (in module mlx.nn)": [[334, "mlx.nn.quantize", false]], "quantized_matmul (c++ function)": [[0, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", false]], "quantized_matmul() (in module mlx.core)": [[257, "mlx.core.quantized_matmul", false]], "quantizedembedding (class in mlx.nn)": [[411, "mlx.nn.QuantizedEmbedding", false]], "quantizedlinear (class in mlx.nn)": [[412, "mlx.nn.QuantizedLinear", false]], "radians (c++ function)": [[0, "_CPPv47radiansRK5array14StreamOrDevice", false]], "radians() (in module mlx.core)": [[258, "mlx.core.radians", false]], "randint() (in module mlx.core.random)": [[267, "mlx.core.random.randint", false]], "real (array property)": [[67, "mlx.core.array.real", false]], "real (c++ function)": [[0, "_CPPv44realRK5array14StreamOrDevice", false]], "real() (in module mlx.core)": [[272, "mlx.core.real", false]], "reciprocal (c++ function)": [[0, "_CPPv410reciprocalRK5array14StreamOrDevice", false]], "reciprocal() (array method)": [[68, "mlx.core.array.reciprocal", false]], "reciprocal() (in module mlx.core)": [[273, "mlx.core.reciprocal", false]], "recv() (in module mlx.core.distributed)": [[134, "mlx.core.distributed.recv", false]], "recv_like() (in module mlx.core.distributed)": [[135, "mlx.core.distributed.recv_like", false]], "relu (class in mlx.nn)": [[415, "mlx.nn.ReLU", false], [468, "mlx.nn.relu", false]], "relu6 (class in mlx.nn)": [[416, "mlx.nn.ReLU6", false], [469, "mlx.nn.relu6", false]], "remainder (c++ function)": [[0, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", false]], "remainder() (in module mlx.core)": [[274, "mlx.core.remainder", false]], "repeat (c++ function)": [[0, "_CPPv46repeatRK5arrayi14StreamOrDevice", false], [0, "_CPPv46repeatRK5arrayii14StreamOrDevice", false]], "repeat() (in module mlx.core)": [[275, "mlx.core.repeat", false]], "reset_peak_memory() (in module mlx.core)": [[276, "mlx.core.reset_peak_memory", false]], "reshape (c++ function)": [[0, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", false]], "reshape() (array method)": [[69, "mlx.core.array.reshape", false]], "reshape() (in module mlx.core)": [[277, "mlx.core.reshape", false]], "rfft() (in module mlx.core.fft)": [[169, "mlx.core.fft.rfft", false]], "rfft2() (in module mlx.core.fft)": [[170, "mlx.core.fft.rfft2", false]], "rfftn() (in module mlx.core.fft)": [[171, "mlx.core.fft.rfftn", false]], "right_shift (c++ function)": [[0, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", false]], "right_shift() (in module mlx.core)": [[278, "mlx.core.right_shift", false]], "rms_norm() (in module mlx.core.fast)": [[155, "mlx.core.fast.rms_norm", false]], "rmsnorm (class in mlx.nn)": [[413, "mlx.nn.RMSNorm", false]], "rmsprop (class in mlx.optimizers)": [[498, "mlx.optimizers.RMSprop", false]], "rnn (class in mlx.nn)": [[414, "mlx.nn.RNN", false]], "roll (c++ function)": [[0, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayi14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv44rollRK5arrayii14StreamOrDevice", false]], "roll() (in module mlx.core)": [[279, "mlx.core.roll", false]], "rope (class in mlx.nn)": [[417, "mlx.nn.RoPE", false]], "rope() (in module mlx.core.fast)": [[156, "mlx.core.fast.rope", false]], "round (c++ function)": [[0, "_CPPv45roundRK5array14StreamOrDevice", false], [0, "_CPPv45roundRK5arrayi14StreamOrDevice", false]], "round() (array method)": [[70, "mlx.core.array.round", false]], "round() (in module mlx.core)": [[280, "mlx.core.round", false]], "rsqrt (c++ function)": [[0, "_CPPv45rsqrtRK5array14StreamOrDevice", false]], "rsqrt() (array method)": [[71, "mlx.core.array.rsqrt", false]], "rsqrt() (in module mlx.core)": [[281, "mlx.core.rsqrt", false]], "save() (in module mlx.core)": [[282, "mlx.core.save", false]], "save_gguf() (in module mlx.core)": [[283, "mlx.core.save_gguf", false]], "save_safetensors() (in module mlx.core)": [[284, "mlx.core.save_safetensors", false]], "save_weights() (module method)": [[400, "mlx.nn.Module.save_weights", false]], "savez() (in module mlx.core)": [[285, "mlx.core.savez", false]], "savez_compressed() (in module mlx.core)": [[286, "mlx.core.savez_compressed", false]], "scaled_dot_product_attention() (in module mlx.core.fast)": [[157, "mlx.core.fast.scaled_dot_product_attention", false]], "scatter (c++ function)": [[0, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_add (c++ function)": [[0, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_add_axis (c++ function)": [[0, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false]], "scatter_max (c++ function)": [[0, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_min (c++ function)": [[0, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "scatter_prod (c++ function)": [[0, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", false]], "seed() (in module mlx.core.random)": [[268, "mlx.core.random.seed", false]], "selu (class in mlx.nn)": [[418, "mlx.nn.SELU", false], [470, "mlx.nn.selu", false]], "send() (in module mlx.core.distributed)": [[136, "mlx.core.distributed.send", false]], "sequential (class in mlx.nn)": [[419, "mlx.nn.Sequential", false]], "set_cache_limit() (in module mlx.core)": [[287, "mlx.core.set_cache_limit", false]], "set_default_device() (in module mlx.core)": [[288, "mlx.core.set_default_device", false]], "set_default_stream() (in module mlx.core)": [[289, "mlx.core.set_default_stream", false]], "set_dtype() (module method)": [[401, "mlx.nn.Module.set_dtype", false]], "set_memory_limit() (in module mlx.core)": [[290, "mlx.core.set_memory_limit", false]], "set_wired_limit() (in module mlx.core)": [[291, "mlx.core.set_wired_limit", false]], "sgd (class in mlx.optimizers)": [[499, "mlx.optimizers.SGD", false]], "shape (array property)": [[72, "mlx.core.array.shape", false]], "sigmoid (c++ function)": [[0, "_CPPv47sigmoidRK5array14StreamOrDevice", false]], "sigmoid (class in mlx.nn)": [[421, "mlx.nn.Sigmoid", false], [471, "mlx.nn.sigmoid", false]], "sigmoid() (in module mlx.core)": [[292, "mlx.core.sigmoid", false]], "sign (c++ function)": [[0, "_CPPv44signRK5array14StreamOrDevice", false]], "sign() (in module mlx.core)": [[293, "mlx.core.sign", false]], "silu (class in mlx.nn)": [[420, "mlx.nn.SiLU", false], [472, "mlx.nn.silu", false]], "sin (c++ function)": [[0, "_CPPv43sinRK5array14StreamOrDevice", false]], "sin() (array method)": [[73, "mlx.core.array.sin", false]], "sin() (in module mlx.core)": [[294, "mlx.core.sin", false]], "sinh (c++ function)": [[0, "_CPPv44sinhRK5array14StreamOrDevice", false]], "sinh() (in module mlx.core)": [[295, "mlx.core.sinh", false]], "sinusoidalpositionalencoding (class in mlx.nn)": [[422, "mlx.nn.SinusoidalPositionalEncoding", false]], "size (array property)": [[74, "mlx.core.array.size", false]], "slice (c++ function)": [[0, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", false], [0, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", false]], "slice() (in module mlx.core)": [[296, "mlx.core.slice", false]], "slice_update (c++ function)": [[0, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", false], [0, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", false], [0, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "slice_update() (in module mlx.core)": [[297, "mlx.core.slice_update", false]], "smooth_l1_loss (class in mlx.nn.losses)": [[464, "mlx.nn.losses.smooth_l1_loss", false]], "softmax (c++ function)": [[0, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayb14StreamOrDevice", false], [0, "_CPPv47softmaxRK5arrayib14StreamOrDevice", false]], "softmax (class in mlx.nn)": [[423, "mlx.nn.Softmax", false], [473, "mlx.nn.softmax", false]], "softmax() (in module mlx.core)": [[298, "mlx.core.softmax", false]], "softmin (class in mlx.nn)": [[424, "mlx.nn.Softmin", false], [474, "mlx.nn.softmin", false]], "softplus (class in mlx.nn)": [[425, "mlx.nn.Softplus", false], [475, "mlx.nn.softplus", false]], "softshrink (class in mlx.nn)": [[426, "mlx.nn.Softshrink", false], [476, "mlx.nn.softshrink", false]], "softsign (class in mlx.nn)": [[427, "mlx.nn.Softsign", false]], "solve() (in module mlx.core.linalg)": [[215, "mlx.core.linalg.solve", false]], "solve_triangular() (in module mlx.core.linalg)": [[216, "mlx.core.linalg.solve_triangular", false]], "sort (c++ function)": [[0, "_CPPv44sortRK5array14StreamOrDevice", false], [0, "_CPPv44sortRK5arrayi14StreamOrDevice", false]], "sort() (in module mlx.core)": [[299, "mlx.core.sort", false]], "split (c++ function)": [[0, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayi14StreamOrDevice", false], [0, "_CPPv45splitRK5arrayii14StreamOrDevice", false]], "split() (array method)": [[75, "mlx.core.array.split", false]], "split() (in module mlx.core)": [[300, "mlx.core.split", false]], "split() (in module mlx.core.random)": [[269, "mlx.core.random.split", false]], "sqrt (c++ function)": [[0, "_CPPv44sqrtRK5array14StreamOrDevice", false]], "sqrt() (array method)": [[76, "mlx.core.array.sqrt", false]], "sqrt() (in module mlx.core)": [[301, "mlx.core.sqrt", false]], "square (c++ function)": [[0, "_CPPv46squareRK5array14StreamOrDevice", false]], "square() (array method)": [[77, "mlx.core.array.square", false]], "square() (in module mlx.core)": [[302, "mlx.core.square", false]], "squeeze (c++ function)": [[0, "_CPPv47squeezeRK5array14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", false], [0, "_CPPv47squeezeRK5arrayi14StreamOrDevice", false]], "squeeze() (array method)": [[78, "mlx.core.array.squeeze", false]], "squeeze() (in module mlx.core)": [[303, "mlx.core.squeeze", false]], "stack (c++ function)": [[0, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", false], [0, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", false]], "stack() (in module mlx.core)": [[304, "mlx.core.stack", false]], "start_capture() (in module mlx.core.metal)": [[238, "mlx.core.metal.start_capture", false]], "state (module property)": [[402, "mlx.nn.Module.state", false]], "state (optimizer property)": [[496, "mlx.optimizers.Optimizer.state", false]], "std (c++ function)": [[0, "_CPPv4StRK5array14StreamOrDevice", false], [0, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv4StRK5arraybi14StreamOrDevice", false], [0, "_CPPv4StRK5arrayibi14StreamOrDevice", false]], "std() (array method)": [[79, "mlx.core.array.std", false]], "std() (in module mlx.core)": [[305, "mlx.core.std", false]], "step (class in mlx.nn)": [[428, "mlx.nn.Step", false], [477, "mlx.nn.step", false]], "step_decay() (in module mlx.optimizers)": [[504, "mlx.optimizers.step_decay", false]], "stop_capture() (in module mlx.core.metal)": [[239, "mlx.core.metal.stop_capture", false]], "stop_gradient (c++ function)": [[0, "_CPPv413stop_gradientRK5array14StreamOrDevice", false]], "stop_gradient() (in module mlx.core)": [[306, "mlx.core.stop_gradient", false]], "stream (class in mlx.core)": [[342, "mlx.core.Stream", false]], "stream() (in module mlx.core)": [[307, "mlx.core.stream", false]], "subtract (c++ function)": [[0, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", false]], "subtract() (in module mlx.core)": [[308, "mlx.core.subtract", false]], "sum (c++ function)": [[0, "_CPPv43sumRK5array14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayb14StreamOrDevice", false], [0, "_CPPv43sumRK5arrayib14StreamOrDevice", false]], "sum() (array method)": [[80, "mlx.core.array.sum", false]], "sum() (in module mlx.core)": [[309, "mlx.core.sum", false]], "svd() (in module mlx.core.linalg)": [[217, "mlx.core.linalg.svd", false]], "swapaxes (c++ function)": [[0, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", false]], "swapaxes() (array method)": [[81, "mlx.core.array.swapaxes", false]], "swapaxes() (in module mlx.core)": [[310, "mlx.core.swapaxes", false]], "synchronize() (in module mlx.core)": [[311, "mlx.core.synchronize", false]], "t (array property)": [[32, "mlx.core.array.T", false]], "take (c++ function)": [[0, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayi14StreamOrDevice", false], [0, "_CPPv44takeRK5arrayii14StreamOrDevice", false]], "take() (in module mlx.core)": [[312, "mlx.core.take", false]], "take_along_axis (c++ function)": [[0, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", false]], "take_along_axis() (in module mlx.core)": [[313, "mlx.core.take_along_axis", false]], "tan (c++ function)": [[0, "_CPPv43tanRK5array14StreamOrDevice", false]], "tan() (in module mlx.core)": [[314, "mlx.core.tan", false]], "tanh (c++ function)": [[0, "_CPPv44tanhRK5array14StreamOrDevice", false]], "tanh (class in mlx.nn)": [[429, "mlx.nn.Tanh", false], [478, "mlx.nn.tanh", false]], "tanh() (in module mlx.core)": [[315, "mlx.core.tanh", false]], "tensordot (c++ function)": [[0, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", false], [0, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", false]], "tensordot() (in module mlx.core)": [[316, "mlx.core.tensordot", false]], "tile (c++ function)": [[0, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "tile() (in module mlx.core)": [[317, "mlx.core.tile", false]], "tolist() (array method)": [[82, "mlx.core.array.tolist", false]], "topk (c++ function)": [[0, "_CPPv44topkRK5arrayi14StreamOrDevice", false], [0, "_CPPv44topkRK5arrayii14StreamOrDevice", false]], "topk() (in module mlx.core)": [[318, "mlx.core.topk", false]], "trace (c++ function)": [[0, "_CPPv45traceRK5array14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii14StreamOrDevice", false], [0, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", false]], "trace() (in module mlx.core)": [[319, "mlx.core.trace", false]], "train() (module method)": [[403, "mlx.nn.Module.train", false]], "trainable_parameters() (module method)": [[404, "mlx.nn.Module.trainable_parameters", false]], "training (module property)": [[405, "mlx.nn.Module.training", false]], "transformer (class in mlx.nn)": [[430, "mlx.nn.Transformer", false]], "transpose (c++ function)": [[0, "_CPPv49transposeRK5array14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", false], [0, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", false]], "transpose() (array method)": [[83, "mlx.core.array.transpose", false]], "transpose() (in module mlx.core)": [[320, "mlx.core.transpose", false]], "tree_flatten() (in module mlx.utils)": [[337, "mlx.utils.tree_flatten", false]], "tree_map() (in module mlx.utils)": [[338, "mlx.utils.tree_map", false]], "tree_map_with_path() (in module mlx.utils)": [[339, "mlx.utils.tree_map_with_path", false]], "tree_reduce() (in module mlx.utils)": [[340, "mlx.utils.tree_reduce", false]], "tree_unflatten() (in module mlx.utils)": [[341, "mlx.utils.tree_unflatten", false]], "tri (c++ function)": [[0, "_CPPv43trii5Dtype14StreamOrDevice", false], [0, "_CPPv43triiii5Dtype14StreamOrDevice", false]], "tri() (in module mlx.core)": [[321, "mlx.core.tri", false]], "tri_inv() (in module mlx.core.linalg)": [[218, "mlx.core.linalg.tri_inv", false]], "tril (c++ function)": [[0, "_CPPv44tril5arrayi14StreamOrDevice", false]], "tril() (in module mlx.core)": [[322, "mlx.core.tril", false]], "triplet_loss (class in mlx.nn.losses)": [[465, "mlx.nn.losses.triplet_loss", false]], "triu (c++ function)": [[0, "_CPPv44triu5arrayi14StreamOrDevice", false]], "triu() (in module mlx.core)": [[323, "mlx.core.triu", false]], "truncated_normal() (in module mlx.core.random)": [[270, "mlx.core.random.truncated_normal", false]], "unflatten (c++ function)": [[0, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", false]], "unflatten() (in module mlx.core)": [[324, "mlx.core.unflatten", false]], "unfreeze() (module method)": [[406, "mlx.nn.Module.unfreeze", false]], "uniform() (in module mlx.core.random)": [[271, "mlx.core.random.uniform", false]], "uniform() (in module mlx.nn.init)": [[439, "mlx.nn.init.uniform", false]], "update() (module method)": [[407, "mlx.nn.Module.update", false]], "update() (optimizer method)": [[497, "mlx.optimizers.Optimizer.update", false]], "update_modules() (module method)": [[408, "mlx.nn.Module.update_modules", false]], "upsample (class in mlx.nn)": [[431, "mlx.nn.Upsample", false]], "value_and_grad() (in module mlx.core)": [[325, "mlx.core.value_and_grad", false]], "value_and_grad() (in module mlx.nn)": [[335, "mlx.nn.value_and_grad", false]], "var (c++ function)": [[0, "_CPPv43varRK5array14StreamOrDevice", false], [0, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", false], [0, "_CPPv43varRK5arraybi14StreamOrDevice", false], [0, "_CPPv43varRK5arrayibi14StreamOrDevice", false]], "var() (array method)": [[84, "mlx.core.array.var", false]], "var() (in module mlx.core)": [[326, "mlx.core.var", false]], "view (c++ function)": [[0, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", false]], "view() (array method)": [[85, "mlx.core.array.view", false]], "view() (in module mlx.core)": [[327, "mlx.core.view", false]], "vjp() (in module mlx.core)": [[328, "mlx.core.vjp", false]], "vmap() (in module mlx.core)": [[329, "mlx.core.vmap", false]], "where (c++ function)": [[0, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", false]], "where() (in module mlx.core)": [[330, "mlx.core.where", false]], "zeros (c++ function)": [[0, "_CPPv45zerosRK5Shape14StreamOrDevice", false], [0, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", false]], "zeros() (in module mlx.core)": [[331, "mlx.core.zeros", false]], "zeros_like (c++ function)": [[0, "_CPPv410zeros_likeRK5array14StreamOrDevice", false]], "zeros_like() (in module mlx.core)": [[332, "mlx.core.zeros_like", false]]}, "objects": {"": [[0, 0, 1, "_CPPv43absRK5array14StreamOrDevice", "abs"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::a"], [0, 1, 1, "_CPPv43absRK5array14StreamOrDevice", "abs::s"], [0, 0, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::a"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::b"], [0, 1, 1, "_CPPv43addRK5arrayRK5array14StreamOrDevice", "add::s"], [0, 0, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::a"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::alpha"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::b"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::beta"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::c"], [0, 1, 1, "_CPPv45addmm5array5array5arrayRKfRKf14StreamOrDevice", "addmm::s"], [0, 0, 1, "_CPPv43allRK5array14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all"], [0, 0, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::a"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::axes"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::axis"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::keepdims"], [0, 1, 1, "_CPPv43allRK5array14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayb14StreamOrDevice", "all::s"], [0, 1, 1, "_CPPv43allRK5arrayib14StreamOrDevice", "all::s"], [0, 0, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::a"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::atol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::b"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::equal_nan"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::rtol"], [0, 1, 1, "_CPPv48allcloseRK5arrayRK5arrayddb14StreamOrDevice", "allclose::s"], [0, 0, 1, "_CPPv43anyRK5array14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any"], [0, 0, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::a"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::axes"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::axis"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::keepdims"], [0, 1, 1, "_CPPv43anyRK5array14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayb14StreamOrDevice", "any::s"], [0, 1, 1, "_CPPv43anyRK5arrayib14StreamOrDevice", "any::s"], [0, 0, 1, "_CPPv46aranged14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangei14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeii14StreamOrDevice", "arange"], [0, 0, 1, "_CPPv46arangeiii14StreamOrDevice", "arange"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::dtype"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::s"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::start"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::step"], [0, 1, 1, "_CPPv46aranged14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46aranged5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangedd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeddd5Dtype14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangei14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeii14StreamOrDevice", "arange::stop"], [0, 1, 1, "_CPPv46arangeiii14StreamOrDevice", "arange::stop"], [0, 0, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::a"], [0, 1, 1, "_CPPv46arccosRK5array14StreamOrDevice", "arccos::s"], [0, 0, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::a"], [0, 1, 1, "_CPPv47arccoshRK5array14StreamOrDevice", "arccosh::s"], [0, 0, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::a"], [0, 1, 1, "_CPPv46arcsinRK5array14StreamOrDevice", "arcsin::s"], [0, 0, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::a"], [0, 1, 1, "_CPPv47arcsinhRK5array14StreamOrDevice", "arcsinh::s"], [0, 0, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan"], [0, 0, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::a"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::b"], [0, 1, 1, "_CPPv47arctan2RK5arrayRK5array14StreamOrDevice", "arctan2::s"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::a"], [0, 1, 1, "_CPPv46arctanRK5array14StreamOrDevice", "arctan::s"], [0, 0, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::a"], [0, 1, 1, "_CPPv47arctanhRK5array14StreamOrDevice", "arctanh::s"], [0, 0, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax"], [0, 0, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::a"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::axis"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::keepdims"], [0, 1, 1, "_CPPv46argmaxRK5array14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayb14StreamOrDevice", "argmax::s"], [0, 1, 1, "_CPPv46argmaxRK5arrayib14StreamOrDevice", "argmax::s"], [0, 0, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin"], [0, 0, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::a"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::axis"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::keepdims"], [0, 1, 1, "_CPPv46argminRK5array14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayb14StreamOrDevice", "argmin::s"], [0, 1, 1, "_CPPv46argminRK5arrayib14StreamOrDevice", "argmin::s"], [0, 0, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition"], [0, 0, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::a"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::axis"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::kth"], [0, 1, 1, "_CPPv412argpartitionRK5arrayi14StreamOrDevice", "argpartition::s"], [0, 1, 1, "_CPPv412argpartitionRK5arrayii14StreamOrDevice", "argpartition::s"], [0, 0, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort"], [0, 0, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::a"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::axis"], [0, 1, 1, "_CPPv47argsortRK5array14StreamOrDevice", "argsort::s"], [0, 1, 1, "_CPPv47argsortRK5arrayi14StreamOrDevice", "argsort::s"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal"], [0, 0, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::a"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::b"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::equal_nan"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5array14StreamOrDevice", "array_equal::s"], [0, 1, 1, "_CPPv411array_equalRK5arrayRK5arrayb14StreamOrDevice", "array_equal::s"], [0, 0, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::a"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::offset"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::s"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::shape"], [0, 1, 1, "_CPPv410as_strided5array5Shape7Strides6size_t14StreamOrDevice", "as_strided::strides"], [0, 0, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::a"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::dtype"], [0, 1, 1, "_CPPv46astype5array5Dtype14StreamOrDevice", "astype::s"], [0, 0, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d"], [0, 0, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::a"], [0, 1, 1, "_CPPv410atleast_1dRK5array14StreamOrDevice", "atleast_1d::s"], [0, 1, 1, "_CPPv410atleast_1dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_1d::s"], [0, 0, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d"], [0, 0, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::a"], [0, 1, 1, "_CPPv410atleast_2dRK5array14StreamOrDevice", "atleast_2d::s"], [0, 1, 1, "_CPPv410atleast_2dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_2d::s"], [0, 0, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d"], [0, 0, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::a"], [0, 1, 1, "_CPPv410atleast_3dRK5array14StreamOrDevice", "atleast_3d::s"], [0, 1, 1, "_CPPv410atleast_3dRKNSt6vectorI5arrayEE14StreamOrDevice", "atleast_3d::s"], [0, 0, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::a"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::b"], [0, 1, 1, "_CPPv411bitwise_andRK5arrayRK5array14StreamOrDevice", "bitwise_and::s"], [0, 0, 1, "_CPPv414bitwise_invertRK5array14StreamOrDevice", "bitwise_invert"], [0, 1, 1, "_CPPv414bitwise_invertRK5array14StreamOrDevice", "bitwise_invert::a"], [0, 1, 1, "_CPPv414bitwise_invertRK5array14StreamOrDevice", "bitwise_invert::s"], [0, 0, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::a"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::b"], [0, 1, 1, "_CPPv410bitwise_orRK5arrayRK5array14StreamOrDevice", "bitwise_or::s"], [0, 0, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::a"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::b"], [0, 1, 1, "_CPPv411bitwise_xorRK5arrayRK5array14StreamOrDevice", "bitwise_xor::s"], [0, 0, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::a"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::b"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::block_size"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_lhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_out"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::mask_rhs"], [0, 1, 1, "_CPPv415block_masked_mm5array5arrayiNSt8optionalI5arrayEENSt8optionalI5arrayEENSt8optionalI5arrayEE14StreamOrDevice", "block_masked_mm::s"], [0, 0, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::inputs"], [0, 1, 1, "_CPPv416broadcast_arraysRKNSt6vectorI5arrayEE14StreamOrDevice", "broadcast_arrays::s"], [0, 0, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::a"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::s"], [0, 1, 1, "_CPPv412broadcast_toRK5arrayRK5Shape14StreamOrDevice", "broadcast_to::shape"], [0, 0, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::a"], [0, 1, 1, "_CPPv44ceilRK5array14StreamOrDevice", "ceil::s"], [0, 0, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_max"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::a_min"], [0, 1, 1, "_CPPv44clipRK5arrayRKNSt8optionalI5arrayEERKNSt8optionalI5arrayEE14StreamOrDevice", "clip::s"], [0, 0, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate"], [0, 0, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::arrays"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::axis"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEE14StreamOrDevice", "concatenate::s"], [0, 1, 1, "_CPPv411concatenateNSt6vectorI5arrayEEi14StreamOrDevice", "concatenate::s"], [0, 0, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::a"], [0, 1, 1, "_CPPv49conjugateRK5array14StreamOrDevice", "conjugate::s"], [0, 0, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::a"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::allow_col_major"], [0, 1, 1, "_CPPv410contiguousRK5arrayb14StreamOrDevice", "contiguous::s"], [0, 0, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::dilation"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::groups"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::input"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::padding"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::s"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::stride"], [0, 1, 1, "_CPPv46conv1dRK5arrayRK5arrayiiii14StreamOrDevice", "conv1d::weight"], [0, 0, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::dilation"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::groups"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::input"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::padding"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::s"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::stride"], [0, 1, 1, "_CPPv46conv2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv2d::weight"], [0, 0, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::dilation"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::groups"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::input"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::padding"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::s"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::stride"], [0, 1, 1, "_CPPv46conv3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv3d::weight"], [0, 0, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 0, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::flip"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::groups"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::input_dilation"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::kernel_dilation"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_hi"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::padding_lo"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::s"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::stride"], [0, 1, 1, "_CPPv412conv_general5array5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 1, 1, "_CPPv412conv_generalRK5arrayRK5arrayNSt6vectorIiEENSt6vectorIiEENSt6vectorIiEENSt6vectorIiEEib14StreamOrDevice", "conv_general::weight"], [0, 0, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::dilation"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::groups"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::input"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::output_padding"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::padding"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::s"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::stride"], [0, 1, 1, "_CPPv416conv_transpose1dRK5arrayRK5arrayiiiii14StreamOrDevice", "conv_transpose1d::weight"], [0, 0, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::dilation"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::groups"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::input"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::output_padding"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::padding"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::s"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::stride"], [0, 1, 1, "_CPPv416conv_transpose2dRK5arrayRK5arrayRKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEERKNSt4pairIiiEEi14StreamOrDevice", "conv_transpose2d::weight"], [0, 0, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::dilation"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::groups"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::input"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::output_padding"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::padding"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::s"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::stride"], [0, 1, 1, "_CPPv416conv_transpose3dRK5arrayRK5arrayRKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEERKNSt5tupleIiiiEEi14StreamOrDevice", "conv_transpose3d::weight"], [0, 0, 1, "_CPPv44copy5array14StreamOrDevice", "copy"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::a"], [0, 1, 1, "_CPPv44copy5array14StreamOrDevice", "copy::s"], [0, 0, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::a"], [0, 1, 1, "_CPPv43cosRK5array14StreamOrDevice", "cos::s"], [0, 0, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::a"], [0, 1, 1, "_CPPv44coshRK5array14StreamOrDevice", "cosh::s"], [0, 0, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::a"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::axis"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::inclusive"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::reverse"], [0, 1, 1, "_CPPv46cummaxRK5arrayibb14StreamOrDevice", "cummax::s"], [0, 0, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::a"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::axis"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::inclusive"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::reverse"], [0, 1, 1, "_CPPv46cumminRK5arrayibb14StreamOrDevice", "cummin::s"], [0, 0, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::a"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::axis"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::inclusive"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::reverse"], [0, 1, 1, "_CPPv47cumprodRK5arrayibb14StreamOrDevice", "cumprod::s"], [0, 0, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::a"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::axis"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::inclusive"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::reverse"], [0, 1, 1, "_CPPv46cumsumRK5arrayibb14StreamOrDevice", "cumsum::s"], [0, 0, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::a"], [0, 1, 1, "_CPPv47degreesRK5array14StreamOrDevice", "degrees::s"], [0, 0, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::dependencies"], [0, 1, 1, "_CPPv47dependsRKNSt6vectorI5arrayEERKNSt6vectorI5arrayEE", "depends::inputs"], [0, 0, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::biases"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::bits"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::group_size"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::s"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::scales"], [0, 1, 1, "_CPPv410dequantizeRK5arrayRK5arrayRK5arrayii14StreamOrDevice", "dequantize::w"], [0, 0, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::a"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::k"], [0, 1, 1, "_CPPv44diagRK5arrayi14StreamOrDevice", "diag::s"], [0, 0, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::a"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis1"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::axis2"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::offset"], [0, 1, 1, "_CPPv48diagonalRK5arrayiii14StreamOrDevice", "diagonal::s"], [0, 0, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::a"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::b"], [0, 1, 1, "_CPPv46divideRK5arrayRK5array14StreamOrDevice", "divide::s"], [0, 0, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::a"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::b"], [0, 1, 1, "_CPPv46divmodRK5arrayRK5array14StreamOrDevice", "divmod::s"], [0, 0, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::a"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::b"], [0, 1, 1, "_CPPv45equalRK5arrayRK5array14StreamOrDevice", "equal::s"], [0, 0, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::a"], [0, 1, 1, "_CPPv43erfRK5array14StreamOrDevice", "erf::s"], [0, 0, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::a"], [0, 1, 1, "_CPPv46erfinvRK5array14StreamOrDevice", "erfinv::s"], [0, 0, 1, "_CPPv43expRK5array14StreamOrDevice", "exp"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::a"], [0, 1, 1, "_CPPv43expRK5array14StreamOrDevice", "exp::s"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims"], [0, 0, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::a"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::axes"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::axis"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "expand_dims::s"], [0, 1, 1, "_CPPv411expand_dimsRK5arrayi14StreamOrDevice", "expand_dims::s"], [0, 0, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::a"], [0, 1, 1, "_CPPv45expm1RK5array14StreamOrDevice", "expm1::s"], [0, 0, 1, "_CPPv43eyei14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii14StreamOrDevice", "eye"], [0, 0, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::dtype"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::k"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::m"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::n"], [0, 1, 1, "_CPPv43eyei14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyei5Dtype14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii14StreamOrDevice", "eye::s"], [0, 1, 1, "_CPPv43eyeiii5Dtype14StreamOrDevice", "eye::s"], [0, 0, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten"], [0, 0, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::a"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::end_axis"], [0, 1, 1, "_CPPv47flattenRK5array14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::s"], [0, 1, 1, "_CPPv47flattenRK5arrayii14StreamOrDevice", "flatten::start_axis"], [0, 0, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::a"], [0, 1, 1, "_CPPv45floorRK5array14StreamOrDevice", "floor::s"], [0, 0, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::a"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::b"], [0, 1, 1, "_CPPv412floor_divideRK5arrayRK5array14StreamOrDevice", "floor_divide::s"], [0, 0, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full"], [0, 0, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full"], [0, 0, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full"], [0, 2, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::T"], [0, 2, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::T"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::dtype"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::s"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::shape"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv4I0E4full5array5Shape1T5Dtype14StreamOrDevice", "full::val"], [0, 1, 1, "_CPPv44full5Shape5array14StreamOrDevice", "full::vals"], [0, 1, 1, "_CPPv44full5Shape5array5Dtype14StreamOrDevice", "full::vals"], [0, 0, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather"], [0, 0, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::a"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::axes"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::axis"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::indices"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::s"], [0, 1, 1, "_CPPv46gatherRK5arrayRK5arrayiRK5Shape14StreamOrDevice", "gather::slice_sizes"], [0, 1, 1, "_CPPv46gatherRK5arrayRKNSt6vectorI5arrayEERKNSt6vectorIiEERK5Shape14StreamOrDevice", "gather::slice_sizes"], [0, 0, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm::a"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm::b"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm::lhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm::rhs_indices"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm::s"], [0, 1, 1, "_CPPv49gather_mm5array5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEb14StreamOrDevice", "gather_mm::sorted_indices"], [0, 0, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::biases"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::bits"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::group_size"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::lhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::rhs_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::s"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::scales"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::sorted_indices"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::transpose"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::w"], [0, 1, 1, "_CPPv410gather_qmmRK5arrayRK5arrayRK5arrayRK5arrayNSt8optionalI5arrayEENSt8optionalI5arrayEEbiib14StreamOrDevice", "gather_qmm::x"], [0, 0, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::a"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::b"], [0, 1, 1, "_CPPv47greaterRK5arrayRK5array14StreamOrDevice", "greater::s"], [0, 0, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::a"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::b"], [0, 1, 1, "_CPPv413greater_equalRK5arrayRK5array14StreamOrDevice", "greater_equal::s"], [0, 0, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::a"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::s"], [0, 1, 1, "_CPPv418hadamard_transformRK5arrayNSt8optionalIfEE14StreamOrDevice", "hadamard_transform::scale"], [0, 0, 1, "_CPPv48identityi14StreamOrDevice", "identity"], [0, 0, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::dtype"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::n"], [0, 1, 1, "_CPPv48identityi14StreamOrDevice", "identity::s"], [0, 1, 1, "_CPPv48identityi5Dtype14StreamOrDevice", "identity::s"], [0, 0, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag"], [0, 1, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag::a"], [0, 1, 1, "_CPPv44imagRK5array14StreamOrDevice", "imag::s"], [0, 0, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::a"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::b"], [0, 1, 1, "_CPPv45innerRK5arrayRK5array14StreamOrDevice", "inner::s"], [0, 0, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::a"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::atol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::b"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::equal_nan"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::rtol"], [0, 1, 1, "_CPPv47iscloseRK5arrayRK5arrayddb14StreamOrDevice", "isclose::s"], [0, 0, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::a"], [0, 1, 1, "_CPPv48isfiniteRK5array14StreamOrDevice", "isfinite::s"], [0, 0, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::a"], [0, 1, 1, "_CPPv45isinfRK5array14StreamOrDevice", "isinf::s"], [0, 0, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::a"], [0, 1, 1, "_CPPv45isnanRK5array14StreamOrDevice", "isnan::s"], [0, 0, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::a"], [0, 1, 1, "_CPPv48isneginfRK5array14StreamOrDevice", "isneginf::s"], [0, 0, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::a"], [0, 1, 1, "_CPPv48isposinfRK5array14StreamOrDevice", "isposinf::s"], [0, 0, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::a"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::b"], [0, 1, 1, "_CPPv44kronRK5arrayRK5array14StreamOrDevice", "kron::s"], [0, 0, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::a"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::b"], [0, 1, 1, "_CPPv410left_shiftRK5arrayRK5array14StreamOrDevice", "left_shift::s"], [0, 0, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::a"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::b"], [0, 1, 1, "_CPPv44lessRK5arrayRK5array14StreamOrDevice", "less::s"], [0, 0, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::a"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::b"], [0, 1, 1, "_CPPv410less_equalRK5arrayRK5array14StreamOrDevice", "less_equal::s"], [0, 0, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::dtype"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::num"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::s"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::start"], [0, 1, 1, "_CPPv48linspaceddi5Dtype14StreamOrDevice", "linspace::stop"], [0, 0, 1, "_CPPv43logRK5array14StreamOrDevice", "log"], [0, 0, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::a"], [0, 1, 1, "_CPPv45log10RK5array14StreamOrDevice", "log10::s"], [0, 0, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::a"], [0, 1, 1, "_CPPv45log1pRK5array14StreamOrDevice", "log1p::s"], [0, 0, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::a"], [0, 1, 1, "_CPPv44log2RK5array14StreamOrDevice", "log2::s"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::a"], [0, 1, 1, "_CPPv43logRK5array14StreamOrDevice", "log::s"], [0, 0, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::a"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::b"], [0, 1, 1, "_CPPv49logaddexpRK5arrayRK5array14StreamOrDevice", "logaddexp::s"], [0, 0, 1, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", "logcumsumexp"], [0, 1, 1, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", "logcumsumexp::a"], [0, 1, 1, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", "logcumsumexp::axis"], [0, 1, 1, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", "logcumsumexp::inclusive"], [0, 1, 1, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", "logcumsumexp::reverse"], [0, 1, 1, "_CPPv412logcumsumexpRK5arrayibb14StreamOrDevice", "logcumsumexp::s"], [0, 0, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::a"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::b"], [0, 1, 1, "_CPPv411logical_andRK5arrayRK5array14StreamOrDevice", "logical_and::s"], [0, 0, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::a"], [0, 1, 1, "_CPPv411logical_notRK5array14StreamOrDevice", "logical_not::s"], [0, 0, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::a"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::b"], [0, 1, 1, "_CPPv410logical_orRK5arrayRK5array14StreamOrDevice", "logical_or::s"], [0, 0, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp"], [0, 0, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::a"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::axes"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::axis"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::keepdims"], [0, 1, 1, "_CPPv49logsumexpRK5array14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayb14StreamOrDevice", "logsumexp::s"], [0, 1, 1, "_CPPv49logsumexpRK5arrayib14StreamOrDevice", "logsumexp::s"], [0, 0, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::a"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::b"], [0, 1, 1, "_CPPv46matmulRK5arrayRK5array14StreamOrDevice", "matmul::s"], [0, 0, 1, "_CPPv43maxRK5array14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max"], [0, 0, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::a"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::axes"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::axis"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::keepdims"], [0, 1, 1, "_CPPv43maxRK5array14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayb14StreamOrDevice", "max::s"], [0, 1, 1, "_CPPv43maxRK5arrayib14StreamOrDevice", "max::s"], [0, 0, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::a"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::b"], [0, 1, 1, "_CPPv47maximumRK5arrayRK5array14StreamOrDevice", "maximum::s"], [0, 0, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean"], [0, 0, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::a"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::axes"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::axis"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::keepdims"], [0, 1, 1, "_CPPv44meanRK5array14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayb14StreamOrDevice", "mean::s"], [0, 1, 1, "_CPPv44meanRK5arrayib14StreamOrDevice", "mean::s"], [0, 0, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::arrays"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::indexing"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::s"], [0, 1, 1, "_CPPv48meshgridRKNSt6vectorI5arrayEEbRKNSt6stringE14StreamOrDevice", "meshgrid::sparse"], [0, 0, 1, "_CPPv43minRK5array14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min"], [0, 0, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::a"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::axes"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::axis"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::keepdims"], [0, 1, 1, "_CPPv43minRK5array14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayb14StreamOrDevice", "min::s"], [0, 1, 1, "_CPPv43minRK5arrayib14StreamOrDevice", "min::s"], [0, 0, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::a"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::b"], [0, 1, 1, "_CPPv47minimumRK5arrayRK5array14StreamOrDevice", "minimum::s"], [0, 0, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::a"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::destination"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::s"], [0, 1, 1, "_CPPv48moveaxisRK5arrayii14StreamOrDevice", "moveaxis::source"], [0, 0, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::a"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::b"], [0, 1, 1, "_CPPv48multiplyRK5arrayRK5array14StreamOrDevice", "multiply::s"], [0, 0, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::a"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::nan"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::neginf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::posinf"], [0, 1, 1, "_CPPv410nan_to_numRK5arrayfKNSt8optionalIfEEKNSt8optionalIfEE14StreamOrDevice", "nan_to_num::s"], [0, 0, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::a"], [0, 1, 1, "_CPPv48negativeRK5array14StreamOrDevice", "negative::s"], [0, 0, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::a"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::b"], [0, 1, 1, "_CPPv49not_equalRK5arrayRK5array14StreamOrDevice", "not_equal::s"], [0, 0, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::a"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::axes"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::dtype"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::inverted"], [0, 1, 1, "_CPPv418number_of_elementsRK5arrayNSt6vectorIiEEb5Dtype14StreamOrDevice", "number_of_elements::s"], [0, 0, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones"], [0, 0, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::dtype"], [0, 1, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::s"], [0, 1, 1, "_CPPv44onesRK5Shape14StreamOrDevice", "ones::shape"], [0, 1, 1, "_CPPv44onesRK5Shape5Dtype14StreamOrDevice", "ones::shape"], [0, 0, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::a"], [0, 1, 1, "_CPPv49ones_likeRK5array14StreamOrDevice", "ones_like::s"], [0, 0, 1, "_CPPv4I0Ene5array1TRK5array", "operator!="], [0, 0, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!="], [0, 0, 1, "_CPPv4neRK5arrayRK5array", "operator!="], [0, 2, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::T"], [0, 2, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::T"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::a"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::a"], [0, 1, 1, "_CPPv4I0Ene5array1TRK5array", "operator!=::b"], [0, 1, 1, "_CPPv4I0Ene5arrayRK5array1T", "operator!=::b"], [0, 1, 1, "_CPPv4neRK5arrayRK5array", "operator!=::b"], [0, 0, 1, "_CPPv4I0Erm5array1TRK5array", "operator%"], [0, 0, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%"], [0, 0, 1, "_CPPv4rmRK5arrayRK5array", "operator%"], [0, 2, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::T"], [0, 2, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::T"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::a"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::a"], [0, 1, 1, "_CPPv4I0Erm5array1TRK5array", "operator%::b"], [0, 1, 1, "_CPPv4I0Erm5arrayRK5array1T", "operator%::b"], [0, 1, 1, "_CPPv4rmRK5arrayRK5array", "operator%::b"], [0, 0, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;"], [0, 0, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::a"], [0, 1, 1, "_CPPv4aaRK5arrayRK5array", "operator&amp;&amp;::b"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::a"], [0, 1, 1, "_CPPv4anRK5arrayRK5array", "operator&amp;::b"], [0, 0, 1, "_CPPv4I0Eml5array1TRK5array", "operator*"], [0, 0, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*"], [0, 0, 1, "_CPPv4mlRK5arrayRK5array", "operator*"], [0, 2, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::T"], [0, 2, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::T"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::a"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::a"], [0, 1, 1, "_CPPv4I0Eml5array1TRK5array", "operator*::b"], [0, 1, 1, "_CPPv4I0Eml5arrayRK5array1T", "operator*::b"], [0, 1, 1, "_CPPv4mlRK5arrayRK5array", "operator*::b"], [0, 0, 1, "_CPPv4I0Epl5array1TRK5array", "operator+"], [0, 0, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+"], [0, 0, 1, "_CPPv4plRK5arrayRK5array", "operator+"], [0, 2, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::T"], [0, 2, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::T"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::a"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::a"], [0, 1, 1, "_CPPv4I0Epl5array1TRK5array", "operator+::b"], [0, 1, 1, "_CPPv4I0Epl5arrayRK5array1T", "operator+::b"], [0, 1, 1, "_CPPv4plRK5arrayRK5array", "operator+::b"], [0, 0, 1, "_CPPv4I0Emi5array1TRK5array", "operator-"], [0, 0, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-"], [0, 0, 1, "_CPPv4miRK5array", "operator-"], [0, 0, 1, "_CPPv4miRK5arrayRK5array", "operator-"], [0, 2, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::T"], [0, 2, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::T"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::a"], [0, 1, 1, "_CPPv4miRK5array", "operator-::a"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::a"], [0, 1, 1, "_CPPv4I0Emi5array1TRK5array", "operator-::b"], [0, 1, 1, "_CPPv4I0Emi5arrayRK5array1T", "operator-::b"], [0, 1, 1, "_CPPv4miRK5arrayRK5array", "operator-::b"], [0, 0, 1, "_CPPv4dvRK5arrayRK5array", "operator/"], [0, 0, 1, "_CPPv4dvRK5arrayd", "operator/"], [0, 0, 1, "_CPPv4dvdRK5array", "operator/"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::a"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::a"], [0, 1, 1, "_CPPv4dvRK5arrayRK5array", "operator/::b"], [0, 1, 1, "_CPPv4dvRK5arrayd", "operator/::b"], [0, 1, 1, "_CPPv4dvdRK5array", "operator/::b"], [0, 0, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;"], [0, 0, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;"], [0, 0, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;"], [0, 2, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::T"], [0, 2, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::T"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::a"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::a"], [0, 1, 1, "_CPPv4I0Elt5array1TRK5array", "operator&lt;::b"], [0, 1, 1, "_CPPv4I0Elt5arrayRK5array1T", "operator&lt;::b"], [0, 1, 1, "_CPPv4ltRK5arrayRK5array", "operator&lt;::b"], [0, 0, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::a"], [0, 1, 1, "_CPPv4lsRK5arrayRK5array", "operator&lt;&lt;::b"], [0, 0, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;="], [0, 0, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;="], [0, 0, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;="], [0, 2, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::T"], [0, 2, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::T"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::a"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::a"], [0, 1, 1, "_CPPv4I0Ele5array1TRK5array", "operator&lt;=::b"], [0, 1, 1, "_CPPv4I0Ele5arrayRK5array1T", "operator&lt;=::b"], [0, 1, 1, "_CPPv4leRK5arrayRK5array", "operator&lt;=::b"], [0, 0, 1, "_CPPv4I0Eeq5array1TRK5array", "operator=="], [0, 0, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator=="], [0, 0, 1, "_CPPv4eqRK5arrayRK5array", "operator=="], [0, 2, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::T"], [0, 2, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::T"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::a"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::a"], [0, 1, 1, "_CPPv4I0Eeq5array1TRK5array", "operator==::b"], [0, 1, 1, "_CPPv4I0Eeq5arrayRK5array1T", "operator==::b"], [0, 1, 1, "_CPPv4eqRK5arrayRK5array", "operator==::b"], [0, 0, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;"], [0, 0, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;"], [0, 0, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;"], [0, 2, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::T"], [0, 2, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::T"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::a"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::a"], [0, 1, 1, "_CPPv4I0Egt5array1TRK5array", "operator&gt;::b"], [0, 1, 1, "_CPPv4I0Egt5arrayRK5array1T", "operator&gt;::b"], [0, 1, 1, "_CPPv4gtRK5arrayRK5array", "operator&gt;::b"], [0, 0, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;="], [0, 0, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;="], [0, 0, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;="], [0, 2, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::T"], [0, 2, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::T"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::a"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::a"], [0, 1, 1, "_CPPv4I0Ege5array1TRK5array", "operator&gt;=::b"], [0, 1, 1, "_CPPv4I0Ege5arrayRK5array1T", "operator&gt;=::b"], [0, 1, 1, "_CPPv4geRK5arrayRK5array", "operator&gt;=::b"], [0, 0, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::a"], [0, 1, 1, "_CPPv4rsRK5arrayRK5array", "operator&gt;&gt;::b"], [0, 0, 1, "_CPPv4eoRK5arrayRK5array", "operator^"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::a"], [0, 1, 1, "_CPPv4eoRK5arrayRK5array", "operator^::b"], [0, 0, 1, "_CPPv4orRK5arrayRK5array", "operator|"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::a"], [0, 1, 1, "_CPPv4orRK5arrayRK5array", "operator|::b"], [0, 0, 1, "_CPPv4ooRK5arrayRK5array", "operator||"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::a"], [0, 1, 1, "_CPPv4ooRK5arrayRK5array", "operator||::b"], [0, 0, 1, "_CPPv4coRK5array", "operator~"], [0, 1, 1, "_CPPv4coRK5array", "operator~::a"], [0, 0, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::a"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::b"], [0, 1, 1, "_CPPv45outerRK5arrayRK5array14StreamOrDevice", "outer::s"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 0, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::a"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::axes"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::high_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::low_pad_size"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::mode"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_value"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::pad_width"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt4pairIiiEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorINSt4pairIiiEEEERK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayRKNSt6vectorIiEERK5ShapeRK5ShapeRK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 1, 1, "_CPPv43padRK5arrayiRK5arrayRKNSt6stringE14StreamOrDevice", "pad::s"], [0, 0, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition"], [0, 0, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::a"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::axis"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::kth"], [0, 1, 1, "_CPPv49partitionRK5arrayi14StreamOrDevice", "partition::s"], [0, 1, 1, "_CPPv49partitionRK5arrayii14StreamOrDevice", "partition::s"], [0, 0, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::a"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::b"], [0, 1, 1, "_CPPv45powerRK5arrayRK5array14StreamOrDevice", "power::s"], [0, 0, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod"], [0, 0, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::a"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::axes"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::axis"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::keepdims"], [0, 1, 1, "_CPPv44prodRK5array14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayb14StreamOrDevice", "prod::s"], [0, 1, 1, "_CPPv44prodRK5arrayib14StreamOrDevice", "prod::s"], [0, 0, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::a"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::axis"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::indices"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::s"], [0, 1, 1, "_CPPv414put_along_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "put_along_axis::values"], [0, 0, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::bits"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::group_size"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::s"], [0, 1, 1, "_CPPv48quantizeRK5arrayii14StreamOrDevice", "quantize::w"], [0, 0, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::biases"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::bits"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::group_size"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::s"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::scales"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::transpose"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::w"], [0, 1, 1, "_CPPv416quantized_matmul5array5array5array5arraybii14StreamOrDevice", "quantized_matmul::x"], [0, 0, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::a"], [0, 1, 1, "_CPPv47radiansRK5array14StreamOrDevice", "radians::s"], [0, 0, 1, "_CPPv44realRK5array14StreamOrDevice", "real"], [0, 1, 1, "_CPPv44realRK5array14StreamOrDevice", "real::a"], [0, 1, 1, "_CPPv44realRK5array14StreamOrDevice", "real::s"], [0, 0, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::a"], [0, 1, 1, "_CPPv410reciprocalRK5array14StreamOrDevice", "reciprocal::s"], [0, 0, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::a"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::b"], [0, 1, 1, "_CPPv49remainderRK5arrayRK5array14StreamOrDevice", "remainder::s"], [0, 0, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat"], [0, 0, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::arr"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::axis"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::repeats"], [0, 1, 1, "_CPPv46repeatRK5arrayi14StreamOrDevice", "repeat::s"], [0, 1, 1, "_CPPv46repeatRK5arrayii14StreamOrDevice", "repeat::s"], [0, 0, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::a"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::s"], [0, 1, 1, "_CPPv47reshapeRK5array5Shape14StreamOrDevice", "reshape::shape"], [0, 0, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::a"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::b"], [0, 1, 1, "_CPPv411right_shiftRK5arrayRK5array14StreamOrDevice", "right_shift::s"], [0, 0, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll"], [0, 0, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::a"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::axes"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::axes"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::axis"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::axis"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::s"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shape14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayRK5ShapeRKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayRK5Shapei14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayi14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayiRKNSt6vectorIiEE14StreamOrDevice", "roll::shift"], [0, 1, 1, "_CPPv44rollRK5arrayii14StreamOrDevice", "roll::shift"], [0, 0, 1, "_CPPv45roundRK5array14StreamOrDevice", "round"], [0, 0, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::a"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::decimals"], [0, 1, 1, "_CPPv45roundRK5array14StreamOrDevice", "round::s"], [0, 1, 1, "_CPPv45roundRK5arrayi14StreamOrDevice", "round::s"], [0, 0, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::a"], [0, 1, 1, "_CPPv45rsqrtRK5array14StreamOrDevice", "rsqrt::s"], [0, 0, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter"], [0, 0, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::a"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::axes"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::axis"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::indices"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::s"], [0, 1, 1, "_CPPv47scatterRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter::updates"], [0, 1, 1, "_CPPv47scatterRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter::updates"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add"], [0, 0, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::a"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::axes"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::axis"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::indices"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::s"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add::updates"], [0, 1, 1, "_CPPv411scatter_addRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_add::updates"], [0, 0, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::a"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::axis"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::indices"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::s"], [0, 1, 1, "_CPPv416scatter_add_axisRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_add_axis::values"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max"], [0, 0, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::a"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::axes"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::axis"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::indices"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::s"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_max::updates"], [0, 1, 1, "_CPPv411scatter_maxRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_max::updates"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min"], [0, 0, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::a"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::axes"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::axis"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::indices"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::s"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_min::updates"], [0, 1, 1, "_CPPv411scatter_minRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_min::updates"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod"], [0, 0, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::a"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::axes"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::axis"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::indices"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::s"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRK5arrayRK5arrayi14StreamOrDevice", "scatter_prod::updates"], [0, 1, 1, "_CPPv412scatter_prodRK5arrayRKNSt6vectorI5arrayEERK5arrayRKNSt6vectorIiEE14StreamOrDevice", "scatter_prod::updates"], [0, 0, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::a"], [0, 1, 1, "_CPPv47sigmoidRK5array14StreamOrDevice", "sigmoid::s"], [0, 0, 1, "_CPPv44signRK5array14StreamOrDevice", "sign"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::a"], [0, 1, 1, "_CPPv44signRK5array14StreamOrDevice", "sign::s"], [0, 0, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::a"], [0, 1, 1, "_CPPv43sinRK5array14StreamOrDevice", "sin::s"], [0, 0, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::a"], [0, 1, 1, "_CPPv44sinhRK5array14StreamOrDevice", "sinh::s"], [0, 0, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice"], [0, 0, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::a"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::axes"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::s"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::slice_size"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5arrayRK5arrayNSt6vectorIiEE5Shape14StreamOrDevice", "slice::start"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::stop"], [0, 1, 1, "_CPPv45sliceRK5array5Shape5Shape5Shape14StreamOrDevice", "slice::strides"], [0, 1, 1, "_CPPv45sliceRK5arrayNSt16initializer_listIiEE5Shape5Shape14StreamOrDevice", "slice::strides"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update"], [0, 0, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::axes"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::s"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::src"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::start"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::stop"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::strides"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5array5Shape5Shape5Shape14StreamOrDevice", "slice_update::update"], [0, 1, 1, "_CPPv412slice_updateRK5arrayRK5arrayRK5arrayNSt6vectorIiEE14StreamOrDevice", "slice_update::update"], [0, 0, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax"], [0, 0, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::a"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::axes"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::axis"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::precise"], [0, 1, 1, "_CPPv47softmaxRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayb14StreamOrDevice", "softmax::s"], [0, 1, 1, "_CPPv47softmaxRK5arrayib14StreamOrDevice", "softmax::s"], [0, 0, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort"], [0, 0, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::a"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::axis"], [0, 1, 1, "_CPPv44sortRK5array14StreamOrDevice", "sort::s"], [0, 1, 1, "_CPPv44sortRK5arrayi14StreamOrDevice", "sort::s"], [0, 0, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split"], [0, 0, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::a"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::axis"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::indices"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::num_splits"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shape14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayRK5Shapei14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayi14StreamOrDevice", "split::s"], [0, 1, 1, "_CPPv45splitRK5arrayii14StreamOrDevice", "split::s"], [0, 0, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::a"], [0, 1, 1, "_CPPv44sqrtRK5array14StreamOrDevice", "sqrt::s"], [0, 0, 1, "_CPPv46squareRK5array14StreamOrDevice", "square"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::a"], [0, 1, 1, "_CPPv46squareRK5array14StreamOrDevice", "square::s"], [0, 0, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze"], [0, 0, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::a"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::axes"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::axis"], [0, 1, 1, "_CPPv47squeezeRK5array14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayRKNSt6vectorIiEE14StreamOrDevice", "squeeze::s"], [0, 1, 1, "_CPPv47squeezeRK5arrayi14StreamOrDevice", "squeeze::s"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack"], [0, 0, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::arrays"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::axis"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEE14StreamOrDevice", "stack::s"], [0, 1, 1, "_CPPv45stackRKNSt6vectorI5arrayEEi14StreamOrDevice", "stack::s"], [0, 0, 1, "_CPPv4StRK5array14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std"], [0, 0, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::a"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::axes"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::axis"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::ddof"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::keepdims"], [0, 1, 1, "_CPPv4StRK5array14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arraybi14StreamOrDevice", "std::s"], [0, 1, 1, "_CPPv4StRK5arrayibi14StreamOrDevice", "std::s"], [0, 0, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::a"], [0, 1, 1, "_CPPv413stop_gradientRK5array14StreamOrDevice", "stop_gradient::s"], [0, 0, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::a"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::b"], [0, 1, 1, "_CPPv48subtractRK5arrayRK5array14StreamOrDevice", "subtract::s"], [0, 0, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum"], [0, 0, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::a"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::axes"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::axis"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::keepdims"], [0, 1, 1, "_CPPv43sumRK5array14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayRKNSt6vectorIiEEb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayb14StreamOrDevice", "sum::s"], [0, 1, 1, "_CPPv43sumRK5arrayib14StreamOrDevice", "sum::s"], [0, 0, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::a"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis1"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::axis2"], [0, 1, 1, "_CPPv48swapaxesRK5arrayii14StreamOrDevice", "swapaxes::s"], [0, 0, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take"], [0, 0, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::a"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::axis"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::index"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::index"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::indices"], [0, 1, 1, "_CPPv44takeRK5arrayRK5array14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayRK5arrayi14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayi14StreamOrDevice", "take::s"], [0, 1, 1, "_CPPv44takeRK5arrayii14StreamOrDevice", "take::s"], [0, 0, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::a"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::axis"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::indices"], [0, 1, 1, "_CPPv415take_along_axisRK5arrayRK5arrayi14StreamOrDevice", "take_along_axis::s"], [0, 0, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::a"], [0, 1, 1, "_CPPv43tanRK5array14StreamOrDevice", "tan::s"], [0, 0, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::a"], [0, 1, 1, "_CPPv44tanhRK5array14StreamOrDevice", "tanh::s"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot"], [0, 0, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_a"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::axes_b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::axis"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::b"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayKi14StreamOrDevice", "tensordot::s"], [0, 1, 1, "_CPPv49tensordotRK5arrayRK5arrayRKNSt6vectorIiEERKNSt6vectorIiEE14StreamOrDevice", "tensordot::s"], [0, 0, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::arr"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::reps"], [0, 1, 1, "_CPPv44tileRK5arrayNSt6vectorIiEE14StreamOrDevice", "tile::s"], [0, 0, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk"], [0, 0, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::a"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::axis"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::k"], [0, 1, 1, "_CPPv44topkRK5arrayi14StreamOrDevice", "topk::s"], [0, 1, 1, "_CPPv44topkRK5arrayii14StreamOrDevice", "topk::s"], [0, 0, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace"], [0, 0, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::a"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis1"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::axis2"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::dtype"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::offset"], [0, 1, 1, "_CPPv45traceRK5array14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii14StreamOrDevice", "trace::s"], [0, 1, 1, "_CPPv45traceRK5arrayiii5Dtype14StreamOrDevice", "trace::s"], [0, 0, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose"], [0, 0, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::a"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::axes"], [0, 1, 1, "_CPPv49transposeRK5array14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt16initializer_listIiEE14StreamOrDevice", "transpose::s"], [0, 1, 1, "_CPPv49transposeRK5arrayNSt6vectorIiEE14StreamOrDevice", "transpose::s"], [0, 0, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri"], [0, 0, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::k"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::m"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::n"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::s"], [0, 1, 1, "_CPPv43trii5Dtype14StreamOrDevice", "tri::type"], [0, 1, 1, "_CPPv43triiii5Dtype14StreamOrDevice", "tri::type"], [0, 0, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::k"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::s"], [0, 1, 1, "_CPPv44tril5arrayi14StreamOrDevice", "tril::x"], [0, 0, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::k"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::s"], [0, 1, 1, "_CPPv44triu5arrayi14StreamOrDevice", "triu::x"], [0, 0, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::a"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::axis"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::s"], [0, 1, 1, "_CPPv49unflattenRK5arrayi5Shape14StreamOrDevice", "unflatten::shape"], [0, 0, 1, "_CPPv43varRK5array14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var"], [0, 0, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::a"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::axes"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::axis"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::ddof"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::keepdims"], [0, 1, 1, "_CPPv43varRK5array14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayRKNSt6vectorIiEEbi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arraybi14StreamOrDevice", "var::s"], [0, 1, 1, "_CPPv43varRK5arrayibi14StreamOrDevice", "var::s"], [0, 0, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::a"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::dtype"], [0, 1, 1, "_CPPv44viewRK5arrayRK5Dtype14StreamOrDevice", "view::s"], [0, 0, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::condition"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::s"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::x"], [0, 1, 1, "_CPPv45whereRK5arrayRK5arrayRK5array14StreamOrDevice", "where::y"], [0, 0, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros"], [0, 0, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::dtype"], [0, 1, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::s"], [0, 1, 1, "_CPPv45zerosRK5Shape14StreamOrDevice", "zeros::shape"], [0, 1, 1, "_CPPv45zerosRK5Shape5Dtype14StreamOrDevice", "zeros::shape"], [0, 0, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::a"], [0, 1, 1, "_CPPv410zeros_likeRK5array14StreamOrDevice", "zeros_like::s"]], "mlx.core": [[10, 3, 1, "", "Device"], [11, 3, 1, "", "Dtype"], [12, 3, 1, "", "DtypeCategory"], [342, 3, 1, "", "Stream"], [13, 5, 1, "", "abs"], [14, 5, 1, "", "add"], [15, 5, 1, "", "addmm"], [16, 5, 1, "", "all"], [17, 5, 1, "", "allclose"], [18, 5, 1, "", "any"], [19, 5, 1, "", "arange"], [20, 5, 1, "", "arccos"], [21, 5, 1, "", "arccosh"], [22, 5, 1, "", "arcsin"], [23, 5, 1, "", "arcsinh"], [24, 5, 1, "", "arctan"], [25, 5, 1, "", "arctan2"], [26, 5, 1, "", "arctanh"], [27, 5, 1, "", "argmax"], [28, 5, 1, "", "argmin"], [29, 5, 1, "", "argpartition"], [30, 5, 1, "", "argsort"], [31, 3, 1, "", "array"], [86, 5, 1, "", "array_equal"], [87, 5, 1, "", "as_strided"], [88, 5, 1, "", "async_eval"], [89, 5, 1, "", "atleast_1d"], [90, 5, 1, "", "atleast_2d"], [91, 5, 1, "", "atleast_3d"], [92, 5, 1, "", "bitwise_and"], [93, 5, 1, "", "bitwise_invert"], [94, 5, 1, "", "bitwise_or"], [95, 5, 1, "", "bitwise_xor"], [96, 5, 1, "", "block_masked_mm"], [97, 5, 1, "", "broadcast_arrays"], [98, 5, 1, "", "broadcast_to"], [99, 5, 1, "", "ceil"], [100, 5, 1, "", "clear_cache"], [101, 5, 1, "", "clip"], [102, 5, 1, "", "compile"], [103, 5, 1, "", "concatenate"], [104, 5, 1, "", "conj"], [105, 5, 1, "", "conjugate"], [106, 5, 1, "", "contiguous"], [107, 5, 1, "", "conv1d"], [108, 5, 1, "", "conv2d"], [109, 5, 1, "", "conv3d"], [110, 5, 1, "", "conv_general"], [111, 5, 1, "", "conv_transpose1d"], [112, 5, 1, "", "conv_transpose2d"], [113, 5, 1, "", "conv_transpose3d"], [114, 5, 1, "", "convolve"], [115, 5, 1, "", "cos"], [116, 5, 1, "", "cosh"], [117, 5, 1, "", "cummax"], [118, 5, 1, "", "cummin"], [119, 5, 1, "", "cumprod"], [120, 5, 1, "", "cumsum"], [121, 3, 1, "", "custom_function"], [122, 5, 1, "", "default_device"], [123, 5, 1, "", "default_stream"], [124, 5, 1, "", "degrees"], [125, 5, 1, "", "dequantize"], [126, 5, 1, "", "diag"], [127, 5, 1, "", "diagonal"], [128, 5, 1, "", "disable_compile"], [137, 5, 1, "", "divide"], [138, 5, 1, "", "divmod"], [139, 5, 1, "", "einsum"], [140, 5, 1, "", "einsum_path"], [141, 5, 1, "", "enable_compile"], [142, 5, 1, "", "equal"], [143, 5, 1, "", "erf"], [144, 5, 1, "", "erfinv"], [145, 5, 1, "", "eval"], [146, 5, 1, "", "exp"], [147, 5, 1, "", "expand_dims"], [148, 5, 1, "", "expm1"], [149, 5, 1, "", "export_function"], [150, 5, 1, "", "export_to_dot"], [151, 5, 1, "", "exporter"], [152, 5, 1, "", "eye"], [172, 3, 1, "", "finfo"], [173, 5, 1, "", "flatten"], [174, 5, 1, "", "floor"], [175, 5, 1, "", "floor_divide"], [176, 5, 1, "", "full"], [177, 5, 1, "", "gather_mm"], [178, 5, 1, "", "gather_qmm"], [179, 5, 1, "", "get_active_memory"], [180, 5, 1, "", "get_cache_memory"], [181, 5, 1, "", "get_peak_memory"], [182, 5, 1, "", "grad"], [183, 5, 1, "", "greater"], [184, 5, 1, "", "greater_equal"], [185, 5, 1, "", "hadamard_transform"], [186, 5, 1, "", "identity"], [187, 5, 1, "", "imag"], [188, 5, 1, "", "import_function"], [189, 5, 1, "", "inner"], [190, 5, 1, "", "isclose"], [191, 5, 1, "", "isfinite"], [192, 5, 1, "", "isinf"], [193, 5, 1, "", "isnan"], [194, 5, 1, "", "isneginf"], [195, 5, 1, "", "isposinf"], [196, 5, 1, "", "issubdtype"], [197, 5, 1, "", "jvp"], [198, 5, 1, "", "kron"], [199, 5, 1, "", "left_shift"], [200, 5, 1, "", "less"], [201, 5, 1, "", "less_equal"], [219, 5, 1, "", "linspace"], [220, 5, 1, "", "load"], [221, 5, 1, "", "log"], [222, 5, 1, "", "log10"], [223, 5, 1, "", "log1p"], [224, 5, 1, "", "log2"], [225, 5, 1, "", "logaddexp"], [226, 5, 1, "", "logcumsumexp"], [227, 5, 1, "", "logical_and"], [228, 5, 1, "", "logical_not"], [229, 5, 1, "", "logical_or"], [230, 5, 1, "", "logsumexp"], [231, 5, 1, "", "matmul"], [232, 5, 1, "", "max"], [233, 5, 1, "", "maximum"], [234, 5, 1, "", "mean"], [235, 5, 1, "", "meshgrid"], [240, 5, 1, "", "min"], [241, 5, 1, "", "minimum"], [242, 5, 1, "", "moveaxis"], [243, 5, 1, "", "multiply"], [244, 5, 1, "", "nan_to_num"], [245, 5, 1, "", "negative"], [246, 5, 1, "", "new_stream"], [247, 5, 1, "", "not_equal"], [248, 5, 1, "", "ones"], [249, 5, 1, "", "ones_like"], [250, 5, 1, "", "outer"], [251, 5, 1, "", "pad"], [252, 5, 1, "", "partition"], [253, 5, 1, "", "power"], [254, 5, 1, "", "prod"], [255, 5, 1, "", "put_along_axis"], [256, 5, 1, "", "quantize"], [257, 5, 1, "", "quantized_matmul"], [258, 5, 1, "", "radians"], [272, 5, 1, "", "real"], [273, 5, 1, "", "reciprocal"], [274, 5, 1, "", "remainder"], [275, 5, 1, "", "repeat"], [276, 5, 1, "", "reset_peak_memory"], [277, 5, 1, "", "reshape"], [278, 5, 1, "", "right_shift"], [279, 5, 1, "", "roll"], [280, 5, 1, "", "round"], [281, 5, 1, "", "rsqrt"], [282, 5, 1, "", "save"], [283, 5, 1, "", "save_gguf"], [284, 5, 1, "", "save_safetensors"], [285, 5, 1, "", "savez"], [286, 5, 1, "", "savez_compressed"], [287, 5, 1, "", "set_cache_limit"], [288, 5, 1, "", "set_default_device"], [289, 5, 1, "", "set_default_stream"], [290, 5, 1, "", "set_memory_limit"], [291, 5, 1, "", "set_wired_limit"], [292, 5, 1, "", "sigmoid"], [293, 5, 1, "", "sign"], [294, 5, 1, "", "sin"], [295, 5, 1, "", "sinh"], [296, 5, 1, "", "slice"], [297, 5, 1, "", "slice_update"], [298, 5, 1, "", "softmax"], [299, 5, 1, "", "sort"], [300, 5, 1, "", "split"], [301, 5, 1, "", "sqrt"], [302, 5, 1, "", "square"], [303, 5, 1, "", "squeeze"], [304, 5, 1, "", "stack"], [305, 5, 1, "", "std"], [306, 5, 1, "", "stop_gradient"], [307, 5, 1, "", "stream"], [308, 5, 1, "", "subtract"], [309, 5, 1, "", "sum"], [310, 5, 1, "", "swapaxes"], [311, 5, 1, "", "synchronize"], [312, 5, 1, "", "take"], [313, 5, 1, "", "take_along_axis"], [314, 5, 1, "", "tan"], [315, 5, 1, "", "tanh"], [316, 5, 1, "", "tensordot"], [317, 5, 1, "", "tile"], [318, 5, 1, "", "topk"], [319, 5, 1, "", "trace"], [320, 5, 1, "", "transpose"], [321, 5, 1, "", "tri"], [322, 5, 1, "", "tril"], [323, 5, 1, "", "triu"], [324, 5, 1, "", "unflatten"], [325, 5, 1, "", "value_and_grad"], [326, 5, 1, "", "var"], [327, 5, 1, "", "view"], [328, 5, 1, "", "vjp"], [329, 5, 1, "", "vmap"], [330, 5, 1, "", "where"], [331, 5, 1, "", "zeros"], [332, 5, 1, "", "zeros_like"]], "mlx.core.Device": [[10, 4, 1, "", "__init__"]], "mlx.core.Dtype": [[11, 4, 1, "", "__init__"]], "mlx.core.DtypeCategory": [[12, 4, 1, "", "__init__"]], "mlx.core.Stream": [[342, 4, 1, "", "__init__"]], "mlx.core.array": [[32, 6, 1, "", "T"], [31, 4, 1, "", "__init__"], [33, 4, 1, "", "abs"], [34, 4, 1, "", "all"], [35, 4, 1, "", "any"], [36, 4, 1, "", "argmax"], [37, 4, 1, "", "argmin"], [38, 4, 1, "", "astype"], [39, 6, 1, "", "at"], [40, 4, 1, "", "conj"], [41, 4, 1, "", "cos"], [42, 4, 1, "", "cummax"], [43, 4, 1, "", "cummin"], [44, 4, 1, "", "cumprod"], [45, 4, 1, "", "cumsum"], [46, 4, 1, "", "diag"], [47, 4, 1, "", "diagonal"], [48, 6, 1, "", "dtype"], [49, 4, 1, "", "exp"], [50, 4, 1, "", "flatten"], [51, 6, 1, "", "imag"], [52, 4, 1, "", "item"], [53, 6, 1, "", "itemsize"], [54, 4, 1, "", "log"], [55, 4, 1, "", "log10"], [56, 4, 1, "", "log1p"], [57, 4, 1, "", "log2"], [58, 4, 1, "", "logcumsumexp"], [59, 4, 1, "", "logsumexp"], [60, 4, 1, "", "max"], [61, 4, 1, "", "mean"], [62, 4, 1, "", "min"], [63, 4, 1, "", "moveaxis"], [64, 6, 1, "", "nbytes"], [65, 6, 1, "", "ndim"], [66, 4, 1, "", "prod"], [67, 6, 1, "", "real"], [68, 4, 1, "", "reciprocal"], [69, 4, 1, "", "reshape"], [70, 4, 1, "", "round"], [71, 4, 1, "", "rsqrt"], [72, 6, 1, "", "shape"], [73, 4, 1, "", "sin"], [74, 6, 1, "", "size"], [75, 4, 1, "", "split"], [76, 4, 1, "", "sqrt"], [77, 4, 1, "", "square"], [78, 4, 1, "", "squeeze"], [79, 4, 1, "", "std"], [80, 4, 1, "", "sum"], [81, 4, 1, "", "swapaxes"], [82, 4, 1, "", "tolist"], [83, 4, 1, "", "transpose"], [84, 4, 1, "", "var"], [85, 4, 1, "", "view"]], "mlx.core.custom_function": [[121, 4, 1, "", "__init__"]], "mlx.core.distributed": [[129, 3, 1, "", "Group"], [130, 5, 1, "", "all_gather"], [131, 5, 1, "", "all_sum"], [132, 5, 1, "", "init"], [133, 5, 1, "", "is_available"], [134, 5, 1, "", "recv"], [135, 5, 1, "", "recv_like"], [136, 5, 1, "", "send"]], "mlx.core.distributed.Group": [[129, 4, 1, "", "__init__"]], "mlx.core.fast": [[153, 5, 1, "", "layer_norm"], [154, 5, 1, "", "metal_kernel"], [155, 5, 1, "", "rms_norm"], [156, 5, 1, "", "rope"], [157, 5, 1, "", "scaled_dot_product_attention"]], "mlx.core.fft": [[158, 5, 1, "", "fft"], [159, 5, 1, "", "fft2"], [160, 5, 1, "", "fftn"], [161, 5, 1, "", "fftshift"], [162, 5, 1, "", "ifft"], [163, 5, 1, "", "ifft2"], [164, 5, 1, "", "ifftn"], [165, 5, 1, "", "ifftshift"], [166, 5, 1, "", "irfft"], [167, 5, 1, "", "irfft2"], [168, 5, 1, "", "irfftn"], [169, 5, 1, "", "rfft"], [170, 5, 1, "", "rfft2"], [171, 5, 1, "", "rfftn"]], "mlx.core.finfo": [[172, 4, 1, "", "__init__"]], "mlx.core.linalg": [[202, 5, 1, "", "cholesky"], [203, 5, 1, "", "cholesky_inv"], [204, 5, 1, "", "cross"], [205, 5, 1, "", "eig"], [206, 5, 1, "", "eigh"], [207, 5, 1, "", "eigvals"], [208, 5, 1, "", "eigvalsh"], [209, 5, 1, "", "inv"], [210, 5, 1, "", "lu"], [211, 5, 1, "", "lu_factor"], [212, 5, 1, "", "norm"], [213, 5, 1, "", "pinv"], [214, 5, 1, "", "qr"], [215, 5, 1, "", "solve"], [216, 5, 1, "", "solve_triangular"], [217, 5, 1, "", "svd"], [218, 5, 1, "", "tri_inv"]], "mlx.core.metal": [[236, 5, 1, "", "device_info"], [237, 5, 1, "", "is_available"], [238, 5, 1, "", "start_capture"], [239, 5, 1, "", "stop_capture"]], "mlx.core.random": [[259, 5, 1, "", "bernoulli"], [260, 5, 1, "", "categorical"], [261, 5, 1, "", "gumbel"], [262, 5, 1, "", "key"], [263, 5, 1, "", "laplace"], [264, 5, 1, "", "multivariate_normal"], [265, 5, 1, "", "normal"], [266, 5, 1, "", "permutation"], [267, 5, 1, "", "randint"], [268, 5, 1, "", "seed"], [269, 5, 1, "", "split"], [270, 5, 1, "", "truncated_normal"], [271, 5, 1, "", "uniform"]], "mlx.nn": [[354, 3, 1, "", "ALiBi"], [355, 3, 1, "", "AvgPool1d"], [356, 3, 1, "", "AvgPool2d"], [357, 3, 1, "", "AvgPool3d"], [358, 3, 1, "", "BatchNorm"], [359, 3, 1, "", "CELU"], [360, 3, 1, "", "Conv1d"], [361, 3, 1, "", "Conv2d"], [362, 3, 1, "", "Conv3d"], [363, 3, 1, "", "ConvTranspose1d"], [364, 3, 1, "", "ConvTranspose2d"], [365, 3, 1, "", "ConvTranspose3d"], [366, 3, 1, "", "Dropout"], [367, 3, 1, "", "Dropout2d"], [368, 3, 1, "", "Dropout3d"], [369, 3, 1, "", "ELU"], [370, 3, 1, "", "Embedding"], [371, 3, 1, "", "GELU"], [372, 3, 1, "", "GLU"], [373, 3, 1, "", "GRU"], [374, 3, 1, "", "GroupNorm"], [375, 3, 1, "", "HardShrink"], [376, 3, 1, "", "HardTanh"], [377, 3, 1, "", "Hardswish"], [378, 3, 1, "", "InstanceNorm"], [379, 3, 1, "", "LSTM"], [380, 3, 1, "", "LayerNorm"], [381, 3, 1, "", "LeakyReLU"], [382, 3, 1, "", "Linear"], [383, 3, 1, "", "LogSigmoid"], [384, 3, 1, "", "LogSoftmax"], [385, 3, 1, "", "MaxPool1d"], [386, 3, 1, "", "MaxPool2d"], [387, 3, 1, "", "MaxPool3d"], [388, 3, 1, "", "Mish"], [483, 3, 1, "", "Module"], [409, 3, 1, "", "MultiHeadAttention"], [410, 3, 1, "", "PReLU"], [411, 3, 1, "", "QuantizedEmbedding"], [412, 3, 1, "", "QuantizedLinear"], [413, 3, 1, "", "RMSNorm"], [414, 3, 1, "", "RNN"], [415, 3, 1, "", "ReLU"], [416, 3, 1, "", "ReLU6"], [417, 3, 1, "", "RoPE"], [418, 3, 1, "", "SELU"], [419, 3, 1, "", "Sequential"], [420, 3, 1, "", "SiLU"], [421, 3, 1, "", "Sigmoid"], [422, 3, 1, "", "SinusoidalPositionalEncoding"], [423, 3, 1, "", "Softmax"], [424, 3, 1, "", "Softmin"], [425, 3, 1, "", "Softplus"], [426, 3, 1, "", "Softshrink"], [427, 3, 1, "", "Softsign"], [428, 3, 1, "", "Step"], [429, 3, 1, "", "Tanh"], [430, 3, 1, "", "Transformer"], [431, 3, 1, "", "Upsample"], [333, 5, 1, "", "average_gradients"], [440, 3, 1, "", "celu"], [441, 3, 1, "", "elu"], [442, 3, 1, "", "gelu"], [443, 3, 1, "", "gelu_approx"], [444, 3, 1, "", "gelu_fast_approx"], [445, 3, 1, "", "glu"], [446, 3, 1, "", "hard_shrink"], [447, 3, 1, "", "hard_tanh"], [448, 3, 1, "", "hardswish"], [449, 3, 1, "", "leaky_relu"], [450, 3, 1, "", "log_sigmoid"], [451, 3, 1, "", "log_softmax"], [466, 3, 1, "", "mish"], [467, 3, 1, "", "prelu"], [334, 5, 1, "", "quantize"], [468, 3, 1, "", "relu"], [469, 3, 1, "", "relu6"], [470, 3, 1, "", "selu"], [471, 3, 1, "", "sigmoid"], [472, 3, 1, "", "silu"], [473, 3, 1, "", "softmax"], [474, 3, 1, "", "softmin"], [475, 3, 1, "", "softplus"], [476, 3, 1, "", "softshrink"], [477, 3, 1, "", "step"], [478, 3, 1, "", "tanh"], [335, 5, 1, "", "value_and_grad"]], "mlx.nn.Module": [[389, 4, 1, "", "apply"], [390, 4, 1, "", "apply_to_modules"], [391, 4, 1, "", "children"], [392, 4, 1, "", "eval"], [393, 4, 1, "", "filter_and_map"], [394, 4, 1, "", "freeze"], [395, 4, 1, "", "leaf_modules"], [396, 4, 1, "", "load_weights"], [397, 4, 1, "", "modules"], [398, 4, 1, "", "named_modules"], [399, 4, 1, "", "parameters"], [400, 4, 1, "", "save_weights"], [401, 4, 1, "", "set_dtype"], [402, 6, 1, "", "state"], [403, 4, 1, "", "train"], [404, 4, 1, "", "trainable_parameters"], [405, 6, 1, "", "training"], [406, 4, 1, "", "unfreeze"], [407, 4, 1, "", "update"], [408, 4, 1, "", "update_modules"]], "mlx.nn.init": [[432, 5, 1, "", "constant"], [433, 5, 1, "", "glorot_normal"], [434, 5, 1, "", "glorot_uniform"], [435, 5, 1, "", "he_normal"], [436, 5, 1, "", "he_uniform"], [437, 5, 1, "", "identity"], [438, 5, 1, "", "normal"], [439, 5, 1, "", "uniform"]], "mlx.nn.losses": [[452, 3, 1, "", "binary_cross_entropy"], [453, 3, 1, "", "cosine_similarity_loss"], [454, 3, 1, "", "cross_entropy"], [455, 3, 1, "", "gaussian_nll_loss"], [456, 3, 1, "", "hinge_loss"], [457, 3, 1, "", "huber_loss"], [458, 3, 1, "", "kl_div_loss"], [459, 3, 1, "", "l1_loss"], [460, 3, 1, "", "log_cosh_loss"], [461, 3, 1, "", "margin_ranking_loss"], [462, 3, 1, "", "mse_loss"], [463, 3, 1, "", "nll_loss"], [464, 3, 1, "", "smooth_l1_loss"], [465, 3, 1, "", "triplet_loss"]], "mlx.optimizers": [[486, 3, 1, "", "AdaDelta"], [487, 3, 1, "", "Adafactor"], [488, 3, 1, "", "Adagrad"], [489, 3, 1, "", "Adam"], [490, 3, 1, "", "AdamW"], [491, 3, 1, "", "Adamax"], [492, 3, 1, "", "Lion"], [493, 3, 1, "", "MultiOptimizer"], [506, 3, 1, "", "Optimizer"], [498, 3, 1, "", "RMSprop"], [499, 3, 1, "", "SGD"], [336, 5, 1, "", "clip_grad_norm"], [500, 5, 1, "", "cosine_decay"], [501, 5, 1, "", "exponential_decay"], [502, 5, 1, "", "join_schedules"], [503, 5, 1, "", "linear_schedule"], [504, 5, 1, "", "step_decay"]], "mlx.optimizers.Optimizer": [[494, 4, 1, "", "apply_gradients"], [495, 4, 1, "", "init"], [496, 6, 1, "", "state"], [497, 4, 1, "", "update"]], "mlx.utils": [[337, 5, 1, "", "tree_flatten"], [338, 5, 1, "", "tree_map"], [339, 5, 1, "", "tree_map_with_path"], [340, 5, 1, "", "tree_reduce"], [341, 5, 1, "", "tree_unflatten"]]}, "objnames": {"0": ["cpp", "function", "C++ function"], "1": ["cpp", "functionParam", "C++ function parameter"], "2": ["cpp", "templateParam", "C++ template parameter"], "3": ["py", "class", "Python class"], "4": ["py", "method", "Python method"], "5": ["py", "function", "Python function"], "6": ["py", "property", "Python property"]}, "objtypes": {"0": "cpp:function", "1": "cpp:functionParam", "2": "cpp:templateParam", "3": "py:class", "4": "py:method", "5": "py:function", "6": "py:property"}, "terms": {"": [0, 1, 2, 5, 6, 7, 48, 53, 65, 102, 123, 125, 159, 160, 163, 164, 167, 168, 170, 171, 182, 203, 212, 217, 220, 234, 250, 256, 260, 280, 283, 284, 305, 307, 325, 326, 327, 329, 335, 353, 356, 357, 373, 379, 386, 387, 393, 394, 396, 400, 401, 402, 406, 407, 408, 414, 485, 495, 496, 508, 511, 513, 514, 518, 519, 520, 521], "0": [0, 1, 2, 4, 5, 6, 7, 9, 10, 15, 19, 39, 46, 47, 50, 70, 75, 79, 84, 87, 88, 100, 103, 107, 108, 109, 110, 111, 112, 113, 121, 126, 127, 152, 154, 157, 173, 177, 182, 188, 198, 205, 206, 209, 210, 212, 214, 218, 244, 251, 259, 263, 265, 266, 271, 275, 280, 287, 291, 296, 297, 300, 304, 305, 319, 321, 322, 323, 324, 325, 326, 329, 333, 336, 337, 339, 340, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 374, 375, 378, 380, 381, 385, 386, 387, 410, 415, 417, 422, 426, 428, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 446, 447, 448, 449, 452, 454, 456, 457, 461, 464, 465, 467, 468, 469, 470, 476, 477, 480, 483, 486, 487, 489, 490, 491, 492, 495, 498, 499, 500, 501, 502, 503, 504, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "00005": 5, "0001": 422, "0005": 443, "001": 487, "00364": 5, "01": [5, 381, 449, 490], "0137595": 435, "015": 444, "0184009": 436, "02264": 434, "024": 514, "02765": 435, "0300242": 436, "044715": [371, 443], "0485873": 454, "05": [17, 190, 358, 374, 378, 380, 413], "0507": 470, "05202": 6, "06": [455, 465, 486], "0638": 461, "06450": 380, "0645099": 438, "06561": 501, "06675": 492, "07467": 413, "08": [17, 190, 453, 488, 489, 490, 491, 498], "08022": 378, "081": 504, "08415": 444, "08494": 374, "08619": 436, "08681": [388, 466], "09864": 6, "0999938": 502, "0999961": 500, "0f": 0, "0j": [205, 207], "1": [0, 1, 2, 3, 4, 6, 7, 9, 15, 19, 29, 30, 39, 47, 50, 88, 107, 108, 109, 110, 111, 112, 113, 121, 126, 127, 148, 149, 150, 151, 154, 157, 158, 159, 162, 163, 166, 167, 168, 169, 170, 171, 173, 185, 189, 196, 198, 203, 204, 205, 206, 207, 208, 210, 212, 214, 231, 235, 250, 252, 256, 260, 263, 264, 265, 271, 290, 292, 296, 297, 299, 312, 318, 319, 324, 325, 336, 339, 340, 344, 353, 355, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 378, 379, 380, 382, 385, 410, 413, 414, 417, 421, 422, 428, 431, 433, 434, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 447, 450, 451, 452, 453, 454, 455, 456, 457, 458, 460, 461, 463, 464, 465, 470, 471, 473, 474, 475, 477, 480, 483, 485, 486, 487, 488, 489, 490, 491, 492, 495, 498, 499, 500, 501, 502, 503, 504, 511, 512, 513, 514, 515, 516, 518, 519, 520, 521], "10": [0, 3, 6, 7, 198, 222, 280, 285, 338, 353, 396, 480, 502, 504, 511, 512, 515], "100": [2, 5, 6, 452, 503, 511, 514, 517, 521], "1000": [2, 500, 511], "10000": 417, "101": 503, "1024": [1, 6], "105361": 452, "10_000": 5, "10x": 492, "11": 212, "12": [6, 9, 185, 198, 502], "1212": 486, "123": [512, 516], "12451": 434, "128": [285, 353], "13": 9, "14": [9, 198], "15": [1, 9, 198, 212, 291, 340, 511], "150594": 433, "15268": 435, "16": [1, 154, 344, 355, 357, 378, 385, 387, 389, 483], "1606": 444, "1607": [378, 380], "16384": 185, "16506": 436, "168": 512, "17": [4, 9], "177208": 435, "18": 198, "1803": 374, "1908": [388, 466], "1910": 413, "191107": 433, "192": 512, "1985": 212, "1_000": 5, "1_all": 9, "1d": [0, 107, 111, 114, 283, 313], "1e": [0, 5, 7, 17, 190, 358, 374, 378, 380, 381, 413, 453, 455, 465, 485, 486, 487, 488, 489, 490, 491, 495, 498, 500, 501, 502, 503, 504], "1e3": 511, "1st": 256, "2": [0, 1, 2, 4, 5, 6, 7, 39, 108, 112, 121, 126, 127, 143, 149, 150, 151, 159, 163, 166, 167, 168, 169, 170, 171, 173, 185, 196, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 212, 213, 214, 217, 218, 224, 231, 256, 264, 265, 269, 296, 297, 316, 319, 321, 322, 323, 324, 336, 340, 344, 353, 355, 356, 357, 361, 364, 371, 381, 385, 386, 387, 413, 422, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 454, 455, 457, 464, 465, 480, 483, 485, 486, 488, 489, 490, 495, 498, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521], "20": [185, 198, 212], "200": [6, 502, 514], "2002": 6, "2011": 488, "2012": [486, 498], "2015": [367, 489, 491], "2019": [6, 490], "2020": 6, "2021": 6, "20397": 452, "20_000": 6, "21": [6, 198, 504], "2104": 6, "223144": 452, "223404": 434, "225": 212, "225763": 461, "2302": 492, "23607": [212, 214], "24": 198, "24264": 212, "247": 6, "25": [9, 410, 431], "25211": 435, "256": [1, 7, 154], "256995": 461, "27": 4, "28": [185, 198], "2d": [0, 108, 112, 127, 256, 358, 367], "2nd": 256, "2x": 518, "3": [0, 1, 2, 4, 6, 9, 88, 109, 113, 121, 149, 151, 173, 196, 198, 204, 205, 206, 207, 208, 212, 214, 296, 297, 324, 336, 340, 357, 362, 365, 371, 387, 431, 434, 436, 443, 448, 487, 492, 508, 511, 512, 513, 515, 518, 519], "30": 487, "3118": 518, "32": [1, 6, 7, 96, 256, 257, 344, 356, 357, 386, 387, 413, 511], "32mib": 333, "330": 6, "33333": 431, "33554432": 333, "348587": 454, "363207": 433, "36788": 511, "379159": 434, "380709": 438, "39": 6, "3d": [0, 2, 109, 113, 358, 368, 431], "3f": [2, 7, 511], "3x": 2, "4": [0, 1, 2, 6, 125, 154, 157, 173, 178, 198, 212, 256, 257, 285, 296, 324, 334, 340, 344, 355, 356, 357, 358, 378, 385, 386, 387, 411, 412, 430, 431, 433, 434, 435, 452, 511, 512, 513, 515, 519, 521], "4096": [2, 511, 514, 521], "40x": 1, "41421": 212, "417497": 439, "42": 341, "437": 6, "44": 6, "447214": 214, "458835": 435, "475": 6, "48095": 433, "4d": [1, 431], "4m": 1, "5": [0, 1, 2, 5, 6, 9, 198, 212, 259, 290, 296, 340, 355, 358, 366, 367, 368, 371, 375, 378, 385, 426, 431, 432, 435, 436, 443, 446, 464, 476, 480, 485, 498, 500, 501, 511, 514, 515], "50": [0, 219], "500": [6, 521], "510826": 452, "512": [3, 6, 430, 521], "534422": 438, "539245": 452, "53947": 433, "55": 1, "559": 2, "5701": 486, "573409": 461, "57771": 214, "579": 6, "5f": 5, "6": [1, 2, 6, 121, 198, 212, 285, 296, 416, 430, 434, 443, 444, 448, 455, 465, 469, 498, 511, 515, 519], "61278": 433, "617261": 439, "628": 6, "633": 6, "639": 514, "64": [0, 1, 96, 125, 178, 256, 257, 334, 344, 411, 412], "64331": 436, "666329": 436, "66667": 431, "67326": 470, "676": 1, "690": 6, "6967": 435, "7": [2, 6, 9, 198, 212, 256, 515], "702": [371, 444], "707107": [205, 206], "71828": 511, "74166": 212, "74597": 212, "75": 431, "75596": 461, "75787": 435, "765166": 461, "773433": 461, "774": 2, "776856": 434, "793615": 436, "79854": 436, "7b": 6, "7m": 1, "8": [0, 1, 2, 6, 9, 212, 256, 344, 356, 357, 378, 386, 387, 430, 453, 486, 487, 488, 489, 490, 491, 498, 511, 515, 519, 521], "8192": [6, 185], "84804": 212, "863726": 439, "883935": 439, "890597": 434, "894427": 214, "89613": 433, "8gb": 6, "8x": 1, "9": [4, 9, 212, 454, 486, 489, 490, 491, 492, 495, 501, 504, 518], "90041": 434, "912766": 434, "916291": 452, "95": 7, "982273": 438, "99": [492, 498], "995016": 433, "999": [489, 490, 491], "A": [0, 2, 6, 8, 9, 10, 72, 86, 102, 149, 150, 153, 154, 155, 157, 182, 196, 197, 203, 205, 206, 207, 208, 210, 212, 214, 217, 220, 230, 231, 232, 236, 240, 256, 259, 260, 261, 263, 264, 265, 266, 267, 270, 271, 300, 304, 307, 325, 328, 329, 334, 335, 336, 337, 338, 339, 340, 341, 342, 353, 358, 367, 373, 374, 378, 380, 393, 397, 398, 401, 407, 408, 413, 419, 422, 430, 433, 434, 436, 444, 465, 466, 483, 485, 489, 491, 493, 494, 495, 497, 502, 511, 512, 513, 514, 516, 517, 518], "AS": 177, "And": [4, 6, 431], "As": [7, 39, 312, 353, 512], "At": [101, 324, 512], "But": [513, 521], "By": [6, 334, 401, 452, 512, 514, 518], "For": [0, 1, 2, 4, 6, 9, 39, 121, 157, 177, 196, 212, 256, 341, 353, 358, 367, 371, 389, 394, 403, 406, 412, 417, 422, 431, 433, 434, 435, 436, 452, 480, 485, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521], "If": [0, 1, 2, 4, 6, 9, 16, 17, 18, 19, 27, 28, 29, 30, 82, 86, 87, 88, 101, 103, 114, 117, 118, 119, 120, 126, 127, 130, 131, 132, 134, 135, 136, 145, 153, 155, 156, 157, 161, 165, 169, 170, 171, 175, 176, 177, 182, 190, 202, 203, 204, 212, 217, 220, 226, 230, 231, 232, 234, 235, 240, 244, 248, 251, 252, 254, 255, 260, 264, 265, 266, 275, 279, 287, 290, 298, 299, 300, 305, 309, 311, 312, 313, 316, 318, 319, 325, 326, 329, 331, 333, 334, 338, 340, 358, 360, 361, 362, 363, 364, 365, 374, 380, 382, 394, 396, 406, 407, 408, 412, 414, 417, 419, 422, 431, 452, 454, 465, 487, 489, 490, 511, 512, 513, 514, 516, 517, 520, 521, 522], "In": [0, 1, 2, 6, 7, 39, 157, 231, 256, 338, 353, 367, 374, 483, 486, 488, 489, 491, 492, 494, 510, 511, 512, 513, 514, 516, 517, 520, 521], "It": [2, 6, 9, 135, 182, 289, 325, 336, 340, 353, 408, 412, 494, 506, 512, 516, 518, 520], "Its": [353, 513], "No": [2, 6, 206, 208, 512], "Not": [102, 247, 511], "ON": [3, 4, 9], "Of": 514, "On": [1, 511, 514, 517], "One": [158, 162, 169, 251, 281, 511, 513, 514, 516], "THE": 9, "That": [6, 265], "The": [0, 1, 2, 3, 4, 6, 7, 8, 9, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 48, 51, 53, 64, 65, 67, 72, 82, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 197, 198, 199, 200, 201, 204, 205, 206, 207, 208, 210, 211, 212, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 240, 241, 242, 243, 245, 247, 248, 249, 250, 251, 252, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 283, 284, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 344, 346, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 370, 372, 373, 374, 378, 379, 380, 382, 385, 386, 387, 389, 390, 394, 396, 400, 401, 402, 403, 406, 407, 408, 409, 411, 412, 413, 414, 417, 419, 422, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 445, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 477, 480, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 496, 498, 499, 500, 503, 506, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "Then": [5, 9], "There": [1, 353, 431, 511], "These": [1, 2, 102, 255, 313, 454, 521], "To": [0, 1, 2, 3, 5, 6, 7, 9, 210, 287, 353, 480, 485, 511, 512, 513, 514, 519], "With": 513, "_": [1, 3, 5, 6, 339, 353, 500, 501, 502, 503, 504, 508, 511, 517, 521], "__call__": [1, 6, 7, 353, 483, 513], "__init__": [2, 6, 7, 10, 11, 12, 31, 121, 129, 172, 342, 353, 483], "__main__": [2, 6], "__name__": [2, 6], "_a": 2, "_ext": 2, "_f": 212, "_in": [433, 434], "_out": [433, 434], "_p": 465, "_val": 447, "a1": 177, "a2": 177, "a_": 212, "a_max": [0, 101], "a_min": [0, 101], "a_ndim": 1, "a_shap": 1, "a_strid": 1, "a_view": 518, "ab": [0, 17, 190, 212, 325, 374, 378, 380, 388, 413, 444, 466, 511, 513], "abil": 512, "abl": [2, 4, 256, 516], "abort": 121, "about": [1, 2, 6, 7, 140, 236, 517, 521], "abov": [1, 2, 6, 256, 322, 353, 431, 512, 513, 514, 515, 516, 517, 521], "absolut": [0, 13, 17, 190, 443, 444, 464, 512], "acc": 340, "acceler": [4, 358], "accept": [512, 516], "access": [0, 6, 52, 353, 483, 495, 512, 517, 521], "accord": [0, 261, 330, 334, 409, 433, 434, 435, 436], "accordingli": 2, "accumul": [340, 413], "accuraci": 7, "accustom": 6, "achiev": [353, 512], "across": [1, 2, 9, 333, 374, 512], "act": [2, 460], "action": 353, "activ": [2, 9, 179, 367, 428, 430, 446, 466, 476, 477, 479, 511], "actual": [6, 19, 396, 483, 517], "ad": [0, 1, 2, 5, 9, 153, 339, 363, 364, 365, 378, 483, 486, 487, 488, 489, 490, 491, 498, 512, 517, 520], "adadelta": 485, "adafactor": 485, "adagrad": 485, "adam": [485, 491, 492, 502, 503], "adamax": 485, "adamw": [485, 492], "adapt": [486, 487, 488, 512], "add": [0, 1, 2, 3, 4, 6, 15, 39, 147, 225, 251, 256, 360, 361, 362, 363, 364, 365, 513, 514, 516, 521], "add_argu": 6, "add_depend": 2, "add_execut": 4, "add_fun": 513, "add_librari": 2, "addit": [0, 2, 4, 6, 9, 14, 15, 149, 153, 155, 157, 220, 358, 363, 364, 365, 374, 380, 409, 413, 483, 514], "addmm": 0, "address": 2, "adjac": 367, "advanc": [6, 511], "advantag": 521, "advis": 518, "affin": [358, 374, 378, 380, 382, 412], "after": [2, 6, 7, 29, 100, 173, 175, 178, 252, 256, 358, 374, 380, 389, 390, 394, 396, 403, 406, 407, 408, 409, 430, 464, 511, 512, 521], "after_1": 251, "after_2": 251, "after_i": 251, "after_n": 251, "afternoon": 6, "again": [6, 9, 353, 511], "against": [0, 4, 97], "aggreg": [409, 512], "ago": 6, "ai": 121, "aim": 512, "ainv": [209, 218], "albeit": 521, "algebra": 8, "algorithm": [431, 492], "alia": [104, 105, 371], "alibi": 353, "align": [203, 256, 373, 379], "align_corn": 431, "all": [0, 1, 2, 3, 7, 9, 17, 29, 39, 89, 90, 91, 102, 108, 109, 110, 112, 113, 121, 130, 131, 132, 150, 152, 160, 161, 164, 165, 168, 171, 177, 178, 205, 207, 217, 231, 251, 252, 279, 303, 333, 334, 353, 389, 390, 394, 397, 398, 399, 404, 406, 409, 422, 430, 431, 480, 483, 506, 508, 511, 515, 516, 517, 519, 522], "all_avg": 512, "all_reduce_grad": 512, "all_reduce_s": 333, "all_sum": 512, "allclos": [0, 1, 154], "alloc": [2, 180, 287, 290, 483], "allow": [0, 1, 2, 149, 151, 177, 178, 196, 336, 353, 408, 483, 506, 512, 515, 516, 519], "allow_col_major": [0, 106], "almost": [6, 512], "alon": [2, 518], "along": [0, 2, 27, 28, 102, 103, 117, 118, 119, 120, 130, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 177, 178, 185, 204, 212, 226, 255, 266, 275, 279, 298, 300, 304, 312, 313, 316, 317, 318, 319, 327, 353, 372, 414, 445], "alpha": [0, 2, 15, 256, 359, 369, 440, 441, 465, 467, 470, 490, 498], "alpha_": 2, "alreadi": [2, 3, 6, 512], "also": [0, 1, 2, 4, 6, 7, 8, 9, 12, 14, 92, 94, 95, 128, 137, 138, 142, 160, 164, 168, 171, 183, 184, 199, 200, 201, 225, 233, 241, 243, 247, 253, 256, 274, 278, 308, 334, 335, 346, 353, 393, 407, 409, 411, 412, 420, 442, 470, 472, 479, 485, 511, 512, 513, 514, 515, 516, 517, 518, 519, 522], "altern": 508, "although": 512, "alwai": [1, 87, 179, 188, 205, 207, 337, 512, 513, 514], "am": 6, "among": 2, "amount": [6, 181, 290, 355, 385, 513], "amus": 6, "an": [0, 1, 2, 3, 4, 6, 7, 9, 11, 16, 18, 31, 88, 89, 90, 91, 98, 106, 107, 108, 109, 110, 111, 112, 113, 129, 134, 135, 136, 145, 149, 151, 152, 153, 157, 173, 176, 186, 188, 191, 202, 212, 220, 242, 248, 249, 251, 254, 255, 256, 257, 266, 275, 277, 279, 280, 290, 291, 300, 303, 310, 312, 313, 316, 317, 321, 324, 329, 331, 332, 337, 338, 339, 340, 344, 353, 366, 371, 374, 379, 380, 382, 389, 409, 410, 412, 414, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 443, 467, 480, 485, 486, 497, 501, 506, 508, 510, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522], "anaconda": 512, "anchor": 465, "angl": [124, 258, 381], "angular": [156, 417], "ani": [0, 1, 2, 6, 8, 9, 19, 102, 121, 132, 333, 337, 338, 339, 340, 341, 353, 371, 389, 390, 393, 402, 412, 430, 431, 480, 503, 510, 511, 512, 514, 517, 519, 520, 521], "anonym": 511, "anoth": [0, 97, 101, 196, 231, 308, 330, 344, 353, 389, 511, 513, 514, 515, 521], "anwywher": 9, "anyhow": 6, "anymor": 6, "anyth": [6, 325, 512, 517], "anytim": 517, "api": [1, 2, 88, 149, 151, 188, 371, 512, 513, 514], "aplu": 213, "app": 9, "append": [6, 231, 511, 517], "appl": [2, 6, 8, 9, 521], "appli": [0, 39, 156, 157, 177, 217, 338, 339, 340, 353, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 367, 368, 369, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 383, 384, 385, 386, 387, 388, 390, 403, 410, 412, 413, 414, 415, 416, 418, 420, 421, 423, 424, 425, 426, 427, 428, 429, 431, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 489, 490, 494, 497, 503, 506, 511, 512], "applic": [3, 9], "apply_fn": 390, "apply_gradi": 485, "apply_to_modul": [353, 394], "approach": [460, 514], "appropri": 511, "approx": 371, "approxim": [17, 371, 442, 443, 444], "apt": 9, "ar": [0, 1, 2, 5, 6, 7, 8, 9, 17, 19, 86, 88, 96, 97, 98, 101, 102, 110, 114, 121, 127, 132, 134, 135, 145, 152, 154, 157, 159, 160, 163, 164, 167, 168, 170, 171, 173, 177, 178, 182, 190, 191, 192, 193, 194, 195, 196, 197, 205, 206, 207, 208, 210, 212, 214, 220, 231, 250, 251, 252, 256, 257, 259, 260, 261, 265, 266, 267, 270, 271, 279, 285, 286, 303, 304, 312, 325, 328, 329, 334, 337, 338, 344, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 374, 378, 380, 382, 396, 409, 412, 431, 452, 454, 455, 479, 483, 485, 492, 495, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521], "arang": [0, 1, 212, 266, 344, 431, 515, 518], "arbitrari": [337, 483, 512], "arbitrarili": [1, 102, 353, 510, 514, 519], "arc": 0, "arcco": 0, "arccosh": 0, "architectur": [6, 9, 236, 353, 408, 521], "archiv": 520, "arcsin": 0, "arcsinh": 0, "arctan": 0, "arctan2": 0, "arctanh": 0, "arg": [2, 6, 11, 19, 88, 129, 145, 149, 150, 151, 172, 188, 285, 286, 342, 516], "arg1": 196, "arg2": 196, "argmax": [0, 7], "argmin": 0, "argnam": [182, 325], "argnum": [2, 121, 182, 325, 514], "argpars": 6, "argpartit": 0, "argsort": 0, "argument": [1, 32, 69, 83, 88, 102, 145, 182, 325, 338, 339, 340, 353, 431, 508, 512, 513, 514, 516, 520, 521, 522], "argumentpars": 6, "ari": [89, 90, 91], "aris": 518, "arm": 9, "arm64": 9, "around": 6, "arr": [0, 282, 515], "arr_0": 520, "arrai": [0, 1, 2, 4, 6, 7, 8, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 130, 131, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 344, 353, 358, 379, 389, 396, 399, 404, 410, 431, 432, 433, 434, 435, 436, 437, 438, 439, 445, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 477, 480, 483, 486, 487, 488, 489, 490, 491, 492, 493, 498, 499, 500, 501, 502, 503, 504, 511, 512, 513, 514, 517, 518, 519, 521], "array_equ": [0, 17, 190], "arrayfir": 8, "arxiv": [6, 374, 378, 380, 388, 413, 444, 466, 486, 492], "as_strid": 0, "ascend": [206, 208], "ask": [6, 512, 516], "assert": [1, 2, 154], "assign": [0, 2, 39, 483, 512], "associ": [2, 285, 286, 517], "assum": [0, 6, 96, 204, 206, 208, 214, 338, 353, 374, 512], "ast": 1, "astyp": [0, 1, 2, 6, 154, 389, 518], "asynchron": 88, "atleast": 0, "atleast_1d": 0, "atleast_2d": 0, "atleast_3d": 0, "atol": [0, 17, 190], "atom": [1, 154], "atomic_fetch_add_explicit": 1, "atomic_output": [1, 154], "attach": 2, "attempt": [102, 512], "attend": 409, "attent": [157, 394, 409, 422, 430], "attention_norm": 6, "attribut": [1, 10, 11, 12, 31, 172, 342, 402, 483, 506], "audio": 431, "auto": [0, 2, 4, 9, 512, 513], "autom": 514, "automat": [1, 2, 8, 154, 220, 512, 519, 520, 521], "autoregress": 6, "avail": [2, 5, 6, 7, 9, 11, 132, 133, 237, 290, 346, 512, 516, 521], "averag": [333, 355, 356, 357, 486, 487, 489, 490, 491, 512], "avgpool1d": 353, "avgpool2d": 353, "avgpool3d": 353, "avoid": [1, 2, 401, 511, 512], "awai": [2, 6], "awar": [511, 517], "ax": [0, 2, 16, 18, 27, 28, 83, 121, 147, 159, 160, 161, 163, 164, 165, 167, 168, 170, 171, 173, 189, 212, 215, 216, 230, 232, 234, 240, 251, 254, 279, 296, 297, 298, 303, 305, 309, 310, 316, 320, 326, 514], "axes_a": 0, "axes_b": 0, "axi": [0, 2, 6, 7, 16, 18, 27, 28, 29, 30, 34, 35, 36, 37, 42, 43, 44, 45, 58, 59, 60, 61, 62, 66, 75, 78, 79, 80, 84, 103, 117, 118, 119, 120, 127, 130, 147, 153, 155, 158, 162, 166, 167, 168, 169, 170, 171, 173, 185, 204, 210, 212, 226, 230, 232, 234, 240, 242, 251, 252, 254, 255, 260, 266, 275, 279, 298, 299, 300, 303, 304, 305, 309, 310, 312, 313, 317, 318, 319, 320, 324, 326, 327, 329, 355, 356, 357, 372, 385, 386, 387, 414, 445, 451, 453, 454, 458, 463, 465, 473, 474, 515], "axis1": [0, 47, 81, 127, 310, 319], "axis2": [0, 47, 81, 127, 310, 319], "axpbi": 2, "axpby_": 2, "axpby_gener": 2, "axpby_general_bfloat16": 2, "axpby_general_complex64": 2, "axpby_general_float16": 2, "axpby_general_float32": 2, "axpby_impl": 2, "b": [0, 1, 2, 3, 4, 6, 14, 15, 17, 25, 86, 92, 94, 95, 96, 137, 138, 142, 154, 157, 175, 177, 183, 184, 188, 189, 190, 198, 199, 200, 201, 204, 212, 215, 216, 225, 227, 229, 231, 233, 241, 243, 247, 250, 253, 256, 263, 274, 278, 308, 316, 325, 339, 340, 372, 382, 414, 431, 445, 514, 515, 517, 518, 519, 520, 521], "b1": 177, "b2": 177, "b_": [373, 379], "b_stride": 1, "ba": [489, 491], "back": [6, 121, 237, 518], "backend": [1, 9, 132, 133, 516], "backward": [1, 511, 514], "bad": 517, "balanc": 460, "baltimor": 212, "bandwidth": [511, 512], "base": [0, 2, 4, 156, 222, 224, 253, 417, 430, 483, 485, 491, 506, 508, 511, 515], "base_idx": 1, "basi": 506, "basic": [5, 280, 514], "batch": [6, 15, 96, 157, 177, 178, 231, 264, 358, 360, 361, 362, 363, 364, 365, 367, 368, 373, 379, 409, 414, 431, 517], "batch_idx": 1, "batch_iter": [7, 485], "batch_siz": [7, 485], "batchnorm": 353, "becaus": [6, 179, 353, 511, 512, 513, 517], "becom": 132, "been": [0, 2, 6, 180, 517], "befor": [1, 2, 6, 9, 29, 154, 252, 333, 393, 430, 495, 512, 515, 517], "before_1": 251, "before_2": 251, "before_i": 251, "before_n": 251, "beforehand": 250, "beggin": 279, "begin": [87, 181, 203, 256, 373, 379, 428, 446, 457, 464, 470, 476, 477, 512], "behav": 121, "behavior": [165, 210, 264, 460, 515, 517], "behaviour": [121, 202, 203], "behind": 514, "being": [306, 353], "bell": 2, "below": [2, 9, 212, 321, 323, 344, 431, 512, 517], "bench": 2, "benchmark": [2, 511], "benefici": [367, 368, 517], "benefit": 512, "best": 512, "beta": [0, 2, 15, 125, 256, 358, 374, 378, 380, 464, 485, 489, 490, 491, 492], "beta_": 2, "beta_1": [487, 489, 490, 491, 492], "beta_2": [489, 490, 491, 492], "better": [333, 514, 521], "between": [0, 2, 8, 101, 173, 430, 453, 456, 457, 460, 502, 512, 516, 517, 518, 521], "beyond": [279, 500, 503], "bfloat16": [2, 12, 185, 344, 518], "bfloat16_t": 2, "bia": [6, 125, 153, 178, 256, 257, 338, 353, 360, 361, 362, 363, 364, 365, 373, 379, 380, 382, 394, 396, 406, 409, 412, 414, 489, 490, 491, 495, 514], "bias": [0, 125, 178, 256, 257, 373, 379, 394, 406, 409], "bias_correct": [489, 490], "bicub": 431, "big": [1, 333, 511], "bigger": [6, 487], "bilinear": [1, 431], "binari": [220, 282, 283, 284, 285, 286, 327, 428, 452, 477, 511, 516], "binary_cross_entropi": [353, 511], "bind": 516, "bit": [0, 125, 178, 199, 256, 257, 278, 334, 344, 389, 411, 412, 413], "bitwis": [0, 92, 93, 94, 95, 199, 278], "bitwise_and": 0, "bitwise_invert": 0, "bitwise_or": 0, "bitwise_xor": 0, "bla": 9, "block": [0, 2, 6, 96, 430], "block_masked_mm": 0, "block_siz": [0, 96], "bn": 358, "bodi": [1, 154], "bool": [0, 1, 2, 16, 17, 18, 27, 28, 34, 35, 36, 37, 42, 43, 44, 45, 58, 59, 60, 61, 62, 66, 79, 80, 82, 84, 86, 102, 106, 110, 117, 118, 119, 120, 132, 133, 149, 151, 154, 156, 177, 178, 190, 196, 202, 203, 212, 216, 217, 218, 220, 226, 230, 232, 234, 235, 237, 240, 254, 257, 305, 309, 326, 334, 358, 360, 361, 362, 363, 364, 365, 373, 374, 378, 379, 380, 382, 389, 393, 394, 396, 401, 403, 406, 407, 408, 409, 412, 414, 417, 422, 430, 431, 452, 455, 487, 489, 490, 493, 499], "bool_": [12, 344], "boolean": [0, 17, 86, 157, 190, 191, 192, 193, 194, 195, 196, 227, 228, 229, 344, 405, 515], "both": [1, 2, 14, 92, 94, 95, 137, 138, 142, 183, 184, 196, 199, 200, 201, 212, 225, 233, 241, 243, 247, 253, 260, 274, 278, 308, 334, 355, 356, 357, 378, 379, 385, 386, 387, 485, 511, 512, 513, 514, 519, 521], "bottom": 431, "bound": [0, 267, 270, 271, 371, 439, 511, 515, 521], "boundari": 502, "bracket": 6, "brain": 344, "break": 518, "bregler": 367, "bridg": 512, "broadcast": [0, 2, 14, 17, 92, 94, 95, 97, 98, 101, 137, 138, 142, 157, 176, 183, 184, 190, 199, 200, 201, 225, 231, 233, 241, 243, 247, 253, 255, 259, 260, 264, 267, 270, 271, 274, 278, 308, 313, 330, 409], "broadcast_arrai": [0, 2], "broadcast_to": 0, "broadcasted_input": 2, "brought": 8, "btl_tcp_if_includ": [512, 516], "btl_tcp_link": [512, 516], "buffer": [1, 2, 179, 518], "bui": 6, "build": [1, 3, 4, 6, 8, 435, 483, 511, 513], "build_ext": [2, 9], "build_shared_lib": [2, 9], "built": [1, 2, 4, 9, 517], "bundl": 6, "byte": [53, 64, 179, 180, 181, 287, 290, 291, 333, 344, 516], "c": [0, 1, 2, 6, 15, 212, 358, 360, 361, 362, 363, 364, 365, 367, 368, 378, 379, 518, 519, 521], "c_": [379, 492], "c_in": [107, 108, 109, 110, 111, 112, 113], "c_out": [107, 108, 109, 110, 111, 112, 113], "c_pad": 1, "c_t": [379, 492], "cabl": 512, "cach": [6, 9, 100, 179, 180, 287, 511], "calcul": [212, 213, 452, 455, 461, 487], "call": [2, 3, 6, 7, 32, 100, 132, 135, 175, 181, 188, 333, 353, 370, 394, 406, 411, 419, 483, 485, 495, 511, 512, 513, 514, 516, 517], "callabl": [102, 121, 149, 151, 154, 182, 188, 197, 325, 328, 329, 334, 335, 337, 338, 339, 340, 389, 390, 393, 401, 414, 419, 430, 432, 433, 434, 435, 436, 437, 438, 439, 486, 487, 488, 489, 490, 491, 492, 493, 498, 499, 500, 501, 502, 503, 504], "can": [1, 2, 3, 4, 6, 8, 9, 14, 19, 69, 83, 87, 88, 92, 94, 95, 102, 127, 128, 129, 137, 138, 142, 145, 149, 150, 157, 177, 183, 184, 188, 199, 200, 201, 212, 225, 233, 241, 243, 247, 253, 259, 260, 267, 270, 271, 274, 278, 283, 291, 308, 319, 324, 325, 340, 353, 356, 357, 370, 371, 386, 387, 393, 406, 411, 419, 431, 454, 480, 483, 485, 494, 495, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "cannot": [6, 101, 515, 518], "captur": [2, 3, 102, 121, 238, 239, 353, 511], "care": [6, 512, 513, 516, 517], "carefulli": [511, 513], "carri": 2, "cartesian": 235, "case": [2, 6, 130, 131, 132, 134, 135, 136, 160, 164, 166, 168, 169, 170, 171, 173, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 213, 214, 215, 216, 217, 218, 231, 277, 303, 324, 356, 357, 367, 386, 387, 428, 446, 464, 470, 476, 477, 494, 495, 511, 512, 513, 514, 516, 519, 520, 521, 522], "cast": [2, 38, 169, 170, 171, 220, 333, 389, 401, 518], "caster": 2, "categor": 6, "categori": [12, 196, 344], "caus": [353, 511, 517], "causal": [6, 157], "caution": 87, "cd": [3, 9], "cdf": [261, 371, 442], "cdot": [444, 453, 456, 472], "ceil": 0, "ceildiv": 1, "cell": 379, "celu": 353, "center": 161, "certain": [403, 511], "chang": [87, 88, 102, 149, 151, 188, 289, 327, 407, 412, 431, 457, 464, 511, 518], "channel": [1, 107, 108, 109, 110, 111, 112, 113, 358, 360, 361, 362, 363, 364, 365, 367, 368], "channel_idx": 1, "charact": 337, "check": [0, 2, 9, 86, 133, 196, 206, 208, 237, 396, 407, 408, 512, 513, 514, 515], "checklist": [512, 516], "checkout": [3, 511], "checkpoint": [430, 485], "chen": 492, "child": 408, "children": 353, "chip": 9, "choleski": 203, "choos": [6, 156, 417, 516], "chosen": 140, "clamp": 173, "clang": 9, "clarifi": 512, "clariti": 514, "class": [2, 6, 7, 10, 11, 12, 31, 121, 129, 172, 342, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 486, 487, 488, 489, 490, 491, 492, 493, 498, 499, 506], "class_pred": 334, "classif": [435, 436], "classifi": 7, "classmethod": [411, 412], "clear": 100, "click": 9, "clip": [0, 336, 452, 487], "clip_threshold": 487, "clipped_grad": 336, "clone": 9, "close": [5, 8, 9, 17, 190], "closer": 338, "cmake": [3, 4, 9], "cmake_arg": [3, 9], "cmake_build_parallel_level": 9, "cmake_build_typ": 9, "cmake_current_list_dir": 2, "cmake_cxx_standard": 4, "cmake_cxx_standard_requir": 4, "cmake_host_system_processor": 9, "cmake_library_output_directori": 2, "cmake_minimum_requir": 4, "cmakebuild": 2, "cmakeextens": 2, "cmakelist": [2, 4], "cmdclass": 2, "co": [0, 2, 121, 422, 514], "code": [1, 154, 511, 512, 513, 517], "coeffici": [2, 486, 487, 489, 490, 491, 492], "col": [106, 321], "cold": 9, "collect": [338, 339, 510], "column": [106, 152, 186, 205, 206, 256], "com": 9, "combin": [6, 217, 340], "come": [2, 6, 512, 514], "command": [2, 3, 4, 9, 512, 516], "command_buff": 2, "common": [485, 511, 517], "commonli": [7, 407, 480, 511], "commun": [8, 129, 132, 133, 333, 516], "communication_typ": 333, "compact": 211, "compar": [2, 86, 511], "comparison": [17, 142, 183, 184, 200, 201, 247], "compat": [6, 149, 151, 157, 188, 260, 264, 371, 520], "compil": [0, 1, 3, 4, 8, 9, 128, 141, 154, 512, 513, 514, 517], "compiled_fun": [511, 513], "compiled_grad_fn": 511, "complement": 93, "complet": [5, 6, 9, 407, 408, 513, 514, 521], "complex": [2, 51, 67, 104, 105, 167, 168, 169, 170, 171, 187, 205, 206, 207, 208, 265, 272, 337, 344, 353, 408, 511, 513, 514], "complex64": [2, 12, 205, 207, 344], "complex64_t": 2, "complexflo": 12, "compon": [2, 4, 6, 161, 217], "compos": [8, 353, 511, 514, 519], "composit": 519, "compress": 286, "compromis": 6, "comput": [0, 1, 2, 5, 6, 7, 8, 9, 117, 118, 119, 120, 121, 125, 140, 148, 156, 182, 197, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 225, 226, 234, 250, 256, 274, 298, 305, 306, 316, 325, 326, 328, 335, 353, 358, 373, 374, 378, 379, 380, 394, 407, 412, 413, 417, 430, 433, 434, 435, 436, 443, 444, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 485, 486, 487, 489, 490, 491, 492, 497, 511, 512, 513, 514, 519, 521], "computation": 517, "compute_encod": 2, "compute_uv": 217, "concaten": [0, 6, 130, 333], "concept": 483, "concis": 6, "concret": [2, 373, 379, 382, 414, 517, 521], "conda": [9, 512], "condit": [0, 330, 511, 521], "config": [2, 4, 512], "configu": 485, "configur": [125, 512], "confirm": [512, 516], "confus": 7, "conj": 105, "conjug": [0, 104], "connect": [512, 516], "consecut": [156, 256, 417], "consequ": 6, "consid": [6, 17, 86, 106, 190, 337, 338, 339, 374, 493, 510, 512], "consider": 511, "const": [0, 1, 2, 455], "constant": [0, 2, 6, 9, 121, 153, 155, 251, 353, 358, 374, 380, 413, 455, 465, 498, 500, 511, 513, 518], "constant_valu": 251, "constitut": 338, "construct": [0, 2, 7, 46, 126, 176, 210, 248, 317, 331], "consult": 512, "consum": 517, "contain": [2, 6, 9, 29, 30, 72, 102, 127, 140, 166, 167, 168, 177, 178, 205, 206, 212, 227, 228, 229, 256, 300, 330, 333, 336, 353, 393, 395, 396, 402, 430, 461, 480, 483, 511, 514], "content": [9, 393, 511], "context": [307, 513], "contigu": [0, 1, 2, 87, 154], "continu": [359, 440, 512, 514], "contract": [0, 140], "contribut": 2, "contriv": [514, 521], "control": [0, 381, 508, 517], "conv": 114, "conv1d": [0, 353], "conv2d": [0, 353], "conv3d": [0, 353], "conv_gener": 0, "conv_transpose1d": 0, "conv_transpose2d": 0, "conv_transpose3d": 0, "conveni": [1, 2, 7, 196], "convent": [19, 114, 139, 140, 431], "convers": 8, "convert": [0, 1, 2, 82, 89, 90, 91, 124, 173, 258, 411, 412, 517, 518, 519], "convolut": [0, 107, 108, 109, 110, 111, 112, 113, 114, 360, 361, 362, 363, 364, 365, 367, 368], "convolv": [107, 108, 109, 110, 111, 112, 113], "convtranspose1d": 353, "convtranspose2d": 353, "convtranspose3d": 353, "coordin": [0, 235], "copi": [0, 1, 2, 6, 8, 106, 252, 299, 518], "core": [1, 2, 3, 4, 5, 6, 7, 334, 353, 355, 356, 357, 358, 378, 385, 386, 387, 396, 399, 401, 404, 431, 432, 433, 434, 435, 436, 437, 438, 439, 452, 454, 461, 480, 483, 485, 511, 512, 518, 519], "corner": 431, "correct": [2, 9, 489, 490, 491, 515, 517], "correctli": [39, 512], "correl": [110, 367], "correspond": [0, 1, 2, 16, 18, 82, 101, 125, 127, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 205, 206, 230, 232, 240, 254, 296, 297, 309, 316, 324, 329, 338, 493, 512, 514, 516], "cos_first": 422, "cosh": [0, 460], "cosin": [0, 20, 21, 115, 116, 453, 500, 502, 514], "cosine_decai": [485, 502], "cosine_similarity_loss": 353, "cost": [9, 487, 512, 517], "costli": 517, "cot": 1, "cot_index": 1, "cotan": 121, "cotang": [1, 2, 121, 328], "could": [6, 353, 515], "count": [353, 502], "counter": 508, "cours": 514, "coursera": 498, "cout": [4, 513], "cov": 264, "covari": [264, 358], "cover": 2, "cpp": [2, 4], "cpu": [8, 9, 205, 206, 207, 208, 214, 344, 521], "cpython": 2, "crash": [87, 511], "creat": [0, 1, 2, 6, 9, 87, 132, 152, 186, 307, 353, 483, 485, 502, 511, 512, 513, 515, 516, 518], "create_additive_causal_mask": 6, "cross": [7, 110, 452, 454], "cross_entropi": [7, 353], "crowd": 6, "cry": 6, "cubic": 431, "cummax": 0, "cummin": 0, "cumprod": 0, "cumsum": 0, "cumul": [0, 87, 117, 118, 119, 120, 226], "current": [6, 8, 9, 87, 96, 109, 112, 113, 136, 180, 236, 256, 340, 353, 487, 512, 517], "custom": [8, 121, 154, 430], "custom_decod": 430, "custom_encod": 430, "custom_funct": 1, "custom_kernel_myexp_float": 1, "custom_tim": 2, "cvpr": 367, "cxx": 4, "cycl": 510, "d": [0, 1, 2, 6, 109, 113, 126, 127, 157, 189, 212, 231, 235, 250, 312, 319, 321, 322, 323, 341, 362, 365, 368, 373, 379, 414, 486, 489, 491, 521], "d1": 521, "d2": 521, "d2fdx2": 514, "d_i": 382, "dampen": 499, "darwin": 2, "data": [0, 2, 7, 8, 11, 19, 134, 152, 169, 170, 176, 186, 219, 244, 248, 261, 270, 319, 321, 327, 331, 368, 432, 433, 434, 435, 436, 437, 438, 439, 511, 512, 513, 515, 518], "dataset": [5, 512, 517], "datatyp": 53, "dbuild_shared_lib": 9, "dcmake_build_typ": [4, 9], "ddof": [0, 79, 84, 305, 326], "deal": 511, "deb": 9, "debug": [1, 3, 512, 516], "debugg": 8, "decai": [487, 490, 492, 499, 500, 501, 504], "decay_r": [487, 501, 504], "decay_step": 500, "decent": 7, "decid": [338, 393], "decim": [0, 70, 280], "declar": 2, "decltyp": 1, "decod": 430, "decomposit": [202, 203, 213, 217], "decor": [1, 121], "decoupl": 490, "dedic": 512, "deep": [358, 433, 434, 435, 436], "def": [1, 2, 5, 6, 7, 121, 149, 151, 154, 325, 353, 483, 511, 512, 513, 514, 515, 517, 518, 521], "default": [1, 2, 9, 15, 16, 17, 18, 19, 27, 28, 29, 30, 86, 87, 96, 102, 103, 107, 108, 109, 110, 111, 112, 113, 121, 122, 123, 125, 126, 127, 130, 131, 132, 134, 135, 136, 149, 151, 152, 154, 156, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 177, 178, 182, 185, 186, 190, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 230, 232, 234, 235, 240, 244, 248, 251, 252, 254, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 275, 277, 280, 287, 288, 289, 290, 291, 299, 300, 303, 304, 305, 307, 309, 311, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 331, 333, 334, 344, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 369, 372, 373, 375, 378, 379, 381, 382, 385, 386, 387, 389, 394, 396, 401, 403, 406, 407, 408, 409, 410, 411, 412, 414, 417, 422, 426, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 445, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 483, 486, 487, 488, 489, 490, 491, 492, 498, 499, 500, 508, 510, 511, 512, 513, 514, 516, 518, 520, 522], "default_devic": 522, "default_stream": 522, "defin": [1, 2, 5, 6, 7, 9, 121, 135, 154, 178, 204, 212, 257, 334, 337, 516, 518], "definit": [121, 202, 203, 264], "degre": [0, 258, 465], "deleg": 493, "delta": [457, 486], "delv": [435, 436], "demonstr": 518, "denomin": [378, 453, 486, 488, 489, 490, 491, 498], "dens": [235, 521], "depend": [0, 2, 3, 4, 5, 9, 82, 212, 373, 379, 414, 511, 512, 515, 520, 521], "depth": [337, 357, 362, 365, 368, 387, 514], "dequant": [0, 256], "deriv": [2, 513, 514, 517], "descend": 391, "descent": [499, 511, 517], "describ": [2, 517], "descript": [2, 4, 6, 344], "design": [1, 5, 8, 508, 521], "destin": [0, 2, 63, 136, 242, 255], "destroi": 511, "detach": 514, "detail": [1, 2, 11, 287, 353, 367, 417, 422, 431, 433, 434, 435, 436, 486, 488, 489, 491, 492, 512, 515, 519], "detect": 511, "determin": [0, 2, 127, 264, 340, 344, 400, 520], "dev": [2, 9], "develop": [2, 4, 9], "developer_dir": 9, "deviat": [0, 265, 305, 433, 435, 438], "devic": [1, 2, 8, 9, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 130, 131, 134, 135, 136, 137, 138, 139, 142, 143, 144, 146, 147, 148, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 288, 289, 290, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 330, 331, 332, 342, 521, 522], "device_info": 291, "devicetyp": 10, "df": 518, "dfdx": [513, 514, 515], "dft": [158, 159, 160, 162, 163, 164, 169, 170, 171], "dhwc": 368, "diag": [0, 217], "diagon": [0, 46, 126, 152, 319, 321, 322, 323], "dict": [88, 102, 145, 150, 220, 236, 283, 284, 285, 334, 336, 399, 404, 407, 408, 483, 485, 494, 495, 497, 510, 513, 514, 520], "dict_kei": [338, 495], "dictionari": [6, 102, 149, 188, 220, 236, 283, 284, 336, 337, 340, 353, 393, 402, 407, 408, 496, 510, 520], "did": 6, "diff": 2, "differ": [8, 165, 196, 205, 207, 308, 327, 464, 493, 511, 512, 513, 514, 516], "differenti": [1, 8, 359, 440], "difficult": 514, "difficulti": [433, 434], "dilat": [0, 107, 108, 109, 110, 111, 112, 113, 360, 361, 362, 363, 364, 365], "dim": [1, 6, 156, 157, 370, 374, 378, 380, 409, 411, 413, 417, 422, 430], "dimens": [0, 1, 2, 6, 16, 18, 27, 28, 65, 72, 82, 89, 90, 91, 102, 108, 109, 110, 112, 113, 127, 147, 156, 157, 167, 168, 170, 171, 173, 177, 178, 189, 202, 203, 205, 206, 207, 208, 209, 210, 212, 213, 214, 217, 218, 230, 231, 232, 234, 240, 254, 255, 256, 260, 269, 305, 309, 313, 316, 320, 326, 358, 360, 361, 362, 363, 364, 365, 367, 368, 372, 373, 374, 378, 379, 380, 409, 413, 414, 417, 430, 431, 445, 454, 511, 514], "dimension": [31, 153, 155, 158, 159, 160, 162, 163, 164, 169, 170, 171, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 370, 382, 385, 386, 387, 411, 412, 422, 515, 518], "dir": 4, "direct": [6, 391, 492, 521], "directli": [2, 6, 87], "directori": [2, 4, 6, 9], "disabl": [128, 287, 333, 511, 512], "disable_compil": 511, "disappoint": 6, "discard": [6, 337], "discov": [9, 512], "discoveri": 492, "discret": [114, 158, 159, 160, 162, 163, 164, 169, 170, 171, 370, 411], "discuss": 2, "disk": 6, "dispatch": 2, "dispatch_thread": 2, "dispatchthread": 1, "displai": 353, "distanc": [6, 465], "distribut": [8, 9, 259, 260, 261, 263, 264, 265, 270, 271, 333, 382, 433, 434, 435, 436, 438, 439, 455, 458, 463, 465, 480], "distributed_config": [512, 516], "diverg": 458, "divid": [0, 2, 39, 175, 256, 274, 512], "divis": [0, 137, 175, 256, 274], "divisor": [305, 326], "divmod": 0, "dloss_dw": 514, "dloss_dx": 514, "dlpack": 518, "dlvalu": 325, "dmlx_build_cpu": 9, "dmlx_build_cuda": 9, "dmlx_build_gguf": 9, "dmlx_build_safetensor": 9, "dmlx_metal_debug": 3, "dmlx_metal_jit": 9, "do": [0, 2, 6, 9, 210, 327, 353, 395, 406, 480, 483, 511, 512, 513, 514, 517], "doc": [2, 7, 512, 516], "document": [2, 3, 4, 69, 83, 154, 283, 284, 344, 511, 512, 513, 514, 515], "doe": [0, 2, 3, 6, 9, 179, 327, 336, 353, 511, 512, 515, 516, 517, 518], "doesn": [2, 353, 513], "domain": 270, "don": [1, 9, 106, 511, 521], "done": [353, 366, 413, 511, 512, 517, 518], "dot": [150, 209, 218, 316, 337, 398, 409, 512], "doubl": [0, 6, 344], "doubt": 6, "down": [6, 336], "download": 9, "downsampl": [355, 356, 357, 385, 386, 387], "dparam": 325, "dpkg": 9, "draw": 260, "drop": 393, "dropout": [353, 367, 368, 403, 430, 511], "dropout2d": 353, "dropout3d": 353, "dst": 136, "dt": 143, "dtype": [0, 1, 2, 6, 12, 19, 31, 38, 39, 82, 85, 134, 135, 152, 154, 172, 173, 176, 186, 196, 198, 205, 206, 207, 208, 212, 214, 219, 248, 261, 263, 264, 265, 267, 270, 271, 296, 297, 319, 321, 324, 327, 331, 333, 344, 401, 431, 432, 433, 434, 435, 436, 437, 438, 439, 452, 454, 461, 500, 501, 502, 503, 504, 511, 512, 513, 514, 515, 518, 519, 520], "dtypecategori": [196, 344], "dual": 460, "duchi": 488, "duplic": 513, "dure": [3, 102, 290, 366, 367, 368, 431, 518], "dx": 121, "dy": 121, "dyld": 512, "dyld_library_path": 512, "dylib": 2, "dynam": [0, 513, 517], "e": [2, 7, 9, 121, 143, 154, 177, 178, 197, 292, 358, 360, 361, 362, 363, 364, 365, 367, 368, 374, 378, 380, 394, 413, 450, 451, 473, 474, 479, 485, 488, 511, 513, 517, 522], "e5": 344, "e8": 344, "each": [0, 1, 2, 72, 88, 125, 145, 156, 178, 196, 202, 203, 205, 206, 207, 208, 209, 213, 217, 218, 231, 235, 251, 256, 257, 260, 275, 285, 286, 300, 317, 320, 327, 329, 330, 367, 368, 370, 373, 374, 379, 414, 417, 430, 452, 454, 508, 511, 512, 513, 516, 517], "eager": 517, "earli": 367, "eas": 6, "easi": [2, 353, 493], "easier": [1, 150, 517], "easiest": 512, "edg": [101, 251, 431, 511], "edit": [9, 408], "effect": [367, 511, 517], "effici": [6, 8, 177, 367, 417, 512, 517, 519], "eigenvalu": [205, 206, 207, 208], "eigenvector": [205, 206], "einstein": [139, 140], "einsum": 140, "either": [9, 14, 69, 82, 83, 92, 94, 95, 101, 137, 138, 142, 175, 183, 184, 188, 199, 200, 201, 212, 225, 231, 233, 241, 243, 247, 253, 274, 278, 308, 325, 356, 357, 386, 387, 419, 431, 435, 436, 512, 516, 518], "elem": [1, 154], "elem_to_loc": [1, 2], "element": [0, 1, 2, 13, 14, 20, 21, 22, 23, 24, 25, 26, 29, 74, 87, 92, 93, 94, 95, 99, 115, 116, 117, 118, 119, 120, 125, 137, 138, 142, 143, 144, 146, 148, 152, 174, 175, 178, 183, 184, 190, 191, 192, 193, 194, 195, 199, 200, 201, 221, 222, 223, 224, 225, 226, 227, 228, 229, 233, 235, 241, 243, 245, 247, 252, 253, 256, 257, 273, 274, 275, 278, 279, 281, 292, 293, 294, 295, 301, 302, 308, 312, 314, 315, 318, 325, 327, 330, 359, 366, 367, 368, 373, 377, 379, 388, 410, 414, 417, 421, 440, 447, 448, 450, 451, 466, 467, 469, 472, 473, 474, 475, 511, 514, 515], "elementwis": [1, 104, 105], "elif": 6, "ellipsi": 515, "elman": 414, "els": [0, 2, 6, 353, 394, 512, 517], "elsewher": [321, 515], "elu": [353, 470], "emb": [6, 370, 411, 422], "embed": [6, 334, 353, 411, 417, 422, 453], "empti": 264, "en0": 516, "en2": 512, "enabl": [3, 6, 9, 102, 141, 333, 499], "enclos": 513, "encod": [2, 156, 417, 422, 430, 454], "encount": [2, 514], "end": [127, 203, 237, 256, 279, 373, 379, 428, 446, 457, 464, 470, 476, 477, 500, 503, 513], "end_axi": [0, 50, 173], "end_encod": 2, "endif": 2, "endl": [4, 513], "endswith": 394, "enhanc": [6, 417, 517], "enough": [2, 517], "ensur": [0, 1, 2, 9, 154, 336, 460, 512, 513], "ensure_row_contigu": [1, 154], "enter": 6, "entir": [16, 18, 27, 28, 230, 232, 234, 240, 254, 305, 309, 326, 367, 368], "entri": [0, 266, 324, 367, 368], "entropi": [7, 452, 454], "enumer": 353, "environ": [9, 128, 141, 512], "ep": [5, 153, 155, 358, 374, 378, 380, 413, 453, 455, 465, 485, 486, 487, 488, 489, 490, 491, 498], "epoch": 7, "epsilon": [358, 374, 378, 380, 413, 453, 455, 486, 488, 489, 490, 491, 498], "epsilon_1": 487, "epsilon_2": 487, "equal": [0, 1, 17, 29, 86, 152, 184, 190, 201, 247, 252, 267, 300, 333, 378, 382], "equal_nan": [0, 17, 86, 190], "equat": [139, 140, 215, 216], "equival": [0, 2, 32, 69, 83, 135, 138, 175, 178, 185, 312, 359, 369, 371, 375, 376, 377, 383, 384, 408, 410, 412, 415, 416, 418, 420, 423, 424, 425, 426, 427, 429, 512], "erf": [0, 144, 511], "erfinv": 0, "error": [0, 2, 9, 132, 143, 144, 291, 300, 371, 442, 443, 444, 460, 462, 511, 514, 516, 518], "error_norm": 5, "estim": 491, "eta": 492, "etc": [2, 256, 353, 431, 512], "ethernet": [512, 516], "eval": [2, 3, 5, 6, 7, 353, 483, 485, 511, 512, 513, 514, 517, 519], "eval_cpu": 2, "eval_fn": 7, "eval_gpu": 2, "evalu": [2, 6, 7, 8, 88, 136, 145, 197, 290, 328, 353, 392, 403, 483, 485, 511, 513, 519], "even": [1, 2, 6, 102, 165, 205, 207, 511, 512, 513, 517, 518], "evenli": [0, 219], "everi": [1, 256, 338, 485, 504, 514, 516], "everyth": [6, 512], "everywher": 0, "exact": [443, 444], "exactli": [2, 6, 156, 396, 514], "exampl": [0, 3, 4, 5, 6, 7, 9, 19, 39, 88, 121, 132, 149, 150, 151, 154, 157, 173, 188, 196, 198, 205, 206, 207, 208, 212, 214, 296, 297, 307, 312, 324, 336, 339, 340, 353, 355, 356, 357, 358, 378, 385, 386, 387, 394, 396, 403, 406, 431, 432, 433, 434, 435, 436, 437, 438, 439, 452, 454, 461, 480, 485, 495, 500, 501, 502, 503, 504, 508, 514, 515, 516, 517, 518, 519, 520], "exce": [333, 336], "exceed": 290, "except": [8, 121, 152, 166, 167, 169, 170, 171, 290, 344, 374, 396, 513, 515, 518], "exclud": [255, 313], "exclus": [0, 87, 95], "execut": [2, 4, 9, 89, 90, 91, 181, 198, 512, 518, 521], "execute_process": 4, "exist": [2, 3, 6, 394, 406, 512], "exp": [0, 1, 88, 148, 154, 225, 230, 261, 298, 359, 369, 421, 440, 441, 458, 470, 471, 475, 511, 513, 521], "exp_elementwis": [1, 154], "expand_dim": 0, "expect": [6, 360, 361, 362, 363, 364, 365, 366, 367, 368, 422, 430, 455, 511, 512, 515], "expens": 430, "expensive_fun": 517, "experiment": [88, 149, 151, 188, 518], "explain": 2, "explicit": [2, 495, 508, 518], "explicitli": [177, 353, 508, 516], "explor": 9, "expm1": 0, "exponenti": [0, 146, 148, 359, 369, 418, 440, 441, 470, 501], "exponential_decai": 485, "export": [8, 9, 149, 150, 188], "export_funct": 513, "ext_modul": 2, "extend": [2, 251], "extens": [8, 220, 238, 400, 520], "extern": 518, "extra": [1, 338, 339, 513], "extract": [0, 6, 46, 126, 127, 296, 353, 393, 483], "extras_requir": 2, "extrem": [515, 517], "ey": [0, 6, 209, 218], "f": [0, 2, 5, 7, 121, 212, 353, 379, 490, 511, 518], "f_jvp": 121, "f_t": 379, "f_vjp": 121, "f_vmap": 121, "face": 6, "factor": [2, 15, 185, 202, 203, 210, 211, 214, 431, 454, 501, 504], "fail": [511, 512, 516], "fall": [2, 121], "fallback": 493, "fals": [0, 1, 2, 6, 16, 17, 18, 27, 28, 34, 35, 36, 37, 42, 43, 44, 45, 58, 59, 60, 61, 62, 66, 79, 80, 84, 86, 102, 106, 110, 117, 118, 119, 120, 132, 149, 151, 154, 177, 178, 190, 196, 202, 203, 212, 216, 217, 218, 220, 226, 230, 232, 234, 235, 240, 254, 305, 309, 326, 330, 334, 337, 338, 339, 340, 344, 374, 378, 380, 382, 394, 396, 406, 409, 412, 417, 422, 430, 431, 452, 455, 487, 489, 490, 499, 513, 518], "famili": 6, "fan": [433, 434, 435, 436], "fan_in": [433, 434, 435, 436], "fan_out": [433, 434, 435, 436], "far": 485, "fast": [1, 8, 371, 444, 512, 521], "faster": [1, 2, 9, 138, 177, 178, 442, 452, 511, 512, 514], "featur": [1, 8, 107, 108, 109, 110, 111, 112, 113, 156, 358, 373, 374, 378, 379, 380, 382, 412, 413, 414, 417, 430, 431, 511, 512, 517], "feed": 6, "feed_forward": 6, "feedforward": [433, 434], "feel": 6, "fetch": 1, "few": [1, 2, 6, 7, 8, 9, 513, 517, 519], "fewer": 512, "ffn": 6, "ffn_norm": 6, "fft": 8, "fftshift": 165, "fi": 512, "figur": 512, "file": [4, 6, 9, 149, 150, 151, 188, 220, 282, 283, 284, 285, 286, 396, 400, 512, 513, 514, 520], "file_or_weight": 396, "fill": [0, 176, 249, 321, 332, 432, 433, 434, 435, 436, 438, 439], "filter": [0, 114, 360, 361, 362, 363, 364, 365, 389, 393, 493], "filter_and_map": 353, "filter_fn": [389, 393], "final": [2, 4, 5, 6, 7, 185, 500, 503, 512, 516], "find": [2, 4, 5, 9, 512], "find_packag": [2, 4], "finder": 9, "fine": [508, 513, 517], "finetun": 353, "finit": [0, 191, 244], "first": [0, 1, 2, 3, 4, 5, 6, 7, 9, 127, 130, 132, 173, 182, 196, 198, 199, 217, 227, 229, 231, 252, 269, 278, 310, 316, 319, 325, 337, 339, 340, 353, 356, 357, 374, 386, 387, 431, 453, 461, 487, 491, 495, 511, 512, 513, 514, 515, 516, 518, 521], "first_lay": 517, "firt": 511, "fit": [256, 521], "five": 511, "fix": [2, 6, 9, 511, 517], "flag": [4, 9, 177, 511, 518], "flat": [177, 178, 337, 341], "flat_param": 285, "flatten": [0, 29, 30, 117, 118, 119, 120, 212, 226, 250, 252, 255, 275, 279, 299, 312, 313, 318, 337, 511], "flexibl": 8, "flexibli": 408, "flip": [0, 110, 114], "float": [0, 1, 2, 12, 15, 17, 19, 82, 153, 154, 155, 156, 157, 172, 175, 176, 185, 190, 196, 212, 244, 257, 259, 263, 333, 336, 344, 358, 366, 367, 368, 374, 378, 380, 389, 401, 413, 417, 422, 428, 430, 431, 432, 433, 434, 435, 436, 438, 439, 453, 454, 455, 457, 461, 464, 465, 476, 477, 486, 487, 488, 489, 490, 491, 492, 498, 499, 500, 501, 503, 504], "float16": [1, 2, 12, 154, 185, 220, 344, 389, 517, 518], "float16_t": [1, 2], "float32": [0, 1, 2, 12, 19, 152, 154, 157, 185, 186, 196, 206, 208, 212, 214, 219, 248, 261, 263, 264, 265, 270, 271, 297, 321, 331, 344, 431, 432, 433, 434, 435, 436, 437, 438, 439, 452, 454, 461, 500, 501, 502, 503, 504, 511, 512, 513, 514, 515, 517, 518, 519, 520], "float64": [12, 196, 344, 518], "floor": [0, 1, 175], "floor_divid": 0, "flow": [0, 306, 517], "flush": 2, "fn": [188, 335, 338, 339, 340, 519], "follow": [1, 2, 4, 6, 7, 8, 9, 19, 114, 125, 157, 177, 212, 251, 256, 339, 353, 443, 444, 458, 486, 487, 488, 491, 492, 499, 508, 511, 512, 513, 514, 516, 521], "food": 6, "forc": [6, 7, 106, 353, 512, 519], "forg": [9, 512], "formal": [125, 256], "format": [6, 150, 220, 282, 283, 284, 285, 286, 512, 518], "formul": [359, 369], "formula": 464, "forth": [431, 512], "forward": [1, 2, 325, 511, 516, 517], "found": [4, 393], "four": 358, "fourier": [158, 159, 160, 162, 163, 164, 169, 170, 171], "fourth": 513, "frac": [143, 256, 265, 292, 358, 366, 367, 368, 374, 378, 380, 382, 413, 421, 433, 434, 435, 436, 453, 455, 457, 460, 471, 473, 474, 486, 488, 489, 490, 491, 498], "fraction": 19, "framework": 8, "free": 287, "freez": [353, 406, 483], "freq": 156, "frequenc": [156, 161, 417, 422], "frequent": [511, 517], "friend": 6, "fro": 212, "frobeniu": 212, "from": [0, 1, 2, 4, 6, 7, 8, 87, 124, 125, 127, 130, 131, 134, 135, 136, 154, 167, 168, 170, 171, 176, 177, 181, 185, 188, 205, 207, 212, 220, 231, 235, 249, 256, 258, 259, 260, 261, 262, 263, 267, 270, 285, 287, 296, 303, 306, 308, 312, 313, 318, 319, 330, 332, 337, 338, 339, 340, 341, 353, 382, 394, 396, 409, 433, 434, 435, 436, 438, 439, 455, 464, 480, 485, 510, 511, 512, 513, 514, 517, 518, 519, 520, 521], "from_embed": 411, "from_linear": 412, "front": [2, 513], "frozen": [353, 394, 404, 406, 412, 483], "fuction": 138, "full": [0, 1, 2, 7, 69, 83, 114, 154, 210, 298, 407, 408, 455, 493, 511, 512, 513, 517], "full_turn": 422, "fulli": [2, 8, 516, 518, 521], "fun": [102, 149, 151, 182, 197, 325, 328, 329, 511, 513, 515, 517, 521], "fun1": 517, "func": 414, "function": [0, 1, 2, 3, 5, 6, 7, 8, 17, 19, 87, 102, 121, 138, 143, 144, 149, 151, 154, 182, 188, 190, 197, 202, 203, 205, 206, 207, 208, 209, 212, 213, 214, 217, 218, 231, 291, 292, 325, 328, 329, 335, 336, 338, 339, 340, 353, 359, 369, 371, 372, 375, 376, 377, 383, 384, 388, 390, 394, 401, 406, 410, 414, 415, 416, 418, 419, 420, 421, 423, 424, 425, 426, 427, 428, 429, 430, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 466, 471, 473, 474, 475, 476, 477, 478, 480, 485, 495, 508, 510, 512, 515, 517, 518, 520], "functionexport": 151, "functool": 511, "further": [2, 9, 514], "fuse": [1, 511], "fusibl": 511, "futur": [6, 88, 149, 151, 188, 412, 515, 517], "fx": 121, "g": [3, 9, 121, 154, 212, 256, 379, 479, 498, 499, 513, 517, 522], "g_t": [379, 486, 488, 489, 490, 491, 492, 498, 499], "gain": [433, 434, 435, 436], "gamma": [358, 374, 378, 380, 413, 433, 434, 435, 436], "gap": 1, "gate": [372, 373, 445], "gather": [0, 130, 177, 178], "gather_mm": [0, 178], "gather_qmm": 0, "gaurante": 327, "gaussian": [5, 371, 442, 443, 444, 455], "gaussian_nll_loss": 353, "gc_func": 430, "gelu": [353, 443, 444, 511], "gelu_approx": [353, 371, 442], "gelu_fast_approx": [353, 371, 442], "geluapprox": 371, "gelufast": 371, "gener": [0, 1, 3, 5, 12, 19, 110, 152, 154, 167, 168, 213, 219, 235, 259, 264, 265, 266, 267, 270, 271, 430, 508, 511, 515, 517, 522], "general_": 2, "generate_stub": 9, "geq": [428, 477], "get": [2, 5, 7, 9, 108, 109, 110, 112, 113, 122, 123, 172, 179, 180, 181, 236, 262, 353, 511, 513, 514, 517, 521], "get_cache_memori": 100, "get_command_encod": 2, "get_kernel": 2, "get_librari": 2, "gguf": [9, 220, 283, 520], "gh": 1, "gii": 1, "git": 9, "github": [5, 7, 9, 511], "give": [2, 6, 7, 29, 511], "given": [0, 2, 9, 16, 18, 29, 39, 87, 88, 98, 101, 103, 117, 118, 119, 120, 125, 127, 140, 145, 147, 157, 158, 159, 160, 162, 163, 164, 169, 170, 171, 176, 177, 210, 212, 226, 230, 232, 234, 240, 244, 246, 254, 264, 266, 267, 279, 280, 287, 289, 298, 300, 305, 309, 311, 317, 318, 319, 321, 322, 323, 326, 342, 366, 393, 409, 453, 455, 461, 493], "gix": 1, "gix_mult": 1, "giy_mult": 1, "global": [128, 130, 131, 132, 134, 135, 136, 141, 268, 333, 336, 508, 511], "glorot": [433, 434], "glorot_norm": 353, "glorot_uniform": 353, "glu": [6, 353], "gm": 1, "gn": 1, "go": [2, 6, 512, 514], "golub": 212, "good": [2, 9, 485, 511, 512, 516, 521], "goroshin": 367, "gower": 6, "gpu": [1, 3, 8, 9, 236, 344, 515, 521], "gputrac": [3, 238], "grad": [2, 5, 7, 121, 325, 336, 485, 494, 511, 512, 513, 514, 515, 517, 519], "grad_fn": [5, 511, 514], "gradient": [0, 5, 7, 121, 182, 306, 325, 333, 335, 336, 353, 394, 407, 412, 430, 460, 483, 485, 486, 487, 489, 490, 491, 492, 494, 497, 499, 511, 512, 514, 515, 517, 518, 519], "grain": 508, "graph": [2, 6, 7, 8, 150, 290, 513, 514], "great": 3, "greater": [0, 6, 29, 148, 184, 252, 336, 428, 477], "greater_equ": 0, "grep": 9, "grid": [2, 154, 235], "grid_dim": 2, "grid_grad": 1, "grid_idx": 1, "grid_sampl": 1, "grid_sample_grad": 1, "grid_sample_ref": 1, "grid_sample_vjp": 1, "grid_shap": 1, "grid_siz": 1, "ground": [5, 6, 454, 464], "group": [0, 1, 107, 108, 109, 110, 111, 112, 113, 125, 130, 131, 132, 134, 135, 136, 157, 178, 256, 257, 327, 333, 334, 360, 361, 374, 411, 412, 512], "group_dim": 2, "group_siz": [0, 125, 178, 256, 257, 334, 411, 412], "groupnorm": 353, "grow": 517, "gru": 353, "guid": [2, 4, 8, 512, 513], "guidelin": 290, "gw": 1, "h": [1, 2, 4, 108, 109, 112, 113, 212, 358, 361, 362, 364, 365, 367, 368, 373, 379, 414, 514, 517], "h_": [373, 379, 414], "h_in": 1, "h_stride": 1, "h_t": [373, 379, 414], "ha": [2, 3, 6, 7, 8, 9, 82, 102, 127, 136, 166, 167, 169, 170, 171, 180, 182, 202, 203, 205, 206, 207, 208, 209, 213, 217, 218, 235, 260, 358, 373, 379, 382, 414, 483, 485, 511, 512, 513, 515, 516, 517, 519, 521], "had": 6, "hadamard": [0, 185], "hadamard_transform": 0, "half": [19, 267, 271, 417, 517], "halv": [372, 445], "hand": [6, 514, 517], "handi": 514, "handl": [2, 353, 511], "happen": [2, 6, 153, 155, 430, 485, 511, 517], "happi": 6, "hard": 6, "hard_shrink": [353, 375], "hard_tanh": [353, 376], "hardcod": 511, "hardshrink": [353, 446], "hardswish": 353, "hardtanh": [353, 447], "hat": [125, 256], "have": [0, 1, 2, 6, 9, 17, 86, 89, 90, 91, 96, 121, 130, 157, 167, 168, 170, 171, 178, 190, 231, 238, 260, 327, 333, 337, 379, 409, 419, 492, 495, 510, 511, 512, 513, 515, 516, 517, 521], "haven": 6, "hazan": 488, "he": [6, 435, 436], "he_norm": 353, "he_uniform": 353, "head": [157, 409, 430], "header": [2, 9, 154], "heart": 6, "heavi": 6, "height": [356, 357, 358, 361, 362, 364, 365, 367, 368, 386, 387], "hello": [337, 341], "help": [2, 6, 511, 521], "helper": [6, 154, 333, 511, 512, 516], "henc": [0, 2, 256, 511], "hendryck": 444, "here": [2, 6, 9, 485, 511, 513, 514, 517, 520, 521], "hermitian": [206, 208], "hf": 379, "hg": 379, "hh": 414, "hi": [6, 379], "hidden": [373, 379, 414, 430], "hidden_dim": [7, 483, 485], "hidden_s": [373, 379, 414], "hierarchi": 344, "high": [267, 271, 353, 370, 439, 480], "high_pad_s": 0, "higher": [2, 189, 291, 461, 512, 514], "highli": 9, "him": 6, "hing": 456, "hinge_loss": 353, "hinton": 498, "hit": 2, "hn": 373, "ho": 379, "hold": [2, 6, 11, 12, 212, 511], "homebrew": 512, "hopkin": 212, "host": 2, "host1": 512, "host2": 512, "host3": 512, "host4": 512, "host_nam": 1, "hostfil": [512, 516], "hostnam": [512, 516], "hostname1": [512, 516], "hostname2": [512, 516], "hostname3": 512, "hostname4": 512, "hot": 454, "hour": 6, "how": [2, 4, 6, 7, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 370, 385, 386, 387, 411, 431, 494, 511, 515, 521], "howev": [2, 121, 353, 371, 374, 495, 508, 511, 512, 517, 518], "hr": 373, "http": [9, 374, 378, 380, 388, 413, 444, 466], "huber": 457, "huber_loss": 353, "human": [435, 436], "hundr": 9, "hurri": 6, "hutter": 490, "hyperbol": [0, 21, 23, 26, 116, 295, 315, 429, 478], "hz": 373, "i": [0, 1, 2, 3, 4, 6, 7, 8, 9, 17, 19, 29, 38, 82, 87, 88, 101, 108, 109, 110, 112, 113, 114, 117, 118, 119, 120, 121, 126, 127, 130, 131, 133, 134, 135, 136, 138, 145, 149, 151, 153, 154, 155, 156, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 175, 176, 177, 178, 185, 188, 190, 191, 196, 197, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 225, 226, 230, 231, 235, 237, 251, 252, 255, 256, 257, 264, 265, 266, 277, 279, 282, 283, 284, 290, 291, 292, 298, 300, 305, 306, 311, 312, 313, 316, 319, 320, 324, 325, 326, 327, 328, 329, 330, 333, 334, 336, 337, 338, 339, 340, 344, 346, 353, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 371, 373, 374, 378, 379, 380, 382, 385, 386, 387, 393, 394, 400, 402, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 417, 422, 428, 430, 431, 435, 436, 442, 444, 452, 453, 455, 460, 461, 464, 465, 467, 472, 477, 483, 485, 487, 489, 490, 492, 493, 494, 495, 500, 502, 503, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522], "i386": 9, "i_n": 1, "i_nw": 1, "i_s": 1, "i_sw": 1, "i_t": 379, "iclr": [489, 490, 491], "id": [7, 9], "idea": [514, 517], "idempot": [394, 406], "ident": [0, 121, 136, 152, 165, 306, 353, 403, 512], "identifi": [2, 337, 510], "idim": 7, "idiom": [7, 511], "idx": [39, 515], "ie": 406, "ieee": 344, "ifac": 512, "ignor": [6, 39, 88, 101, 102, 145, 487, 516], "ih": 414, "ii": 1, "ij": 235, "im": 265, "imag": [0, 361, 362, 364, 365, 367, 368, 431], "imagenet": [435, 436], "imaginari": [51, 187], "immedi": [6, 389], "implement": [0, 1, 5, 7, 156, 157, 177, 178, 370, 393, 409, 417, 419, 422, 428, 430, 431, 477, 486, 487, 488, 491, 492, 494, 506, 511, 514], "impli": 327, "implicit": [508, 511, 514], "implicitli": 517, "import": [2, 3, 5, 6, 7, 9, 121, 132, 185, 188, 212, 285, 325, 337, 338, 339, 340, 341, 353, 355, 356, 357, 358, 378, 385, 386, 387, 396, 431, 452, 454, 461, 480, 483, 485, 511, 512, 514, 515, 517, 518, 519], "import_funct": 513, "imported_ab": 513, "imported_fun": 513, "imported_funct": 513, "improv": [1, 2, 3, 6, 452, 486, 487, 488, 489, 490, 491, 498, 511, 512], "in_ax": [329, 514], "in_channel": [360, 361, 362, 363, 364, 365], "in_dim": [353, 483], "in_proj": 483, "includ": [1, 2, 4, 117, 118, 119, 120, 150, 154, 179, 180, 226, 290, 380, 390, 402, 412, 455, 485, 511, 513, 514, 515, 519, 520, 522], "include_dir": 2, "inclus": [0, 42, 43, 44, 45, 58, 117, 118, 119, 120, 173, 226], "incom": 2, "inconveni": 511, "incorpor": 518, "incorrect": 518, "increas": [291, 516], "increment": 19, "incur": [6, 9], "independ": [129, 367, 368], "index": [0, 1, 2, 8, 10, 29, 39, 147, 152, 177, 182, 235, 252, 296, 297, 312, 313, 325], "indic": [0, 2, 17, 27, 28, 29, 30, 39, 177, 178, 182, 190, 191, 192, 193, 194, 195, 196, 210, 217, 255, 296, 297, 300, 312, 313, 325, 403, 405, 454, 461, 502, 515], "indices_or_sect": [75, 300], "indirectli": 518, "individu": [353, 367, 368], "ineffici": [515, 517], "inexact": [12, 196], "inf": [212, 244, 409], "infer": [8, 176, 220, 319, 324, 512, 513], "infin": [0, 192, 194, 195, 244, 385, 386, 387, 491], "infinit": [17, 190, 191], "info": [6, 9], "inform": [3, 4, 6, 7, 9, 140, 172, 236, 283, 284, 344, 353, 358, 371, 409, 512, 513, 514, 521], "inherit": [7, 510], "inifn": 192, "init": [353, 410, 480, 485, 500, 501, 503, 504, 512], "init_fn": [432, 433, 434, 435, 436, 437, 438, 439, 480], "init_valu": 1, "initi": [1, 3, 5, 6, 132, 340, 353, 358, 374, 378, 380, 382, 410, 413, 432, 433, 434, 435, 436, 437, 438, 439, 483, 495, 500, 501, 503, 504, 511, 512, 513, 517], "initializer_list": 0, "inject": 0, "inlin": 0, "inner": [0, 511], "inorm": 378, "inp": [1, 154], "inp_ndim": 1, "inp_shap": 1, "inp_strid": 1, "inplac": [2, 9], "input": [0, 1, 2, 5, 6, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 126, 127, 130, 131, 136, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 177, 178, 182, 183, 184, 185, 187, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 266, 269, 272, 273, 274, 275, 277, 278, 279, 280, 281, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 322, 323, 324, 325, 326, 327, 329, 330, 332, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 368, 370, 372, 373, 374, 378, 379, 380, 382, 385, 386, 387, 409, 412, 413, 414, 417, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 445, 452, 453, 455, 456, 457, 458, 460, 461, 463, 465, 477, 480, 511, 513, 514, 515, 516, 519, 520], "input_dil": [0, 110], "input_dim": [7, 353, 382, 412], "input_nam": [1, 154], "input_s": [373, 379, 414], "inputs1": 461, "inputs2": 461, "insert": [127, 147, 521], "insid": [511, 513], "inspect": [3, 511, 519], "inspir": 8, "instabl": 465, "instal": [2, 4, 516], "instanc": [6, 39, 121, 256, 341, 353, 378, 389, 390, 391, 394, 396, 397, 398, 403, 406, 407, 408, 419, 483, 512, 516, 518], "instancenorm": 353, "instanti": [1, 2, 7, 517], "instantiate_kernel": 2, "instead": [2, 9, 121, 353, 408, 422, 514, 517], "instruct": [4, 9, 513], "int": [0, 1, 2, 4, 6, 7, 10, 16, 18, 19, 27, 28, 29, 30, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 50, 58, 59, 60, 61, 62, 63, 66, 70, 72, 75, 78, 79, 80, 81, 82, 84, 87, 96, 98, 103, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 125, 126, 127, 134, 135, 136, 140, 147, 152, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 178, 179, 180, 181, 182, 186, 196, 204, 212, 219, 226, 230, 232, 234, 236, 240, 242, 248, 251, 252, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 275, 277, 279, 280, 287, 290, 291, 296, 297, 298, 299, 300, 303, 304, 305, 309, 310, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 331, 333, 334, 353, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 370, 372, 373, 374, 378, 379, 380, 382, 385, 386, 387, 409, 411, 412, 413, 414, 417, 422, 430, 445, 453, 454, 458, 463, 465, 483, 500, 502, 503, 504], "int16": 344, "int32": [0, 1, 12, 19, 39, 173, 196, 198, 212, 267, 296, 324, 344, 431, 515, 519], "int64": [12, 344], "int64_t": 2, "int8": [12, 344], "int_0": 143, "integ": [0, 12, 175, 177, 178, 196, 212, 236, 251, 256, 257, 259, 266, 267, 300, 312, 316, 329, 344, 370, 401, 502, 515], "integr": [19, 312, 517], "intend": [0, 511], "interact": 430, "interest": 521, "interfac": [2, 512, 516], "intermedi": 518, "intern": 358, "interpol": 431, "interpret": 4, "interv": [19, 219, 267, 271], "introduc": [0, 279], "intuit": 353, "invalid": [0, 87], "invers": [0, 20, 21, 22, 23, 24, 25, 26, 93, 144, 162, 163, 164, 165, 166, 167, 168, 203, 209, 213, 218], "invert": 0, "involv": [485, 511], "iogpu": 291, "iostream": 4, "ip": [512, 516], "ip1": [512, 516], "ip2": [512, 516], "ip3": 512, "ip4": 512, "is_avail": 132, "is_equival": 2, "is_leaf": [337, 338, 339, 340], "is_leaf_fn": 393, "isclos": 0, "isfinit": 0, "ish": 6, "ishmael": 6, "isinf": 0, "isnan": 0, "isneginf": 0, "isposinf": 0, "issu": [512, 514, 518], "issubdtyp": [2, 12, 344], "item": [0, 2, 5, 6, 7, 338, 485, 513, 517, 518, 519], "iter": [5, 7, 217, 338, 339, 508, 511, 517], "iterm": 9, "itertool": [6, 338], "its": [0, 1, 2, 9, 157, 203, 213, 231, 252, 269, 321, 335, 341, 353, 412, 485, 489, 490, 491, 512, 517, 518, 521], "itself": [2, 334, 493, 495], "ix": 1, "ix_n": 1, "ix_nw": 1, "ix_s": 1, "ix_sw": 1, "iy_n": 1, "iy_nw": 1, "iy_s": 1, "iy_sw": 1, "j": [6, 9, 212, 367, 488, 489, 491], "j8": 2, "jacobian": [2, 197, 328, 519], "jain": 367, "jax": [8, 508], "jit": [1, 154], "jmlr": 488, "jnp": 518, "john": 212, "join": 502, "join_schedul": 485, "jointli": 264, "json": [512, 516], "just": [2, 4, 7, 380, 511, 513, 515], "jvp": [2, 121, 519], "k": [0, 6, 46, 96, 107, 111, 126, 152, 157, 177, 185, 318, 321, 322, 323, 382, 394], "kaim": 436, "kd": [109, 113], "keep": [2, 16, 18, 27, 28, 230, 232, 234, 240, 254, 305, 309, 326, 353, 393, 514, 517], "keepdim": [0, 16, 18, 27, 28, 34, 35, 36, 37, 59, 60, 61, 62, 66, 79, 80, 84, 212, 230, 232, 234, 240, 254, 298, 305, 309, 326], "kei": [1, 3, 6, 149, 157, 188, 236, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 337, 338, 393, 394, 406, 409, 495, 508, 510, 513, 514], "kept": 291, "kernel": [2, 8, 9, 107, 108, 109, 110, 111, 112, 113, 154, 355, 385, 511, 515], "kernel_dil": [0, 110], "kernel_s": [355, 356, 357, 360, 361, 362, 363, 364, 365, 385, 386, 387], "key_cach": 6, "key_input_dim": 409, "key_proj": 6, "keyring_1": 9, "keyword": [149, 182, 285, 286, 325, 338, 353, 508, 513, 520, 522], "kh": [108, 109, 112, 113], "kind": 6, "kingma": [489, 491], "kl_div_loss": 353, "kname": 2, "know": [2, 6], "known": [420, 472], "kron": 0, "kroneck": [0, 198], "kth": [0, 29, 252], "kullback": 458, "kw": [108, 109, 112, 113], "kw_onli": 2, "kwarg": [11, 129, 149, 150, 188, 285, 286, 342, 513, 522], "l": [6, 7, 107, 111, 202, 203, 206, 208, 210, 353, 358, 360, 363, 373, 379, 414, 464], "l1": [325, 457, 459, 460, 464], "l1_loss": 353, "l2": [457, 460, 499], "l2_loss": 353, "l_": 457, "la": 212, "label": [3, 5, 454, 461], "label_smooth": 454, "lack": 515, "lambd": [375, 426, 446, 476], "lambda": [338, 339, 340, 353, 375, 389, 394, 401, 426, 446, 470, 476, 486, 487, 488, 489, 490, 491, 492, 498, 499, 511, 512, 513, 514], "languag": [1, 2, 4], "lapack": 9, "larg": [6, 353, 409, 460, 511, 513, 517], "larger": [1, 156, 291, 417, 492], "largest": [212, 244, 318], "lasso": 325, "last": [0, 1, 6, 30, 82, 153, 155, 160, 164, 167, 168, 170, 171, 173, 177, 178, 181, 189, 202, 203, 205, 206, 207, 208, 209, 213, 214, 217, 218, 231, 260, 299, 316, 327, 360, 361, 362, 363, 364, 365, 367, 368, 374, 431, 493, 518], "later": [3, 9, 485], "launch": [1, 2, 132, 512, 515], "layer": [8, 153, 334, 353, 355, 356, 357, 367, 368, 373, 374, 379, 380, 382, 385, 386, 387, 403, 408, 411, 412, 414, 419, 430, 479, 483, 513, 516], "layer_s": 7, "layernorm": 353, "layout": 1, "lazi": [8, 483, 519], "lazili": [6, 353], "lceil": 96, "ld": [373, 379, 414], "lead": [0, 19, 87, 511], "leaf": [102, 334, 337, 338, 339, 340, 393], "leaf_modul": 353, "leaki": [381, 449], "leaky_relu": 353, "leakyrelu": 353, "learn": [5, 7, 8, 358, 374, 378, 380, 410, 413, 485, 486, 487, 488, 489, 490, 491, 492, 498, 499], "learnabl": [360, 361, 362, 363, 364, 365, 419], "learning_r": [7, 485, 486, 487, 488, 489, 490, 491, 492, 495, 498, 499, 500, 501, 502, 503, 504, 511], "least": [6, 89, 90, 91, 101, 202, 203, 205, 206, 207, 208, 209, 213, 214, 217, 218, 256], "leav": [2, 88, 145, 338, 339, 340], "lectur": 498, "lecun": 367, "left": [0, 6, 156, 199, 212, 256, 279, 371, 417, 431, 443, 444, 455, 457, 465], "left_shift": 0, "leibler": 458, "len": [6, 160, 164, 168, 171, 185, 502], "length": [6, 165, 303, 358, 360, 363, 373, 379, 414, 502], "leq": [457, 470], "less": [0, 1, 6, 29, 201, 252, 291, 333, 417, 464, 493, 512], "less_equ": 0, "let": [1, 2, 5, 6, 203, 511, 513, 514, 517, 518], "level": [0, 177, 178, 435, 436], "lh": [373, 379, 414], "lhs_indic": [0, 177, 178], "lhs_mask": 96, "lib": [2, 512], "libbla": 9, "liblapack": 9, "libmlx": 9, "libmlx_ext": 2, "libmpi": 512, "librari": [1, 2, 4, 9, 346, 353, 512, 513], "like": [2, 6, 8, 135, 149, 151, 188, 196, 249, 332, 368, 460, 495, 497, 511, 512, 513, 514, 516, 517, 518, 519, 521], "likelihood": [455, 463], "limit": [0, 2, 101, 287, 290, 291, 515], "linalg": 185, "line": [6, 512, 513, 516, 517, 518], "linear": [0, 2, 6, 7, 8, 215, 216, 334, 338, 353, 359, 369, 371, 372, 381, 396, 412, 414, 415, 416, 418, 420, 431, 440, 441, 442, 443, 444, 445, 449, 468, 469, 470, 472, 480, 483, 495, 502, 503, 511, 513], "linear1": 6, "linear2": 6, "linear3": 6, "linear_schedul": [485, 502], "linearli": 409, "link": [2, 4, 9], "linspac": 0, "lion": 485, "list": [1, 6, 11, 16, 18, 31, 75, 82, 87, 88, 89, 90, 91, 98, 102, 103, 110, 140, 145, 154, 159, 160, 161, 163, 164, 165, 167, 168, 170, 171, 176, 182, 197, 212, 230, 232, 234, 235, 240, 248, 251, 254, 259, 260, 261, 263, 264, 265, 267, 270, 271, 283, 298, 300, 304, 305, 309, 316, 317, 320, 325, 326, 328, 331, 337, 340, 341, 353, 394, 396, 397, 398, 399, 404, 406, 407, 408, 483, 485, 489, 490, 491, 492, 493, 502, 510, 511, 512, 513, 514, 516, 517], "listen": 512, "liter": [2, 251, 431, 435, 436, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "littl": 6, "liu": 6, "live": [8, 154, 521], "ll": [1, 5, 7, 457, 511, 514], "llama": 6, "llamaattent": 6, "llamaencoderlay": 6, "llm": 8, "load": [2, 7, 8, 346, 396, 512], "load_weight": [353, 517], "loader": 7, "loader_path": 2, "loan": 212, "loc": [1, 263, 265], "local": [353, 367, 512], "localhost": [512, 516], "locat": [0, 2, 4, 87, 296, 297, 407, 408, 512, 515, 521], "log": [0, 223, 225, 230, 383, 384, 450, 451, 452, 455, 458, 460, 463, 475], "log10": 0, "log1p": 0, "log2": 0, "log_cosh_loss": 353, "log_sigmoid": [353, 383], "log_softmax": [353, 384], "logaddexp": 0, "logarithm": [0, 221, 222, 223, 224], "logcosh": 460, "logcumsumexp": 0, "logic": [0, 2, 227, 228, 229, 512], "logical_and": 0, "logical_not": 0, "logical_or": 0, "logist": [0, 5, 292, 444, 472], "logit": [6, 260, 452, 454, 511], "logsigmoid": 353, "logsoftmax": 353, "logsumexp": [0, 226], "long": 6, "longer": [6, 114, 514], "look": [2, 6, 512], "lookup": 370, "loop": [6, 7, 511, 512, 514, 517], "loshchilov": 490, "loss": [5, 7, 325, 353, 485, 511, 512, 514, 517], "loss_and_grad": 353, "loss_and_grad_fn": [7, 485, 511, 514], "loss_fn": [5, 7, 485, 511, 514], "loss_grad_fn": 512, "lot": 514, "low": [267, 271, 439, 480], "low_pad_s": 0, "lower": [202, 203, 206, 208, 216, 218, 256, 267, 270, 271, 321, 439], "lr": [5, 492], "lr_schedul": [500, 501, 502, 503, 504], "lstm": 353, "lto": 2, "lu": [6, 211], "luckili": 517, "lvalu": 325, "m": [0, 2, 4, 6, 9, 96, 152, 177, 185, 212, 321, 486, 511], "m1": [1, 6, 511, 514, 521], "m10": 344, "m7": 344, "m_": [489, 490, 491, 492], "m_t": [489, 490, 491, 492], "mac": 512, "machin": [6, 8, 9, 498, 512], "maco": [9, 291], "macosx": 9, "made": [6, 346], "mai": [2, 4, 88, 149, 151, 177, 178, 188, 212, 334, 367, 512, 514, 515], "main": [4, 8, 127, 152, 154, 319, 338, 339, 353, 512], "maintain": [367, 368, 492], "major": [0, 2, 106], "make": [1, 2, 3, 4, 6, 7, 9, 106, 150, 151, 231, 246, 289, 353, 493, 500, 501, 503, 504, 511, 517, 519, 521], "make_shar": 2, "malloc": 2, "man": 6, "manag": [8, 307, 508, 512, 513, 521], "mani": [1, 2, 87, 300, 360, 361, 362, 363, 364, 365, 370, 411, 511, 512, 513, 517], "manual": [353, 512], "map": [2, 7, 39, 220, 338, 370, 389, 513], "map_fn": [389, 393], "map_torch_to_mlx": 6, "margin": [461, 465], "margin_ranking_loss": 353, "mask": [0, 6, 96, 157, 403, 409, 515], "mask_lh": [0, 96], "mask_n": 1, "mask_nw": 1, "mask_out": [0, 96], "mask_rh": [0, 96], "mask_s": 1, "mask_sw": 1, "matadata": 220, "match": [9, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 179, 396, 431, 454, 515, 518], "materi": [6, 8], "math": [6, 465, 511], "mathbf": 203, "mathcal": [265, 382], "mathemat": 212, "mathrm": [143, 292, 378], "matmul": [0, 177, 521], "matric": [212, 214, 217], "matrix": [0, 5, 15, 46, 96, 125, 126, 152, 177, 178, 185, 186, 202, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 217, 218, 231, 235, 256, 257, 264, 411, 412, 437, 480], "matter": [6, 353, 513], "matur": 512, "max": [0, 1, 2, 212, 233, 359, 385, 386, 387, 410, 440, 447, 448, 453, 455, 456, 461, 465, 467, 469, 487, 491, 511, 514, 521], "max_buffer_s": 236, "max_freq": 422, "max_i": 256, "max_norm": 336, "max_recommended_working_set_s": [236, 291], "max_val": 447, "maximum": [0, 7, 27, 39, 101, 117, 181, 290, 336, 353, 381, 385, 386, 387, 415, 422, 443, 444, 449, 468, 483, 517], "maxpool1d": 353, "maxpool2d": 353, "maxpool3d": 353, "maxtotalthreadsperthreadgroup": 2, "mca": [512, 516], "md": 212, "me": 6, "mean": [0, 1, 5, 6, 7, 155, 263, 264, 265, 325, 353, 358, 374, 394, 413, 438, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 511, 512, 514, 518], "meant": 121, "measur": 521, "mechan": 430, "medic": 368, "meet": 9, "member": [353, 399, 404], "memori": [0, 1, 2, 8, 87, 100, 179, 180, 181, 276, 287, 290, 291, 430, 483, 487, 511, 517, 518], "memory_order_relax": 1, "memory_s": [236, 291], "memoryview": [517, 518], "merg": 511, "meshgrid": 0, "metadata": [5, 220, 283, 284], "metal": [2, 4, 8, 154, 290], "metal_captur": 3, "metal_kernel": 1, "metal_path": 9, "metallib": [2, 9], "method": [2, 6, 10, 11, 31, 121, 129, 172, 334, 342, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 400, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 483, 486, 487, 488, 489, 490, 491, 492, 493, 495, 498, 499, 506], "millisecond": [9, 511, 521], "min": [0, 2, 212, 241, 359, 410, 440, 447, 448, 467, 469], "min_freq": 422, "min_i": 256, "min_val": 447, "mind": 6, "mine": 6, "minibatch": 7, "minim": [512, 516], "minimum": [0, 28, 39, 101, 118, 422, 452, 453], "minsizerel": 9, "minu": 148, "minut": 6, "mish": 353, "mismatch": 513, "miss": [396, 513, 520], "mix": 515, "mkdir": [3, 9], "ml": 9, "mlp": [7, 353, 430, 485], "mlp_dim": [6, 430], "mlx": [1, 3, 5, 6, 7, 9, 346, 353, 480, 483, 485, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521], "mlx_build_acceler": 4, "mlx_build_benchmark": 9, "mlx_build_cpu": 9, "mlx_build_cuda": 9, "mlx_build_exampl": 9, "mlx_build_gguf": 9, "mlx_build_met": [2, 4, 9], "mlx_build_metallib": 2, "mlx_build_python_bind": 9, "mlx_build_safetensor": 9, "mlx_build_test": 9, "mlx_cxx_flag": 4, "mlx_disable_compil": [128, 141, 511], "mlx_ext": 2, "mlx_ext_metallib": 2, "mlx_found": 4, "mlx_include_dir": [2, 4], "mlx_librari": 4, "mlx_metal_debug": [3, 9], "mlx_metal_jit": 9, "mlx_root": 4, "mlx_sample_extens": 2, "mlx_trace": 3, "mlxfn": [149, 151, 188, 513], "mnist": 7, "mode": [0, 1, 2, 114, 251, 392, 403, 405, 431, 435, 436], "model": [5, 7, 8, 285, 334, 335, 338, 339, 353, 389, 392, 394, 396, 400, 403, 405, 406, 407, 409, 430, 480, 483, 485, 494, 495, 497, 511, 512, 513, 517], "modest": 2, "modif": 518, "modifi": 518, "modul": [2, 4, 6, 7, 334, 335, 419, 430, 480, 497, 510, 511, 517], "moment": [6, 487, 491, 512], "momentum": [358, 492, 495, 499, 511], "monei": 6, "monitor": 516, "monoton": 466, "moor": 213, "more": [1, 2, 3, 4, 7, 11, 82, 127, 149, 177, 202, 203, 205, 206, 207, 208, 209, 210, 213, 217, 218, 231, 283, 284, 287, 290, 344, 353, 358, 367, 417, 422, 430, 431, 433, 434, 435, 436, 452, 508, 511, 512, 514, 515, 519, 521], "moreov": 516, "most": [2, 157, 260, 324, 353, 497, 511, 512, 514, 515, 517], "move": [0, 2, 242, 521], "moveaxi": 0, "mpi": [132, 346], "mpirun": [512, 516], "mse": 325, "mse_loss": 353, "mtl": 2, "mtl_capture_en": 3, "mtlcommandbuff": 2, "mu": 499, "much": [1, 2, 6, 355, 356, 357, 385, 386, 387, 511, 517], "multi": [8, 157, 360, 361, 362, 363, 364, 365, 513, 515, 518], "multidimension": 235, "multiheadattent": [6, 353], "multioptim": 485, "multipl": [0, 1, 9, 15, 96, 151, 153, 155, 177, 178, 231, 243, 256, 257, 409, 422, 501, 502, 504, 511, 517, 520], "multipli": [0, 2, 39, 178, 256, 257, 366, 422, 431], "murtadha": 6, "must": [0, 1, 2, 3, 9, 96, 101, 149, 156, 157, 176, 178, 206, 208, 212, 259, 260, 264, 267, 270, 271, 330, 431, 518], "mx": [1, 2, 3, 4, 5, 6, 7, 39, 88, 104, 105, 121, 132, 135, 149, 150, 151, 154, 173, 188, 196, 198, 205, 206, 207, 208, 210, 212, 214, 220, 266, 285, 296, 297, 324, 325, 336, 353, 355, 356, 357, 358, 369, 378, 381, 385, 386, 387, 389, 396, 400, 415, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 449, 452, 453, 454, 458, 461, 468, 478, 480, 483, 485, 508, 511, 512, 513, 514, 515, 517, 518, 519, 520, 521, 522], "my": [6, 9], "my_devic": 522, "my_path": 285, "my_script": [512, 516], "myexp": [1, 154], "myexp_strid": 1, "mymlp": 483, "n": [0, 1, 2, 6, 31, 96, 107, 108, 109, 110, 111, 112, 113, 152, 157, 158, 160, 162, 164, 166, 169, 171, 185, 186, 264, 265, 305, 321, 326, 358, 360, 361, 362, 363, 364, 365, 367, 368, 373, 379, 414, 431, 460, 465, 512, 516], "n_kv": 157, "n_q": 157, "n_t": 373, "naiv": [2, 514], "naive_add": 514, "name": [1, 2, 121, 150, 154, 178, 220, 256, 257, 283, 284, 285, 286, 353, 374, 393, 396, 398, 512, 515, 520], "named_modul": 353, "namespac": 4, "nan": [0, 17, 86, 190, 191, 193, 244], "nan_to_num": 0, "nanobind": 2, "nanobind_add_modul": 2, "nativ": [9, 512], "natur": [0, 221, 223, 517], "nb": 2, "nb_domain": 2, "nb_modul": 2, "nb_static": 2, "nbyte": 2, "nc": 358, "ndarrai": [31, 515, 517, 519], "ndhwc": [362, 365, 368], "ndim": [0, 1, 2, 173, 212, 217, 431], "ne": 1, "nearest": [1, 431], "necessari": [106, 353], "necessarili": [207, 318], "need": [1, 2, 4, 6, 7, 8, 9, 86, 256, 353, 407, 408, 422, 430, 508, 512, 514, 516, 517, 518, 519, 521], "neg": [0, 127, 173, 194, 244, 279, 319, 381, 385, 386, 387, 409, 455, 463, 465, 515], "negat": [0, 245], "negative_slop": [381, 449], "neginf": [0, 244], "neighbor": [431, 516], "neither": [182, 325], "nelem": 2, "nervou": 6, "nest": [82, 102, 340, 353, 483, 510, 514], "nesterov": 499, "network": [6, 8, 333, 358, 367, 370, 433, 434, 480, 483, 498, 512], "neural": [6, 8, 370, 433, 434, 466, 480, 483, 498], "never": [6, 517], "new": [0, 1, 2, 7, 98, 127, 242, 246, 277, 304, 320, 327, 338, 339, 401, 409, 483, 485, 497, 502, 511, 513, 515, 517, 518], "new_tre": 339, "next": [2, 4, 6, 7, 287, 513], "nh": [373, 379, 414], "nhwc": [358, 361, 364], "nice": [514, 517], "nlc": [358, 360, 363], "nld": [373, 379, 414], "nlh": [373, 379, 414], "nll": [455, 463], "nll_loss": 353, "nn": [2, 6, 7, 285, 338, 353, 480, 483, 485, 495, 497, 511, 513, 517], "nobodi": 6, "node": [88, 102, 145, 329, 339, 340, 512, 516], "nois": 5, "noisi": 5, "nomins": 2, "non": [0, 1, 2, 4, 9, 235, 404, 414, 466, 483], "nondeterminist": 515, "none": [1, 2, 6, 10, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 128, 130, 131, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 284, 285, 288, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 329, 330, 331, 332, 333, 334, 337, 338, 339, 340, 355, 356, 357, 371, 385, 386, 387, 389, 393, 394, 401, 406, 409, 414, 422, 430, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 487, 506, 513, 515], "nonlinear": [414, 511], "nonzero": 515, "noop": [406, 512], "nor": [2, 182, 325], "norm": [6, 155, 336, 374, 465, 491, 492], "norm1": 6, "norm2": 6, "norm_first": 430, "normal": [1, 2, 5, 6, 153, 154, 155, 205, 206, 264, 270, 353, 355, 356, 357, 358, 374, 378, 380, 385, 386, 387, 413, 430, 433, 435, 518, 521], "not_equ": 0, "notabl": [6, 8], "notat": [125, 337, 398], "note": [0, 1, 2, 4, 6, 9, 17, 19, 87, 96, 102, 109, 112, 113, 121, 157, 167, 168, 178, 179, 190, 210, 212, 256, 260, 327, 334, 353, 413, 431, 485, 515, 518, 520], "noth": [6, 121, 353, 517], "notic": [6, 513, 514, 520], "now": [1, 2, 6, 9, 412, 511, 518], "np": [1, 6, 7, 512, 518, 519], "npy": [220, 282, 520], "npz": [6, 220, 285, 286, 396, 400, 520], "nuc": 212, "nuclear": 212, "nuisanc": 512, "nullopt": 0, "num": [0, 6, 219, 269], "num_class": [7, 485], "num_decoder_lay": 430, "num_embed": [370, 411], "num_encoder_lay": 430, "num_epoch": [7, 485], "num_exampl": 5, "num_featur": [5, 358], "num_group": 374, "num_head": [6, 409, 430], "num_it": 5, "num_lay": [6, 7, 485], "num_param": 353, "num_paramet": 410, "num_sampl": 260, "num_split": 0, "number": [0, 2, 12, 19, 64, 74, 102, 108, 109, 110, 112, 113, 125, 150, 152, 157, 178, 182, 186, 197, 219, 244, 251, 256, 257, 260, 263, 265, 269, 271, 275, 279, 280, 316, 317, 321, 325, 328, 329, 333, 334, 353, 358, 360, 361, 362, 363, 364, 365, 367, 368, 374, 378, 409, 410, 430, 431, 433, 434, 435, 436, 500, 502, 503, 508, 511, 514, 516, 522], "number_of_el": 0, "numer": [6, 153, 155, 212, 225, 230, 298, 358, 374, 378, 380, 413, 452, 453, 455, 465, 486, 487, 488, 489, 490, 491, 498, 511, 517], "numpi": [2, 6, 7, 8, 14, 17, 19, 92, 94, 95, 97, 98, 137, 138, 142, 183, 184, 190, 199, 200, 201, 205, 207, 225, 231, 233, 241, 243, 247, 253, 274, 278, 308, 517, 519, 520], "nvidia": 9, "nw": 1, "nwhc": 367, "o": [2, 9, 157, 379], "o_t": 379, "obj": 283, "object": [3, 11, 31, 52, 82, 102, 150, 151, 154, 196, 285, 329, 337, 338, 339, 340, 344, 367, 430, 510, 516], "observ": 6, "occupi": [125, 178, 256, 257], "occur": 518, "odd": 165, "odim": 7, "odot": [373, 379], "off": [6, 9, 517], "offer": 460, "offset": [0, 1, 2, 6, 47, 87, 127, 153, 156, 319], "often": 368, "ok": [396, 511, 513, 514], "okai": [511, 517], "old": 6, "older": [149, 151, 188], "omit": [491, 512], "onc": [1, 2, 9, 511, 513], "one": [0, 2, 4, 6, 9, 39, 82, 89, 97, 101, 108, 109, 110, 112, 113, 132, 147, 149, 152, 153, 155, 156, 177, 212, 223, 231, 257, 260, 303, 308, 324, 333, 344, 363, 364, 365, 406, 431, 454, 493, 512, 513, 516, 521], "ones": [0, 2, 6, 249, 285, 297, 321, 407, 408, 485, 512, 515], "ones_lik": 0, "onli": [1, 2, 6, 8, 9, 86, 96, 108, 109, 110, 112, 113, 121, 177, 206, 208, 212, 217, 256, 264, 291, 327, 344, 353, 393, 394, 396, 401, 403, 406, 407, 408, 483, 511, 512, 513, 514, 516, 520, 521], "onlin": 488, "op": [1, 2, 250, 327, 394, 517], "open": [3, 9, 19, 267, 271, 512], "openmpi": 512, "oper": [3, 6, 8, 10, 38, 89, 90, 91, 110, 157, 177, 178, 253, 255, 298, 306, 313, 342, 344, 353, 430, 492, 511, 512, 514, 515, 517, 518, 519, 521, 522], "operand": [139, 140, 177], "opportun": 511, "opt": [494, 512], "optim": [1, 3, 5, 7, 8, 407, 511, 512, 514, 517], "option": [0, 3, 6, 15, 16, 18, 19, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 87, 89, 90, 91, 96, 102, 103, 107, 108, 109, 110, 111, 112, 113, 114, 117, 118, 119, 120, 121, 125, 126, 127, 130, 131, 132, 134, 135, 136, 149, 151, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 176, 177, 178, 182, 186, 194, 195, 198, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 226, 230, 232, 234, 235, 240, 244, 248, 251, 252, 254, 256, 257, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 275, 277, 279, 298, 299, 300, 303, 304, 305, 309, 311, 312, 316, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 331, 333, 334, 337, 338, 339, 340, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 373, 379, 382, 385, 386, 387, 389, 393, 394, 396, 401, 406, 409, 411, 412, 414, 417, 422, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 486, 487, 488, 489, 490, 491, 492, 495, 498, 499, 500, 508, 511, 513, 520, 522], "ord": 212, "order": [0, 1, 29, 87, 110, 140, 206, 207, 208, 212, 252, 256, 318, 353, 374, 407, 419, 495, 511, 514, 516], "ordinari": 189, "org": [374, 378, 380, 388, 413, 444, 466], "origin": [6, 127, 336, 358, 402, 433, 434, 435, 436, 486, 487, 488, 491, 492, 513, 518], "orthonorm": 185, "ostream": 2, "ostringstream": 2, "other": [0, 2, 6, 8, 196, 212, 353, 395, 483, 492, 511, 512, 513, 515, 516, 517, 519], "other_input": 353, "otherwis": [19, 110, 132, 266, 334, 337, 338, 339, 340, 394, 396, 406, 428, 430, 431, 446, 452, 457, 464, 476, 477, 517, 518], "our": [1, 2, 6, 7, 419, 486, 487, 488, 491, 492, 512], "out": [0, 1, 2, 9, 96, 154, 188, 367, 368, 403, 511, 512, 513, 514, 515], "out_ax": [329, 514], "out_channel": [360, 361, 362, 363, 364, 365], "out_dim": [353, 483], "out_dtyp": 2, "out_idx": 2, "out_mask": 96, "out_proj": [6, 483], "out_ptr": 2, "out_shap": [1, 2], "outer": [0, 511, 517], "outlier": 460, "output": [0, 1, 2, 6, 9, 16, 17, 18, 19, 29, 87, 96, 97, 98, 102, 104, 105, 106, 111, 112, 113, 117, 118, 119, 120, 121, 139, 150, 152, 153, 154, 155, 156, 157, 166, 169, 170, 171, 176, 177, 182, 185, 186, 190, 212, 219, 226, 230, 232, 234, 235, 240, 244, 248, 249, 252, 254, 255, 259, 260, 261, 263, 264, 265, 267, 270, 271, 285, 286, 296, 297, 298, 303, 305, 309, 313, 319, 321, 325, 326, 327, 328, 329, 330, 331, 332, 358, 360, 361, 362, 363, 364, 365, 378, 382, 409, 412, 428, 430, 431, 433, 434, 435, 436, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 477, 480, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521], "output_dim": [7, 353, 382, 412], "output_directori": 2, "output_dtyp": [1, 154], "output_fil": 6, "output_nam": [1, 154], "output_pad": [0, 111, 112, 113, 363, 364, 365], "output_shap": [1, 154], "output_strip_trailing_whitespac": 4, "output_vari": 4, "outsid": [154, 173], "over": [0, 2, 6, 7, 16, 18, 27, 28, 29, 30, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 120, 160, 161, 164, 165, 168, 171, 189, 212, 217, 219, 226, 230, 232, 234, 240, 252, 254, 281, 298, 299, 305, 309, 316, 318, 326, 358, 360, 361, 362, 363, 364, 365, 374, 380, 413, 454, 500, 503, 512, 514, 516], "overal": 2, "overhead": [1, 511, 517, 521], "overlap": 1, "overload": 19, "overrid": [2, 141], "overview": 3, "overwrit": 6, "own": [9, 512, 518], "owndata": 518, "p": [9, 210, 259, 353, 366, 367, 368, 465, 489, 491], "pack": [178, 256, 257], "packag": [2, 5, 7, 9, 346, 480, 512, 516], "package_data": 2, "pad": [0, 1, 107, 108, 109, 110, 111, 112, 113, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 355, 356, 357, 360, 361, 362, 363, 364, 365, 385, 386, 387], "pad_valu": 0, "pad_width": [0, 251], "padding_hi": 0, "padding_lo": 0, "page": [512, 519], "pain": 6, "pair": [0, 2, 251, 396, 417], "pairwis": 465, "pan": 6, "paper": [358, 422, 486, 487, 488, 491, 492], "parallel": [512, 521], "param": [325, 334, 353, 480, 513, 514], "paramet": [0, 1, 2, 5, 6, 7, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 378, 379, 380, 381, 382, 385, 386, 387, 389, 390, 393, 394, 396, 401, 402, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 417, 419, 422, 426, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 445, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 477, 479, 480, 483, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 499, 500, 501, 502, 503, 504, 506, 511, 512, 513, 514, 517], "parameter_scal": 487, "parametr": [410, 467], "pars": [6, 150], "parse_arg": 6, "parser": 6, "part": [1, 2, 51, 67, 149, 151, 187, 188, 272, 514, 515], "parti": 512, "partial": [407, 408, 511, 517], "particip": [130, 131, 134, 135, 136], "particular": [256, 374], "particularli": 511, "partit": [0, 29], "pass": [1, 2, 6, 7, 9, 69, 83, 177, 178, 250, 251, 325, 333, 335, 337, 338, 339, 353, 394, 406, 407, 408, 419, 511, 512, 513, 516, 517], "password": [512, 516], "path": [3, 4, 9, 140, 149, 150, 151, 188, 238, 285, 286, 334, 339, 396, 493, 512, 516], "pattern": [353, 517], "peak": [181, 276], "penalti": 499, "penros": 213, "pep": 518, "per": [6, 7, 125, 157, 178, 256, 257, 333, 334, 358, 374, 378, 380, 413, 506, 511, 512, 516, 517], "perceptron": [8, 513], "perf_count": 511, "perfectli": 517, "perform": [0, 1, 2, 3, 6, 8, 15, 96, 110, 117, 118, 119, 120, 136, 139, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 177, 178, 185, 206, 208, 226, 231, 257, 280, 298, 312, 333, 353, 374, 430, 435, 436, 485, 511, 512, 515, 517, 521], "perhap": [2, 6], "perm": 7, "permtuat": 266, "permuat": 210, "permut": [0, 7], "persist": 9, "pg": 212, "phi": [371, 442], "physic": 512, "pi": [143, 371, 422, 443, 514], "pick": 2, "pip": [2, 4, 9], "pipelin": 2, "pivot": [210, 211], "pixel": 367, "place": [6, 39, 279, 280, 334, 512, 517, 518], "placehold": 511, "plai": [2, 6], "plain": 419, "plan": [2, 511], "platform": 9, "plot": 512, "plu": [0, 223], "png": 512, "point": [0, 2, 5, 6, 9, 87, 172, 175, 257, 344], "pool": [355, 356, 357, 385, 386, 387, 521], "popul": 2, "port": 516, "portion": 366, "posinf": [0, 244], "posit": [0, 6, 29, 127, 156, 173, 182, 195, 202, 203, 242, 244, 252, 264, 279, 319, 325, 338, 353, 360, 361, 362, 363, 364, 365, 409, 417, 422, 455, 465, 513], "possibl": [132, 177, 300, 370, 411, 511, 512, 515, 521], "possibli": [1, 6, 15, 96, 177, 231, 336], "postur": 6, "power": [0, 514, 518], "practic": [2, 511], "pre": [9, 157, 452], "preced": 374, "precis": [0, 6, 148, 157, 353, 371, 413, 452, 494, 511], "preclud": 353, "pred": [456, 460], "predic": [334, 401, 493], "predict": [452, 455, 456, 457, 458, 459, 460, 462, 463, 464], "prefix": [329, 337, 339], "prelu": 353, "prepar": [2, 6, 512], "prepend": [3, 231], "preprint": [6, 486, 492], "preprocessor": 9, "present": 1, "preserv": [277, 514], "press": [6, 212], "pretti": [511, 517], "prevent": [306, 465, 518], "previou": [287, 290, 291], "primal": [1, 2, 121, 197, 328], "primit": 514, "print": [1, 2, 5, 6, 7, 9, 88, 121, 198, 336, 337, 338, 339, 341, 353, 508, 511, 512, 513, 514, 515, 516, 517, 518, 519], "prior": [255, 312, 313], "priorit": 514, "privat": [2, 4], "prng": [259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 508], "prob": 452, "probabl": [9, 267, 366, 367, 368, 412, 452, 454, 458, 521], "problem": [5, 7, 353], "process": [6, 110, 114, 129, 130, 131, 132, 134, 135, 136, 333, 338, 339, 368, 370, 430, 510, 512, 516], "processor": 9, "prod": [0, 1], "produc": [0, 2, 9, 102, 409, 480, 513], "product": [0, 2, 15, 87, 119, 189, 197, 198, 204, 231, 250, 254, 316, 328, 409, 519], "profil": 3, "program": [4, 181], "programmat": 408, "project": [3, 4, 6, 409, 513], "project_source_dir": 2, "promot": [2, 157], "promote_typ": 2, "promoted_dtyp": 2, "prompt": 6, "propag": [514, 515], "properti": [32, 39, 48, 51, 53, 64, 65, 67, 72, 74, 402, 405, 496, 512, 514], "proportion": 336, "protocol": 518, "provid": [0, 2, 6, 87, 125, 149, 150, 182, 265, 266, 279, 316, 325, 333, 338, 340, 346, 353, 389, 394, 396, 406, 407, 408, 411, 412, 430, 431, 479, 483, 493, 512, 513, 520, 522], "pseudo": [213, 508], "pth": 6, "public": [2, 353], "pun": 0, "pure": [1, 121, 353, 485], "purpos": [1, 212, 512], "purs": 6, "push": 2, "push_back": 2, "put": [0, 1, 7, 255, 511, 512], "put_along_axi": [0, 210], "py": [2, 6, 9, 512, 516], "pypi": 9, "python": [1, 3, 4, 6, 52, 72, 82, 88, 145, 333, 337, 338, 339, 340, 341, 483, 494, 495, 497, 510, 512, 513, 514, 516, 518], "python_execut": 4, "python_requir": 2, "pytorch": [6, 8, 371, 374, 514], "pytorch_compat": 374, "q": [157, 214], "quantiz": [0, 125, 178, 220, 257, 411, 412], "quantized_matmul": 0, "quantizedembed": 353, "quantizedlinear": 353, "quarter": 6, "queri": [6, 157, 291, 409], "query_input_dim": 409, "query_proj": 6, "question": [6, 517], "queue": 3, "quick": [2, 8], "quit": [514, 518], "quotient": [0, 137, 138, 175], "r": [2, 6, 214, 325, 367, 373], "r_t": 373, "race": 521, "radian": [0, 124], "rag": 6, "rain": 6, "rais": [0, 6, 121, 212, 253, 300, 396, 513], "ram": [6, 290], "random": [1, 2, 3, 5, 6, 7, 8, 154, 355, 356, 357, 358, 378, 385, 386, 387, 396, 403, 511, 513, 514, 521, 522], "randomli": [5, 6, 266, 366, 367, 368], "rang": [0, 2, 3, 5, 6, 7, 9, 19, 173, 177, 219, 434, 436, 443, 444, 485, 500, 501, 502, 503, 504, 508, 511, 514, 517, 521], "rank": [0, 134, 135, 136, 461, 512, 516], "rate": [5, 485, 486, 487, 488, 489, 490, 491, 492, 498, 499], "rather": [2, 514, 521], "ratio": [0, 25], "rceil": 96, "re": [7, 9, 265, 480], "reachabl": 512, "readabl": 3, "real": [0, 166, 167, 168, 169, 170, 171, 202, 203, 205, 206, 207, 208, 265], "realli": 380, "reason": [1, 6, 515], "reboot": 9, "receiv": [134, 135, 334, 502, 512, 518], "reciproc": [0, 281], "reclaim": 287, "recommend": [9, 290, 492], "recompil": [102, 511], "reconstruct": 210, "record": [3, 181, 517], "recreat": [341, 485], "rectifi": [381, 415, 416, 435, 436, 449, 468, 469], "recurr": [373, 379, 414], "recurs": [150, 353, 393, 394, 399, 404, 406, 483], "recv": [135, 512], "reduc": [0, 1, 9, 16, 18, 27, 28, 131, 230, 232, 234, 240, 254, 305, 309, 326, 333, 340, 358, 430, 460], "reduct": [16, 18, 131, 230, 232, 240, 254, 340, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465], "redund": 514, "refer": [212, 378, 388, 402, 433, 434, 435, 436, 444, 466, 515], "reflect": [402, 511, 515, 518], "regard": 371, "regardless": [87, 157, 512], "regist": [2, 7], "regress": [8, 460], "regular": [39, 367, 466, 490, 511, 513, 515], "regularli": 2, "reimplement": 2, "rel": [17, 190, 487, 511, 512], "relative_step": 487, "releas": 4, "relev": 2, "reli": [1, 2], "relu": [353, 410, 430, 467, 480], "relu6": 353, "remain": [0, 6, 291, 325, 339, 366, 367, 368, 512], "remaind": [0, 138], "remov": [0, 127, 231, 260, 303, 454], "rep": [0, 317], "repeat": [0, 317], "repeatedli": 5, "repetit": 275, "replac": [0, 6, 244, 407, 408, 430, 464], "replai": 3, "repli": 6, "repo": [5, 7, 9, 511], "report": [179, 290], "repres": [2, 6, 129, 132, 178, 461, 465, 518], "represent": [6, 211, 256, 327, 337, 341], "requir": [1, 2, 4, 6, 353, 512, 516, 517, 518], "requires_grad": 514, "rerun": [511, 517], "rescal": 336, "research": 8, "reset": 276, "reset_peak_memori": 181, "reshap": [0, 6, 212, 431, 511, 515], "resid": 291, "resolv": 2, "resourc": 2, "resource_limit": 236, "respect": [2, 5, 7, 121, 153, 155, 177, 178, 182, 256, 325, 338, 353, 358, 371, 374, 378, 380, 483, 512, 514, 516, 519], "respons": 2, "rest": [6, 156, 338, 339, 417, 516], "restart": 9, "restor": 279, "result": [0, 6, 15, 19, 39, 82, 87, 102, 150, 153, 155, 178, 198, 212, 231, 257, 264, 275, 290, 304, 338, 339, 340, 344, 422, 452, 511, 512, 514, 518], "resum": 6, "return": [0, 1, 2, 4, 5, 6, 7, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 52, 72, 82, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 124, 125, 126, 127, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 281, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 353, 373, 379, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 403, 404, 406, 407, 408, 414, 432, 433, 434, 435, 436, 437, 438, 439, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 480, 483, 493, 494, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521], "return_metadata": 220, "revers": [0, 2, 42, 43, 44, 45, 58, 87, 117, 118, 119, 120, 226, 320, 422], "rf": 9, "rfft": 166, "rfft2": 167, "rfftn": 168, "rho": 486, "rhs_indic": [0, 177, 178], "rhs_mask": 96, "right": [0, 1, 2, 9, 205, 256, 278, 279, 371, 431, 443, 444, 455, 457, 465], "right_shift": 0, "ring": 132, "rm": [6, 9, 155, 487], "rmsnorm": [6, 353], "rmsprop": 485, "rnn": [353, 373], "robust": 460, "roform": [6, 417], "roll": 0, "root": [0, 6, 155, 281, 301, 413], "rope": [6, 353], "rosetta": 9, "rotari": [6, 156, 417], "rotat": [156, 417], "round": [0, 256], "row": [0, 1, 2, 87, 106, 152, 154, 186, 256, 321], "rpath": 2, "rsqrt": 0, "rtol": [0, 17, 190], "rule": [2, 485], "run": [1, 2, 3, 4, 6, 7, 8, 9, 10, 154, 250, 342, 358, 389, 486, 487, 489, 490, 491, 511, 513, 516, 517, 521, 522], "runtim": [6, 132, 346, 511, 512], "runtime_error": 2, "safetensor": [9, 220, 284, 396, 400, 485, 517, 520], "sai": [2, 6, 480, 517], "said": 6, "sake": 514, "same": [0, 2, 6, 9, 17, 39, 86, 97, 98, 102, 108, 109, 110, 112, 113, 114, 130, 153, 155, 161, 165, 166, 169, 170, 171, 178, 182, 190, 197, 251, 260, 279, 280, 297, 327, 328, 330, 333, 339, 353, 356, 357, 358, 366, 374, 378, 386, 387, 411, 432, 433, 434, 435, 436, 437, 438, 439, 454, 465, 483, 494, 508, 511, 512, 513, 515, 516, 521], "sampl": [2, 5, 6, 219, 259, 260, 261, 263, 264, 267, 270, 271, 433, 434, 435, 436, 438, 439, 455, 461, 465, 508, 511, 513], "sat": 6, "save": [3, 6, 8, 220, 238, 256, 283, 284, 285, 286, 400, 513, 517], "save_gguf": 520, "save_safetensor": [400, 485, 520], "save_weight": 353, "savez": [6, 400, 520], "savez_compress": 520, "saw": [6, 514], "scalar": [0, 2, 14, 15, 17, 31, 52, 82, 86, 92, 93, 94, 95, 96, 98, 101, 137, 138, 142, 175, 176, 182, 183, 184, 185, 190, 199, 200, 201, 219, 225, 227, 228, 229, 231, 233, 241, 243, 244, 247, 251, 253, 259, 265, 267, 270, 271, 274, 278, 283, 308, 325, 327, 330, 335, 465, 513, 514, 517, 519], "scale": [0, 2, 6, 15, 125, 153, 155, 156, 157, 178, 185, 256, 257, 263, 265, 336, 367, 368, 380, 409, 417, 418, 422, 431, 470, 487], "scale_arr": 2, "scale_factor": 431, "scale_paramet": 487, "scatter": 0, "scatter_add": 0, "scatter_add_axi": 0, "scatter_max": 0, "scatter_min": 0, "scatter_prod": 0, "schedul": [2, 485, 500, 501, 502, 503, 504, 506, 521], "schema": [3, 516], "scipi": [185, 210], "scope": 353, "score": [6, 157, 461], "script": [512, 516], "sdk": 9, "se": 1, "second": [6, 9, 127, 196, 198, 199, 227, 229, 231, 278, 310, 319, 325, 356, 357, 386, 387, 453, 461, 487, 491, 511, 513, 514, 521], "second_layer_a": 517, "second_layer_b": 517, "secret": 6, "section": [1, 6, 9, 300, 465, 511, 512, 514], "see": [1, 2, 4, 6, 7, 9, 11, 12, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 47, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 212, 283, 284, 287, 334, 344, 353, 358, 359, 367, 369, 371, 375, 376, 377, 383, 384, 392, 410, 411, 412, 415, 416, 417, 418, 420, 422, 423, 424, 425, 426, 427, 429, 431, 433, 434, 435, 436, 442, 443, 444, 470, 511, 512, 513, 514, 515, 516, 519, 521], "seed": 262, "seen": [512, 518], "select": [0, 3, 9, 206, 208, 318, 330, 389, 393, 401, 516], "self": [6, 7, 10, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 52, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 121, 172, 353, 466, 483], "selu": 353, "semant": [14, 92, 94, 95, 97, 98, 137, 138, 142, 183, 184, 199, 200, 201, 225, 231, 233, 241, 243, 247, 253, 274, 278, 308, 521], "semi": [202, 203, 264], "send": 512, "sender": 512, "sennrich": 6, "sensit": 460, "sentencepiec": 6, "separ": [6, 69, 83, 374, 461], "sequenc": [6, 16, 18, 34, 35, 59, 60, 61, 62, 66, 75, 78, 79, 80, 84, 87, 98, 110, 134, 147, 154, 159, 160, 161, 163, 164, 165, 167, 168, 170, 171, 176, 182, 230, 232, 234, 240, 248, 254, 259, 260, 261, 263, 264, 265, 267, 270, 271, 277, 296, 297, 298, 300, 303, 305, 309, 316, 317, 320, 324, 325, 326, 331, 358, 360, 363, 373, 379, 414, 430, 508, 521], "sequenti": [353, 480], "seri": 9, "serial": 485, "set": [2, 4, 6, 7, 9, 102, 121, 128, 130, 131, 132, 134, 135, 136, 141, 153, 155, 156, 236, 287, 288, 289, 290, 291, 307, 333, 371, 380, 382, 392, 394, 401, 402, 403, 406, 407, 412, 417, 428, 453, 465, 477, 483, 485, 487, 489, 490, 495, 508, 513, 514, 517], "set_byt": 2, "set_compute_pipeline_st": 2, "set_data": 2, "set_dtyp": 353, "set_input_arrai": 2, "set_memory_limit": 287, "set_output_arrai": 2, "set_vector_byt": 2, "setup": [2, 4, 5, 7, 9, 511, 512, 513], "sever": [6, 9, 107, 108, 109, 110, 111, 112, 113, 285, 286, 333, 511, 512, 516, 520], "sgd": [5, 7, 485, 492, 495, 500, 501, 504, 511], "shade": [1, 2], "shall": 6, "shape": [0, 2, 3, 6, 7, 69, 86, 87, 96, 97, 98, 102, 107, 108, 109, 110, 111, 112, 113, 127, 130, 134, 135, 149, 151, 154, 157, 158, 161, 162, 165, 166, 169, 170, 171, 176, 177, 185, 197, 209, 218, 231, 248, 249, 259, 260, 261, 263, 264, 265, 267, 270, 271, 277, 279, 297, 324, 327, 328, 330, 331, 332, 353, 355, 356, 357, 358, 360, 361, 362, 363, 364, 365, 367, 368, 373, 378, 379, 382, 385, 386, 387, 396, 414, 432, 433, 434, 435, 436, 437, 438, 439, 454, 465, 485, 511, 513, 514, 515, 519, 521], "shapeless": [0, 102, 149, 151], "share": [8, 125, 178, 256, 257, 327, 512], "shazeer": 6, "shift": [0, 161, 165, 199, 278, 279, 358], "shop": 6, "should": [1, 2, 4, 5, 6, 7, 9, 87, 100, 127, 130, 153, 154, 155, 157, 197, 238, 255, 256, 291, 313, 319, 325, 328, 333, 334, 337, 353, 360, 361, 362, 363, 364, 365, 367, 368, 403, 409, 419, 454, 456, 461, 483, 493, 510, 511, 512, 513, 514, 517, 518, 522], "show": [9, 344, 511], "shown": 2, "shuffl": 7, "side": [0, 251, 355, 356, 357, 363, 364, 365, 385, 386, 387, 511], "sigma": [371, 372, 373, 379, 421, 433, 434, 435, 436, 444, 445, 450, 471, 472], "sigmoid": [0, 6, 353, 383, 420, 444, 450, 452, 472], "sign": [0, 17, 190, 344, 492], "signal": [114, 431], "signatur": [1, 154], "signedinteg": [12, 196], "signific": 256, "significantli": 512, "silent": [169, 170, 171], "silicon": [2, 6, 8, 9, 521], "silu": 353, "sim": 265, "simd": 1, "simd_sum": 1, "simdgroup": 1, "simdgroup_s": 1, "similar": [6, 178, 196, 338, 407, 408, 409, 453, 512, 518, 520], "similarli": [2, 9, 231, 514, 517], "simpl": [2, 6, 7, 353, 370, 479, 485, 511, 512, 513, 514, 516, 517], "simple_axpbi": 2, "simple_tim": 2, "simplest": [2, 353, 512], "simpli": [2, 6, 9, 369, 381, 415, 441, 449, 468, 478, 483, 511, 512, 514, 516], "simplic": 0, "simplifi": 512, "simultan": 1, "sin": [0, 121, 422, 513, 514, 519], "sinc": [1, 2, 6, 7, 178, 181, 483, 492, 502, 511, 513, 518, 521], "sine": [0, 22, 23, 294, 295, 513, 514], "sing": 212, "singer": 488, "singl": [7, 88, 145, 197, 220, 235, 251, 328, 356, 357, 386, 387, 511, 513, 515, 520], "singleton": [0, 16, 18, 27, 28, 132, 230, 231, 232, 234, 240, 254, 305, 309, 326, 512], "singular": [212, 213, 217], "sinh": 0, "sinusoid": 422, "sinusoidalpositionalencod": 353, "size": [0, 1, 2, 6, 7, 53, 72, 96, 108, 109, 112, 113, 125, 147, 153, 154, 155, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 176, 178, 180, 185, 186, 196, 204, 212, 256, 257, 260, 277, 290, 291, 296, 300, 303, 324, 327, 333, 334, 353, 355, 356, 357, 360, 361, 362, 363, 364, 365, 370, 378, 385, 386, 387, 411, 412, 431, 487, 512, 517, 518], "size_in_megabyt": 291, "size_t": [0, 2], "skip": [3, 87], "slice": [0, 297, 515], "slice_s": [0, 296], "slice_upd": 0, "slide": [355, 356, 357, 385, 386, 387], "slight": [6, 517], "slightli": [417, 521], "slope": 381, "slow": 511, "slowli": 6, "sm": 9, "small": [6, 148, 153, 155, 333, 358, 374, 380, 413, 455, 460, 465, 511, 521], "smaller": [0, 9, 252, 333, 492, 511], "smallest": 212, "smile": 6, "smooth": [454, 464, 498], "smooth_l1_loss": 353, "sned": 136, "snippet": 512, "so": [1, 2, 6, 9, 182, 185, 325, 366, 431, 485, 511, 512, 517, 521], "socket": 512, "softmax": [0, 6, 157, 353, 384, 451, 454], "softmin": 353, "softplu": [353, 388, 466], "softshrink": 353, "softsign": 353, "solut": [215, 216], "solv": 353, "some": [0, 2, 5, 6, 7, 150, 394, 406, 485, 495, 511, 512, 513, 514, 516, 517], "someon": 6, "someth": [5, 6, 515], "sometim": 511, "sonoma": 9, "soon": 6, "sort": [0, 29, 30, 177, 178, 252, 318], "sorted_indic": [0, 177, 178], "sourc": [0, 1, 2, 3, 4, 63, 134, 135, 154, 242, 320, 512], "space": [0, 2, 219, 452, 463], "spars": [0, 235], "spatial": [108, 109, 110, 112, 113, 355, 356, 357, 374, 385, 386, 387, 431], "speak": [6, 212], "specif": [1, 2, 9, 512, 514], "specifi": [0, 2, 19, 38, 108, 109, 110, 112, 113, 127, 167, 168, 176, 182, 204, 212, 219, 242, 248, 255, 260, 275, 310, 312, 313, 316, 319, 320, 325, 329, 331, 358, 428, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 477, 511, 512, 513, 514, 521], "spectrum": 161, "speed": 1, "spent": 6, "split": [0, 372, 374, 445], "splittabl": 508, "sqrt": [0, 6, 143, 157, 185, 358, 371, 374, 378, 380, 382, 413, 422, 433, 434, 435, 436, 443, 486, 488, 489, 490, 498, 511], "squar": [0, 5, 6, 155, 186, 205, 207, 209, 218, 281, 301, 325, 338, 353, 413, 462, 464, 486, 487, 489, 490, 491, 514, 518], "squeez": [0, 431, 511], "src": [0, 134, 135], "ssh": [512, 516], "stabil": [153, 155, 358, 374, 378, 380, 413, 452, 453, 455, 486, 487, 488, 489, 490, 491, 498], "stabl": [225, 230, 298, 460], "stable_abi": 2, "stack": [0, 511], "standard": [0, 1, 4, 7, 52, 82, 231, 261, 265, 305, 430, 433, 435, 438, 512, 519], "starmap": [6, 338], "start": [0, 1, 2, 5, 6, 8, 9, 19, 156, 219, 238, 296, 297, 300, 340, 511, 513, 515, 516, 521], "start_axi": [0, 50, 173], "start_captur": 3, "start_indic": [296, 297], "state": [6, 7, 353, 373, 379, 414, 485, 495, 508, 511], "static": [9, 511], "static_cast": 2, "std": [0, 2, 4, 438, 513], "stderr": 516, "stdout": 516, "step": [0, 3, 4, 6, 7, 19, 333, 353, 373, 379, 414, 487, 495, 500, 502, 503, 504, 511, 512], "step_decai": 485, "step_siz": 504, "still": [6, 9, 212, 511, 517], "stochast": [488, 489, 491, 499, 517], "stood": 6, "stop": [0, 2, 6, 19, 219, 239, 306, 514, 515], "stop_captur": 3, "stop_gradi": [0, 514], "storag": 87, "store": 6, "str": [2, 114, 132, 139, 140, 149, 150, 151, 154, 157, 182, 188, 206, 208, 212, 220, 235, 236, 238, 282, 283, 284, 285, 286, 325, 334, 337, 341, 389, 390, 393, 394, 396, 398, 400, 406, 431, 435, 436, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 493], "straight": 6, "strang": 6, "stream": [2, 8, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 123, 124, 125, 126, 127, 130, 131, 134, 135, 136, 137, 138, 139, 142, 143, 144, 146, 147, 148, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 178, 183, 184, 185, 186, 187, 189, 190, 191, 192, 193, 194, 195, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 279, 280, 281, 289, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 326, 327, 330, 331, 332, 512, 521], "streamcontext": 307, "streamordevic": [0, 2], "street": 6, "strength": [492, 499], "strict": [132, 183, 200, 394, 396, 406, 407, 408], "strictli": [212, 291], "stride": [0, 2, 87, 107, 108, 109, 110, 111, 112, 113, 355, 356, 357, 360, 361, 362, 363, 364, 365, 385, 386, 387, 417, 515], "string": [0, 2, 140, 149, 154, 188, 236, 251, 513, 518, 520], "stronger": 516, "structur": [2, 333, 494, 514], "stub": 9, "style": [2, 14, 17, 92, 94, 95, 137, 138, 142, 183, 184, 190, 199, 200, 201, 225, 231, 233, 241, 243, 247, 253, 274, 278, 308], "su": 6, "sub": [0, 7, 127, 269, 296, 297, 319, 334], "subarrai": [127, 300], "subclass": 483, "subdivid": 1, "subdtyp": 196, "subgradi": 488, "sublinear": 487, "submodul": [6, 7, 353, 390, 394, 395, 406, 408], "subnetwork": 512, "suboptim": 513, "subscript": [139, 140], "subsect": 6, "subsequ": [132, 485, 512, 516], "subset": [353, 393, 407, 408], "substanti": 9, "subtl": 511, "subtract": [0, 39], "subtyp": [196, 344], "succe": 132, "successfulli": 512, "sudo": [9, 291, 512], "suggest": 512, "sum": [0, 2, 5, 14, 120, 131, 151, 189, 212, 230, 298, 316, 319, 353, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 512, 515, 518], "sum_": [212, 460], "sum_i": 451, "sum_j": [473, 474], "summat": [139, 140], "super": [6, 7, 353, 483], "superset": [338, 494], "support": [1, 2, 6, 8, 9, 17, 96, 109, 112, 113, 157, 173, 185, 190, 202, 203, 205, 206, 207, 208, 209, 213, 214, 217, 218, 220, 231, 256, 264, 512, 514, 515, 518, 520], "suppos": [514, 521], "sure": [2, 3, 6, 9, 353, 511], "surpass": [435, 436], "surpris": 6, "sw": 1, "swap": [0, 114, 290, 310, 408], "swapax": [0, 121], "swiglu": 6, "swish": [420, 472], "switch": 9, "symbol": 492, "symmetr": [108, 109, 112, 113, 202, 203, 206, 208], "symmetri": [206, 208], "synchron": [2, 511], "syntax": [39, 515], "synthet": 5, "sysctl": 291, "system": [4, 6, 9, 179, 180, 215, 216, 236, 291], "t": [0, 1, 2, 4, 6, 9, 106, 143, 154, 157, 178, 202, 203, 257, 325, 353, 373, 379, 414, 486, 487, 488, 489, 490, 491, 492, 498, 499, 511, 513, 514, 521], "t_kv": 157, "t_q": 157, "tabl": [1, 212, 344, 370], "take": [0, 2, 6, 7, 92, 93, 94, 95, 102, 149, 177, 182, 197, 233, 241, 249, 257, 313, 325, 328, 329, 332, 339, 340, 355, 356, 357, 385, 386, 387, 409, 452, 493, 508, 512, 513, 514, 515, 516, 520, 521, 522], "take_along_axi": [0, 210, 515], "taken": [127, 312, 319], "talk": 512, "tan": 0, "tangent": [0, 2, 24, 25, 26, 121, 197, 314, 315, 429, 478], "tangent_i": 2, "tangent_x": 2, "tanh": [0, 353, 371, 373, 379, 388, 414, 443, 466], "target": [2, 325, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 511], "target_include_directori": 2, "target_link_librari": [2, 4], "target_link_opt": 2, "target_sourc": 2, "task": 460, "tau": 499, "tcp": 512, "tediou": 512, "tell": [4, 6, 511, 518], "temp": 6, "templat": [0, 1, 2, 154], "ten": 517, "tend": 492, "tensor": [220, 316, 465, 518], "tensordot": 0, "term": [2, 455, 486, 487, 488, 489, 490, 491, 498], "termin": [9, 516], "test": [7, 9, 512, 516], "test_imag": 7, "test_label": 7, "text": [6, 265, 371, 373, 379, 388, 414, 421, 428, 433, 434, 435, 436, 443, 446, 447, 448, 455, 456, 457, 460, 461, 464, 466, 467, 470, 471, 476, 477, 487, 492], "textrm": [256, 371, 372, 442, 445], "tf": 518, "tgp_size": 2, "th": [117, 118, 119, 120, 126, 152, 205, 206, 226, 502], "than": [1, 2, 6, 82, 114, 127, 138, 156, 177, 183, 184, 200, 201, 202, 203, 205, 206, 207, 208, 209, 210, 213, 217, 218, 231, 287, 291, 336, 338, 417, 428, 431, 461, 464, 477, 487, 492, 493, 511, 513, 514, 521], "thank": 517, "thei": [1, 2, 5, 6, 9, 17, 114, 178, 190, 419, 456, 483, 492, 510, 511, 512, 513, 517, 519, 520, 521], "them": [0, 2, 6, 130, 353, 394, 406, 512, 513, 516, 521], "themselv": [2, 511], "thi": [0, 1, 2, 4, 6, 7, 9, 16, 17, 18, 19, 27, 28, 29, 30, 87, 88, 100, 121, 141, 149, 151, 154, 177, 178, 179, 185, 188, 190, 197, 202, 203, 205, 206, 207, 208, 209, 212, 213, 214, 217, 218, 225, 230, 231, 232, 234, 240, 252, 254, 260, 289, 291, 298, 299, 300, 305, 309, 312, 318, 326, 333, 336, 339, 340, 353, 366, 367, 368, 372, 373, 379, 390, 391, 393, 394, 397, 398, 399, 404, 406, 407, 408, 409, 412, 414, 428, 433, 434, 435, 436, 443, 444, 445, 452, 460, 477, 483, 493, 495, 510, 511, 512, 513, 514, 516, 517, 518, 520], "thin": 516, "thing": [2, 6], "third": [204, 357, 387, 512, 513], "thompson": 367, "those": [2, 6, 353], "though": [2, 6, 511, 513, 517, 518], "thousand": 517, "thread": [1, 2], "thread_index_in_simdgroup": 1, "thread_position_in_grid": [1, 2, 154], "threadgroup": [1, 2, 154], "threads_per_simdgroup": 1, "three": [6, 91, 357, 387, 431], "threefri": 508, "threshold": [428, 457, 464, 477], "through": [1, 2, 306, 430, 492, 511, 512, 513, 514, 518], "throw": [2, 102, 132], "thu": [6, 353], "thumb": 485, "tic": 511, "tieleman": 498, "tile": [0, 157], "time": [1, 2, 6, 9, 290, 317, 353, 373, 379, 414, 511, 512, 514, 517, 521], "timeit": [511, 514], "titl": 2, "tmp": [1, 154], "to_quant": 334, "to_stream": 2, "toc": 511, "togeth": [0, 1, 2, 7, 256, 338, 339, 512], "tok_embed": 6, "token": [6, 370, 411], "told": 6, "toler": [0, 17, 190], "too": [196, 511, 517], "took": 6, "tool": 9, "toolkit": 9, "top": [2, 318, 382, 431], "topk": 0, "torch": [6, 518], "torch_weight": 6, "total": [291, 514], "total_norm": 336, "tpi": 511, "tpng": 512, "trace": [0, 3, 151, 511], "trace_fil": 3, "tracer": 407, "track": [2, 353, 358], "track_running_stat": 358, "trade": 517, "tradit": [6, 156, 367, 368, 417], "train": [6, 7, 353, 358, 366, 367, 368, 392, 394, 406, 433, 434, 513], "train_imag": [7, 485], "train_label": [7, 485], "trainabl": [7, 335, 353, 483], "trainable_paramet": [353, 393, 495], "transfer": 516, "transform": [1, 6, 8, 121, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 185, 335, 353, 358, 374, 380, 382, 393, 394, 406, 412, 417, 515], "transformerencod": 285, "transit": 502, "translat": [153, 380], "transpos": [0, 6, 32, 111, 112, 113, 178, 257, 363, 364, 365], "treat": [0, 2, 121, 167, 168, 170, 171, 312, 431, 511], "tree": [8, 88, 102, 145, 182, 325, 329, 333, 337, 338, 339, 340, 341, 494, 495, 497, 506, 514], "tree_flatten": [285, 338, 341, 353, 485, 513], "tree_map": [339, 353, 512], "tree_unflatten": [6, 485, 513], "trembl": 6, "tri": [0, 132], "triangl": [206, 208, 321], "triangular": [202, 203, 216, 218], "trigger": 511, "tril": 0, "trilinear": 431, "triplet": 465, "triplet_loss": 353, "triu": 0, "true": [0, 1, 2, 4, 5, 6, 17, 42, 43, 44, 45, 58, 86, 102, 117, 118, 119, 120, 154, 156, 178, 190, 196, 202, 203, 212, 217, 220, 226, 235, 257, 298, 330, 334, 337, 338, 339, 340, 344, 353, 358, 360, 361, 362, 363, 364, 365, 373, 374, 378, 379, 380, 382, 393, 394, 396, 403, 406, 407, 408, 412, 414, 417, 422, 430, 431, 452, 460, 487, 489, 490, 493, 511, 513], "truncat": [158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 270], "truth": [5, 454, 464], "try": [2, 9, 512], "tupl": [0, 31, 69, 72, 83, 88, 97, 103, 108, 109, 110, 112, 113, 134, 138, 140, 145, 147, 149, 188, 197, 205, 206, 210, 211, 212, 214, 217, 251, 256, 277, 279, 296, 297, 303, 324, 325, 328, 337, 338, 339, 340, 341, 355, 356, 357, 361, 362, 364, 365, 385, 386, 387, 396, 398, 419, 431, 487, 489, 490, 491, 492, 510, 513, 514], "tutori": 2, "twice": 521, "two": [0, 2, 14, 15, 17, 25, 86, 90, 92, 94, 95, 96, 127, 137, 142, 159, 163, 170, 177, 178, 183, 184, 190, 198, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 213, 214, 217, 218, 225, 231, 233, 241, 243, 247, 250, 310, 340, 356, 372, 379, 386, 445, 453, 511, 512, 513, 514, 515, 521], "txt": [2, 4], "type": [0, 1, 2, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 38, 72, 82, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 124, 125, 126, 127, 130, 131, 132, 134, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 147, 148, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 270, 271, 272, 273, 274, 275, 277, 278, 280, 281, 287, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 336, 337, 340, 353, 401, 430, 432, 433, 434, 435, 436, 437, 438, 439, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 511, 513, 515, 518], "type_to_nam": 2, "typenam": [0, 1, 2], "typic": [0, 157, 333, 370, 485, 511, 517], "u": [1, 2, 4, 202, 206, 208, 210, 217, 382, 408, 506, 512, 516, 517], "u_": 486, "u_t": 486, "ubuntu": 9, "ubuntu2204": 9, "uint": [1, 2, 154], "uint16": [12, 344], "uint3": 1, "uint32": [12, 27, 28, 29, 30, 260, 344], "uint64": [12, 344], "uint8": [12, 344], "ultra": 6, "unabl": 9, "unam": 9, "unari": 511, "unchang": [156, 306, 417], "uncheck": 9, "uncompress": 285, "undefin": [0, 29, 121, 202, 203, 252, 264, 515], "under": 212, "underli": [2, 327], "understand": [6, 433, 434], "unevalu": 150, "unexpect": [2, 19], "unexpectedli": 516, "unflatten": 0, "unfreez": [353, 394], "unfrozen": 406, "unifi": 8, "uniform": [3, 353, 382, 396, 434, 436, 480, 508, 511, 514, 521], "uniformli": 271, "unintend": 0, "union": [19, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 49, 50, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 66, 68, 69, 70, 71, 73, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 89, 90, 91, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 194, 195, 196, 198, 205, 206, 207, 208, 217, 236, 283, 307], "uniqu": [2, 215, 216, 508, 512], "unique_ptr": 2, "unit": [359, 369, 371, 372, 373, 381, 415, 416, 418, 420, 433, 434, 435, 436, 440, 441, 442, 443, 444, 445, 449, 468, 469, 470, 472], "unittest": 9, "univers": 212, "unless": [6, 17, 190, 212, 483], "unlik": [6, 17, 190, 210, 367, 368, 402, 515], "unnecessari": [2, 6], "unnorm": [260, 452, 454], "unscal": 487, "unsign": [178, 256, 257, 344], "unsignedinteg": 12, "unspecifi": [16, 18, 19, 27, 28, 29, 30, 103, 117, 118, 119, 120, 176, 226, 230, 232, 234, 240, 248, 252, 254, 275, 298, 299, 305, 309, 312, 318, 319, 326, 331, 522], "unsqueez": 6, "unsupport": 220, "until": [2, 333, 517, 519], "unus": 2, "up": [1, 2, 6, 9, 121, 511], "upcast": 2, "updat": [0, 1, 2, 5, 6, 7, 9, 39, 102, 297, 334, 338, 340, 358, 389, 390, 396, 401, 402, 403, 408, 485, 487, 490, 492, 494, 495, 499, 500, 501, 502, 503, 504, 511, 512, 513, 517], "update_modul": 353, "uplo": [206, 208], "upon": [6, 338, 339], "upper": [202, 203, 206, 208, 216, 218, 256, 267, 270, 271, 439], "upsampl": 353, "us": [0, 3, 5, 6, 7, 8, 9, 19, 39, 87, 121, 125, 128, 130, 131, 134, 135, 136, 138, 154, 156, 173, 178, 179, 180, 181, 199, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 231, 256, 257, 265, 275, 277, 278, 279, 287, 290, 291, 311, 324, 333, 337, 340, 344, 346, 353, 356, 357, 367, 370, 371, 373, 379, 382, 386, 387, 389, 393, 400, 407, 409, 411, 412, 414, 417, 422, 430, 431, 435, 436, 443, 444, 453, 480, 483, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 508, 510, 511, 512, 513, 514, 515, 516, 519, 521], "usag": [430, 511, 512], "user": [2, 6, 353], "usual": [370, 411, 510, 517], "util": [1, 2, 6, 8, 9, 285, 353, 485, 516], "v": [6, 114, 157, 205, 206, 353, 394, 518], "v_": [486, 488, 489, 490, 491, 498, 499], "v_t": [486, 488, 489, 490, 491, 498, 499], "val": [0, 31, 176], "valid": [7, 114, 173, 329, 337, 394, 406, 510, 512], "valid_parameter_filt": 389, "valu": [0, 1, 5, 6, 12, 13, 17, 19, 27, 28, 52, 82, 86, 101, 132, 149, 152, 157, 158, 159, 160, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 176, 188, 190, 204, 212, 213, 217, 219, 236, 244, 251, 255, 259, 260, 261, 263, 264, 265, 267, 270, 271, 279, 283, 291, 312, 313, 325, 329, 335, 337, 338, 339, 340, 344, 356, 357, 359, 366, 367, 368, 369, 375, 378, 382, 386, 387, 393, 409, 410, 426, 428, 430, 432, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 477, 483, 487, 490, 500, 501, 503, 504, 514], "value_and_grad": [7, 121, 353, 407, 483, 485, 497, 511, 514, 518, 519], "value_and_grad_fn": 517, "value_cach": 6, "value_dim": 409, "value_input_dim": 409, "value_output_dim": 409, "value_proj": 6, "valueerror": [121, 212, 396, 514], "values_hat": 6, "van": 212, "var": [0, 358, 374, 378, 380, 455], "variabl": [9, 102, 121, 128, 141, 149, 150, 151, 182, 197, 325, 328, 329, 511, 512, 513], "varianc": [0, 305, 326, 358, 374, 455], "variant": [6, 464, 491], "variou": 212, "vector": [0, 2, 5, 8, 189, 197, 212, 312, 328, 329, 370, 454, 513, 519], "verbos": [1, 154, 512], "veri": [6, 409, 516, 517, 521], "verifi": [5, 9], "versa": 279, "version": [2, 4, 9, 88, 125, 149, 151, 188, 225, 230, 256, 298, 329, 508, 514, 515], "versu": 511, "via": [9, 121, 494, 497, 512, 516, 517, 518], "vice": 279, "video": 368, "view": [0, 3, 87, 518], "virtual": 2, "visual": 150, "vjp": [2, 121, 519], "vmap": [2, 121, 513, 514, 517, 519], "vmap_add": 514, "vocab_s": 6, "vocabulari": [370, 411], "void": [1, 2], "volta": 9, "vt": 217, "w": [0, 1, 5, 108, 109, 112, 113, 125, 178, 205, 206, 256, 257, 325, 339, 358, 361, 362, 364, 365, 367, 368, 382, 485, 499, 514], "w1": [6, 336], "w2": [6, 336], "w3": 6, "w_": [373, 379, 414, 486, 487, 488, 489, 490, 491, 492, 498, 499], "w_1": 256, "w_g": 256, "w_i": [125, 256], "w_in": 1, "w_q": 256, "w_star": 5, "w_stride": 1, "w_t": [486, 488, 489, 490, 491, 492, 498, 499], "wa": [4, 6, 87, 134, 135, 512, 513, 517], "wai": [2, 6, 9, 353, 431, 511, 512, 513, 514, 515, 516], "wait": 6, "walk": [6, 513], "walkthrough": 2, "walsh": 185, "want": [1, 2, 6, 512, 513, 514, 516, 521], "warm": [2, 511], "warmup_init": 487, "watch": [6, 511], "wd": 492, "we": [0, 1, 2, 5, 6, 7, 121, 125, 134, 135, 178, 256, 257, 353, 370, 411, 419, 490, 492, 508, 510, 511, 512, 513, 514, 516, 517, 521], "weight": [0, 5, 107, 108, 109, 110, 111, 112, 113, 153, 155, 338, 353, 396, 400, 411, 412, 452, 454, 483, 487, 490, 492, 493, 495, 499, 514, 517], "weight_decai": [487, 490, 492, 499], "weight_fil": 6, "weights_fp16": 517, "well": [6, 353, 394, 406, 409, 512, 517], "wen": 6, "went": 6, "were": [6, 521], "wet": 6, "wget": 9, "what": [2, 6, 338, 516], "whatsoev": 6, "whc": 367, "when": [0, 1, 2, 6, 8, 9, 102, 110, 121, 136, 202, 203, 205, 206, 207, 208, 209, 212, 213, 217, 218, 220, 290, 360, 361, 362, 363, 364, 365, 431, 435, 436, 452, 458, 464, 483, 485, 502, 508, 511, 512, 513, 521], "where": [0, 4, 7, 152, 190, 203, 256, 325, 329, 358, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 373, 374, 378, 379, 380, 382, 393, 410, 413, 414, 428, 435, 436, 441, 442, 444, 455, 461, 467, 470, 472, 477, 495, 512, 514, 515], "wherea": 514, "whether": [149, 151, 154, 178, 206, 208, 216, 218, 257, 373, 379, 393, 409, 414, 452, 455, 461], "which": [0, 1, 2, 6, 7, 8, 9, 19, 38, 87, 88, 102, 110, 127, 130, 131, 132, 134, 135, 136, 145, 149, 151, 156, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 173, 182, 188, 191, 192, 193, 194, 195, 197, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 235, 238, 256, 260, 261, 275, 277, 279, 282, 283, 284, 285, 286, 303, 304, 312, 319, 324, 325, 328, 329, 334, 356, 357, 367, 368, 371, 386, 387, 389, 393, 417, 452, 454, 457, 461, 464, 480, 494, 495, 508, 511, 512, 513, 514, 515, 516, 517, 521, 522], "while": [2, 3, 6, 9, 165, 277, 417, 517, 518], "whistl": 2, "who": 6, "whose": [152, 334, 335], "why": 6, "wi": 512, "wide": 517, "width": [356, 357, 358, 361, 362, 364, 365, 367, 368, 386, 387, 411, 412], "window": [9, 355, 356, 357, 385, 386, 387], "wipe": 9, "wire": 291, "wired_limit_mb": 291, "wise": [0, 2, 13, 14, 20, 21, 22, 23, 24, 25, 26, 92, 93, 94, 95, 99, 115, 116, 137, 138, 142, 143, 144, 146, 148, 174, 175, 183, 184, 190, 199, 200, 201, 221, 222, 223, 224, 225, 227, 228, 229, 233, 241, 243, 245, 247, 253, 273, 274, 278, 281, 292, 293, 294, 295, 301, 302, 308, 314, 315, 359, 367, 368, 377, 388, 410, 421, 440, 447, 448, 450, 451, 466, 467, 469, 472, 473, 474, 475, 511], "wish": 9, "with_logit": 452, "within": [0, 3, 29, 190], "without": [1, 6, 8, 306, 409, 479, 510, 511, 512, 513, 516, 517, 518, 521], "wk": 6, "wl": 2, "wo": 6, "word": 0, "work": [2, 3, 6, 290, 344, 511, 512, 513, 514, 515, 516, 517], "workhors": 353, "world": [341, 512], "world2": 512, "world_ani": 512, "world_mpi": 512, "world_r": 512, "worri": [1, 517], "would": [2, 6, 431, 512, 513, 515, 517, 518, 521], "wq": 6, "wrap": [121, 353, 493], "wrapper": [513, 516], "write": [0, 1, 6, 353, 518], "written": [2, 513], "wrong": 513, "wrt": 335, "wv": 6, "x": [0, 1, 2, 4, 5, 6, 7, 39, 88, 96, 121, 130, 131, 135, 136, 143, 148, 149, 150, 153, 154, 155, 178, 185, 186, 188, 212, 257, 261, 265, 266, 280, 285, 292, 322, 323, 330, 338, 340, 353, 355, 356, 357, 358, 359, 369, 371, 372, 374, 378, 380, 381, 382, 385, 386, 387, 388, 389, 410, 413, 415, 421, 422, 428, 431, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 483, 485, 492, 511, 512, 513, 514, 515, 517, 518, 519, 521], "x1": 453, "x2": 453, "x86_64": 9, "x_1": [453, 461], "x_2": [453, 461], "x_cast": 2, "x_grad": 1, "x_i": [451, 473, 474], "x_j": [473, 474], "x_offset": 2, "x_ptr": 2, "x_shape": 1, "x_stride": 2, "x_t": [373, 379, 414], "x_view": 518, "xcode": 9, "xcodeproj": 3, "xcrun": 9, "xf": 379, "xg": 379, "xi": 379, "xn": 373, "xo": 379, "xor": 95, "xr": 373, "xy": [0, 235], "xz": 373, "x\u00b2": 518, "y": [0, 2, 4, 5, 6, 7, 9, 39, 88, 121, 149, 150, 185, 188, 330, 353, 358, 367, 374, 378, 380, 382, 413, 456, 461, 464, 485, 488, 511, 512, 513, 514, 517, 518], "y_": [456, 460], "y_cast": 2, "y_hat": 353, "y_offset": 2, "y_ptr": 2, "y_stride": 2, "ye": 6, "year": 6, "yet": [6, 353, 483, 495, 514, 515, 517, 519], "yield": [6, 7, 508], "you": [1, 2, 3, 4, 6, 7, 8, 9, 291, 353, 422, 430, 480, 508, 511, 512, 513, 514, 515, 516, 518, 520, 521], "your": [2, 6, 9, 483, 512, 514, 517], "z": [2, 88, 373, 511, 513, 517], "z_t": 373, "zeiler": 486, "zero": [0, 149, 152, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 204, 235, 276, 297, 321, 322, 323, 332, 353, 355, 356, 357, 366, 367, 368, 396, 432, 433, 434, 435, 436, 437, 438, 439, 480, 485, 487, 513, 515], "zero_grad": 514, "zeros_lik": [0, 210], "zhang": 6, "zip": [6, 7], "zip_saf": 2}, "titles": ["Operations", "Custom Metal Kernels", "Custom Extensions in MLX", "Metal Debugger", "Using MLX in C++", "Linear Regression", "LLM inference", "Multi-Layer Perceptron", "MLX", "Build and Install", "mlx.core.Device", "mlx.core.Dtype", "mlx.core.DtypeCategory", "mlx.core.abs", "mlx.core.add", "mlx.core.addmm", "mlx.core.all", "mlx.core.allclose", "mlx.core.any", "mlx.core.arange", "mlx.core.arccos", "mlx.core.arccosh", "mlx.core.arcsin", "mlx.core.arcsinh", "mlx.core.arctan", "mlx.core.arctan2", "mlx.core.arctanh", "mlx.core.argmax", "mlx.core.argmin", "mlx.core.argpartition", "mlx.core.argsort", "mlx.core.array", "mlx.core.array.T", "mlx.core.array.abs", "mlx.core.array.all", "mlx.core.array.any", "mlx.core.array.argmax", "mlx.core.array.argmin", "mlx.core.array.astype", "mlx.core.array.at", "mlx.core.array.conj", "mlx.core.array.cos", "mlx.core.array.cummax", "mlx.core.array.cummin", "mlx.core.array.cumprod", "mlx.core.array.cumsum", "mlx.core.array.diag", "mlx.core.array.diagonal", "mlx.core.array.dtype", "mlx.core.array.exp", "mlx.core.array.flatten", "mlx.core.array.imag", "mlx.core.array.item", "mlx.core.array.itemsize", "mlx.core.array.log", "mlx.core.array.log10", "mlx.core.array.log1p", "mlx.core.array.log2", "mlx.core.array.logcumsumexp", "mlx.core.array.logsumexp", "mlx.core.array.max", "mlx.core.array.mean", "mlx.core.array.min", "mlx.core.array.moveaxis", "mlx.core.array.nbytes", "mlx.core.array.ndim", "mlx.core.array.prod", "mlx.core.array.real", "mlx.core.array.reciprocal", "mlx.core.array.reshape", "mlx.core.array.round", "mlx.core.array.rsqrt", "mlx.core.array.shape", "mlx.core.array.sin", "mlx.core.array.size", "mlx.core.array.split", "mlx.core.array.sqrt", "mlx.core.array.square", "mlx.core.array.squeeze", "mlx.core.array.std", "mlx.core.array.sum", "mlx.core.array.swapaxes", "mlx.core.array.tolist", "mlx.core.array.transpose", "mlx.core.array.var", "mlx.core.array.view", "mlx.core.array_equal", "mlx.core.as_strided", "mlx.core.async_eval", "mlx.core.atleast_1d", "mlx.core.atleast_2d", "mlx.core.atleast_3d", "mlx.core.bitwise_and", "mlx.core.bitwise_invert", "mlx.core.bitwise_or", "mlx.core.bitwise_xor", "mlx.core.block_masked_mm", "mlx.core.broadcast_arrays", "mlx.core.broadcast_to", "mlx.core.ceil", "mlx.core.clear_cache", "mlx.core.clip", "mlx.core.compile", "mlx.core.concatenate", "mlx.core.conj", "mlx.core.conjugate", "mlx.core.contiguous", "mlx.core.conv1d", "mlx.core.conv2d", "mlx.core.conv3d", "mlx.core.conv_general", "mlx.core.conv_transpose1d", "mlx.core.conv_transpose2d", "mlx.core.conv_transpose3d", "mlx.core.convolve", "mlx.core.cos", "mlx.core.cosh", "mlx.core.cummax", "mlx.core.cummin", "mlx.core.cumprod", "mlx.core.cumsum", "mlx.core.custom_function", "mlx.core.default_device", "mlx.core.default_stream", "mlx.core.degrees", "mlx.core.dequantize", "mlx.core.diag", "mlx.core.diagonal", "mlx.core.disable_compile", "mlx.core.distributed.Group", "mlx.core.distributed.all_gather", "mlx.core.distributed.all_sum", "mlx.core.distributed.init", "mlx.core.distributed.is_available", "mlx.core.distributed.recv", "mlx.core.distributed.recv_like", "mlx.core.distributed.send", "mlx.core.divide", "mlx.core.divmod", "mlx.core.einsum", "mlx.core.einsum_path", "mlx.core.enable_compile", "mlx.core.equal", "mlx.core.erf", "mlx.core.erfinv", "mlx.core.eval", "mlx.core.exp", "mlx.core.expand_dims", "mlx.core.expm1", "mlx.core.export_function", "mlx.core.export_to_dot", "mlx.core.exporter", "mlx.core.eye", "mlx.core.fast.layer_norm", "mlx.core.fast.metal_kernel", "mlx.core.fast.rms_norm", "mlx.core.fast.rope", "mlx.core.fast.scaled_dot_product_attention", "mlx.core.fft.fft", "mlx.core.fft.fft2", "mlx.core.fft.fftn", "mlx.core.fft.fftshift", "mlx.core.fft.ifft", "mlx.core.fft.ifft2", "mlx.core.fft.ifftn", "mlx.core.fft.ifftshift", "mlx.core.fft.irfft", "mlx.core.fft.irfft2", "mlx.core.fft.irfftn", "mlx.core.fft.rfft", "mlx.core.fft.rfft2", "mlx.core.fft.rfftn", "mlx.core.finfo", "mlx.core.flatten", "mlx.core.floor", "mlx.core.floor_divide", "mlx.core.full", "mlx.core.gather_mm", "mlx.core.gather_qmm", "mlx.core.get_active_memory", "mlx.core.get_cache_memory", "mlx.core.get_peak_memory", "mlx.core.grad", "mlx.core.greater", "mlx.core.greater_equal", "mlx.core.hadamard_transform", "mlx.core.identity", "mlx.core.imag", "mlx.core.import_function", "mlx.core.inner", "mlx.core.isclose", "mlx.core.isfinite", "mlx.core.isinf", "mlx.core.isnan", "mlx.core.isneginf", "mlx.core.isposinf", "mlx.core.issubdtype", "mlx.core.jvp", "mlx.core.kron", "mlx.core.left_shift", "mlx.core.less", "mlx.core.less_equal", "mlx.core.linalg.cholesky", "mlx.core.linalg.cholesky_inv", "mlx.core.linalg.cross", "mlx.core.linalg.eig", "mlx.core.linalg.eigh", "mlx.core.linalg.eigvals", "mlx.core.linalg.eigvalsh", "mlx.core.linalg.inv", "mlx.core.linalg.lu", "mlx.core.linalg.lu_factor", "mlx.core.linalg.norm", "mlx.core.linalg.pinv", "mlx.core.linalg.qr", "mlx.core.linalg.solve", "mlx.core.linalg.solve_triangular", "mlx.core.linalg.svd", "mlx.core.linalg.tri_inv", "mlx.core.linspace", "mlx.core.load", "mlx.core.log", "mlx.core.log10", "mlx.core.log1p", "mlx.core.log2", "mlx.core.logaddexp", "mlx.core.logcumsumexp", "mlx.core.logical_and", "mlx.core.logical_not", "mlx.core.logical_or", "mlx.core.logsumexp", "mlx.core.matmul", "mlx.core.max", "mlx.core.maximum", "mlx.core.mean", "mlx.core.meshgrid", "mlx.core.metal.device_info", "mlx.core.metal.is_available", "mlx.core.metal.start_capture", "mlx.core.metal.stop_capture", "mlx.core.min", "mlx.core.minimum", "mlx.core.moveaxis", "mlx.core.multiply", "mlx.core.nan_to_num", "mlx.core.negative", "mlx.core.new_stream", "mlx.core.not_equal", "mlx.core.ones", "mlx.core.ones_like", "mlx.core.outer", "mlx.core.pad", "mlx.core.partition", "mlx.core.power", "mlx.core.prod", "mlx.core.put_along_axis", "mlx.core.quantize", "mlx.core.quantized_matmul", "mlx.core.radians", "mlx.core.random.bernoulli", "mlx.core.random.categorical", "mlx.core.random.gumbel", "mlx.core.random.key", "mlx.core.random.laplace", "mlx.core.random.multivariate_normal", "mlx.core.random.normal", "mlx.core.random.permutation", "mlx.core.random.randint", "mlx.core.random.seed", "mlx.core.random.split", "mlx.core.random.truncated_normal", "mlx.core.random.uniform", "mlx.core.real", "mlx.core.reciprocal", "mlx.core.remainder", "mlx.core.repeat", "mlx.core.reset_peak_memory", "mlx.core.reshape", "mlx.core.right_shift", "mlx.core.roll", "mlx.core.round", "mlx.core.rsqrt", "mlx.core.save", "mlx.core.save_gguf", "mlx.core.save_safetensors", "mlx.core.savez", "mlx.core.savez_compressed", "mlx.core.set_cache_limit", "mlx.core.set_default_device", "mlx.core.set_default_stream", "mlx.core.set_memory_limit", "mlx.core.set_wired_limit", "mlx.core.sigmoid", "mlx.core.sign", "mlx.core.sin", "mlx.core.sinh", "mlx.core.slice", "mlx.core.slice_update", "mlx.core.softmax", "mlx.core.sort", "mlx.core.split", "mlx.core.sqrt", "mlx.core.square", "mlx.core.squeeze", "mlx.core.stack", "mlx.core.std", "mlx.core.stop_gradient", "mlx.core.stream", "mlx.core.subtract", "mlx.core.sum", "mlx.core.swapaxes", "mlx.core.synchronize", "mlx.core.take", "mlx.core.take_along_axis", "mlx.core.tan", "mlx.core.tanh", "mlx.core.tensordot", "mlx.core.tile", "mlx.core.topk", "mlx.core.trace", "mlx.core.transpose", "mlx.core.tri", "mlx.core.tril", "mlx.core.triu", "mlx.core.unflatten", "mlx.core.value_and_grad", "mlx.core.var", "mlx.core.view", "mlx.core.vjp", "mlx.core.vmap", "mlx.core.where", "mlx.core.zeros", "mlx.core.zeros_like", "mlx.nn.average_gradients", "mlx.nn.quantize", "mlx.nn.value_and_grad", "mlx.optimizers.clip_grad_norm", "mlx.utils.tree_flatten", "mlx.utils.tree_map", "mlx.utils.tree_map_with_path", "mlx.utils.tree_reduce", "mlx.utils.tree_unflatten", "mlx.core.Stream", "Array", "Data Types", "Devices and Streams", "Distributed Communication", "Export Functions", "Fast", "FFT", "Linear Algebra", "Memory Management", "Metal", "Neural Networks", "mlx.nn.ALiBi", "mlx.nn.AvgPool1d", "mlx.nn.AvgPool2d", "mlx.nn.AvgPool3d", "mlx.nn.BatchNorm", "mlx.nn.CELU", "mlx.nn.Conv1d", "mlx.nn.Conv2d", "mlx.nn.Conv3d", "mlx.nn.ConvTranspose1d", "mlx.nn.ConvTranspose2d", "mlx.nn.ConvTranspose3d", "mlx.nn.Dropout", "mlx.nn.Dropout2d", "mlx.nn.Dropout3d", "mlx.nn.ELU", "mlx.nn.Embedding", "mlx.nn.GELU", "mlx.nn.GLU", "mlx.nn.GRU", "mlx.nn.GroupNorm", "mlx.nn.HardShrink", "mlx.nn.HardTanh", "mlx.nn.Hardswish", "mlx.nn.InstanceNorm", "mlx.nn.LSTM", "mlx.nn.LayerNorm", "mlx.nn.LeakyReLU", "mlx.nn.Linear", "mlx.nn.LogSigmoid", "mlx.nn.LogSoftmax", "mlx.nn.MaxPool1d", "mlx.nn.MaxPool2d", "mlx.nn.MaxPool3d", "mlx.nn.Mish", "mlx.nn.Module.apply", "mlx.nn.Module.apply_to_modules", "mlx.nn.Module.children", "mlx.nn.Module.eval", "mlx.nn.Module.filter_and_map", "mlx.nn.Module.freeze", "mlx.nn.Module.leaf_modules", "mlx.nn.Module.load_weights", "mlx.nn.Module.modules", "mlx.nn.Module.named_modules", "mlx.nn.Module.parameters", "mlx.nn.Module.save_weights", "mlx.nn.Module.set_dtype", "mlx.nn.Module.state", "mlx.nn.Module.train", "mlx.nn.Module.trainable_parameters", "mlx.nn.Module.training", "mlx.nn.Module.unfreeze", "mlx.nn.Module.update", "mlx.nn.Module.update_modules", "mlx.nn.MultiHeadAttention", "mlx.nn.PReLU", "mlx.nn.QuantizedEmbedding", "mlx.nn.QuantizedLinear", "mlx.nn.RMSNorm", "mlx.nn.RNN", "mlx.nn.ReLU", "mlx.nn.ReLU6", "mlx.nn.RoPE", "mlx.nn.SELU", "mlx.nn.Sequential", "mlx.nn.SiLU", "mlx.nn.Sigmoid", "mlx.nn.SinusoidalPositionalEncoding", "mlx.nn.Softmax", "mlx.nn.Softmin", "mlx.nn.Softplus", "mlx.nn.Softshrink", "mlx.nn.Softsign", "mlx.nn.Step", "mlx.nn.Tanh", "mlx.nn.Transformer", "mlx.nn.Upsample", "mlx.nn.init.constant", "mlx.nn.init.glorot_normal", "mlx.nn.init.glorot_uniform", "mlx.nn.init.he_normal", "mlx.nn.init.he_uniform", "mlx.nn.init.identity", "mlx.nn.init.normal", "mlx.nn.init.uniform", "mlx.nn.celu", "mlx.nn.elu", "mlx.nn.gelu", "mlx.nn.gelu_approx", "mlx.nn.gelu_fast_approx", "mlx.nn.glu", "mlx.nn.hard_shrink", "mlx.nn.hard_tanh", "mlx.nn.hardswish", "mlx.nn.leaky_relu", "mlx.nn.log_sigmoid", "mlx.nn.log_softmax", "mlx.nn.losses.binary_cross_entropy", "mlx.nn.losses.cosine_similarity_loss", "mlx.nn.losses.cross_entropy", "mlx.nn.losses.gaussian_nll_loss", "mlx.nn.losses.hinge_loss", "mlx.nn.losses.huber_loss", "mlx.nn.losses.kl_div_loss", "mlx.nn.losses.l1_loss", "mlx.nn.losses.log_cosh_loss", "mlx.nn.losses.margin_ranking_loss", "mlx.nn.losses.mse_loss", "mlx.nn.losses.nll_loss", "mlx.nn.losses.smooth_l1_loss", "mlx.nn.losses.triplet_loss", "mlx.nn.mish", "mlx.nn.prelu", "mlx.nn.relu", "mlx.nn.relu6", "mlx.nn.selu", "mlx.nn.sigmoid", "mlx.nn.silu", "mlx.nn.softmax", "mlx.nn.softmin", "mlx.nn.softplus", "mlx.nn.softshrink", "mlx.nn.step", "mlx.nn.tanh", "Functions", "Initializers", "Layers", "Loss Functions", "Module", "Operations", "Optimizers", "mlx.optimizers.AdaDelta", "mlx.optimizers.Adafactor", "mlx.optimizers.Adagrad", "mlx.optimizers.Adam", "mlx.optimizers.AdamW", "mlx.optimizers.Adamax", "mlx.optimizers.Lion", "mlx.optimizers.MultiOptimizer", "mlx.optimizers.Optimizer.apply_gradients", "mlx.optimizers.Optimizer.init", "mlx.optimizers.Optimizer.state", "mlx.optimizers.Optimizer.update", "mlx.optimizers.RMSprop", "mlx.optimizers.SGD", "mlx.optimizers.cosine_decay", "mlx.optimizers.exponential_decay", "mlx.optimizers.join_schedules", "mlx.optimizers.linear_schedule", "mlx.optimizers.step_decay", "Common Optimizers", "Optimizer", "Schedulers", "Random", "Transforms", "Tree Utils", "Compilation", "Distributed Communication", "Exporting Functions", "Function Transforms", "Indexing Arrays", "Launching Distributed Programs", "Lazy Evaluation", "Conversion to NumPy and Other Frameworks", "Quick Start Guide", "Saving and Loading Arrays", "Unified Memory", "Using Streams"], "titleterms": {"A": 521, "In": 515, "The": 353, "ab": [13, 33], "adadelta": 486, "adafactor": 487, "adagrad": 488, "adam": 489, "adamax": 491, "adamw": 490, "add": 14, "addmm": 15, "algebra": 350, "alibi": 354, "all": [6, 16, 34, 512], "all_gath": 130, "all_sum": 131, "allclos": 17, "ani": [18, 35], "api": [8, 9], "appli": 389, "apply_gradi": 494, "apply_to_modul": 390, "arang": 19, "arcco": 20, "arccosh": 21, "arcsin": 22, "arcsinh": 23, "arctan": 24, "arctan2": 25, "arctanh": 26, "argmax": [27, 36], "argmin": [28, 37], "argpartit": 29, "argsort": 30, "arrai": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 343, 515, 520], "array_equ": 86, "as_strid": 87, "astyp": 38, "async_ev": 88, "atleast_1d": 89, "atleast_2d": 90, "atleast_3d": 91, "attent": 6, "automat": 514, "average_gradi": [333, 512], "avgpool1d": 355, "avgpool2d": 356, "avgpool3d": 357, "back": 2, "backend": 512, "basic": [511, 513, 519], "batchnorm": 358, "benchmark": 6, "bernoulli": 259, "binari": 9, "binary_cross_entropi": 452, "bind": 2, "bitwise_and": 92, "bitwise_invert": 93, "bitwise_or": 94, "bitwise_xor": 95, "block_masked_mm": 96, "broadcast_arrai": 97, "broadcast_to": 98, "build": [2, 9], "c": [4, 8, 9, 513], "categor": 260, "ceil": 99, "celu": [359, 440], "children": 391, "choleski": 202, "cholesky_inv": 203, "class": 353, "clear_cach": 100, "clip": 101, "clip_grad_norm": 336, "cmake": 2, "co": [41, 115], "code": [2, 6], "common": 505, "commun": [346, 512], "compil": [102, 511], "complex": 1, "comput": 517, "concaten": 103, "conj": [40, 104], "conjug": 105, "constant": 432, "contigu": 106, "conv1d": [107, 360], "conv2d": [108, 361], "conv3d": [109, 362], "conv_gener": 110, "conv_transpose1d": 111, "conv_transpose2d": 112, "conv_transpose3d": 113, "convers": 518, "convert": 6, "convolv": 114, "convtranspose1d": 363, "convtranspose2d": 364, "convtranspose3d": 365, "core": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 342], "cosh": 116, "cosine_decai": 500, "cosine_similarity_loss": 453, "cpu": 2, "cross": 204, "cross_entropi": 454, "cuda": 9, "cummax": [42, 117], "cummin": [43, 118], "cumprod": [44, 119], "cumsum": [45, 120], "custom": [1, 2], "custom_funct": 121, "data": 344, "debug": 511, "debugg": 3, "default_devic": 122, "default_stream": 123, "defin": 512, "degre": 124, "dequant": 125, "devic": [10, 345], "device_info": 236, "diag": [46, 126], "diagon": [47, 127], "differ": 515, "differenti": 514, "disable_compil": 128, "distribut": [129, 130, 131, 132, 133, 134, 135, 136, 346, 512, 516], "divid": 137, "divmod": 138, "download": [2, 6], "dropout": 366, "dropout2d": 367, "dropout3d": 368, "dtype": [11, 48], "dtypecategori": 12, "eig": 205, "eigh": 206, "eigval": 207, "eigvalsh": 208, "einsum": 139, "einsum_path": 140, "elu": [369, 441], "embed": 370, "enable_compil": 141, "encod": 6, "end": 2, "equal": 142, "erf": 143, "erfinv": 144, "eval": [145, 392], "evalu": 517, "exampl": [1, 2, 8, 511, 512, 513, 521], "exp": [49, 146], "expand_dim": 147, "expm1": 148, "exponential_decai": 501, "export": [151, 347, 513], "export_funct": 149, "export_to_dot": 150, "extens": 2, "ey": 152, "fast": [153, 154, 155, 156, 157, 348], "fft": [158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 349], "fft2": 159, "fftn": 160, "fftshift": 161, "filter_and_map": 393, "finfo": 172, "flatten": [50, 173], "floor": 174, "floor_divid": 175, "format": 520, "found": 9, "framework": 518, "freez": 394, "from": [9, 515], "full": [6, 176], "function": [347, 479, 482, 511, 513, 514, 519], "further": 8, "gather_mm": 177, "gather_qmm": 178, "gaussian_nll_loss": 455, "gelu": [371, 442], "gelu_approx": 443, "gelu_fast_approx": 444, "gener": 6, "get": 512, "get_active_memori": 179, "get_cache_memori": 180, "get_peak_memori": 181, "glorot_norm": 433, "glorot_uniform": 434, "glu": [372, 445], "gpu": 2, "grad": [182, 353], "graph": [511, 517, 519], "greater": 183, "greater_equ": 184, "grid": 1, "group": 129, "groupnorm": 374, "gru": 373, "guid": 519, "gumbel": 261, "hadamard_transform": 185, "hard_shrink": 446, "hard_tanh": 447, "hardshrink": 375, "hardswish": [377, 448], "hardtanh": 376, "he_norm": 435, "he_uniform": 436, "hinge_loss": 456, "host": [512, 516], "huber_loss": 457, "ident": [186, 437], "ifft": 162, "ifft2": 163, "ifftn": 164, "ifftshift": 165, "imag": [51, 187], "implement": [2, 6], "import": 513, "import_funct": 188, "index": 515, "infer": 6, "init": [132, 432, 433, 434, 435, 436, 437, 438, 439, 495], "initi": 480, "inner": 189, "inspect": 353, "instal": [8, 9, 512], "instancenorm": 378, "introduc": 2, "inv": 209, "irfft": 166, "irfft2": 167, "irfftn": 168, "is_avail": [133, 237], "isclos": 190, "isfinit": 191, "isinf": 192, "isnan": 193, "isneginf": 194, "isposinf": 195, "issubdtyp": 196, "item": 52, "items": 53, "jax": 518, "join_schedul": 502, "jvp": 197, "kei": 262, "kernel": 1, "kl_div_loss": 458, "kron": 198, "l1_loss": 459, "laplac": 263, "launch": 516, "layer": [6, 7, 481], "layer_norm": 153, "layernorm": 380, "lazi": 517, "leaf_modul": 395, "leaky_relu": 449, "leakyrelu": 381, "left_shift": 199, "less": 200, "less_equ": 201, "linalg": [202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "linear": [5, 350, 382], "linear_schedul": 503, "linspac": 219, "linux": 9, "lion": 492, "llm": 6, "load": [6, 220, 485, 520], "load_weight": 396, "log": [54, 221], "log10": [55, 222], "log1p": [56, 223], "log2": [57, 224], "log_cosh_loss": 460, "log_sigmoid": 450, "log_softmax": 451, "logaddexp": 225, "logcumsumexp": [58, 226], "logical_and": 227, "logical_not": 228, "logical_or": 229, "logsigmoid": 383, "logsoftmax": 384, "logsumexp": [59, 230], "loss": [452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 482], "lstm": 379, "lu": 210, "lu_factor": 211, "manag": 351, "margin_ranking_loss": 461, "matmul": 231, "max": [60, 232], "maximum": 233, "maxpool1d": 385, "maxpool2d": 386, "maxpool3d": 387, "mean": [61, 234], "memori": [351, 521], "meshgrid": 235, "metal": [1, 3, 9, 236, 237, 238, 239, 352], "metal_kernel": 154, "min": [62, 240], "minim": 9, "minimum": 241, "mish": [388, 466], "mlx": [2, 4, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504], "model": 6, "modul": [353, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 483, 513], "more": 513, "moveaxi": [63, 242], "mpi": [512, 516], "mse_loss": 462, "multi": 7, "multiheadattent": 409, "multioptim": 493, "multipl": 513, "multipli": 243, "multivariate_norm": 264, "named_modul": 398, "nan_to_num": 244, "nbyte": 64, "ndim": 65, "neg": 245, "network": 353, "neural": 353, "new_stream": 246, "nll_loss": 463, "nn": [333, 334, 335, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 512], "norm": 212, "normal": [265, 438], "not_equ": 247, "numpi": [515, 518], "ones": 248, "ones_lik": 249, "onli": 517, "oper": [0, 2, 484], "optim": [336, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506], "option": 9, "other": 518, "outer": 250, "packag": 4, "pad": 251, "paramet": [353, 399], "partit": 252, "perceptron": 7, "permut": 266, "pinv": 213, "place": 515, "power": 253, "prelu": [410, 467], "primit": 2, "prod": [66, 254], "program": [512, 516], "provid": 516, "pure": 511, "put": 6, "put_along_axi": 255, "python": [2, 8, 9], "pytorch": 518, "qr": 214, "quantiz": [256, 334], "quantized_matmul": 257, "quantizedembed": 411, "quantizedlinear": 412, "quick": [353, 519], "radian": 258, "randint": 267, "random": [259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 508], "read": 8, "real": [67, 272], "reciproc": [68, 273], "recv": 134, "recv_lik": 135, "reduc": 512, "refer": 8, "regress": 5, "relu": [415, 468], "relu6": [416, 469], "remaind": 274, "remot": [512, 516], "repeat": 275, "requir": 9, "reset_peak_memori": 276, "reshap": [69, 277], "result": 2, "rfft": 169, "rfft2": 170, "rfftn": 171, "right_shift": 278, "ring": [512, 516], "rms_norm": 155, "rmsnorm": 413, "rmsprop": 498, "rnn": 414, "roll": 279, "rope": [156, 417], "round": [70, 280], "rsqrt": [71, 281], "run": 512, "sampl": 1, "save": [282, 485, 520], "save_gguf": 283, "save_safetensor": 284, "save_weight": 400, "savez": 285, "savez_compress": 286, "scaled_dot_product_attent": 157, "schedul": 507, "script": [2, 6], "seed": 268, "select": 512, "selu": [418, 470], "send": 136, "sequenti": 419, "serial": 520, "set": [512, 516], "set_cache_limit": 287, "set_default_devic": 288, "set_default_stream": 289, "set_dtyp": 401, "set_memory_limit": 290, "set_wired_limit": 291, "setuptool": 2, "sgd": 499, "shape": [1, 72], "shapeless": [511, 513], "shell": 9, "sigmoid": [292, 421, 471], "sign": 293, "silu": [420, 472], "simpl": [1, 521], "sin": [73, 294], "sinh": 295, "sinusoidalpositionalencod": 422, "size": [9, 74], "slice": 296, "slice_upd": 297, "smooth_l1_loss": 464, "softmax": [298, 423, 473], "softmin": [424, 474], "softplu": [425, 475], "softshrink": [426, 476], "softsign": 427, "solv": 215, "solve_triangular": 216, "sort": 299, "sourc": 9, "specif": 516, "specifi": 522, "speedup": 511, "split": [75, 269, 300], "sqrt": [76, 301], "squar": [77, 302], "squeez": [78, 303], "stack": 304, "start": [353, 512, 519], "start_captur": 238, "state": [402, 496], "std": [79, 305], "step": [428, 477], "step_decai": 504, "stop_captur": 239, "stop_gradi": 306, "stream": [307, 342, 345, 522], "stride": 1, "subtract": 308, "sum": [80, 309], "support": 344, "svd": 217, "swapax": [81, 310], "synchron": 311, "t": 32, "take": 312, "take_along_axi": 313, "tan": 314, "tanh": [315, 429, 478], "tensordot": 316, "tensorflow": 518, "thunderbolt": 512, "tile": 317, "togeth": 6, "tolist": 82, "topk": 318, "trace": [319, 513], "train": [403, 405, 511, 512], "trainable_paramet": 404, "transform": [2, 430, 509, 511, 513, 514, 517, 519], "transpos": [83, 320], "tree": 510, "tree_flatten": 337, "tree_map": 338, "tree_map_with_path": 339, "tree_reduc": 340, "tree_unflatten": 341, "tri": 321, "tri_inv": 218, "tril": 322, "triplet_loss": 465, "triu": 323, "troubleshoot": 9, "truncated_norm": 270, "tune": 512, "type": 344, "unflatten": 324, "unfreez": 406, "unifi": 521, "uniform": [271, 439], "up": [512, 516], "updat": [353, 407, 497, 515], "update_modul": 408, "upsampl": 431, "us": [1, 2, 4, 517, 522], "usag": [2, 8, 516], "util": [337, 338, 339, 340, 341, 510, 512], "valu": 353, "value_and_grad": [325, 335], "var": [84, 326], "variabl": 4, "vector": 514, "view": [85, 327], "vjp": [1, 328], "vmap": 329, "weight": 6, "what": 517, "when": 517, "where": 330, "why": 517, "workflow": 3, "x86": 9, "xcode": 3, "you": 517, "zero": 331, "zeros_lik": 332}})