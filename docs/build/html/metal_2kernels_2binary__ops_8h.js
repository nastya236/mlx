var metal_2kernels_2binary__ops_8h =
[
    [ "Add", "struct_add.html", "struct_add" ],
    [ "FloorDivide", "struct_floor_divide.html", "struct_floor_divide" ],
    [ "Divide", "struct_divide.html", "struct_divide" ],
    [ "Remainder", "struct_remainder.html", "struct_remainder" ],
    [ "Equal", "struct_equal.html", "struct_equal" ],
    [ "NaNEqual", "struct_na_n_equal.html", "struct_na_n_equal" ],
    [ "Greater", "struct_greater.html", "struct_greater" ],
    [ "GreaterEqual", "struct_greater_equal.html", "struct_greater_equal" ],
    [ "Less", "struct_less.html", "struct_less" ],
    [ "LessEqual", "struct_less_equal.html", "struct_less_equal" ],
    [ "LogAddExp", "struct_log_add_exp.html", "struct_log_add_exp" ],
    [ "Maximum", "struct_maximum.html", "struct_maximum" ],
    [ "Minimum", "struct_minimum.html", "struct_minimum" ],
    [ "Multiply", "struct_multiply.html", "struct_multiply" ],
    [ "NotEqual", "struct_not_equal.html", "struct_not_equal" ],
    [ "Power", "struct_power.html", "struct_power" ],
    [ "Subtract", "struct_subtract.html", "struct_subtract" ],
    [ "LogicalAnd", "struct_logical_and.html", "struct_logical_and" ],
    [ "LogicalOr", "struct_logical_or.html", "struct_logical_or" ],
    [ "BitwiseAnd", "struct_bitwise_and.html", "struct_bitwise_and" ],
    [ "BitwiseOr", "struct_bitwise_or.html", "struct_bitwise_or" ],
    [ "BitwiseXor", "struct_bitwise_xor.html", "struct_bitwise_xor" ],
    [ "LeftShift", "struct_left_shift.html", "struct_left_shift" ],
    [ "RightShift", "struct_right_shift.html", "struct_right_shift" ],
    [ "ArcTan2", "struct_arc_tan2.html", "struct_arc_tan2" ],
    [ "DivMod", "struct_div_mod.html", "struct_div_mod" ]
];